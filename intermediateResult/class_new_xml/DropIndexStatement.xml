<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\statements\DropIndexStatement.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>statements</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>Permission</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ColumnDefinition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>KSMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>Schema</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>ClientState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>MigrationManager</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>ResultMessage</name></name>;</import>

<class><specifier>public</specifier> class <name>DropIndexStatement</name> <super><extends>extends <name>SchemaAlteringStatement</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>indexName</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DropIndexStatement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>indexName</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>new <call><name>CFName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>indexName</name></name> = <name>indexName</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkAccess</name><parameter_list>(<param><decl><type><name>ClientState</name></type> <name>state</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnauthorizedException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>state</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><call><name>keyspace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>findIndexedCF</name><argument_list>()</argument_list></call>.<name>cfName</name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>ALTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>ResultMessage</name>.<name>SchemaChange</name>.<name>Change</name></name></type> <name>changeType</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// Dropping an index is akin to updating the CF</comment>
        <return>return <expr><name><name>ResultMessage</name>.<name>SchemaChange</name>.<name>Change</name>.<name>UPDATED</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>announceMigration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>updatedCfm</name> <init>= <expr><call><name>updateCFMetadata</name><argument_list>(<argument><expr><call><name>findIndexedCF</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>MigrationManager</name>.<name>announceColumnFamilyUpdate</name></name><argument_list>(<argument><expr><name>updatedCfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>CFMetaData</name></type> <name>updateCFMetadata</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>column</name> <init>= <expr><call><name>findIndexedColumn</name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>column</name> != null</expr>;</assert>
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cloned</name> <init>= <expr><call><name><name>cfm</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>toChange</name> <init>= <expr><call><name><name>cloned</name>.<name>getColumn_metadata</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><call><name><name>toChange</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call> != null &amp;&amp; <call><name><name>toChange</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</assert>
        <expr_stmt><expr><call><name><name>toChange</name>.<name>setIndexName</name></name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toChange</name>.<name>setIndexType</name></name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cloned</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>CFMetaData</name></type> <name>findIndexedCF</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>KSMetaData</name></type> <name>ksm</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getTableDefinition</name></name><argument_list>(<argument><expr><call><name>keyspace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>CFMetaData</name></type> <name>cfm</name> <range>: <expr><call><name><name>ksm</name>.<name>cfMetaData</name></name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name>findIndexedColumn</name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call> != null</expr>)</condition><then>
                <return>return <expr><name>cfm</name></expr>;</return></then></if>
        }</block></for>
        <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Index '" + <name>indexName</name> + "' could not be found in any of the column families of keyspace '" + <call><name>keyspace</name><argument_list>()</argument_list></call> + "'"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>private</specifier> <name>ColumnDefinition</name></type> <name>findIndexedColumn</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>column</name> <range>: <expr><call><name><name>cfm</name>.<name>getColumn_metadata</name></name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>column</name>.<name>getIndexType</name></name><argument_list>()</argument_list></call> != null &amp;&amp; <call><name><name>column</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call> != null &amp;&amp; <call><name><name>column</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>column</name></expr>;</return></then></if>
        }</block></for>
        <return>return <expr>null</expr>;</return>
    }</block></function>
}</block></class>
</unit>
