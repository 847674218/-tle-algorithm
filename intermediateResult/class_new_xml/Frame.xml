<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\Frame.java">
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>EnumSet</name></name>;</import>

<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffers</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name></name>.*;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>handler</name>.<name>codec</name>.<name>oneone</name>.<name>OneToOneDecoder</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>handler</name>.<name>codec</name>.<name>oneone</name>.<name>OneToOneEncoder</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>handler</name>.<name>codec</name>.<name>frame</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>Frame</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Header</name></type> <name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ChannelBuffer</name></type> <name>body</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Connection</name></type> <name>connection</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * On-wire frame.
     * Frames are defined as:
     *
     *   0         8        16        24        32
     *   +---------+---------+---------+---------+
     *   | version |  flags  | stream  | opcode  |
     *   +---------+---------+---------+---------+
     *   |                length                 |
     *   +---------+---------+---------+---------+
     */</comment>
    <constructor><specifier>private</specifier> <name>Frame</name><parameter_list>(<param><decl><type><name>Header</name></type> <name>header</name></decl></param>, <param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>, <param><decl><type><name>Connection</name></type> <name>connection</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>header</name></name> = <name>header</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>connection</name></name> = <name>connection</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Frame</name></type> <name>create</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>fullFrame</name></decl></param>, <param><decl><type><name>Connection</name></type> <name>connection</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><call><name><name>fullFrame</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call> &gt;= <name><name>Header</name>.<name>LENGTH</name></name> : <call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Frame too short (%d bytes = %s)"</expr></argument>,
                                                                          <argument><expr><call><name><name>fullFrame</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                          <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><call><name><name>fullFrame</name>.<name>toByteBuffer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</assert>

        <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name><name>fullFrame</name>.<name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name><name>fullFrame</name>.<name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>streamId</name> <init>= <expr><call><name><name>fullFrame</name>.<name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>opcode</name> <init>= <expr><call><name><name>fullFrame</name>.<name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>fullFrame</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>length</name> == <call><name><name>fullFrame</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call></expr>;</assert>

        <comment type="line">// version first byte is the "direction" of the frame (request or response)</comment>
        <decl_stmt><decl><type><name><name>Message</name>.<name>Direction</name></name></type> <name>direction</name> <init>= <expr><call><name><name>Message</name>.<name>Direction</name>.<name>extractFromVersion</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>version</name> = <name>version</name> &amp; 0x7F</expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Header</name></type> <name>header</name> <init>= <expr>new <call><name>Header</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>streamId</name></expr></argument>, <argument><expr><call><name><name>Message</name>.<name>Type</name>.<name>fromOpcode</name></name><argument_list>(<argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Frame</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>fullFrame</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Frame</name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>Message</name>.<name>Type</name></name></type> <name>type</name></decl></param>, <param><decl><type><name>int</name></type> <name>streamId</name></decl></param>, <param><decl><type><name><name>EnumSet</name><argument_list>&lt;<argument><name><name>Header</name>.<name>Flag</name></name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></param>, <param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>, <param><decl><type><name>Connection</name></type> <name>connection</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Header</name></type> <name>header</name> <init>= <expr>new <call><name>Header</name><argument_list>(<argument><expr><name><name>Header</name>.<name>CURRENT_VERSION</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>streamId</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Frame</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Header</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LENGTH</name> <init>= <expr>8</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CURRENT_VERSION</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>version</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>EnumSet</name><argument_list>&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>streamId</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Message</name>.<name>Type</name></name></type> <name>type</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Header</name><parameter_list>(<param><decl><type><name>int</name></type> <name>version</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>streamId</name></decl></param>, <param><decl><type><name><name>Message</name>.<name>Type</name></name></type> <name>type</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><call><name><name>Flag</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>streamId</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>private</specifier> <name>Header</name><parameter_list>(<param><decl><type><name>int</name></type> <name>version</name></decl></param>, <param><decl><type><name><name>EnumSet</name><argument_list>&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>streamId</name></decl></param>, <param><decl><type><name><name>Message</name>.<name>Type</name></name></type> <name>type</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>version</name></name> = <name>version</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>streamId</name></name> = <name>streamId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        }</block></constructor>

        <enum><specifier>public</specifier> <specifier>static</specifier> enum <name>Flag</name>
        <block>{
            <comment type="line">// The order of that enum matters!!</comment>
            <decl><name>COMPRESSED</name></decl>,
            <decl><name>TRACING</name></decl>;

            <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>EnumSet</name><argument_list>&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
            <block>{
                <decl_stmt><decl><type><name><name>EnumSet</name><argument_list>&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><call><name><name>EnumSet</name>.<name>noneOf</name></name><argument_list>(<argument><expr><name><name>Flag</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Flag</name><index>[]</index></type> <name>values</name> <init>= <expr><call><name><name>Flag</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>n</name> &lt; 8</expr>;</condition> <incr><expr><name>n</name>++</expr></incr>)
                <block>{
                    <if>if <condition>(<expr>(<name>flags</name> &amp; (1 &lt;&lt; <name>n</name>)) != 0</expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>set</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></for>
                <return>return <expr><name>set</name></expr>;</return>
            }</block></function>

            <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name><name>EnumSet</name><argument_list>&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></param>)</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>Flag</name></type> <name>flag</name> <range>: <expr><name>flags</name></expr></range></decl></init>)
                    <expr_stmt><expr><name>i</name> |= 1 &lt;&lt; <call><name><name>flag</name>.<name>ordinal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
                <return>return <expr><name>i</name></expr>;</return>
            }</block></function>
        }</block></enum>
    }</block></class>

    <function><type><specifier>public</specifier> <name>Frame</name></type> <name>with</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>newBody</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>Frame</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>newBody</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Decoder</name> <super><extends>extends <name>LengthFieldBasedFrameDecoder</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_FRAME_LENTH</name> <init>= <expr>256 * 1024 * 1024</expr></init></decl>;</decl_stmt> <comment type="line">// 256 MB</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Connection</name></type> <name>connection</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Decoder</name><parameter_list>(<param><decl><type><name><name>Connection</name>.<name>Tracker</name></name></type> <name>tracker</name></decl></param>, <param><decl><type><name><name>Connection</name>.<name>Factory</name></name></type> <name>factory</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>MAX_FRAME_LENTH</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>connection</name></name> = <call><name><name>factory</name>.<name>newConnection</name></name><argument_list>(<argument><expr><name>tracker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>void</name></type> <name>channelOpen</name><parameter_list>(<param><decl><type><name>ChannelHandlerContext</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>ChannelStateEvent</name></type> <name>e</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>connection</name>.<name>registerChannel</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getChannel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <name>Object</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelHandlerContext</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>Channel</name></type> <name>channel</name></decl></param>, <param><decl><type><name>ChannelBuffer</name></type> <name>buffer</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
        <block>{
            <try>try
            <block>{
                <comment type="line">// We must at least validate that the frame version is something we support/know and it doesn't hurt to</comment>
                <comment type="line">// check the opcode is not garbage. And we should do that indenpently of what is the the bytes corresponding</comment>
                <comment type="line">// to the frame length are, i.e. we shouldn't wait for super.decode() to return non-null.</comment>
                <if>if <condition>(<expr><call><name><name>buffer</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                    <return>return <expr>null</expr>;</return></then></if>

                <decl_stmt><decl><type><name>int</name></type> <name>firstByte</name> <init>= <expr><call><name><name>buffer</name>.<name>getByte</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Message</name>.<name>Direction</name></name></type> <name>direction</name> <init>= <expr><call><name><name>Message</name>.<name>Direction</name>.<name>extractFromVersion</name></name><argument_list>(<argument><expr><name>firstByte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><name>firstByte</name> &amp; 0x7F</expr></init></decl>;</decl_stmt>
                <comment type="line">// We really only support the current version so far</comment>
                <if>if <condition>(<expr><name>version</name> != <name><name>Header</name>.<name>CURRENT_VERSION</name></name></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr>"Invalid or unsupported protocol version: " + <name>version</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <comment type="line">// Validate the opcode</comment>
                <if>if <condition>(<expr><call><name><name>buffer</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call> &gt;= 4</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>Message</name>.<name>Type</name>.<name>fromOpcode</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>getByte</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>frame</name> <init>= <expr>(<name>ChannelBuffer</name>) <call><name><name>super</name>.<name>decode</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>frame</name> == null</expr>)</condition><then>
                <block>{
                    <return>return <expr>null</expr>;</return>
                }</block></then></if>
                <return>return <expr><call><name><name>Frame</name>.<name>create</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>CorruptedFrameException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>TooLongFrameException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Encoder</name> <super><extends>extends <name>OneToOneEncoder</name></extends></super>
    <block>{
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>ChannelHandlerContext</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>Channel</name></type> <name>channel</name></decl></param>, <param><decl><type><name>Object</name></type> <name>msg</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <assert>assert <expr><name>msg</name> instanceof <name>Frame</name> : "Expecting frame, got " + <name>msg</name></expr>;</assert>

            <decl_stmt><decl><type><name>Frame</name></type> <name>frame</name> <init>= <expr>(<name>Frame</name>)<name>msg</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>header</name> <init>= <expr><call><name><name>ChannelBuffers</name>.<name>buffer</name></name><argument_list>(<argument><expr><name><name>Frame</name>.<name>Header</name>.<name>LENGTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Message</name>.<name>Type</name></name></type> <name>type</name> <init>= <expr><name><name>frame</name>.<name>header</name>.<name>type</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>header</name>.<name>writeByte</name></name><argument_list>(<argument><expr><call><name><name>type</name>.<name>direction</name>.<name>addToVersion</name></name><argument_list>(<argument><expr><name><name>frame</name>.<name>header</name>.<name>version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>header</name>.<name>writeByte</name></name><argument_list>(<argument><expr><call><name><name>Header</name>.<name>Flag</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>frame</name>.<name>header</name>.<name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>header</name>.<name>writeByte</name></name><argument_list>(<argument><expr><name><name>frame</name>.<name>header</name>.<name>streamId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>header</name>.<name>writeByte</name></name><argument_list>(<argument><expr><name><name>type</name>.<name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>header</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>frame</name>.<name>body</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>frame</name>.<name>body</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Decompressor</name> <super><extends>extends <name>OneToOneDecoder</name></extends></super>
    <block>{
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelHandlerContext</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>Channel</name></type> <name>channel</name></decl></param>, <param><decl><type><name>Object</name></type> <name>msg</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <assert>assert <expr><name>msg</name> instanceof <name>Frame</name> : "Expecting frame, got " + <name>msg</name></expr>;</assert>

            <decl_stmt><decl><type><name>Frame</name></type> <name>frame</name> <init>= <expr>(<name>Frame</name>)<name>msg</name></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr>!<call><name><name>frame</name>.<name>header</name>.<name>flags</name>.<name>contains</name></name><argument_list>(<argument><expr><name><name>Header</name>.<name>Flag</name>.<name>COMPRESSED</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>frame</name></expr>;</return></then></if>

            <decl_stmt><decl><type><name>FrameCompressor</name></type> <name>compressor</name> <init>= <expr><call><name><name>frame</name>.<name>connection</name>.<name>getCompressor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>compressor</name> == null</expr>)</condition><then>
                <return>return <expr><name>frame</name></expr>;</return></then></if>

            <return>return <expr><call><name><name>compressor</name>.<name>decompress</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Compressor</name> <super><extends>extends <name>OneToOneEncoder</name></extends></super>
    <block>{
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>ChannelHandlerContext</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>Channel</name></type> <name>channel</name></decl></param>, <param><decl><type><name>Object</name></type> <name>msg</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <assert>assert <expr><name>msg</name> instanceof <name>Frame</name> : "Expecting frame, got " + <name>msg</name></expr>;</assert>

            <decl_stmt><decl><type><name>Frame</name></type> <name>frame</name> <init>= <expr>(<name>Frame</name>)<name>msg</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// Never compress STARTUP messages</comment>
            <if>if <condition>(<expr><name><name>frame</name>.<name>header</name>.<name>type</name></name> == <name><name>Message</name>.<name>Type</name>.<name>STARTUP</name></name> || <name><name>frame</name>.<name>connection</name></name> == null</expr>)</condition><then>
                <return>return <expr><name>frame</name></expr>;</return></then></if>

            <decl_stmt><decl><type><name>FrameCompressor</name></type> <name>compressor</name> <init>= <expr><call><name><name>frame</name>.<name>connection</name>.<name>getCompressor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>compressor</name> == null</expr>)</condition><then>
                <return>return <expr><name>frame</name></expr>;</return></then></if>

            <expr_stmt><expr><call><name><name>frame</name>.<name>header</name>.<name>flags</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>Header</name>.<name>Flag</name>.<name>COMPRESSED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>compressor</name>.<name>compress</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

        }</block></function>
    }</block></class>
}</block></class>
</unit>
