<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\gms\IFailureDetector.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>gms</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An interface that provides an application with the ability
 * to query liveness information of a node in the cluster. It
 * also exposes methods which help an application register callbacks
 * for notifications of liveness information of nodes.
 */</comment>

<class type="interface"><specifier>public</specifier> interface <name>IFailureDetector</name>
<block>{
    <comment type="block" format="javadoc">/**
     * Failure Detector's knowledge of whether a node is up or
     * down.
     *
     * @param ep endpoint in question.
     * @return true if UP and false if DOWN.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isAlive</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>ep</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Clear any existing interval timings for this endpoint
     * @param ep
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>ep</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * This method is invoked by any entity wanting to interrogate the status of an endpoint.
     * In our case it would be the Gossiper. The Failure Detector will then calculate Phi and
     * deem an endpoint as suspicious or alive as explained in the Hayashibara paper.
     *
     * param ep endpoint for which we interpret the inter arrival times.
    */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>interpret</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>ep</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * This method is invoked by the receiver of the heartbeat. In our case it would be
     * the Gossiper. Gossiper inform the Failure Detector on receipt of a heartbeat. The
     * FailureDetector will then sample the arrival time as explained in the paper.
     *
     * param ep endpoint being reported.
    */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>report</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>ep</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * remove endpoint from failure detector
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>ep</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * force conviction of endpoint in the failure detector
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>forceConviction</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>ep</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Register interest for Failure Detector events.
     * @param listener implementation of an application provided IFailureDetectionEventListener
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>registerFailureDetectionEventListener</name><parameter_list>(<param><decl><type><name>IFailureDetectionEventListener</name></type> <name>listener</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Un-register interest for Failure Detector events.
     * @param listener implementation of an application provided IFailureDetectionEventListener
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>unregisterFailureDetectionEventListener</name><parameter_list>(<param><decl><type><name>IFailureDetectionEventListener</name></type> <name>listener</name></decl></param>)</parameter_list>;</function_decl>
}</block></class>
</unit>
