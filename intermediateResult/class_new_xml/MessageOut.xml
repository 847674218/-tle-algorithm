<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\net\MessageOut.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.<name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>ImmutableMap</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name>.<name>Stage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name>.<name>Tracing</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>UUIDGen</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name>.<name>Tracing</name>.<name>TRACE_HEADER</name></name>;</import>
<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name>.<name>Tracing</name>.<name>isTracing</name></name>;</import>

<class><specifier>public</specifier> class <name><name>MessageOut</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>InetAddress</name></type> <name>from</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>MessagingService</name>.<name>Verb</name></name></type> <name>verb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T</name></type> <name>payload</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>serializer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>parameters</name></decl>;</decl_stmt>

    <comment type="line">// we do support messages that just consist of a verb</comment>
    <constructor><specifier>public</specifier> <name>MessageOut</name><parameter_list>(<param><decl><type><name><name>MessagingService</name>.<name>Verb</name></name></type> <name>verb</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>MessageOut</name><parameter_list>(<param><decl><type><name><name>MessagingService</name>.<name>Verb</name></name></type> <name>verb</name></decl></param>, <param><decl><type><name>T</name></type> <name>payload</name></decl></param>, <param><decl><type><name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>serializer</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>verb</name></expr></argument>,
             <argument><expr><name>payload</name></expr></argument>,
             <argument><expr><name>serializer</name></expr></argument>,
             <argument><expr><call><name>isTracing</name><argument_list>()</argument_list></call> ? <call><name><name>ImmutableMap</name>.<name>of</name></name><argument_list>(<argument><expr><name>TRACE_HEADER</name></expr></argument>, <argument><expr><call><name><name>UUIDGen</name>.<name>decompose</name></name><argument_list>(<argument><expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>getSessionId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                         : <name><name>Collections</name>.</name>&lt;<name>String</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name>&gt;<call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>MessageOut</name><parameter_list>(<param><decl><type><name><name>MessagingService</name>.<name>Verb</name></name></type> <name>verb</name></decl></param>, <param><decl><type><name>T</name></type> <name>payload</name></decl></param>, <param><decl><type><name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>serializer</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>serializer</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><annotation>@<name>VisibleForTesting</name></annotation>
    <specifier>public</specifier> <name>MessageOut</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>from</name></decl></param>, <param><decl><type><name><name>MessagingService</name>.<name>Verb</name></name></type> <name>verb</name></decl></param>, <param><decl><type><name>T</name></type> <name>payload</name></decl></param>, <param><decl><type><name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>serializer</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>from</name></name> = <name>from</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>verb</name></name> = <name>verb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>payload</name></name> = <name>payload</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>serializer</name></name> = <name>serializer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>parameters</name></name> = <name>parameters</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>MessageOut</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withParameter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>ImmutableMap</name>.<name><name>Builder</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></name></type> <name>builder</name> <init>= <expr><call><name><name>ImmutableMap</name>.<name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name>.<name>putAll</name></name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call>.<call><name>put</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <call><name><name>MessageOut</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>serializer</name></expr></argument>, <argument><expr><call><name><name>builder</name>.<name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>MessageOut</name></type> <name>withHeaderRemoved</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>ImmutableMap</name>.<name><name>Builder</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></name></type> <name>builder</name> <init>= <expr><call><name><name>ImmutableMap</name>.<name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>parameters</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr>!<call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>builder</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>
        <return>return <expr>new <call><name><name>MessageOut</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>serializer</name></expr></argument>, <argument><expr><call><name><name>builder</name>.<name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Stage</name></type> <name>getStage</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>MessagingService</name>.<name>verbStages</name>.<name>get</name></name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTimeout</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>DatabaseDescriptor</name>.<name>getTimeout</name></name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sbuf</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sbuf</name>.<name>append</name></name><argument_list>(<argument><expr>"TYPE:"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name>getStage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" VERB:"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sbuf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>DataOutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>CompactEndpointSerializationHelper</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>verb</name>.<name>ordinal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>parameters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>parameters</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>long</name></type> <name>longSize</name> <init>= <expr><name>payload</name> == null ? 0 : <call><name><name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>longSize</name> &lt;= <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>;</assert> <comment type="line">// larger values are supported in sstables but not messages</comment>
        <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>longSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>payload</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>CompactEndpointSerializationHelper</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>size</name> += <call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>verb</name>.<name>ordinal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> += <call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>parameters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>parameters</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> += <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<name>length</name></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>long</name></type> <name>longSize</name> <init>= <expr><name>payload</name> == null ? 0 : <call><name><name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>longSize</name> &lt;= <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>;</assert> <comment type="line">// larger values are supported in sstables but not messages</comment>
        <expr_stmt><expr><name>size</name> += <call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>longSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> += <name>longSize</name></expr>;</expr_stmt>
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
