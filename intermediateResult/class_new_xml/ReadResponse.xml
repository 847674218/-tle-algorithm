<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\ReadResponse.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IColumnSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<comment type="block">/*
 * The read response message is sent by the server when reading data
 * this encapsulates the tablename and the row that has been read.
 * The table name is needed so that we can use it to create repairs.
 */</comment>
<class><specifier>public</specifier> class <name>ReadResponse</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>ReadResponse</name></argument>&gt;</argument_list></name></type> <name>serializer</name> <init>= <expr>new <call><name>ReadResponseSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Row</name></type> <name>row</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>digest</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ReadResponse</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>digest</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>digest</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>digest</name></name>= <name>digest</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>row</name></name> = null</expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>ReadResponse</name><parameter_list>(<param><decl><type><name>Row</name></type> <name>row</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>row</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>row</name></name> = <name>row</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>digest</name></name> = null</expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>Row</name></type> <name>row</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>row</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>digest</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>digest</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDigestQuery</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>digest</name> != null</expr>;</return>
    }</block></function>
}</block></class>

<class>class <name>ReadResponseSerializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>ReadResponse</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>ReadResponse</name></type> <name>response</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>response</name>.<name>isDigestQuery</name></name><argument_list>()</argument_list></call> ? <call><name><name>response</name>.<name>digest</name></name><argument_list>()</argument_list></call>.<call><name>remaining</name><argument_list>()</argument_list></call> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buffer</name> <init>= <expr><call><name><name>response</name>.<name>isDigestQuery</name></name><argument_list>()</argument_list></call> ? <call><name><name>response</name>.<name>digest</name></name><argument_list>()</argument_list></call> : <name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeBoolean</name></name><argument_list>(<argument><expr><call><name><name>response</name>.<name>isDigestQuery</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>response</name>.<name>isDigestQuery</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>Row</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><call><name><name>response</name>.<name>row</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dos</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ReadResponse</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>digest</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>digestSize</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>digestSize</name> &gt; 0</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>digest</name> = new <name><name>byte</name><index>[<expr><name>digestSize</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dis</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>digestSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isDigest</name> <init>= <expr><call><name><name>dis</name>.<name>readBoolean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>isDigest</name> == <name>digestSize</name> &gt; 0</expr>;</assert>

        <decl_stmt><decl><type><name>Row</name></type> <name>row</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>isDigest</name></expr>)</condition><then>
        <block>{
            <comment type="line">// This is coming from a remote host</comment>
            <expr_stmt><expr><name>row</name> = <call><name><name>Row</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>IColumnSerializer</name>.<name>Flag</name>.<name>FROM_REMOTE</name></name></expr></argument>, <argument><expr><call><name><name>ArrayBackedSortedColumns</name>.<name>factory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>isDigest</name> ? new <call><name>ReadResponse</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> : new <call><name>ReadResponse</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>ReadResponse</name></type> <name>response</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>TypeSizes</name></type> <name>typeSizes</name> <init>= <expr><name><name>TypeSizes</name>.<name>NATIVE</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buffer</name> <init>= <expr><call><name><name>response</name>.<name>isDigestQuery</name></name><argument_list>()</argument_list></call> ? <call><name><name>response</name>.<name>digest</name></name><argument_list>()</argument_list></call> : <name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>size</name> += <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>response</name>.<name>isDigestQuery</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>response</name>.<name>isDigestQuery</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>size</name> += <call><name><name>Row</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><call><name><name>response</name>.<name>row</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
