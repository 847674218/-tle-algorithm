<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\ColumnFamilyStoreMBean.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ExecutionException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The MBean interface for ColumnFamilyStore
 */</comment>
<class type="interface"><specifier>public</specifier> interface <name>ColumnFamilyStoreMBean</name>
<block>{
    <comment type="block" format="javadoc">/**
     * @return the name of the column family
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getColumnFamilyName</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the total amount of data stored in the memtable, including
     * column related overhead.
     *
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#memtableDataSize
     * @return The size in bytes.
     * @deprecated
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getMemtableDataSize</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the total number of columns present in the memtable.
     *
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#memtableColumnsCount
     * @return The number of columns.
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getMemtableColumnsCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the number of times that a flush has resulted in the
     * memtable being switched out.
     *
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#memtableSwitchCount
     * @return the number of memtable switches
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>getMemtableSwitchCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#recentSSTablesPerRead
     * @return a histogram of the number of sstable data files accessed per read: reading this property resets it
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getRecentSSTablesPerReadHistogram</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#sstablesPerReadHistogram
     * @return a histogram of the number of sstable data files accessed per read
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getSSTablesPerReadHistogram</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#readLatency
     * @return the number of read operations on this column family
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getReadCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#readLatency
     * @return total read latency (divide by getReadCount() for average)
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getTotalReadLatencyMicros</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#readLatency
     * @return an array representing the latency histogram
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getLifetimeReadLatencyHistogramMicros</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#readLatency
     * @return an array representing the latency histogram
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getRecentReadLatencyHistogramMicros</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#readLatency
     * @return average latency per read operation since the last call
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>double</name></type> <name>getRecentReadLatencyMicros</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#writeLatency
     * @return the number of write operations on this column family
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getWriteCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#writeLatency
     * @return total write latency (divide by getReadCount() for average)
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getTotalWriteLatencyMicros</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#writeLatency
     * @return an array representing the latency histogram
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getLifetimeWriteLatencyHistogramMicros</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#writeLatency
     * @return an array representing the latency histogram
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getRecentWriteLatencyHistogramMicros</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#writeLatency
     * @return average latency per write operation since the last call
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>double</name></type> <name>getRecentWriteLatencyMicros</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#pendingTasks
     * @return the estimated number of tasks pending for this column family
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>getPendingTasks</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#liveSSTableCount
     * @return the number of SSTables on disk for this CF
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>getLiveSSTableCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#liveDiskSpaceUsed
     * @return disk space used by SSTables belonging to this CF
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getLiveDiskSpaceUsed</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#totalDiskSpaceUsed
     * @return total disk space used by SSTables belonging to this CF, including obsolete ones waiting to be GC'd
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getTotalDiskSpaceUsed</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * force a major compaction of this column family
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>forceMajorCompaction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#minRowSize
     * @return the size of the smallest compacted row
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getMinRowSize</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#maxRowSize
     * @return the size of the largest compacted row
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getMaxRowSize</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#meanRowSize
     * @return the size of the smallest compacted row
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getMeanRowSize</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#bloomFilterFalsePositives
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getBloomFilterFalsePositives</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#recentBloomFilterFalsePositives
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getRecentBloomFilterFalsePositives</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#bloomFilterFalseRatio
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>double</name></type> <name>getBloomFilterFalseRatio</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#recentBloomFilterFalseRatio
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>double</name></type> <name>getRecentBloomFilterFalseRatio</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#bloomFilterDiskSpaceUsed
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getBloomFilterDiskSpaceUsed</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Gets the minimum number of sstables in queue before compaction kicks off
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>getMinimumCompactionThreshold</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Sets the minimum number of sstables in queue before compaction kicks off
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setMinimumCompactionThreshold</name><parameter_list>(<param><decl><type><name>int</name></type> <name>threshold</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Gets the maximum number of sstables in queue before compaction kicks off
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>getMaximumCompactionThreshold</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Sets the maximum and maximum number of SSTables in queue before compaction kicks off
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setCompactionThresholds</name><parameter_list>(<param><decl><type><name>int</name></type> <name>minThreshold</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxThreshold</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Sets the maximum number of sstables in queue before compaction kicks off
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumCompactionThreshold</name><parameter_list>(<param><decl><type><name>int</name></type> <name>threshold</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Sets the compaction strategy by class name
     * @param className the name of the compaction strategy class
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setCompactionStrategyClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Gets the compaction strategy class name
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getCompactionStrategyClass</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the compression parameters
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCompressionParameters</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set the compression parameters
     * @param opts map of string names to values
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setCompressionParameters</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>opts</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set new crc check chance
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setCrcCheckChance</name><parameter_list>(<param><decl><type><name>double</name></type> <name>crcCheckChance</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Disable automatic compaction.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>disableAutoCompaction</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>long</name></type> <name>estimateKeys</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#estimatedRowSizeHistogram
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getEstimatedRowSizeHistogram</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#estimatedColumnCountHistogram
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getEstimatedColumnCountHistogram</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * @see org.apache.cassandra.metrics.ColumnFamilyMetrics#compressionRatio
     */</comment>
    <function_decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>double</name></type> <name>getCompressionRatio</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a list of the names of the built column indexes for current store
     * @return list of the index names
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getBuiltIndexes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a list of filenames that contain the given key on this node
     * @param key
     * @return list of filenames containing the key
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getSSTablesForKey</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Scan through Keyspace/ColumnFamily's data directory
     * determine which SSTables should be loaded and load them
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>loadNewSSTables</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return the number of SSTables in L0.  Always return 0 if Leveled compaction is not enabled.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>getUnleveledSSTables</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return sstable count for each level. null unless leveled compaction is used.
     *         array index corresponds to level(int[0] is for level 0, ...).
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name><index>[]</index></type> <name>getSSTableCountPerLevel</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the ratio of droppable tombstones to real columns (and non-droppable tombstones)
     * @return ratio
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>double</name></type> <name>getDroppableTombstoneRatio</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>
</unit>
