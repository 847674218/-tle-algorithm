<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\auth\IAuthorizer.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>UnauthorizedException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Primary Cassandra authorization interface.
 */</comment>
<class type="interface"><specifier>public</specifier> interface <name>IAuthorizer</name>
<block>{
    <comment type="block" format="javadoc">/**
     * The primary IAuthorizer method. Returns a set of permissions of a user on a resource.
     *
     * @param user Authenticated user requesting authorization.
     * @param resource Resource for which the authorization is being requested. @see DataResource.
     * @return Set of permissions of the user on the resource. Should never return null. Use Permission.NONE instead.
     */</comment>
    <function_decl><type><name><name>Set</name><argument_list>&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>authorize</name><parameter_list>(<param><decl><type><name>AuthenticatedUser</name></type> <name>user</name></decl></param>, <param><decl><type><name>IResource</name></type> <name>resource</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Grants a set of permissions on a resource to a user.
     * The opposite of revoke().
     *
     * @param performer User who grants the permissions.
     * @param permissions Set of permissions to grant.
     * @param to Grantee of the permissions.
     * @param resource Resource on which to grant the permissions.
     *
     * @throws UnauthorizedException if the granting user isn't allowed to grant (and revoke) the permissions on the resource.
     * @throws InvalidRequestException upon parameter misconfiguration or internal error.
     */</comment>
    <function_decl><type><name>void</name></type> <name>grant</name><parameter_list>(<param><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></param>, <param><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>permissions</name></decl></param>, <param><decl><type><name>IResource</name></type> <name>resource</name></decl></param>, <param><decl><type><name>String</name></type> <name>to</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>UnauthorizedException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Revokes a set of permissions on a resource from a user.
     * The opposite of grant().
     *
     * @param performer User who revokes the permissions.
     * @param permissions Set of permissions to revoke.
     * @param from Revokee of the permissions.
     * @param resource Resource on which to revoke the permissions.
     *
     * @throws UnauthorizedException if the revoking user isn't allowed to revoke the permissions on the resource.
     * @throws InvalidRequestException upon parameter misconfiguration or internal error.
     */</comment>
    <function_decl><type><name>void</name></type> <name>revoke</name><parameter_list>(<param><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></param>, <param><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>permissions</name></decl></param>, <param><decl><type><name>IResource</name></type> <name>resource</name></decl></param>, <param><decl><type><name>String</name></type> <name>from</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>UnauthorizedException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a list of permissions on a resource of a user.
     *
     * @param performer User who wants to see the permissions.
     * @param permissions Set of Permission values the user is interested in. The result should only include the matching ones.
     * @param resource The resource on which permissions are requested. Can be null, in which case permissions on all resources
     *                 should be returned.
     * @param of The user whose permissions are requested. Can be null, in which case permissions of every user should be returned.
     *
     * @return All of the matching permission that the requesting user is authorized to know about.
     *
     * @throws UnauthorizedException if the user isn't allowed to view the requested permissions.
     * @throws InvalidRequestException upon parameter misconfiguration or internal error.
     */</comment>
    <function_decl><type><name><name>Set</name><argument_list>&lt;<argument><name>PermissionDetails</name></argument>&gt;</argument_list></name></type> <name>list</name><parameter_list>(<param><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></param>, <param><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>permissions</name></decl></param>, <param><decl><type><name>IResource</name></type> <name>resource</name></decl></param>, <param><decl><type><name>String</name></type> <name>of</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>UnauthorizedException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * This method is called before deleting a user with DROP USER query so that a new user with the same
     * name wouldn't inherit permissions of the deleted user in the future.
     *
     * @param droppedUser The user to revoke all permissions from.
     */</comment>
    <function_decl><type><name>void</name></type> <name>revokeAll</name><parameter_list>(<param><decl><type><name>String</name></type> <name>droppedUser</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * This method is called after a resource is removed (i.e. keyspace or a table is dropped).
     *
     * @param droppedResource The resource to revoke all permissions on.
     */</comment>
    <function_decl><type><name>void</name></type> <name>revokeAll</name><parameter_list>(<param><decl><type><name>IResource</name></type> <name>droppedResource</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set of resources that should be made inaccessible to users and only accessible internally.
     *
     * @return Keyspaces, column families that will be unreadable and unmodifiable by users; other resources.
     */</comment>
    <function_decl><type><name><name>Set</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>IResource</name></extends></argument>&gt;</argument_list></name></type> <name>protectedResources</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Validates configuration of IAuthorizer implementation (if configurable).
     *
     * @throws ConfigurationException when there is a configuration error.
     */</comment>
    <function_decl><type><name>void</name></type> <name>validateConfiguration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Setup is called once upon system startup to initialize the IAuthorizer.
     *
     * For example, use this method to create any required keyspaces/column families.
     */</comment>
    <function_decl><type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>
</unit>
