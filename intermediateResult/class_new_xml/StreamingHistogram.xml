<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\StreamingHistogram.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISerializer</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<comment type="block" format="javadoc">/**
 * Histogram that can be constructed from streaming of data.
 *
 * The algorithm is taken from following paper:
 * Yael Ben-Haim and Elad Tom-Tov, "A Streaming Parallel Decision Tree Algorithm" (2010)
 * http://jmlr.csail.mit.edu/papers/volume11/ben-haim10a/ben-haim10a.pdf
 */</comment>
<class><specifier>public</specifier> class <name>StreamingHistogram</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StreamingHistogramSerializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>StreamingHistogramSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// TreeMap to hold bins of histogram.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>TreeMap</name><argument_list>&lt;<argument><name>Double</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>bin</name></decl>;</decl_stmt>

    <comment type="line">// maximum bin size for this histogram</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxBinSize</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new histogram with max bin size of maxBinSize
     * @param maxBinSize maximum number of bins this histogram can have
     */</comment>
    <constructor><specifier>public</specifier> <name>StreamingHistogram</name><parameter_list>(<param><decl><type><name>int</name></type> <name>maxBinSize</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maxBinSize</name></name> = <name>maxBinSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bin</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>Double</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>StreamingHistogram</name><parameter_list>(<param><decl><type><name>int</name></type> <name>maxBinSize</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Double</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>bin</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maxBinSize</name></name> = <name>maxBinSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>bin</name></name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>Double</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Adds new point p to this histogram.
     * @param p
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name>double</name></type> <name>p</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Adds new point p with value m to this histogram.
     * @param p
     * @param m
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name>double</name></type> <name>p</name></decl></param>, <param><decl><type><name>long</name></type> <name>m</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Long</name></type> <name>mi</name> <init>= <expr><call><name><name>bin</name>.<name>get</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mi</name> != null</expr>)</condition><then>
        <block>{
            <comment type="line">// we found the same p so increment that counter</comment>
            <expr_stmt><expr><call><name><name>bin</name>.<name>put</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mi</name> + <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>bin</name>.<name>put</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// if bin size exceeds maximum bin size then trim down to max size</comment>
            <while>while <condition>(<expr><call><name><name>bin</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; <name>maxBinSize</name></expr>)</condition>
            <block>{
                <comment type="line">// find points p1, p2 which have smallest difference</comment>
                <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name><name>bin</name>.<name>keySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>p1</name> <init>= <expr><call><name><name>keys</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>p2</name> <init>= <expr><call><name><name>keys</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>smallestDiff</name> <init>= <expr><name>p2</name> - <name>p1</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>q1</name> <init>= <expr><name>p1</name></expr></init>, <name>q2</name> <init>= <expr><name>p2</name></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>keys</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{
                    <expr_stmt><expr><name>p1</name> = <name>p2</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>p2</name> = <call><name><name>keys</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>diff</name> <init>= <expr><name>p2</name> - <name>p1</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>diff</name> &lt; <name>smallestDiff</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>smallestDiff</name> = <name>diff</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>q1</name> = <name>p1</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>q2</name> = <name>p2</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></while>
                <comment type="line">// merge those two</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>k1</name> <init>= <expr><call><name><name>bin</name>.<name>remove</name></name><argument_list>(<argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>k2</name> <init>= <expr><call><name><name>bin</name>.<name>remove</name></name><argument_list>(<argument><expr><name>q2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>bin</name>.<name>put</name></name><argument_list>(<argument><expr>(<name>q1</name> * <name>k1</name> + <name>q2</name> * <name>k2</name>) / (<name>k1</name> + <name>k2</name>)</expr></argument>, <argument><expr><name>k1</name> + <name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Merges given histogram with this histogram.
     *
     * @param other histogram to merge
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>merge</name><parameter_list>(<param><decl><type><name>StreamingHistogram</name></type> <name>other</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>other</name> == null</expr>)</condition><then>
            <return>return;</return></then></if>

        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Double</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>other</name>.<name>getAsMap</name></name><argument_list>()</argument_list></call>.<call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Calculates estimated number of points in interval [-inf,b].
     *
     * @param b upper bound of a interval to calculate sum
     * @return estimated number of points in a interval [-inf,b].
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>sum</name><parameter_list>(<param><decl><type><name>double</name></type> <name>b</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <comment type="line">// find the points pi, pnext which satisfy pi &lt;= b &lt; pnext</comment>
        <decl_stmt><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Double</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></name></type> <name>pnext</name> <init>= <expr><call><name><name>bin</name>.<name>higherEntry</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pnext</name> == null</expr>)</condition><then>
        <block>{
            <comment type="line">// if b is greater than any key in this histogram,</comment>
            <comment type="line">// just count all appearance and return</comment>
            <for>for (<init><decl><type><name>Long</name></type> <name>value</name> <range>: <expr><call><name><name>bin</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><name>sum</name> += <name>value</name></expr>;</expr_stmt></for>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Double</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></name></type> <name>pi</name> <init>= <expr><call><name><name>bin</name>.<name>floorEntry</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>pi</name> == null</expr>)</condition><then>
                <return>return <expr>0</expr>;</return></then></if>
            <comment type="line">// calculate estimated count mb for point b</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>weight</name> <init>= <expr>(<name>b</name> - <call><name><name>pi</name>.<name>getKey</name></name><argument_list>()</argument_list></call>) / (<call><name><name>pnext</name>.<name>getKey</name></name><argument_list>()</argument_list></call> - <call><name><name>pi</name>.<name>getKey</name></name><argument_list>()</argument_list></call>)</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>mb</name> <init>= <expr><call><name><name>pi</name>.<name>getValue</name></name><argument_list>()</argument_list></call> + (<call><name><name>pnext</name>.<name>getValue</name></name><argument_list>()</argument_list></call> - <call><name><name>pi</name>.<name>getValue</name></name><argument_list>()</argument_list></call>) * <name>weight</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>sum</name> += (<call><name><name>pi</name>.<name>getValue</name></name><argument_list>()</argument_list></call> + <name>mb</name>) * <name>weight</name> / 2</expr>;</expr_stmt>

            <expr_stmt><expr><name>sum</name> += <call><name><name>pi</name>.<name>getValue</name></name><argument_list>()</argument_list></call> / 2.0</expr>;</expr_stmt>
            <for>for (<init><decl><type><name>Long</name></type> <name>value</name> <range>: <expr><call><name><name>bin</name>.<name>headMap</name></name><argument_list>(<argument><expr><call><name><name>pi</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><name>sum</name> += <name>value</name></expr>;</expr_stmt></for>
        }</block></else></if>
        <return>return <expr><name>sum</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Double</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>getAsMap</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>StreamingHistogramSerializer</name> <super><implements>implements <name><name>ISerializer</name><argument_list>&lt;<argument><name>StreamingHistogram</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>StreamingHistogram</name></type> <name>histogram</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>histogram</name>.<name>maxBinSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Double</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name><name>histogram</name>.<name>getAsMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>entries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Double</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>entries</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeDouble</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <function><type><specifier>public</specifier> <name>StreamingHistogram</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>maxBinSize</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Double</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>tmp</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>Double</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <expr_stmt><expr><call><name><name>tmp</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>dis</name>.<name>readDouble</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <return>return <expr>new <call><name>StreamingHistogram</name><argument_list>(<argument><expr><name>maxBinSize</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>StreamingHistogram</name></type> <name>histogram</name></decl></param>, <param><decl><type><name>TypeSizes</name></type> <name>typeSizes</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
