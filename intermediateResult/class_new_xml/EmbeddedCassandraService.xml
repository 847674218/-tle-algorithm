<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\service\EmbeddedCassandraService.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>CassandraDaemon</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An embedded, in-memory cassandra storage service that listens
 * on the thrift interface as configured in cassandra.yaml
 * This kind of service is useful when running unit tests of
 * services using cassandra for example.
 *
 * See {@link org.apache.cassandra.service.EmbeddedCassandraServiceTest} for usage.
 * &lt;p&gt;
 * This is the implementation of https://issues.apache.org/jira/browse/CASSANDRA-740
 * &lt;p&gt;
 * How to use:
 * In the client code simply create a new EmbeddedCassandraService and start it.
 * Example:
 * &lt;pre&gt;

        cassandra = new EmbeddedCassandraService();
        cassandra.start();

 * &lt;/pre&gt;
 */</comment>
<class><specifier>public</specifier> class <name>EmbeddedCassandraService</name>
<block>{

    <decl_stmt><decl><type><name>CassandraDaemon</name></type> <name>cassandraDaemon</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><name>cassandraDaemon</name> = new <call><name>CassandraDaemon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cassandraDaemon</name>.<name>init</name></name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cassandraDaemon</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
