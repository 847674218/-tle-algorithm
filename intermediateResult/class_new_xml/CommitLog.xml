<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\commitlog\CommitLog.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>commitlog</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>management</name>.<name>ManagementFactory</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>Callable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ExecutionException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>Future</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>MBeanServer</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>ObjectName</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>Config</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>FSWriteError</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>metrics</name>.<name>CommitLogMetrics</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>

<comment type="block">/*
 * Commit Log tracks every write operation into the system. The aim of the commit log is to be able to
 * successfully recover data that was not stored to disk via the Memtable.
 */</comment>
<class><specifier>public</specifier> class <name>CommitLog</name> <super><implements>implements <name>CommitLogMBean</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>CommitLog</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CommitLog</name></type> <name>instance</name> <init>= <expr>new <call><name>CommitLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ICommitLogExecutorService</name></type> <name>executor</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>CommitLogAllocator</name></type> <name>allocator</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>CommitLogArchiver</name></type> <name>archiver</name> <init>= <expr>new <call><name>CommitLogArchiver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>END_OF_SEGMENT_MARKER</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>          <comment type="line">// this is written out at the end of a segment</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>END_OF_SEGMENT_MARKER_SIZE</name> <init>= <expr>4</expr></init></decl>;</decl_stmt>     <comment type="line">// number of bytes of ^^^</comment>

    <decl_stmt><decl><type><specifier>public</specifier> <name>CommitLogSegment</name></type> <name>activeSegment</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CommitLogMetrics</name></type> <name>metrics</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>CommitLog</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name>.<name>createAllDirectories</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>allocator</name> = new <call><name>CommitLogAllocator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>activateNextSegment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>executor</name> = <call><name><name>DatabaseDescriptor</name>.<name>getCommitLogSync</name></name><argument_list>()</argument_list></call> == <name><name>Config</name>.<name>CommitLogSync</name>.<name>batch</name></name>
                 ? new <call><name>BatchCommitLogExecutorService</name><argument_list>()</argument_list></call>
                 : new <call><name>PeriodicCommitLogExecutorService</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MBeanServer</name></type> <name>mbs</name> <init>= <expr><call><name><name>ManagementFactory</name>.<name>getPlatformMBeanServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>mbs</name>.<name>registerMBean</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>new <call><name>ObjectName</name><argument_list>(<argument><expr>"org.apache.cassandra.db:type=Commitlog"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <comment type="line">// register metrics</comment>
        <expr_stmt><expr><name>metrics</name> = new <call><name>CommitLogMetrics</name><argument_list>(<argument><expr><name>executor</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * FOR TESTING PURPOSES. See CommitLogAllocator.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>resetUnsafe</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>allocator</name>.<name>resetUnsafe</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>activateNextSegment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Perform recovery on commit logs located in the directory specified by the config file.
     *
     * @return the number of mutations replayed
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>recover</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>archiver</name>.<name>maybeRestoreArchive</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name><index>[]</index></type> <name>files</name> <init>= <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getCommitLogLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>listFiles</name><argument_list>(<argument><expr>new <class><super><name>FilenameFilter</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>
            <block>{
                <comment type="line">// we used to try to avoid instantiating commitlog (thus creating an empty segment ready for writes)</comment>
                <comment type="line">// until after recover was finished.  this turns out to be fragile; it is less error-prone to go</comment>
                <comment type="line">// ahead and allow writes before recover(), and just skip active segments when we do.</comment>
                <return>return <expr><call><name><name>CommitLogDescriptor</name>.<name>isValid</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>instance</name>.<name>allocator</name>.<name>manages</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>replayed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>files</name>.<name>length</name></name> == 0</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"No commitlog files found; skipping replay"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>Arrays</name>.<name>sort</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr>new <call><name><name>CommitLogSegment</name>.<name>CommitLogSegmentFileComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Replaying " + <call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr>", "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>replayed</name> = <call><name>recover</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Log replay complete, " + <name>replayed</name> + " replayed mutations"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for (<init><decl><type><name>File</name></type> <name>f</name> <range>: <expr><name>files</name></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name>CommitLog</name>.<name>instance</name>.<name>allocator</name>.<name>recycleSegment</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>allocator</name>.<name>enableReserveSegmentCreation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>replayed</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Perform recovery on a list of commit log files.
     *
     * @param clogs   the list of commit log files to replay
     * @return the number of mutations replayed
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>recover</name><parameter_list>(<param><decl><type><name>File</name>...</type> <name>clogs</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>CommitLogReplayer</name></type> <name>recovery</name> <init>= <expr>new <call><name>CommitLogReplayer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>recovery</name>.<name>recover</name></name><argument_list>(<argument><expr><name>clogs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>recovery</name>.<name>blockForWrites</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Perform recovery on a single commit log.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>recover</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>recover</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return a Future representing a ReplayPosition such that when it is ready,
     * all commitlog tasks enqueued prior to the getContext call will be complete (i.e., appended to the log)
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Future</name><argument_list>&lt;<argument><name>ReplayPosition</name></argument>&gt;</argument_list></name></type> <name>getContext</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Callable</name><argument_list>&lt;<argument><name>ReplayPosition</name></argument>&gt;</argument_list></name></type> <name>task</name> <init>= <expr>new <class><super><name><name>Callable</name><argument_list>&lt;<argument><name>ReplayPosition</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ReplayPosition</name></type> <name>call</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>activeSegment</name>.<name>getContext</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>executor</name>.<name>submit</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Used by tests.
     *
     * @return the number of active segments (segments with unflushed data in them)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>activeSegments</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>allocator</name>.<name>getActiveSegments</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Add a RowMutation to the commit log.
     *
     * @param rm the RowMutation to add to the log
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>RowMutation</name></type> <name>rm</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>totalSize</name> <init>= <expr><call><name><name>RowMutation</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name><name>MessagingService</name>.<name>current_version</name></name></expr></argument>)</argument_list></call> + <name><name>CommitLogSegment</name>.<name>ENTRY_OVERHEAD_SIZE</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>totalSize</name> &gt; <call><name><name>DatabaseDescriptor</name>.<name>getCommitLogSegmentSize</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Skipping commitlog append of extremely large mutation ({} bytes)"</expr></argument>, <argument><expr><name>totalSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>executor</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>LogRecordAdder</name><argument_list>(<argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Modifies the per-CF dirty cursors of any commit log segments for the column family according to the position
     * given. Discards any commit log segments that are no longer used.
     *
     * @param cfId    the column family ID that was flushed
     * @param context the replay position of the flush
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>discardCompletedSegments</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>UUID</name></type> <name>cfId</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>ReplayPosition</name></type> <name>context</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Callable</name></type> <name>task</name> <init>= <expr>new <class><super><name>Callable</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Object</name></type> <name>call</name><parameter_list>()</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"discard completed log segments for {}, column family {}"</expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>cfId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Go thru the active segment files, which are ordered oldest to newest, marking the</comment>
                <comment type="line">// flushed CF as clean, until we reach the segment file containing the ReplayPosition passed</comment>
                <comment type="line">// in the arguments. Any segments that become unused after they are marked clean will be</comment>
                <comment type="line">// recycled or discarded.</comment>
                <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>CommitLogSegment</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>allocator</name>.<name>getActiveSegments</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)
                <block>{
                    <decl_stmt><decl><type><name>CommitLogSegment</name></type> <name>segment</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>segment</name>.<name>markClean</name></name><argument_list>(<argument><expr><name>cfId</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// If the segment is no longer needed, and we have another spare segment in the hopper</comment>
                    <comment type="line">// (to keep the last segment from getting discarded), pursue either recycling or deleting</comment>
                    <comment type="line">// this segment file.</comment>
                    <if>if <condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block>{
                        <if>if <condition>(<expr><call><name><name>segment</name>.<name>isUnused</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Commit log segment {} is unused"</expr></argument>, <argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>allocator</name>.<name>recycleSegment</name></name><argument_list>(<argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else>else
                        <block>{
                            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Not safe to delete commit log segment {}; dirty is {}"</expr></argument>,
                                         <argument><expr><name>segment</name></expr></argument>, <argument><expr><call><name><name>segment</name>.<name>dirtyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then>
                    <else>else
                    <block>{
                        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Not deleting active commitlog segment {}"</expr></argument>, <argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>

                    <comment type="line">// Don't mark or try to delete any newer segments once we've reached the one containing the</comment>
                    <comment type="line">// position of the flush.</comment>
                    <if>if <condition>(<expr><call><name><name>segment</name>.<name>contains</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <break>break;</break></then></if>
                }</block></for>

                <return>return <expr>null</expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>executor</name>.<name>submit</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>ExecutionException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Forces a disk flush on the commit log files that need it.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>sync</name><parameter_list>()</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>CommitLogSegment</name></type> <name>segment</name> <range>: <expr><call><name><name>allocator</name>.<name>getActiveSegments</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>segment</name>.<name>sync</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return the number of tasks completed by the commit log executor
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getCompletedTasks</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>metrics</name>.<name>completedTasks</name>.<name>value</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return the depth of pending commit log executor queue
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getPendingTasks</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>metrics</name>.<name>pendingTasks</name>.<name>value</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return the total size occupied by commitlo segments expressed in bytes. (used by MBean)
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTotalCommitlogSize</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>metrics</name>.<name>totalCommitLogSize</name>.<name>value</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Forces a new segment file to be allocated and activated. Used mainly by truncate.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>forceNewSegment</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Forcing new segment creation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Callable</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>task</name> <init>= <expr>new <class><super><name>Callable</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Object</name></type> <name>call</name><parameter_list>()</parameter_list>
            <block>{
                <if>if <condition>(<expr><call><name><name>activeSegment</name>.<name>position</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
                    <expr_stmt><expr><call><name>activateNextSegment</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

                <return>return <expr>null</expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>executor</name>.<name>submit</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Fetches a new segment file from the allocator and activates it.
     *
     * @return the newly activated segment
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>activateNextSegment</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>activeSegment</name> = <call><name><name>allocator</name>.<name>fetchSegment</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Active segment is now {}"</expr></argument>, <argument><expr><name>activeSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getActiveSegmentNames</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>segmentNames</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>CommitLogSegment</name></type> <name>segment</name> <range>: <expr><call><name><name>allocator</name>.<name>getActiveSegments</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>segmentNames</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>segment</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><name>segmentNames</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getArchivingSegmentNames</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>archiver</name>.<name>archivePending</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Shuts down the threads used by the commit log, blocking until completion.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>shutdownBlocking</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>executor</name>.<name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>executor</name>.<name>awaitTermination</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>allocator</name>.<name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>allocator</name>.<name>awaitTermination</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// TODO this should be a Runnable since it doesn't actually return anything, but it's difficult to do that</comment>
    <comment type="line">// without breaking the fragile CheaterFutureTask in BatchCLES.</comment>
    <class>class <name>LogRecordAdder</name> <super><implements>implements <name>Callable</name>, <name>Runnable</name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>RowMutation</name></type> <name>rowMutation</name></decl>;</decl_stmt>

        <constructor><name>LogRecordAdder</name><parameter_list>(<param><decl><type><name>RowMutation</name></type> <name>rm</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>rowMutation</name></name> = <name>rm</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr>!<call><name><name>activeSegment</name>.<name>hasCapacityFor</name></name><argument_list>(<argument><expr><name>rowMutation</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>CommitLogSegment</name></type> <name>oldSegment</name> <init>= <expr><name>activeSegment</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>activateNextSegment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Now we can run the user defined command just before switching to the new commit log.</comment>
                <comment type="line">// (Do this here instead of in the recycle call so we can get a head start on the archive.)</comment>
                <expr_stmt><expr><call><name><name>archiver</name>.<name>maybeArchive</name></name><argument_list>(<argument><expr><call><name><name>oldSegment</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>oldSegment</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>activeSegment</name>.<name>write</name></name><argument_list>(<argument><expr><name>rowMutation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>FSWriteError</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>activeSegment</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>call</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>null</expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
