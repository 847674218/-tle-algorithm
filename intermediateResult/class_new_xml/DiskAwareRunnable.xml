<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\io\util\DiskAwareRunnable.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>Directories</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>WrappedRunnable</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DiskAwareRunnable</name> <super><extends>extends <name>WrappedRunnable</name></extends></super>
<block>{
    <comment type="block" format="javadoc">/**
     * Run this task after selecting the optimal disk for it
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>writeSize</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Directories</name>.<name>DataDirectory</name></name></type> <name>directory</name></decl>;</decl_stmt>
        <while>while <condition>(<expr>true</expr>)</condition>
        <block>{
            <expr_stmt><expr><name>writeSize</name> = <call><name>getExpectedWriteSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>directory</name> = <call><name><name>Directories</name>.<name>getLocationCapableOfSize</name></name><argument_list>(<argument><expr><name>writeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>directory</name> != null || !<call><name>reduceScopeForLimitedSpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <break>break;</break></then></if>
        }</block></while>
        <if>if <condition>(<expr><name>directory</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Insufficient disk space to write " + <name>writeSize</name> + " bytes"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <expr_stmt><expr><call><name><name>directory</name>.<name>currentTasks</name>.<name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>directory</name>.<name>estimatedWorkingSize</name>.<name>addAndGet</name></name><argument_list>(<argument><expr><name>writeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name>runWith</name><argument_list>(<argument><expr><name><name>directory</name>.<name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>directory</name>.<name>estimatedWorkingSize</name>.<name>addAndGet</name></name><argument_list>(<argument><expr>-1 * <name>writeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>directory</name>.<name>currentTasks</name>.<name>decrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Executes this task on given {@code dataDirectory}.
     * @param dataDirectory data directory to work on
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>runWith</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dataDirectory</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get expected write size to determine which disk to use for this task.
     * @return expected size in bytes this task will write to disk.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>getExpectedWriteSize</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called if no disk is available with free space for the full write size.
     * @return true if the scope of the task was successfully reduced.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>reduceScopeForLimitedSpace</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>
}</block></class>
</unit>
