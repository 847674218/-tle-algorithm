<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\RangeTombstone.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>MarshalException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISSTableSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>Descriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>DataOutputBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Interval</name></name>;</import>

<class><specifier>public</specifier> class <name>RangeTombstone</name> <super><extends>extends <name><name>Interval</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DeletionTime</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>OnDiskAtom</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Serializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>Serializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RangeTombstone</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>stop</name></decl></param>, <param><decl><type><name>long</name></type> <name>markedForDeleteAt</name></decl></param>, <param><decl><type><name>int</name></type> <name>localDeletionTime</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr>new <call><name>DeletionTime</name><argument_list>(<argument><expr><name>markedForDeleteAt</name></expr></argument>, <argument><expr><name>localDeletionTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>RangeTombstone</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>stop</name></decl></param>, <param><decl><type><name>DeletionTime</name></type> <name>delTime</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>delTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>name</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>min</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLocalDeletionTime</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>data</name>.<name>localDeletionTime</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>minTimestamp</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>data</name>.<name>markedForDeleteAt</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>maxTimestamp</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>data</name>.<name>markedForDeleteAt</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>TypeSizes</name></type> <name>typeSizes</name></decl></param>)</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSizeForSSTable</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>TypeSizes</name></type> <name>typeSizes</name> <init>= <expr><name><name>TypeSizes</name>.<name>NATIVE</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>)<call><name><name>min</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + <call><name><name>min</name>.<name>remaining</name></name><argument_list>()</argument_list></call>
             + 1 <comment type="line">// serialization flag</comment>
             + <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>)<call><name><name>max</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + <call><name><name>max</name>.<name>remaining</name></name><argument_list>()</argument_list></call>
             + <call><name><name>DeletionTime</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>typeSizes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateFields</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>metadata</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>nameValidator</name> <init>= <expr><name><name>metadata</name>.<name>cfType</name></name> == <name><name>ColumnFamilyType</name>.<name>Super</name></name> ? <name><name>metadata</name>.<name>subcolumnComparator</name></name> : <name><name>metadata</name>.<name>comparator</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>nameValidator</name>.<name>validate</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>nameValidator</name>.<name>validate</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateDigest</name><parameter_list>(<param><decl><type><name>MessageDigest</name></type> <name>digest</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>digest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>min</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>digest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>max</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DataOutputBuffer</name></type> <name>buffer</name> <init>= <expr>new <call><name>DataOutputBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>buffer</name>.<name>writeLong</name></name><argument_list>(<argument><expr><name><name>data</name>.<name>markedForDeleteAt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>buffer</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>data</name>.<name>localDeletionTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>digest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>getData</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * This tombstone supersedes another one if it is more recent and cover a
     * bigger range than rt.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>supersedes</name><parameter_list>(<param><decl><type><name>RangeTombstone</name></type> <name>rt</name></decl></param>, <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>rt</name>.<name>data</name>.<name>markedForDeleteAt</name></name> &gt; <name><name>data</name>.<name>markedForDeleteAt</name></name></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>

        <return>return <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name><name>rt</name>.<name>min</name></name></expr></argument>)</argument_list></call> &lt;= 0 &amp;&amp; <call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>rt</name>.<name>max</name></name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Tracker</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Deque</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr>new <call><name><name>ArrayDeque</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>SortedSet</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>maxOrderingSet</name> <init>= <expr>new <call><name><name>TreeSet</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>RangeTombstone</name></type> <name>t1</name></decl></param>, <param><decl><type><name>RangeTombstone</name></type> <name>t2</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>t1</name>.<name>max</name></name></expr></argument>, <argument><expr><name><name>t2</name>.<name>max</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>atomCount</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Tracker</name><parameter_list>(<param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>comparator</name></name> = <name>comparator</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="block" format="javadoc">/**
         * Compute RangeTombstone that are needed at the beginning of an index
         * block starting with {@code firstColumn}.
         * Returns the total serialized size of said tombstones and write them
         * to {@code out} it if isn't null.
         */</comment>
        <function><type><specifier>public</specifier> <name>long</name></type> <name>writeOpenedMarker</name><parameter_list>(<param><decl><type><name>OnDiskAtom</name></type> <name>firstColumn</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>, <param><decl><type><name><name>OnDiskAtom</name>.<name>Serializer</name></name></type> <name>atomSerializer</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>ranges</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>size</name></expr>;</return></then></if>

            <comment type="block">/*
             * Compute the marker that needs to be written at the beginning of
             * this block. We need to write one if it the more recent
             * (opened) tombstone for at least some part of its range.
             */</comment>
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>toWrite</name> <init>= <expr>new <call><name><name>LinkedList</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <label><name>outer</name>:</label>
            <for>for (<init><decl><type><name>RangeTombstone</name></type> <name>tombstone</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)
            <block>{
                <comment type="line">// If ever the first column is outside the range, skip it (in</comment>
                <comment type="line">// case update() hasn't been called yet)</comment>
                <if>if <condition>(<expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>firstColumn</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>tombstone</name>.<name>max</name></name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
                    <continue>continue;</continue></then></if>

                <decl_stmt><decl><type><name>RangeTombstone</name></type> <name>updated</name> <init>= <expr>new <call><name>RangeTombstone</name><argument_list>(<argument><expr><call><name><name>firstColumn</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>tombstone</name>.<name>max</name></name></expr></argument>, <argument><expr><name><name>tombstone</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>toWrite</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{
                    <decl_stmt><decl><type><name>RangeTombstone</name></type> <name>other</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>other</name>.<name>supersedes</name></name><argument_list>(<argument><expr><name>updated</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <break>break outer;</break></then></if>
                    <if>if <condition>(<expr><call><name><name>updated</name>.<name>supersedes</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>iter</name>.<name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></while>
                <expr_stmt><expr><call><name><name>toWrite</name>.<name>add</name></name><argument_list>(<argument><expr><name>tombstone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <for>for (<init><decl><type><name>RangeTombstone</name></type> <name>tombstone</name> <range>: <expr><name>toWrite</name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><name>size</name> += <call><name><name>tombstone</name>.<name>serializedSizeForSSTable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>atomCount</name>++</expr>;</expr_stmt>
                <if>if <condition>(<expr><name>out</name> != null</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>atomSerializer</name>.<name>serializeForSSTable</name></name><argument_list>(<argument><expr><name>tombstone</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>
            <return>return <expr><name>size</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>writtenAtom</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>atomCount</name></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Update this tracker given an {@code atom}.
         * If column is a IColumn, check if any tracked range is useless and
         * can be removed. If it is a RangeTombstone, add it to this tracker.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name>OnDiskAtom</name></type> <name>atom</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>atom</name> instanceof <name>RangeTombstone</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>RangeTombstone</name></type> <name>t</name> <init>= <expr>(<name>RangeTombstone</name>)<name>atom</name></expr></init></decl>;</decl_stmt>
                <comment type="line">// This could be a repeated marker already. If so, we already have a range in which it is</comment>
                <comment type="line">// fully included. While keeping both would be ok functionaly, we could end up with a lot of</comment>
                <comment type="line">// useless marker after a few compaction, so avoid this.</comment>
                <for>for (<init><decl><type><name>RangeTombstone</name></type> <name>tombstone</name> <range>: <expr><call><name><name>maxOrderingSet</name>.<name>tailSet</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                <block>{
                    <comment type="line">// We only care about tombstone have the same max than t</comment>
                    <if>if <condition>(<expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>t</name>.<name>max</name></name></expr></argument>, <argument><expr><name><name>tombstone</name>.<name>max</name></name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
                        <break>break;</break></then></if>

                    <comment type="line">// Since it is assume tombstones are passed to this method in growing min order, it's enough to</comment>
                    <comment type="line">// check for the data to know is the current tombstone is included in a previous one</comment>
                    <if>if <condition>(<expr><call><name><name>tombstone</name>.<name>data</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>t</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <return>return;</return></then></if>
                }</block></for>
                <expr_stmt><expr><call><name><name>ranges</name>.<name>addLast</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>maxOrderingSet</name>.<name>add</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <assert>assert <expr><name>atom</name> instanceof <name>IColumn</name></expr>;</assert>
                <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>maxOrderingSet</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{
                    <decl_stmt><decl><type><name>RangeTombstone</name></type> <name>tombstone</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>atom</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>tombstone</name>.<name>max</name></name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
                    <block>{
                        <comment type="line">// That tombstone is now useless</comment>
                        <expr_stmt><expr><call><name><name>iter</name>.<name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>ranges</name>.<name>remove</name></name><argument_list>(<argument><expr><name>tombstone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else
                    <block>{
                        <comment type="line">// Since we're iterating by growing end bound, if the current range</comment>
                        <comment type="line">// includes the column, so does all the next ones</comment>
                        <return>return;</return>
                    }</block></else></if>
                }</block></while>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDeleted</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>)</parameter_list>
        <block>{
            <for>for (<init><decl><type><name>RangeTombstone</name></type> <name>tombstone</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>tombstone</name>.<name>max</name></name></expr></argument>)</argument_list></call> &lt;= 0 &amp;&amp; <call><name><name>tombstone</name>.<name>data</name>.<name>isDeleted</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr>true</expr>;</return></then></if>
            }</block></for>
            <return>return <expr>false</expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Serializer</name> <super><implements>implements <name><name>ISSTableSerializer</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serializeForSSTable</name><parameter_list>(<param><decl><type><name>RangeTombstone</name></type> <name>t</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name><name>t</name>.<name>min</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeByte</name></name><argument_list>(<argument><expr><name><name>ColumnSerializer</name>.<name>RANGE_TOMBSTONE_MASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name><name>t</name>.<name>max</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>DeletionTime</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>t</name>.<name>data</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>RangeTombstone</name></type> <name>deserializeFromSSTable</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name><name>Descriptor</name>.<name>Version</name></name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>min</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>min</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &lt;= 0</expr>)</condition><then>
                <throw>throw <expr><call><name><name>ColumnSerializer</name>.<name>CorruptColumnException</name>.<name>create</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name><name>dis</name>.<name>readUnsignedByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr>(<name>b</name> &amp; <name><name>ColumnSerializer</name>.<name>RANGE_TOMBSTONE_MASK</name></name>) != 0</expr>;</assert>
            <return>return <expr><call><name>deserializeBody</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>RangeTombstone</name></type> <name>deserializeBody</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>min</name></decl></param>, <param><decl><type><name><name>Descriptor</name>.<name>Version</name></name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>max</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>max</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &lt;= 0</expr>)</condition><then>
                <throw>throw <expr><call><name><name>ColumnSerializer</name>.<name>CorruptColumnException</name>.<name>create</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>DeletionTime</name></type> <name>dt</name> <init>= <expr><call><name><name>DeletionTime</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>RangeTombstone</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
