<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\service\ReadCallback.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicInteger</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>Schema</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name>.<name>Stage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name>.<name>StageManager</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ReadCommand</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>Table</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ReadTimeoutException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>UnavailableException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>IAsyncCallback</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessageIn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessageOut</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>SimpleCondition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>WrappedRunnable</name></name>;</import>

<class><specifier>public</specifier> class <name><name>ReadCallback</name><argument_list>&lt;<argument><name>TMessage</name></argument>, <argument><name>TResolved</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>IAsyncCallback</name><argument_list>&lt;<argument><name>TMessage</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>( <argument><expr><name><name>ReadCallback</name>.<name>class</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>IResponseResolver</name><argument_list>&lt;<argument><name>TMessage</name></argument>, <argument><name>TResolved</name></argument>&gt;</argument_list></name></type> <name>resolver</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SimpleCondition</name></type> <name>condition</name> <init>= <expr>new <call><name>SimpleCondition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>startTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>blockfor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>endpoints</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IReadCommand</name></type> <name>command</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicInteger</name></type> <name>received</name> <init>= <expr>new <call><name>AtomicInteger</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Table</name></type> <name>table</name></decl>;</decl_stmt> <comment type="line">// TODO push this into ConsistencyLevel?</comment>

    <comment type="block" format="javadoc">/**
     * Constructor when response count has to be calculated and blocked for.
     */</comment>
    <constructor><specifier>public</specifier> <name>ReadCallback</name><parameter_list>(<param><decl><type><name><name>IResponseResolver</name><argument_list>&lt;<argument><name>TMessage</name></argument>, <argument><name>TResolved</name></argument>&gt;</argument_list></name></type> <name>resolver</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></param>, <param><decl><type><name>IReadCommand</name></type> <name>command</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>filteredEndpoints</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><call><name><name>consistencyLevel</name>.<name>blockFor</name></name><argument_list>(<argument><expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><call><name><name>command</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><call><name><name>command</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filteredEndpoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Blockfor is %s; setting up requests to %s"</expr></argument>, <argument><expr><name>blockfor</name></expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>endpoints</name></name></expr></argument>, <argument><expr>","</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>ReadCallback</name><parameter_list>(<param><decl><type><name><name>IResponseResolver</name><argument_list>&lt;<argument><name>TMessage</name></argument>, <argument><name>TResolved</name></argument>&gt;</argument_list></name></type> <name>resolver</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></param>, <param><decl><type><name>int</name></type> <name>blockfor</name></decl></param>, <param><decl><type><name>IReadCommand</name></type> <name>command</name></decl></param>, <param><decl><type><name>Table</name></type> <name>table</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>endpoints</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>command</name></name> = <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>table</name></name> = <name>table</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>blockfor</name></name> = <name>blockfor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>consistencyLevel</name></name> = <name>consistencyLevel</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>resolver</name></name> = <name>resolver</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>startTime</name></name> = <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>endpoints</name></name> = <name>endpoints</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>ReadCallback</name><argument_list>&lt;<argument><name>TMessage</name></argument>, <argument><name>TResolved</name></argument>&gt;</argument_list></name></type> <name>withNewResolver</name><parameter_list>(<param><decl><type><name><name>IResponseResolver</name><argument_list>&lt;<argument><name>TMessage</name></argument>, <argument><name>TResolved</name></argument>&gt;</argument_list></name></type> <name>newResolver</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>ReadCallback</name><argument_list>(<argument><expr><name>newResolver</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>blockfor</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>endpoints</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>TResolved</name></type> <name>get</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ReadTimeoutException</name></expr></argument>, <argument><expr><name>DigestMismatchException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><call><name><name>command</name>.<name>getTimeout</name></name><argument_list>()</argument_list></call> - (<call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> - <name>startTime</name>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>success</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>success</name> = <call><name><name>condition</name>.<name>await</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>ex</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <if>if <condition>(<expr>!<name>success</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ReadTimeoutException</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><call><name><name>received</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>blockfor</name></expr></argument>, <argument><expr><call><name><name>resolver</name>.<name>isDataPresent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <return>return <expr><name>blockfor</name> == 1 ? <call><name><name>resolver</name>.<name>getData</name></name><argument_list>()</argument_list></call> : <call><name><name>resolver</name>.<name>resolve</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>response</name><parameter_list>(<param><decl><type><name><name>MessageIn</name><argument_list>&lt;<argument><name>TMessage</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>resolver</name>.<name>preprocess</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>waitingFor</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call>
              ? <call><name><name>received</name>.<name>incrementAndGet</name></name><argument_list>()</argument_list></call>
              : <call><name><name>received</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>n</name> &gt;= <name>blockfor</name> &amp;&amp; <call><name><name>resolver</name>.<name>isDataPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>condition</name>.<name>signal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>maybeResolveForRepair</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if the message counts towards the blockfor threshold
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>waitingFor</name><parameter_list>(<param><decl><type><name>MessageIn</name></type> <name>message</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>consistencyLevel</name> == <name><name>ConsistencyLevel</name>.<name>LOCAL_QUORUM</name></name>
             ? <call><name><name>DatabaseDescriptor</name>.<name>getLocalDataCenter</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getEndpointSnitch</name></name><argument_list>()</argument_list></call>.<call><name>getDatacenter</name><argument_list>(<argument><expr><name><name>message</name>.<name>from</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
             : true</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>response</name><parameter_list>(<param><decl><type><name>TMessage</name></type> <name>result</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>MessageIn</name><argument_list>&lt;<argument><name>TMessage</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>MessageIn</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                       <argument><expr><name>result</name></expr></argument>,
                                                       <argument><expr><name><name>Collections</name>.</name>&lt;<name>String</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name>&gt;<call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>,
                                                       <argument><expr><name><name>MessagingService</name>.<name>Verb</name>.<name>INTERNAL_RESPONSE</name></name></expr></argument>,
                                                       <argument><expr><name><name>MessagingService</name>.<name>current_version</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>response</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Check digests in the background on the Repair stage if we've received replies
     * too all the requests we sent.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>maybeResolveForRepair</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>blockfor</name> &lt; <call><name><name>endpoints</name>.<name>size</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>received</name>.<name>get</name></name><argument_list>()</argument_list></call> == <call><name><name>endpoints</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <assert>assert <expr><call><name><name>resolver</name>.<name>isDataPresent</name></name><argument_list>()</argument_list></call></expr>;</assert>
            <expr_stmt><expr><call><name><name>StageManager</name>.<name>getStage</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>READ_REPAIR</name></name></expr></argument>)</argument_list></call>.<call><name>execute</name><argument_list>(<argument><expr>new <call><name>AsyncRepairRunner</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>assureSufficientLiveNodes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnavailableException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>consistencyLevel</name>.<name>assureSufficientLiveNodes</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>endpoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLatencyForSnitch</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> class <name>AsyncRepairRunner</name> <super><extends>extends <name>WrappedRunnable</name></extends></super>
    <block>{
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <comment type="line">// If the resolver is a RowDigestResolver, we need to do a full data read if there is a mismatch.</comment>
            <comment type="line">// Otherwise, resolve will send the repairs directly if needs be (and in that case we should never</comment>
            <comment type="line">// get a digest mismatch)</comment>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>resolver</name>.<name>resolve</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>DigestMismatchException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <assert>assert <expr><name>resolver</name> instanceof <name>RowDigestResolver</name></expr>;</assert>

                <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Digest mismatch:"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <decl_stmt><decl><type><name>ReadCommand</name></type> <name>readCommand</name> <init>= <expr>(<name>ReadCommand</name>) <name>command</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>RowDataResolver</name></type> <name>repairResolver</name> <init>= <expr>new <call><name>RowDataResolver</name><argument_list>(<argument><expr><name><name>readCommand</name>.<name>table</name></name></expr></argument>, <argument><expr><name><name>readCommand</name>.<name>key</name></name></expr></argument>, <argument><expr><call><name><name>readCommand</name>.<name>filter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>IAsyncCallback</name></type> <name>repairHandler</name> <init>= <expr>new <call><name>AsyncRepairCallback</name><argument_list>(<argument><expr><name>repairResolver</name></expr></argument>, <argument><expr><call><name><name>endpoints</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>MessageOut</name><argument_list>&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr>((<name>ReadCommand</name>) <name>command</name>).<call><name>createMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>InetAddress</name></type> <name>endpoint</name> <range>: <expr><name>endpoints</name></expr></range></decl></init>)
                    <expr_stmt><expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>sendRR</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>repairHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            }</block></catch></try>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
