<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\concurrent\CreationTimeAwareFuture.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ExecutionException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>Future</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>FutureTask</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeoutException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Decorates {@link FutureTask}
 * &lt;/p&gt;
 * This Future implementation makes the future.get(long timeout, TimeUnit unit)
 * wait the amount of time specified in the .get(...) call based on the object creation
 * by keeping an internal timestamp of when this object was constructed
 *
 * @param &lt;V&gt;
 */</comment>
<class><specifier>public</specifier> class <name><name>CreationTimeAwareFuture</name><argument_list>&lt;<argument><name>V</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>Future</name><argument_list>&lt;<argument><name>V</name></argument>&gt;</argument_list></name></implements></super>
<block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>creationTime</name> <init>= <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Future</name><argument_list>&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>future</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CreationTimeAwareFuture</name><parameter_list>(<param><decl><type><name><name>Future</name><argument_list>&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>future</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>future</name></name> = <name>future</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>V</name></type> <name>get</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timeout</name></decl></param>, <param><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>TimeoutException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><name>timeout</name> = <call><name><name>unit</name>.<name>toMillis</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>overallTimeout</name> <init>= <expr><name>timeout</name> - (<call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> - <name>creationTime</name>)</expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>future</name>.<name>get</name></name><argument_list>(<argument><expr><name>overallTimeout</name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>cancel</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>mayInterruptIfRunning</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>future</name>.<name>cancel</name></name><argument_list>(<argument><expr><name>mayInterruptIfRunning</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCancelled</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>future</name>.<name>isCancelled</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDone</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>future</name>.<name>isDone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>V</name></type> <name>get</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument></throws>
    <block>{
       <return>return <expr><call><name><name>future</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
