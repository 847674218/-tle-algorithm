<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\streaming\compress\CompressionInfo.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>streaming</name>.<name>compress</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name>.<name>CompressionMetadata</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name>.<name>CompressionParameters</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Container that carries compression parameters and chunks to decompress data from stream.
 */</comment>
<class><specifier>public</specifier> class <name>CompressionInfo</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>CompressionInfo</name></argument>&gt;</argument_list></name></type> <name>serializer</name> <init>= <expr>new <call><name>CompressionInfoSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>CompressionMetadata</name>.<name>Chunk</name></name><index>[]</index></type> <name>chunks</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>CompressionParameters</name></type> <name>parameters</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CompressionInfo</name><parameter_list>(<param><decl><type><name><name>CompressionMetadata</name>.<name>Chunk</name><index>[]</index></name></type> <name>chunks</name></decl></param>, <param><decl><type><name>CompressionParameters</name></type> <name>parameters</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>chunks</name> != null &amp;&amp; <name>parameters</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>chunks</name></name> = <name>chunks</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>parameters</name></name> = <name>parameters</name></expr>;</expr_stmt>
    }</block></constructor>

    <class><specifier>static</specifier> class <name>CompressionInfoSerializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>CompressionInfo</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>CompressionInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr><name>info</name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name>int</name></type> <name>chunkCount</name> <init>= <expr><name><name>info</name>.<name>chunks</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name>chunkCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>chunkCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <expr_stmt><expr><call><name><name>CompressionMetadata</name>.<name>Chunk</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>info</name>.<name>chunks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            <comment type="line">// compression params</comment>
            <expr_stmt><expr><call><name><name>CompressionParameters</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>info</name>.<name>parameters</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>CompressionInfo</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <comment type="line">// chunks</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>chunkCount</name> <init>= <expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>chunkCount</name> &lt; 0</expr>)</condition><then>
                <return>return <expr>null</expr>;</return></then></if>

            <decl_stmt><decl><type><name><name>CompressionMetadata</name>.<name>Chunk</name></name><index>[]</index></type> <name>chunks</name> <init>= <expr>new <name><name>CompressionMetadata</name>.<name>Chunk</name><index>[<expr><name>chunkCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>chunkCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <expr_stmt><expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>CompressionMetadata</name>.<name>Chunk</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

            <comment type="line">// compression params</comment>
            <decl_stmt><decl><type><name>CompressionParameters</name></type> <name>parameters</name> <init>= <expr><call><name><name>CompressionParameters</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>CompressionInfo</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>CompressionInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>info</name> == null</expr>)</condition><then>
                <return>return <expr><call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</return></then></if>

            <comment type="line">// chunks</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>chunkCount</name> <init>= <expr><name><name>info</name>.<name>chunks</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr><name>chunkCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>chunkCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <expr_stmt><expr><name>size</name> += <call><name><name>CompressionMetadata</name>.<name>Chunk</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name><name>info</name>.<name>chunks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            <comment type="line">// compression params</comment>
            <expr_stmt><expr><name>size</name> += <call><name><name>CompressionParameters</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name><name>info</name>.<name>parameters</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>size</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
