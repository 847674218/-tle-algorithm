<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\tools\Shuffle.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tools</name></name>;</package>
<comment type="block">/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */</comment>


<import>import <name><name>java</name>.<name>io</name>.<name>Closeable</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Random</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>javax</name>.<name>management</name>.<name>JMX</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>MBeanServerConnection</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>MalformedObjectNameException</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>ObjectName</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>jdbc</name>.<name>JdbcDate</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Token</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>EndpointSnitchInfoMBean</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageServiceMBean</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>Cassandra</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>Compression</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CqlResult</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CqlRow</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>TimedOutException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>TokenRange</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>UnavailableException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>cli</name>.<name>CommandLine</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>cli</name>.<name>MissingArgumentException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>protocol</name>.<name>TBinaryProtocol</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TFastFramedTransport</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TSocket</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TTransport</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TTransportException</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>HashMultimap</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Multimap</name></name>;</import>

<class><specifier>public</specifier> class <name>Shuffle</name> <super><extends>extends <name>AbstractJmxClient</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ssObjName</name> <init>= <expr>"org.apache.cassandra.db:type=StorageService"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>epSnitchObjName</name> <init>= <expr>"org.apache.cassandra.db:type=EndpointSnitchInfo"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>StorageServiceMBean</name></type> <name>ssProxy</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Random</name></type> <name>rand</name> <init>= <expr>new <call><name>Random</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>thriftHost</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>thriftPort</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>thriftFramed</name></decl>;</decl_stmt>

    <expr_stmt><expr>static
    <block>{
        <expr><call><name>addCmdOption</name><argument_list>(<argument><expr>"th"</expr></argument>,  <argument><expr>"thrift-host"</expr></argument>,   <argument><expr>true</expr></argument>,  <argument><expr>"Thrift hostname or IP address (Default: JMX host)"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name>addCmdOption</name><argument_list>(<argument><expr>"tp"</expr></argument>,  <argument><expr>"thrift-port"</expr></argument>,   <argument><expr>true</expr></argument>,  <argument><expr>"Thrift port number (Default: 9160)"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name>addCmdOption</name><argument_list>(<argument><expr>"tf"</expr></argument>,  <argument><expr>"thrift-framed"</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Enable framed transport for Thrift (Default: false)"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name>addCmdOption</name><argument_list>(<argument><expr>"en"</expr></argument>,  <argument><expr>"and-enable"</expr></argument>,    <argument><expr>true</expr></argument>,  <argument><expr>"Immediately enable shuffling (create only)"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name>addCmdOption</name><argument_list>(<argument><expr>"dc"</expr></argument>,  <argument><expr>"only-dc"</expr></argument>,       <argument><expr>true</expr></argument>,  <argument><expr>"Apply only to named DC (create only)"</expr></argument>)</argument_list></call></expr>;
    }</block>

    public <call><name>Shuffle</name><argument_list>(<argument><expr><name>String</name> <name>host</name></expr></argument>, <argument><expr><name>int</name> <name>port</name></expr></argument>)</argument_list></call> throws <name>IOException</name>
    <block>{
        <expr><call><name>this</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr>9160</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;
    }</block>

    public <call><name>Shuffle</name><argument_list>(<argument><expr><name>String</name> <name>host</name></expr></argument>, <argument><expr><name>int</name> <name>port</name></expr></argument>, <argument><expr><name>String</name> <name>thriftHost</name></expr></argument>, <argument><expr><name>int</name> <name>thriftPort</name></expr></argument>, <argument><expr><name>boolean</name> <name>thriftFramed</name></expr></argument>, <argument><expr><name>String</name> <name>username</name></expr></argument>, <argument><expr><name>String</name> <name>password</name></expr></argument>)</argument_list></call>
    throws <name>IOException</name>
    <block>{
        <expr><call><name>super</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;

        <expr><name><name>this</name>.<name>thriftHost</name></name> = <name>thriftHost</name></expr>;
        <expr><name><name>this</name>.<name>thriftPort</name></name> = <name>thriftPort</name></expr>;
        <expr><name><name>this</name>.<name>thriftFramed</name></name> = <name>thriftFramed</name></expr>;

        <comment type="line">// Setup the StorageService proxy.</comment>
        <expr><name>ssProxy</name> = <call><name>getSSProxy</name><argument_list>(<argument><expr><call><name><name>jmxConn</name>.<name>getMbeanServerConn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    public <name>StorageServiceMBean</name> <call><name>getSSProxy</name><argument_list>(<argument><expr><name>MBeanServerConnection</name> <name>mbeanConn</name></expr></argument>)</argument_list></call>
    <block>{
        <expr><name>StorageServiceMBean</name> <name>proxy</name> = null</expr>;
        <try>try
        <block>{
            <decl_stmt><decl><type><name>ObjectName</name></type> <name>name</name> <init>= <expr>new <call><name>ObjectName</name><argument_list>(<argument><expr><name>ssObjName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>proxy</name> = <call><name><name>JMX</name>.<name>newMBeanProxy</name></name><argument_list>(<argument><expr><name>mbeanConn</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>StorageServiceMBean</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block></try>}</block></expr></expr_stmt>
        <catch>catch <parameter_list>(<param><decl><type><name>MalformedObjectNameException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <return>return <expr><name>proxy</name></expr>;</return>
    }</block></class>

    <function><type><specifier>public</specifier> <name>EndpointSnitchInfoMBean</name></type> <name>getEpSnitchProxy</name><parameter_list>(<param><decl><type><name>MBeanServerConnection</name></type> <name>mbeanConn</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>EndpointSnitchInfoMBean</name></type> <name>proxy</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <decl_stmt><decl><type><name>ObjectName</name></type> <name>name</name> <init>= <expr>new <call><name>ObjectName</name><argument_list>(<argument><expr><name>epSnitchObjName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>proxy</name> = <call><name><name>JMX</name>.<name>newMBeanProxy</name></name><argument_list>(<argument><expr><name>mbeanConn</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>EndpointSnitchInfoMBean</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>MalformedObjectNameException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>proxy</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Given a Multimap of endpoint to tokens, return a new randomized mapping.
     *
     * @param endpointMap current mapping of endpoint to tokens
     * @return a new mapping of endpoint to tokens
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Multimap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>calculateRelocations</name><parameter_list>(<param><decl><type><name><name>Multimap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>endpointMap</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Multimap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>relocations</name> <init>= <expr><call><name><name>HashMultimap</name>.<name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>endpoints</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>endpointMap</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>endpointToNumTokens</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>endpoints</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Iterator</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iterMap</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Iterator</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>endpoints</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Create maps of endpoint to token iterators, and endpoint to number of tokens.</comment>
        <for>for (<init><decl><type><name>String</name></type> <name>endpoint</name> <range>: <expr><name>endpoints</name></expr></range></decl></init>)
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>endpointToNumTokens</name>.<name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>ssProxy</name>.<name>getTokens</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"What that...?"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <expr_stmt><expr><call><name><name>iterMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>endpointMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>epsToComplete</name> <init>= <expr><call><name><name>endpoints</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>endpointsCompleted</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <label><name>outer</name>:</label>
        <while>while <condition>(<expr>true</expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name><name>endpoints</name>.<name>removeAll</name></name><argument_list>(<argument><expr><name>endpointsCompleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for (<init><decl><type><name>String</name></type> <name>endpoint</name> <range>: <expr><name>endpoints</name></expr></range></decl></init>)
            <block>{
                <decl_stmt><decl><type><name>boolean</name></type> <name>choiceMade</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr>!<call><name><name>iterMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call>.<call><name>hasNext</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>endpointsCompleted</name>.<name>add</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>

                <decl_stmt><decl><type><name>String</name></type> <name>token</name> <init>= <expr><call><name><name>iterMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>subSet</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>endpoints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>subSet</name>.<name>remove</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Collections</name>.<name>shuffle</name></name><argument_list>(<argument><expr><name>subSet</name></expr></argument>, <argument><expr><name>rand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for (<init><decl><type><name>String</name></type> <name>choice</name> <range>: <expr><name>subSet</name></expr></range></decl></init>)
                <block>{
                    <if>if <condition>(<expr><call><name><name>relocations</name>.<name>get</name></name><argument_list>(<argument><expr><name>choice</name></expr></argument>)</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> &lt; <call><name><name>endpointToNumTokens</name>.<name>get</name></name><argument_list>(<argument><expr><name>choice</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>relocations</name>.<name>put</name></name><argument_list>(<argument><expr><name>choice</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>choiceMade</name> = true</expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>

                <if>if <condition>(<expr>!<name>choiceMade</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>relocations</name>.<name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>

            <comment type="line">// We're done when we've exhausted all of the token iterators</comment>
            <if>if <condition>(<expr><call><name><name>endpointsCompleted</name>.<name>size</name></name><argument_list>()</argument_list></call> == <name>epsToComplete</name></expr>)</condition><then>
                <break>break outer;</break></then></if>
        }</block></while>

        <return>return <expr><name>relocations</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Enable relocations.
     *
     * @param endpoints sequence of hostname or IP strings
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>enableRelocations</name><parameter_list>(<param><decl><type><name>String</name>...</type><name>endpoints</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>enableRelocations</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>endpoints</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Enable relocations.
     *
     * @param endpoints Collection of hostname or IP strings
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>enableRelocations</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>endpoints</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>String</name></type> <name>endpoint</name> <range>: <expr><name>endpoints</name></expr></range></decl></init>)
        <block>{
            <try>try
            <block>{
                <decl_stmt><decl><type><name>JMXConnection</name></type> <name>conn</name> <init>= <expr>new <call><name>JMXConnection</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>getSSProxy</name><argument_list>(<argument><expr><call><name><name>conn</name>.<name>getMbeanServerConn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>enableScheduledRangeXfers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>conn</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name>writeln</name><argument_list>(<argument><expr>"Failed to enable shuffling on %s!"</expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Disable relocations.
     *
     * @param endpoints sequence of hostname or IP strings
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>disableRelocations</name><parameter_list>(<param><decl><type><name>String</name>...</type><name>endpoints</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>disableRelocations</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>endpoints</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Disable relocations.
     *
     * @param endpoints Collection of hostname or IP strings
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>disableRelocations</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>endpoints</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>String</name></type> <name>endpoint</name> <range>: <expr><name>endpoints</name></expr></range></decl></init>)
        <block>{
            <try>try
            <block>{
                <decl_stmt><decl><type><name>JMXConnection</name></type> <name>conn</name> <init>= <expr>new <call><name>JMXConnection</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>getSSProxy</name><argument_list>(<argument><expr><call><name><name>conn</name>.<name>getMbeanServerConn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>disableScheduledRangeXfers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>conn</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name>writeln</name><argument_list>(<argument><expr>"Failed to enable shuffling on %s!"</expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return a list of the live nodes (using JMX).
     *
     * @return String endpoint names
     * @throws ShuffleError
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLiveNodes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ShuffleError</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>JMXConnection</name></type> <name>conn</name> <init>= <expr>new <call><name>JMXConnection</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>getSSProxy</name><argument_list>(<argument><expr><call><name><name>conn</name>.<name>getMbeanServerConn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getLiveNodes</name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ShuffleError</name><argument_list>(<argument><expr>"Error retrieving list of nodes from JMX interface"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Create and distribute a new, randomized token to endpoint mapping.
     *
     * @throws ShuffleError on handled exceptions
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>shuffle</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>enable</name></decl></param>, <param><decl><type><name>String</name></type> <name>onlyDc</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ShuffleError</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>CassandraClient</name></type> <name>seedClient</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tokenMap</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>IPartitioner</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>partitioner</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Multimap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>endpointMap</name> <init>= <expr><call><name><name>HashMultimap</name>.<name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EndpointSnitchInfoMBean</name></type> <name>epSnitchProxy</name> <init>= <expr><call><name>getEpSnitchProxy</name><argument_list>(<argument><expr><call><name><name>jmxConn</name>.<name>getMbeanServerConn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>seedClient</name> = <call><name>getThriftClient</name><argument_list>(<argument><expr><name>thriftHost</name></expr></argument>, <argument><expr><name>thriftPort</name></expr></argument>, <argument><expr><name>thriftFramed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tokenMap</name> = <call><name><name>seedClient</name>.<name>describe_token_map</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>tokenMap</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>endpoint</name> <init>= <expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init>, <name>token</name> <init>= <expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try
                <block>{
                    <if>if <condition>(<expr><name>onlyDc</name> != null</expr>)</condition><then>
                    <block>{
                        <if>if <condition>(<expr><call><name><name>onlyDc</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>epSnitchProxy</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                            <expr_stmt><expr><call><name><name>endpointMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                    }</block></then>
                    <else>else
                        <expr_stmt><expr><call><name><name>endpointMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <expr_stmt><expr><call><name>writeln</name><argument_list>(<argument><expr>"Warning: %s unknown to EndpointSnitch!"</expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></for>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>ire</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"What that...?"</expr></argument>, <argument><expr><name>ire</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>TException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ShuffleError</name><argument_list>(
                    <argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Thrift request to %s:%d failed: %s"</expr></argument>, <argument><expr><name>thriftHost</name></expr></argument>, <argument><expr><name>thriftPort</name></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <expr_stmt><expr><name>partitioner</name> = <call><name>getPartitioner</name><argument_list>(<argument><expr><name>thriftHost</name></expr></argument>, <argument><expr><name>thriftPort</name></expr></argument>, <argument><expr><name>thriftFramed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Multimap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>relocations</name> <init>= <expr><call><name>calculateRelocations</name><argument_list>(<argument><expr><name>endpointMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>writeln</name><argument_list>(<argument><expr>"%-42s %-15s %-15s"</expr></argument>, <argument><expr>"Token"</expr></argument>, <argument><expr>"From"</expr></argument>, <argument><expr>"To"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeln</name><argument_list>(<argument><expr>"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+~~~~~~~~~~~~~~~+~~~~~~~~~~~~~~~"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Store relocations on remote nodes.</comment>
        <for>for (<init><decl><type><name>String</name></type> <name>endpoint</name> <range>: <expr><call><name><name>relocations</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <for>for (<init><decl><type><name>String</name></type> <name>tok</name> <range>: <expr><call><name><name>relocations</name>.<name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><call><name>writeln</name><argument_list>(<argument><expr>"%-42s %-15s %-15s"</expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><call><name><name>tokenMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

            <decl_stmt><decl><type><name>String</name></type> <name>cqlQuery</name> <init>= <expr><call><name>createShuffleBatchInsert</name><argument_list>(<argument><expr><call><name><name>relocations</name>.<name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>executeCqlQuery</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>thriftPort</name></expr></argument>, <argument><expr><name>thriftFramed</name></expr></argument>, <argument><expr><name>cqlQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <if>if <condition>(<expr><name>enable</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>enableRelocations</name><argument_list>(<argument><expr><call><name><name>relocations</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Print a list of pending token relocations for all nodes.
     *
     * @throws ShuffleError
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>ls</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ShuffleError</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>CqlRow</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>queuedRelocations</name> <init>= <expr><call><name>listRelocations</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>IPartitioner</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>partitioner</name> <init>= <expr><call><name>getPartitioner</name><argument_list>(<argument><expr><name>thriftHost</name></expr></argument>, <argument><expr><name>thriftPort</name></expr></argument>, <argument><expr><name>thriftFramed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>justOnce</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>String</name></type> <name>host</name> <range>: <expr><call><name><name>queuedRelocations</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <for>for (<init><decl><type><name>CqlRow</name></type> <name>row</name> <range>: <expr><call><name><name>queuedRelocations</name>.<name>get</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block>{
                <assert>assert <expr><call><name><name>row</name>.<name>getColumns</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> == 2</expr>;</assert>

                <if>if <condition>(<expr>!<name>justOnce</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name>writeln</name><argument_list>(<argument><expr>"%-42s %-15s %s"</expr></argument>, <argument><expr>"Token"</expr></argument>, <argument><expr>"Endpoint"</expr></argument>, <argument><expr>"Requested at"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>writeln</name><argument_list>(<argument><expr>"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+~~~~~~~~~~~~~~~+~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>justOnce</name> = true</expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>tokenBytes</name> <init>= <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>row</name>.<name>getColumns</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>requestedAt</name> <init>= <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>row</name>.<name>getColumns</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Date</name></type> <name>time</name> <init>= <expr><call><name><name>JdbcDate</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><name>requestedAt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Token</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>token</name> <init>= <expr><call><name><name>partitioner</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>fromByteArray</name><argument_list>(<argument><expr><name>tokenBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>writeln</name><argument_list>(<argument><expr>"%-42s %-15s %s"</expr></argument>, <argument><expr><call><name><name>token</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name><name>time</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * List pending token relocations for all nodes.
     *
     * @return
     * @throws ShuffleError
     */</comment>
    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>CqlRow</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>listRelocations</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ShuffleError</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>cqlQuery</name> <init>= <expr>"SELECT token_bytes,requested_at FROM system.range_xfers"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>CqlRow</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>CqlRow</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>String</name></type> <name>host</name> <range>: <expr><call><name>getLiveNodes</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>CqlResult</name></type> <name>result</name> <init>= <expr><call><name>executeCqlQuery</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>thriftPort</name></expr></argument>, <argument><expr><name>thriftFramed</name></expr></argument>, <argument><expr><name>cqlQuery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>results</name>.<name>put</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name><name>result</name>.<name>getRows</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>results</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Clear pending token relocations on all nodes.
     *
     * @throws ShuffleError
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ShuffleError</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>CqlRow</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>queuedRelocations</name> <init>= <expr><call><name>listRelocations</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>String</name></type> <name>host</name> <range>: <expr><call><name><name>queuedRelocations</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{

            <for>for (<init><decl><type><name>CqlRow</name></type> <name>row</name> <range>: <expr><call><name><name>queuedRelocations</name>.<name>get</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block>{
                <assert>assert <expr><call><name><name>row</name>.<name>getColumns</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> == 2</expr>;</assert>

                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>tokenBytes</name> <init>= <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>row</name>.<name>getColumns</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"DELETE FROM system.range_xfers WHERE token_bytes = '%s'"</expr></argument>,
                        <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name>tokenBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>executeCqlQuery</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>thriftPort</name></expr></argument>, <argument><expr><name>thriftFramed</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Enable shuffling on all nodes in the cluster.
     *
     * @throws ShuffleError
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ShuffleError</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>enableRelocations</name><argument_list>(<argument><expr><call><name>getLiveNodes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Disable shuffling on all nodes in the cluster.
     *
     * @throws ShuffleError
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ShuffleError</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>disableRelocations</name><argument_list>(<argument><expr><call><name>getLiveNodes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Setup and return a new Thrift RPC connection.
     *
     * @param hostName hostname or address to connect to
     * @param port port number to connect to
     * @param framed wrap with framed transport if true
     * @return a CassandraClient instance
     * @throws ShuffleError
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CassandraClient</name></type> <name>getThriftClient</name><parameter_list>(<param><decl><type><name>String</name></type> <name>hostName</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>framed</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ShuffleError</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <return>return <expr>new <call><name>CassandraClient</name><argument_list>(<argument><expr><name>hostName</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>framed</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>TTransportException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ShuffleError</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unable to connect to %s/%d: %s"</expr></argument>, <argument><expr><name>hostName</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Execute a CQL v3 query.
     *
     * @param hostName hostname or address to connect to
     * @param port port number to connect to
     * @param isFramed wrap with framed transport if true
     * @param cqlQuery CQL query string
     * @return a Thrift CqlResult instance
     * @throws ShuffleError
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CqlResult</name></type> <name>executeCqlQuery</name><parameter_list>(<param><decl><type><name>String</name></type> <name>hostName</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isFramed</name></decl></param>, <param><decl><type><name>String</name></type> <name>cqlQuery</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ShuffleError</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>CassandraClient</name></type> <name>client</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>client</name> = <call><name>getThriftClient</name><argument_list>(<argument><expr><name>hostName</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>isFramed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>client</name>.<name>execute_cql_query</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>cqlQuery</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Compression</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>UnavailableException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ShuffleError</name><argument_list>(
                    <argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unable to write shuffle entries to %s. Reason: UnavailableException"</expr></argument>, <argument><expr><name>hostName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>TimedOutException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ShuffleError</name><argument_list>(
                    <argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unable to write shuffle entries to %s. Reason: TimedOutException"</expr></argument>, <argument><expr><name>hostName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <finally>finally
        <block>{
            <if>if <condition>(<expr><name>client</name> != null</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>client</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return a partitioner instance for remote host.
     *
     * @param hostName hostname or address to connect to
     * @param port port number to connect to
     * @param framed wrap with framed transport if true
     * @return an IPartitioner instance
     * @throws ShuffleError
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>IPartitioner</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getPartitioner</name><parameter_list>(<param><decl><type><name>String</name></type> <name>hostName</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>framed</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ShuffleError</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>partitionerName</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>partitionerName</name> = <call><name>getThriftClient</name><argument_list>(<argument><expr><name>hostName</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>framed</name></expr></argument>)</argument_list></call>.<call><name>describe_partitioner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>TException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ShuffleError</name><argument_list>(
                    <argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Thrift request to %s:%d failed: %s"</expr></argument>, <argument><expr><name>hostName</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Error calling describe_partitioner() defies explanation"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <try>try
        <block>{
            <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>partitionerClass</name> <init>= <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>partitionerName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>(<name><name>IPartitioner</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name>)<call><name><name>partitionerClass</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ShuffleError</name><argument_list>(<argument><expr>"Unable to locate class for partitioner: " + <name>partitionerName</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Create and return a CQL batch insert statement for a set of token relocations.
     *
     * @param tokens tokens to be relocated
     * @param partitioner an instance of the IPartitioner in use
     * @return a query string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>createShuffleBatchInsert</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></param>, <param><decl><type><name><name>IPartitioner</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>partitioner</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>query</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>query</name>.<name>append</name></name><argument_list>(<argument><expr>"BEGIN BATCH"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>String</name></type> <name>tokenStr</name> <range>: <expr><name>tokens</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name><name>Token</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>token</name> <init>= <expr><call><name><name>partitioner</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>fromString</name><argument_list>(<argument><expr><name>tokenStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>hexToken</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><call><name><name>partitioner</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>toByteArray</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>query</name>.<name>append</name></name><argument_list>(<argument><expr>"INSERT INTO system.range_xfers (token_bytes, requested_at) "</expr></argument>)</argument_list></call>
                 .<call><name>append</name><argument_list>(<argument><expr>"VALUES ('"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>hexToken</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"', 'now');"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name><name>query</name>.<name>append</name></name><argument_list>(<argument><expr>"APPLY BATCH"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>query</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** Print usage information. */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>printShuffleHelp</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"Sub-commands:"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" create           Initialize a new shuffle operation"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" ls               List pending relocations"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" clear            Clear pending relocations"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" en[able]         Enable shuffling"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" dis[able]        Disable shuffling"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%n%n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>printHelp</name><argument_list>(<argument><expr>"shuffle [options] &lt;sub-command&gt;"</expr></argument>, <argument><expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Execute.
     *
     * @param args arguments passed on the command line
     * @throws Exception when face meets palm
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>CommandLine</name></type> <name>cmd</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>cmd</name> = <call><name>processArguments</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>MissingArgumentException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <comment type="line">// Sub command argument.</comment>
        <if>if <condition>(<expr><call><name><name>cmd</name>.<name>getArgList</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> &lt; 1</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Missing sub-command argument."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printShuffleHelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>subCommand</name> <init>= <expr><call>(<name>String</name>)<argument_list>(<argument><expr><call><name><name>cmd</name>.<name>getArgList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>hostName</name> <init>= <expr>(<call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr>"host"</expr></argument>)</argument_list></call> != null) ? <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr>"host"</expr></argument>)</argument_list></call> : <name>DEFAULT_HOST</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>port</name> <init>= <expr>(<call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr>"port"</expr></argument>)</argument_list></call> != null) ? <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr>"port"</expr></argument>)</argument_list></call> : <call><name><name>Integer</name>.<name>toString</name></name><argument_list>(<argument><expr><name>DEFAULT_JMX_PORT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>thriftHost</name> <init>= <expr>(<call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr>"thrift-host"</expr></argument>)</argument_list></call> != null) ? <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr>"thrift-host"</expr></argument>)</argument_list></call> : <name>hostName</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>thriftPort</name> <init>= <expr>(<call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr>"thrift-port"</expr></argument>)</argument_list></call> != null) ? <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr>"thrift-port"</expr></argument>)</argument_list></call> : "9160"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>onlyDc</name> <init>= <expr><call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr>"only-dc"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>thriftFramed</name> <init>= <expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr>"thrift-framed"</expr></argument>)</argument_list></call> ? true : false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>andEnable</name> <init>= <expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr>"and-enable"</expr></argument>)</argument_list></call> ? true : false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>portNum</name> <init>= <expr>-1</expr></init>, <name>thriftPortNum</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>

        <comment type="line">// Parse JMX port number</comment>
        <if>if <condition>(<expr><name>port</name> != null</expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><name>portNum</name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>ferr</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>printf</name></name><argument_list>(<argument><expr>"%s is not a valid JMX port number.%n"</expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then>
        <else>else
            <expr_stmt><expr><name>portNum</name> = <name>DEFAULT_JMX_PORT</name></expr>;</expr_stmt></else></if>

        <comment type="line">// Parse Thrift port number</comment>
        <if>if <condition>(<expr><name>thriftPort</name> != null</expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><name>thriftPortNum</name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>thriftPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>ferr</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>printf</name></name><argument_list>(<argument><expr>"%s is not a valid port number.%n"</expr></argument>, <argument><expr><name>thriftPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then>
        <else>else
            <expr_stmt><expr><name>thriftPortNum</name> = 9160</expr>;</expr_stmt></else></if>

        <decl_stmt><decl><type><name>Shuffle</name></type> <name>shuffler</name> <init>= <expr>new <call><name>Shuffle</name><argument_list>(<argument><expr><name>hostName</name></expr></argument>, <argument><expr><name>portNum</name></expr></argument>, <argument><expr><name>thriftHost</name></expr></argument>, <argument><expr><name>thriftPortNum</name></expr></argument>, <argument><expr><name>thriftFramed</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <if>if <condition>(<expr><call><name><name>subCommand</name>.<name>equals</name></name><argument_list>(<argument><expr>"create"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>shuffler</name>.<name>shuffle</name></name><argument_list>(<argument><expr><name>andEnable</name></expr></argument>, <argument><expr><name>onlyDc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name><name>subCommand</name>.<name>equals</name></name><argument_list>(<argument><expr>"ls"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>shuffler</name>.<name>ls</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name><name>subCommand</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"en"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>shuffler</name>.<name>enable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name><name>subCommand</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"dis"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>shuffler</name>.<name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name><name>subCommand</name>.<name>equals</name></name><argument_list>(<argument><expr>"clear"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>shuffler</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
            <else>else
            <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Unknown subcommand: " + <name>subCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printShuffleHelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if></else></if></else></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ShuffleError</name></type> <name>err</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>shuffler</name>.<name>writeln</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>shuffler</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

        <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}

<comment type="block" format="javadoc">/** A self-contained Cassandra.Client; Closeable. */</comment>
class <expr_stmt><expr><name>CassandraClient</name> implements <name>Closeable</name>
<block>{
    <expr><name>TTransport</name> <name>transport</name></expr>;
    <expr><name><name>Cassandra</name>.<name>Client</name></name> <name>client</name></expr>;

    <expr><call><name>CassandraClient</name><argument_list>(<argument><expr><name>String</name> <name>hostName</name></expr></argument>, <argument><expr><name>int</name> <name>port</name></expr></argument>, <argument><expr><name>boolean</name> <name>framed</name></expr></argument>)</argument_list></call> throws <name>TTransportException</name>
    <block>{
        <expr><name>TSocket</name> <name>socket</name> = new <call><name>TSocket</name><argument_list>(<argument><expr><name>hostName</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;
        <expr><name>transport</name> = (<name>framed</name>) ? <name>socket</name> : new <call><name>TFastFramedTransport</name><argument_list>(<argument><expr><name>socket</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>transport</name>.<name>open</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name>client</name> = new <call><name><name>Cassandra</name>.<name>Client</name></name><argument_list>(<argument><expr>new <call><name>TBinaryProtocol</name><argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>client</name>.<name>set_cql_version</name></name><argument_list>(<argument><expr>"3.0.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block></try>}</block></expr>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        <expr_stmt/></block></catch>}</block></expr></expr_stmt>
    }

    CqlResult <expr_stmt><expr><call><name>execute_cql_query</name><argument_list>(<argument><expr><name>ByteBuffer</name> <name>cqlQuery</name></expr></argument>, <argument><expr><name>Compression</name> <name>compression</name></expr></argument>)</argument_list></call> throws <name>Exception</name>
    <block>{
        <return>return <expr><call><name><name>client</name>.<name>execute_cql3_query</name></name><argument_list>(<argument><expr><name>cqlQuery</name></expr></argument>, <argument><expr><name>compression</name></expr></argument>, <argument><expr><name><name>ConsistencyLevel</name>.<name>ONE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

    <function><type><name>String</name></type> <name>describe_partitioner</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>client</name>.<name>describe_partitioner</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name><name>List</name><argument_list>&lt;<argument><name>TokenRange</name></argument>&gt;</argument_list></name></type> <name>describe_ring</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>client</name>.<name>describe_ring</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>describe_token_map</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>client</name>.<name>describe_token_map</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>transport</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}

@<expr_stmt><expr><call><name>SuppressWarnings</name><argument_list>(<argument><expr>"serial"</expr></argument>)</argument_list></call>
<name>class</name> <name>ShuffleError</name> extends <name>Exception</name>
<block>{
    <expr><call><name>ShuffleError</name><argument_list>(<argument><expr><name>String</name> <name>msg</name></expr></argument>)</argument_list></call>
    <block>{
        <expr><call><name>super</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
    }</block></expr>
}</block></expr></expr_stmt>
</unit>
