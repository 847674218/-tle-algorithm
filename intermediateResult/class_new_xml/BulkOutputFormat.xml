<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\hadoop\BulkOutputFormat.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>hadoop</name></name>;</package>


<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>Mutation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>conf</name>.<name>Configuration</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>mapreduce</name></name>.*;</import>

<class><specifier>public</specifier> class <name>BulkOutputFormat</name> <super><extends>extends <name><name>OutputFormat</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends>
    <implements>implements <name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>mapred</name>.<name><name>OutputFormat</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></implements></super>
<block>{
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>checkOutputSpecs</name><parameter_list>(<param><decl><type><name>JobContext</name></type> <name>context</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>checkOutputSpecs</name><argument_list>(<argument><expr><call><name><name>context</name>.<name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkOutputSpecs</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>ConfigHelper</name>.<name>getOutputKeyspace</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call> == null</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"you must set the keyspace with setColumnFamily()"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>OutputCommitter</name></type> <name>getOutputCommitter</name><parameter_list>(<param><decl><type><name>TaskAttemptContext</name></type> <name>context</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{
        <return>return <expr>new <call><name>NullOutputCommitter</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** Fills the deprecated OutputFormat interface for streaming. */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>checkOutputSpecs</name><parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>fs</name>.<name>FileSystem</name></name></type> <name>filesystem</name></decl></param>, <param><decl><type><name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>mapred</name>.<name>JobConf</name></name></type> <name>job</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>checkOutputSpecs</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/** Fills the deprecated OutputFormat interface for streaming. */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>BulkRecordWriter</name></type> <name>getRecordWriter</name><parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>fs</name>.<name>FileSystem</name></name></type> <name>filesystem</name></decl></param>, <param><decl><type><name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>mapred</name>.<name>JobConf</name></name></type> <name>job</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>util</name>.<name>Progressable</name></name></type> <name>progress</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr>new <call><name>BulkRecordWriter</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr>new <call><name>Progressable</name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>BulkRecordWriter</name></type> <name>getRecordWriter</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>TaskAttemptContext</name></type> <name>context</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{
        <return>return <expr>new <call><name>BulkRecordWriter</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>NullOutputCommitter</name> <super><extends>extends <name>OutputCommitter</name></extends></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>abortTask</name><parameter_list>(<param><decl><type><name>TaskAttemptContext</name></type> <name>taskContext</name></decl></param>)</parameter_list> <block>{ }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>cleanupJob</name><parameter_list>(<param><decl><type><name>JobContext</name></type> <name>jobContext</name></decl></param>)</parameter_list> <block>{ }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>commitTask</name><parameter_list>(<param><decl><type><name>TaskAttemptContext</name></type> <name>taskContext</name></decl></param>)</parameter_list> <block>{ }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>needsTaskCommit</name><parameter_list>(<param><decl><type><name>TaskAttemptContext</name></type> <name>taskContext</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setupJob</name><parameter_list>(<param><decl><type><name>JobContext</name></type> <name>jobContext</name></decl></param>)</parameter_list> <block>{ }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setupTask</name><parameter_list>(<param><decl><type><name>TaskAttemptContext</name></type> <name>taskContext</name></decl></param>)</parameter_list> <block>{ }</block></function>
    }</block></class>
}</block></class>
</unit>
