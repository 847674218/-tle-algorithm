<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\config\KSMetaData.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>ImmutableMap</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>ObjectUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>Auth</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>UntypedResultSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryPath</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CfDef</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>KsDef</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name>.<name>Tracing</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>.*;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>KSMetaData</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>strategyClass</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>strategyOptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfMetaData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>durableWrites</name></decl>;</decl_stmt>

    <constructor><name>KSMetaData</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>strategyClass</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>strategyOptions</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>durableWrites</name></decl></param>, <param><decl><type><name><name>Iterable</name><argument_list>&lt;<argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfDefs</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>strategyClass</name></name> = <name>strategyClass</name> == null ? <name><name>NetworkTopologyStrategy</name>.<name>class</name></name> : <name>strategyClass</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>strategyOptions</name></name> = <name>strategyOptions</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfmap</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>CFMetaData</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>CFMetaData</name></type> <name>cfm</name> <range>: <expr><name>cfDefs</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>cfmap</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>cfm</name>.<name>cfName</name></name></expr></argument>, <argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <expr_stmt><expr><name><name>this</name>.<name>cfMetaData</name></name> = <call><name><name>Collections</name>.<name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>cfmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>durableWrites</name></name> = <name>durableWrites</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">// For new user created keyspaces (through CQL)</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KSMetaData</name></type> <name>newKeyspace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>strategyName</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>durableWrites</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>cls</name> <init>= <expr><call><name><name>AbstractReplicationStrategy</name>.<name>getClass</name></name><argument_list>(<argument><expr><name>strategyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>cls</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>LocalStrategy</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Unable to use given strategy class: LocalStrategy is reserved for internal use."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <return>return <expr><call><name>newKeyspace</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>durableWrites</name></expr></argument>, <argument><expr><name><name>Collections</name>.</name>&lt;<name>CFMetaData</name>&gt;<call><name>emptyList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KSMetaData</name></type> <name>newKeyspace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>strategyClass</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>durablesWrites</name></decl></param>, <param><decl><type><name><name>Iterable</name><argument_list>&lt;<argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfDefs</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>KSMetaData</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>strategyClass</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>durablesWrites</name></expr></argument>, <argument><expr><name>cfDefs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KSMetaData</name></type> <name>cloneWith</name><parameter_list>(<param><decl><type><name>KSMetaData</name></type> <name>ksm</name></decl></param>, <param><decl><type><name><name>Iterable</name><argument_list>&lt;<argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfDefs</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>KSMetaData</name><argument_list>(<argument><expr><name><name>ksm</name>.<name>name</name></name></expr></argument>, <argument><expr><name><name>ksm</name>.<name>strategyClass</name></name></expr></argument>, <argument><expr><name><name>ksm</name>.<name>strategyOptions</name></name></expr></argument>, <argument><expr><name><name>ksm</name>.<name>durableWrites</name></name></expr></argument>, <argument><expr><name>cfDefs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KSMetaData</name></type> <name>systemKeyspace</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfDefs</name> <init>= <expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>BatchlogCF</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>RangeXfersCf</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>LocalCf</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>PeersCf</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>HintsCf</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>IndexCf</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>CounterIdCf</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>SchemaKeyspacesCf</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>SchemaColumnFamiliesCf</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>SchemaColumnsCf</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>OldStatusCf</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>OldHintsCf</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>OldMigrationsCf</name></name></expr></argument>,
                                                <argument><expr><name><name>CFMetaData</name>.<name>OldSchemaCf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>KSMetaData</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_KS</name></name></expr></argument>, <argument><expr><name><name>LocalStrategy</name>.<name>class</name></name></expr></argument>, <argument><expr><name><name>Collections</name>.</name>&lt;<name>String</name></expr></argument>, <argument><expr><name>String</name>&gt;<call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>cfDefs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KSMetaData</name></type> <name>traceKeyspace</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfDefs</name> <init>= <expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>TraceSessionsCf</name></name></expr></argument>, <argument><expr><name><name>CFMetaData</name>.<name>TraceEventsCf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>KSMetaData</name><argument_list>(<argument><expr><name><name>Tracing</name>.<name>TRACE_KS</name></name></expr></argument>, <argument><expr><name><name>SimpleStrategy</name>.<name>class</name></name></expr></argument>, <argument><expr><call><name><name>ImmutableMap</name>.<name>of</name></name><argument_list>(<argument><expr>"replication_factor"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>cfDefs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KSMetaData</name></type> <name>authKeyspace</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfDefs</name> <init>= <expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>AuthUsersCf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>KSMetaData</name><argument_list>(<argument><expr><name><name>Auth</name>.<name>AUTH_KS</name></name></expr></argument>, <argument><expr><name><name>SimpleStrategy</name>.<name>class</name></name></expr></argument>, <argument><expr><call><name><name>ImmutableMap</name>.<name>of</name></name><argument_list>(<argument><expr>"replication_factor"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>cfDefs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KSMetaData</name></type> <name>testMetadata</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>strategyClass</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>strategyOptions</name></decl></param>, <param><decl><type><name>CFMetaData</name>...</type> <name>cfDefs</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>KSMetaData</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>strategyClass</name></expr></argument>, <argument><expr><name>strategyOptions</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>cfDefs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KSMetaData</name></type> <name>testMetadataNotDurable</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>strategyClass</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>strategyOptions</name></decl></param>, <param><decl><type><name>CFMetaData</name>...</type> <name>cfDefs</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>KSMetaData</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>strategyClass</name></expr></argument>, <argument><expr><name>strategyOptions</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>cfDefs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>name</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!(<name>obj</name> instanceof <name>KSMetaData</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <decl_stmt><decl><type><name>KSMetaData</name></type> <name>other</name> <init>= <expr>(<name>KSMetaData</name>)<name>obj</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>other</name>.<name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
                &amp;&amp; <call><name><name>ObjectUtils</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>strategyClass</name></name></expr></argument>, <argument><expr><name>strategyClass</name></expr></argument>)</argument_list></call>
                &amp;&amp; <call><name><name>ObjectUtils</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>strategyOptions</name></name></expr></argument>, <argument><expr><name>strategyOptions</name></expr></argument>)</argument_list></call>
                &amp;&amp; <call><name><name>other</name>.<name>cfMetaData</name>.<name>equals</name></name><argument_list>(<argument><expr><name>cfMetaData</name></expr></argument>)</argument_list></call>
                &amp;&amp; <name><name>other</name>.<name>durableWrites</name></name> == <name>durableWrites</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfMetaData</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>cfMetaData</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr>", rep strategy:"</expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr><call><name><name>strategyClass</name>.<name>getSimpleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr>"{"</expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><call><name><name>cfMetaData</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>", "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr>"}"</expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr>", strategy_options: "</expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr><call><name><name>strategyOptions</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr>", durable_writes: "</expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr><name>durableWrites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>convertOldStrategyName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>name</name>.<name>replace</name></name><argument_list>(<argument><expr>"RackUnawareStrategy"</expr></argument>, <argument><expr>"SimpleStrategy"</expr></argument>)</argument_list></call>
                   .<call><name>replace</name><argument_list>(<argument><expr>"RackAwareStrategy"</expr></argument>, <argument><expr>"OldNetworkTopologyStrategy"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>optsWithRF</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Integer</name></type> <name>rf</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ret</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>put</name></name><argument_list>(<argument><expr>"replication_factor"</expr></argument>, <argument><expr><call><name><name>rf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KSMetaData</name></type> <name>fromThrift</name><parameter_list>(<param><decl><type><name>KsDef</name></type> <name>ksd</name></decl></param>, <param><decl><type><name>CFMetaData</name>...</type> <name>cfDefs</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>cls</name> <init>= <expr><call><name><name>AbstractReplicationStrategy</name>.<name>getClass</name></name><argument_list>(<argument><expr><name><name>ksd</name>.<name>strategy_class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>cls</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>LocalStrategy</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Unable to use given strategy class: LocalStrategy is reserved for internal use."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <return>return <expr>new <call><name>KSMetaData</name><argument_list>(<argument><expr><name><name>ksd</name>.<name>name</name></name></expr></argument>,
                              <argument><expr><name>cls</name></expr></argument>,
                              <argument><expr><name><name>ksd</name>.<name>strategy_options</name></name> == null ? <name><name>Collections</name>.</name>&lt;<name>String</name></expr></argument>, <argument><expr><name>String</name>&gt;<call><name>emptyMap</name><argument_list>()</argument_list></call> : <name><name>ksd</name>.<name>strategy_options</name></name></expr></argument>,
                              <argument><expr><name><name>ksd</name>.<name>durable_writes</name></name></expr></argument>,
                              <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>cfDefs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>KsDef</name></type> <name>toThrift</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>CfDef</name></argument>&gt;</argument_list></name></type> <name>cfDefs</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>CfDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>cfMetaData</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>CFMetaData</name></type> <name>cfm</name> <range>: <expr><call><name>cfMetaData</name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <comment type="line">// Don't expose CF that cannot be correctly handle by thrift; see CASSANDRA-4377 for further details</comment>
            <if>if <condition>(<expr>!<call><name><name>cfm</name>.<name>isThriftIncompatible</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>cfDefs</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>cfm</name>.<name>toThrift</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>KsDef</name></type> <name>ksdef</name> <init>= <expr>new <call><name>KsDef</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>strategyClass</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfDefs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ksdef</name>.<name>setStrategy_options</name></name><argument_list>(<argument><expr><name>strategyOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ksdef</name>.<name>setDurable_writes</name></name><argument_list>(<argument><expr><name>durableWrites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>ksdef</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>RowMutation</name></type> <name>toSchemaUpdate</name><parameter_list>(<param><decl><type><name>KSMetaData</name></type> <name>newState</name></decl></param>, <param><decl><type><name>long</name></type> <name>modificationTimestamp</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>newState</name>.<name>toSchema</name></name><argument_list>(<argument><expr><name>modificationTimestamp</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>KSMetaData</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CFMetaData</name>.<name>isNameValid</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Keyspace name must not be empty, more than %s characters long, or contain non-alphanumeric-underscore characters (got \"%s\")"</expr></argument>, <argument><expr><name><name>Schema</name>.<name>NAME_LENGTH</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <comment type="line">// Attempt to instantiate the ARS, which will throw a ConfigException if the strategy_options aren't fully formed</comment>
        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>tmd</name> <init>= <expr><call><name><name>StorageService</name>.<name>instance</name>.<name>getTokenMetadata</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>eps</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>AbstractReplicationStrategy</name>.<name>createReplicationStrategy</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>strategyClass</name></expr></argument>, <argument><expr><name>tmd</name></expr></argument>, <argument><expr><name>eps</name></expr></argument>, <argument><expr><name>strategyOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>CFMetaData</name></type> <name>cfm</name> <range>: <expr><call><name><name>cfMetaData</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>cfm</name>.<name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>

        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>


    <function><type><specifier>public</specifier> <name>KSMetaData</name></type> <name>reloadAttributes</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Row</name></type> <name>ksDefRow</name> <init>= <expr><call><name><name>SystemTable</name>.<name>readSchemaRow</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>ksDefRow</name>.<name>cf</name></name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s not found in the schema definitions table (%s)."</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>SystemTable</name>.<name>SCHEMA_KEYSPACES_CF</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <return>return <expr><call><name>fromSchema</name><argument_list>(<argument><expr><name>ksDefRow</name></expr></argument>, <argument><expr><name><name>Collections</name>.</name>&lt;<name>CFMetaData</name>&gt;<call><name>emptyList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>RowMutation</name></type> <name>dropFromSchema</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_KS</name></name></expr></argument>, <argument><expr><call><name><name>SystemTable</name>.<name>getSchemaKSKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>delete</name></name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_KEYSPACES_CF</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>delete</name></name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_COLUMNFAMILIES_CF</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>delete</name></name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_COLUMNS_CF</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>rm</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>RowMutation</name></type> <name>toSchema</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_KS</name></name></expr></argument>, <argument><expr><call><name><name>SystemTable</name>.<name>getSchemaKSKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>rm</name>.<name>addOrGet</name></name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_KEYSPACES_CF</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>durableWrites</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr>"durable_writes"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>strategyClass</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr>"strategy_class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name>json</name><argument_list>(<argument><expr><name>strategyOptions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr>"strategy_options"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>CFMetaData</name></type> <name>cfm</name> <range>: <expr><call><name><name>cfMetaData</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>cfm</name>.<name>toSchema</name></name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <return>return <expr><name>rm</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Deserialize only Keyspace attributes without nested ColumnFamilies
     *
     * @param row Keyspace attributes in serialized form
     *
     * @return deserialized keyspace without cf_defs
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KSMetaData</name></type> <name>fromSchema</name><parameter_list>(<param><decl><type><name>Row</name></type> <name>row</name></decl></param>, <param><decl><type><name><name>Iterable</name><argument_list>&lt;<argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfms</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>UntypedResultSet</name>.<name>Row</name></name></type> <name>result</name> <init>= <expr><call><name><name>QueryProcessor</name>.<name>resultify</name></name><argument_list>(<argument><expr>"SELECT * FROM system.schema_keyspaces"</expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call>.<call><name>one</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <return>return <expr>new <call><name>KSMetaData</name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"keyspace_name"</expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>AbstractReplicationStrategy</name>.<name>getClass</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"strategy_class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name>fromJsonMap</name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"strategy_options"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>result</name>.<name>getBoolean</name></name><argument_list>(<argument><expr>"durable_writes"</expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>cfms</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Deserialize Keyspace with nested ColumnFamilies
     *
     * @param serializedKs Keyspace in serialized form
     * @param serializedCFs Collection of the serialized ColumnFamilies
     *
     * @return deserialized keyspace with cf_defs
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KSMetaData</name></type> <name>fromSchema</name><parameter_list>(<param><decl><type><name>Row</name></type> <name>serializedKs</name></decl></param>, <param><decl><type><name>Row</name></type> <name>serializedCFs</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfs</name> <init>= <expr><call><name>deserializeColumnFamilies</name><argument_list>(<argument><expr><name>serializedCFs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>fromSchema</name><argument_list>(<argument><expr><name>serializedKs</name></expr></argument>, <argument><expr><call><name><name>cfs</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Deserialize ColumnFamilies from low-level schema representation, all of them belong to the same keyspace
     *
     * @param row
     * @return map containing name of the ColumnFamily and it's metadata for faster lookup
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>deserializeColumnFamilies</name><parameter_list>(<param><decl><type><name>Row</name></type> <name>row</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>row</name>.<name>cf</name></name> == null</expr>)</condition><then>
            <return>return <expr><call><name><name>Collections</name>.<name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfms</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>CFMetaData</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>results</name> <init>= <expr><call><name><name>QueryProcessor</name>.<name>resultify</name></name><argument_list>(<argument><expr>"SELECT * FROM system.schema_columnfamilies"</expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>UntypedResultSet</name>.<name>Row</name></name></type> <name>result</name> <range>: <expr><name>results</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfm</name> <init>= <expr><call><name><name>CFMetaData</name>.<name>fromSchema</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cfms</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>cfm</name>.<name>cfName</name></name></expr></argument>, <argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <for>for (<init><decl><type><name>CFMetaData</name></type> <name>cfm</name> <range>: <expr><call><name><name>cfms</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>Row</name></type> <name>columnRow</name> <init>= <expr><call><name><name>ColumnDefinition</name>.<name>readSchema</name></name><argument_list>(<argument><expr><name><name>cfm</name>.<name>ksName</name></name></expr></argument>, <argument><expr><name><name>cfm</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <range>: <expr><call><name><name>ColumnDefinition</name>.<name>fromSchema</name></name><argument_list>(<argument><expr><name>columnRow</name></expr></argument>, <argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name>cfm</name>.<name>column_metadata</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>cd</name>.<name>name</name></name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></for>

        <return>return <expr><name>cfms</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
