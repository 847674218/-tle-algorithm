<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\filter\IDiskAtomFilter.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>ISSTableColumnIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>OnDiskAtomIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileDataInput</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Given an implementation-specific description of what columns to look for, provides methods
 * to extract the desired columns from a Memtable, SSTable, or SuperColumn.  Either the get*ColumnIterator
 * methods will be called, or filterSuperColumn, but not both on the same object.  QueryFilter
 * takes care of putting the two together if subcolumn filtering needs to be done, based on the
 * querypath that it knows (but that IFilter implementations are oblivious to).
 */</comment>
<class type="interface"><specifier>public</specifier> interface <name>IDiskAtomFilter</name>
<block>{
    <comment type="block" format="javadoc">/**
     * returns an iterator that returns columns from the given memtable
     * matching the Filter criteria in sorted order.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>OnDiskAtomIterator</name></type> <name>getMemtableColumnIterator</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get an iterator that returns columns from the given SSTable using the opened file
     * matching the Filter criteria in sorted order.
     * @param sstable
     * @param file Already opened file data input, saves us opening another one
     * @param key The key of the row we are about to iterate over
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>ISSTableColumnIterator</name></type> <name>getSSTableColumnIterator</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>FileDataInput</name></type> <name>file</name></decl></param>, <param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>, <param><decl><type><name>RowIndexEntry</name></type> <name>indexEntry</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * returns an iterator that returns columns from the given SSTable
     * matching the Filter criteria in sorted order.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>ISSTableColumnIterator</name></type> <name>getSSTableColumnIterator</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * collects columns from reducedColumns into returnCF.  Termination is determined
     * by the filter code, which should have some limit on the number of columns
     * to avoid running out of memory on large rows.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>collectReducedColumns</name><parameter_list>(<param><decl><type><name>IColumnContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>reducedColumns</name></decl></param>, <param><decl><type><name>int</name></type> <name>gcBefore</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * subcolumns of a supercolumn are unindexed, so to pick out parts of those we operate in-memory.
     * @param superColumn may be modified by filtering op.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>SuperColumn</name></type> <name>filterSuperColumn</name><parameter_list>(<param><decl><type><name>SuperColumn</name></type> <name>superColumn</name></decl></param>, <param><decl><type><name>int</name></type> <name>gcBefore</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>getColumnComparator</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isReversed</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>updateColumnsLimit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>newLimit</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>getLiveCount</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>)</parameter_list>;</function_decl>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Serializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>IDiskAtomFilter</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>Serializer</name></type> <name>instance</name> <init>= <expr>new <call><name>Serializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>IDiskAtomFilter</name></type> <name>filter</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr><name>filter</name> instanceof <name>SliceQueryFilter</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeByte</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>SliceQueryFilter</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr>(<name>SliceQueryFilter</name>)<name>filter</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeByte</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>NamesQueryFilter</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr>(<name>NamesQueryFilter</name>)<name>filter</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>IDiskAtomFilter</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier>public</specifier> <name>IDiskAtomFilter</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>dis</name>.<name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>type</name> == 0</expr>)</condition><then>
            <block>{
                <return>return <expr><call><name><name>SliceQueryFilter</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else>else
            <block>{
                <assert>assert <expr><name>type</name> == 1</expr>;</assert>
                <return>return <expr><call><name><name>NamesQueryFilter</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>IDiskAtomFilter</name></type> <name>filter</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>filter</name> instanceof <name>SliceQueryFilter</name></expr>)</condition><then>
                <expr_stmt><expr><name>size</name> += <call><name><name>SliceQueryFilter</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr>(<name>SliceQueryFilter</name>)<name>filter</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>size</name> += <call><name><name>NamesQueryFilter</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr>(<name>NamesQueryFilter</name>)<name>filter</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            <return>return <expr><name>size</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
