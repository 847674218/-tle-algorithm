<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\index\composites\CompositesIndex.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>index</name>.<name>composites</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ColumnDefinition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>index</name>.<name>AbstractSimplePerColumnSecondaryIndex</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>index</name>.<name>SecondaryIndex</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>index</name>.<name>SecondaryIndexSearcher</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ConfigurationException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Implements a secondary index for a column family using a second column family
 * in which the row keys are indexed values, and column names are base row keys.
 */</comment>
<class><specifier>public</specifier> class <name>CompositesIndex</name> <super><extends>extends <name>AbstractSimplePerColumnSecondaryIndex</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFIX_SIZE_OPTION</name> <init>= <expr>"prefix_size"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CompositeType</name></type> <name>indexComparator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>prefixSize</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<param><decl><type><name>ColumnDefinition</name></type> <name>columnDef</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><call><name><name>baseCfs</name>.<name>getComparator</name></name><argument_list>()</argument_list></call> instanceof <name>CompositeType</name></expr>;</assert>

        <try>try
        <block>{
            <expr_stmt><expr><name>prefixSize</name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>columnDef</name>.<name>getIndexOptions</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>PREFIX_SIZE_OPTION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// Shouldn't happen since validateOptions must have been called</comment>
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <expr_stmt><expr><name>indexComparator</name> = (<name>CompositeType</name>)<call><name><name>SecondaryIndex</name>.<name>getIndexComparator</name></name><argument_list>(<argument><expr><name><name>baseCfs</name>.<name>metadata</name></name></expr></argument>, <argument><expr><name>columnDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>ByteBuffer</name></type> <name>makeIndexColumnName</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>CompositeType</name></type> <name>baseComparator</name> <init>= <expr>(<name>CompositeType</name>)<call><name><name>baseCfs</name>.<name>getComparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name><index>[]</index></type> <name>components</name> <init>= <expr><call><name><name>baseComparator</name>.<name>split</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>CompositeType</name>.<name>Builder</name></name></type> <name>builder</name> <init>= <expr>new <call><name><name>CompositeType</name>.<name>Builder</name></name><argument_list>(<argument><expr><name>indexComparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>prefixSize</name></expr></argument>, <argument><expr><name><name>components</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <expr_stmt><expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>components</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><call><name><name>builder</name>.<name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>AbstractType</name></type> <name>getExpressionComparator</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>CompositeType</name></type> <name>baseComparator</name> <init>= <expr>(<name>CompositeType</name>)<call><name><name>baseCfs</name>.<name>getComparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>baseComparator</name>.<name>types</name>.<name>get</name></name><argument_list>(<argument><expr><name>prefixSize</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>indexes</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>columnDef</name> <init>= <expr><call><name><name>columnDefs</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CompositeType</name></type> <name>baseComparator</name> <init>= <expr>(<name>CompositeType</name>)<call><name><name>baseCfs</name>.<name>getComparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name><index>[]</index></type> <name>components</name> <init>= <expr><call><name><name>baseComparator</name>.<name>split</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comp</name> <init>= <expr><call><name><name>baseCfs</name>.<name>metadata</name>.<name>getColumnDefinitionComparator</name></name><argument_list>(<argument><expr><name>columnDef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name><name>components</name>.<name>length</name></name> &gt; <name><name>columnDef</name>.<name>componentIndex</name></name>
            &amp;&amp; <call><name><name>comp</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>components</name><index>[<expr><name><name>columnDef</name>.<name>componentIndex</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>columnDef</name>.<name>name</name></name></expr></argument>)</argument_list></call> == 0</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>SecondaryIndexSearcher</name></type> <name>createSecondaryIndexSearcher</name><parameter_list>(<param><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>CompositesSearcher</name><argument_list>(<argument><expr><name><name>baseCfs</name>.<name>indexManager</name></name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>prefixSize</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateOptions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>columnDef</name> <init>= <expr><call><name><name>columnDefs</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>option</name> <init>= <expr><call><name><name>columnDef</name>.<name>getIndexOptions</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>PREFIX_SIZE_OPTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>option</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Missing option " + <name>PREFIX_SIZE_OPTION</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid non integer value for option %s (got '%s')"</expr></argument>, <argument><expr><name>PREFIX_SIZE_OPTION</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
