<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\thrift\TBinaryProtocol.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>protocol</name>.<name>TProtocol</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TTransport</name></name>;</import>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * TODO
 * This was added to support writeBinary on direct buffers for CASSANDRA-1714;
 * we can remove it once we upgrade to Thrift 0.7, which incorporates the patch (THRIFT-883).
 */</comment>

<class><specifier>public</specifier> class <name>TBinaryProtocol</name> <super><extends>extends <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>protocol</name>.<name>TBinaryProtocol</name></name></extends></super>
<block>{

    <constructor><specifier>public</specifier> <name>TBinaryProtocol</name><parameter_list>(<param><decl><type><name>TTransport</name></type> <name>trans</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>TBinaryProtocol</name><parameter_list>(<param><decl><type><name>TTransport</name></type> <name>trans</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>strictRead</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>strictWrite</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>strictRead_</name> = <name>strictRead</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>strictWrite_</name> = <name>strictWrite</name></expr>;</expr_stmt>
    }</block></constructor>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Factory</name> <super><extends>extends <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>protocol</name>.<name>TBinaryProtocol</name>.<name>Factory</name></name></extends></super>
    <block>{
        <constructor><specifier>public</specifier> <name>Factory</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>public</specifier> <name>Factory</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>strictRead</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>strictWrite</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>strictRead</name></expr></argument>, <argument><expr><name>strictWrite</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>public</specifier> <name>Factory</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>strictRead</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>strictWrite</name></decl></param>, <param><decl><type><name>int</name></type> <name>readLength</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>strictRead</name></expr></argument>, <argument><expr><name>strictWrite</name></expr></argument>, <argument><expr><name>readLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>TProtocol</name></type> <name>getProtocol</name><parameter_list>(<param><decl><type><name>TTransport</name></type> <name>trans</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>TBinaryProtocol</name></type> <name>protocol</name> <init>= <expr>new <call><name>TBinaryProtocol</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>strictRead_</name></expr></argument>, <argument><expr><name>strictWrite_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>readLength_</name> != 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>protocol</name>.<name>setReadLength</name></name><argument_list>(<argument><expr><name>readLength_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return>return <expr><name>protocol</name></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>writeBinary</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>writeI32</name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>buffer</name>.<name>hasArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>trans_</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>position</name></name><argument_list>()</argument_list></call> + <call><name><name>buffer</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>buffer</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>buffer</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>buffer</name>.<name>limit</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>j</name>++</expr>]</index></name> = <call><name><name>buffer</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><call><name><name>trans_</name>.<name>write</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class></unit>
