<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\hadoop\ConfigHelper.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>hadoop</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name>.<name>CompressionParameters</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Hex</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>conf</name>.<name>Configuration</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TBase</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TDeserializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TSocket</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TTransport</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TTransportException</name></name>;</import>

<import>import <name><name>javax</name>.<name>security</name>.<name>auth</name>.<name>login</name>.<name>LoginException</name></name>;</import>


<class><specifier>public</specifier> class <name>ConfigHelper</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_PARTITIONER_CONFIG</name> <init>= <expr>"cassandra.input.partitioner.class"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT_PARTITIONER_CONFIG</name> <init>= <expr>"cassandra.output.partitioner.class"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_KEYSPACE_CONFIG</name> <init>= <expr>"cassandra.input.keyspace"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT_KEYSPACE_CONFIG</name> <init>= <expr>"cassandra.output.keyspace"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_KEYSPACE_USERNAME_CONFIG</name> <init>= <expr>"cassandra.input.keyspace.username"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_KEYSPACE_PASSWD_CONFIG</name> <init>= <expr>"cassandra.input.keyspace.passwd"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT_KEYSPACE_USERNAME_CONFIG</name> <init>= <expr>"cassandra.output.keyspace.username"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT_KEYSPACE_PASSWD_CONFIG</name> <init>= <expr>"cassandra.output.keyspace.passwd"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_COLUMNFAMILY_CONFIG</name> <init>= <expr>"cassandra.input.columnfamily"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT_COLUMNFAMILY_CONFIG</name> <init>= <expr>"mapreduce.output.basename"</expr></init></decl>;</decl_stmt> <comment type="line">//this must == OutputFormat.BASE_OUTPUT_NAME</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_PREDICATE_CONFIG</name> <init>= <expr>"cassandra.input.predicate"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_KEYRANGE_CONFIG</name> <init>= <expr>"cassandra.input.keyRange"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_SPLIT_SIZE_CONFIG</name> <init>= <expr>"cassandra.input.split.size"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_WIDEROWS_CONFIG</name> <init>= <expr>"cassandra.input.widerows"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_SPLIT_SIZE</name> <init>= <expr>64 * 1024</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>RANGE_BATCH_SIZE_CONFIG</name> <init>= <expr>"cassandra.range.batch.size"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_RANGE_BATCH_SIZE</name> <init>= <expr>4096</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_THRIFT_PORT</name> <init>= <expr>"cassandra.input.thrift.port"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT_THRIFT_PORT</name> <init>= <expr>"cassandra.output.thrift.port"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_INITIAL_THRIFT_ADDRESS</name> <init>= <expr>"cassandra.input.thrift.address"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT_INITIAL_THRIFT_ADDRESS</name> <init>= <expr>"cassandra.output.thrift.address"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>READ_CONSISTENCY_LEVEL</name> <init>= <expr>"cassandra.consistencylevel.read"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WRITE_CONSISTENCY_LEVEL</name> <init>= <expr>"cassandra.consistencylevel.write"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT_COMPRESSION_CLASS</name> <init>= <expr>"cassandra.output.compression.class"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT_COMPRESSION_CHUNK_LENGTH</name> <init>= <expr>"cassandra.output.compression.length"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_TRANSPORT_FACTORY_CLASS</name> <init>= <expr>"cassandra.input.transport.factory.class"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT_TRANSPORT_FACTORY_CLASS</name> <init>= <expr>"cassandra.output.transport.factory.class"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>ConfigHelper</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * Set the keyspace and column family for the input of this job.
     *
     * @param conf         Job configuration you are about to run
     * @param keyspace
     * @param columnFamily
     * @param widerows
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputColumnFamily</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>widerows</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>keyspace</name> == null</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"keyspace may not be null"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>columnFamily</name> == null</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"columnfamily may not be null"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_KEYSPACE_CONFIG</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_COLUMNFAMILY_CONFIG</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_WIDEROWS_CONFIG</name></expr></argument>, <argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>widerows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set the keyspace and column family for the input of this job.
     *
     * @param conf         Job configuration you are about to run
     * @param keyspace
     * @param columnFamily
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputColumnFamily</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>setInputColumnFamily</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set the keyspace for the output of this job.
     *
     * @param conf Job configuration you are about to run
     * @param keyspace
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOutputKeyspace</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>keyspace</name> == null</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"keyspace may not be null"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>OUTPUT_KEYSPACE_CONFIG</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set the column family for the output of this job.
     *
     * @param conf         Job configuration you are about to run
     * @param columnFamily
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOutputColumnFamily</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list>
    <block>{
    	<expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>OUTPUT_COLUMNFAMILY_CONFIG</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set the column family for the output of this job.
     *
     * @param conf         Job configuration you are about to run
     * @param keyspace
     * @param columnFamily
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOutputColumnFamily</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list>
    <block>{
    	<expr_stmt><expr><call><name>setOutputKeyspace</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>setOutputColumnFamily</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * The number of rows to request with each get range slices request.
     * Too big and you can either get timeouts when it takes Cassandra too
     * long to fetch all the data. Too small and the performance
     * will be eaten up by the overhead of each request.
     *
     * @param conf      Job configuration you are about to run
     * @param batchsize Number of rows to request each time
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRangeBatchSize</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>int</name></type> <name>batchsize</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>setInt</name></name><argument_list>(<argument><expr><name>RANGE_BATCH_SIZE_CONFIG</name></expr></argument>, <argument><expr><name>batchsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * The number of rows to request with each get range slices request.
     * Too big and you can either get timeouts when it takes Cassandra too
     * long to fetch all the data. Too small and the performance
     * will be eaten up by the overhead of each request.
     *
     * @param conf Job configuration you are about to run
     * @return Number of rows to request each time
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRangeBatchSize</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>conf</name>.<name>getInt</name></name><argument_list>(<argument><expr><name>RANGE_BATCH_SIZE_CONFIG</name></expr></argument>, <argument><expr><name>DEFAULT_RANGE_BATCH_SIZE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set the size of the input split.
     * This affects the number of maps created, if the number is too small
     * the overhead of each map will take up the bulk of the job time.
     *
     * @param conf      Job configuration you are about to run
     * @param splitsize Size of the input split
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputSplitSize</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>int</name></type> <name>splitsize</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>setInt</name></name><argument_list>(<argument><expr><name>INPUT_SPLIT_SIZE_CONFIG</name></expr></argument>, <argument><expr><name>splitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInputSplitSize</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>conf</name>.<name>getInt</name></name><argument_list>(<argument><expr><name>INPUT_SPLIT_SIZE_CONFIG</name></expr></argument>, <argument><expr><name>DEFAULT_SPLIT_SIZE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set the predicate that determines what columns will be selected from each row.
     *
     * @param conf      Job configuration you are about to run
     * @param predicate
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputSlicePredicate</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_PREDICATE_CONFIG</name></expr></argument>, <argument><expr><call><name>thriftToString</name><argument_list>(<argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SlicePredicate</name></type> <name>getInputSlicePredicate</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>INPUT_PREDICATE_CONFIG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>s</name> == null ? null : <call><name>predicateFromString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>thriftToString</name><parameter_list>(<param><decl><type><name>TBase</name></type> <name>object</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>object</name> != null</expr>;</assert>
        <comment type="line">// this is so awful it's kind of cool!</comment>
        <decl_stmt><decl><type><name>TSerializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>TSerializer</name><argument_list>(<argument><expr>new <call><name><name>TBinaryProtocol</name>.<name>Factory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <return>return <expr><call><name><name>Hex</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><call><name><name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>TException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>SlicePredicate</name></type> <name>predicateFromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>st</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>st</name> != null</expr>;</assert>
        <decl_stmt><decl><type><name>TDeserializer</name></type> <name>deserializer</name> <init>= <expr>new <call><name>TDeserializer</name><argument_list>(<argument><expr>new <call><name><name>TBinaryProtocol</name>.<name>Factory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SlicePredicate</name></type> <name>predicate</name> <init>= <expr>new <call><name>SlicePredicate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>deserializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>predicate</name></expr></argument>, <argument><expr><call><name><name>Hex</name>.<name>hexToBytes</name></name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>TException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>predicate</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set the KeyRange to limit the rows.
     * @param conf Job configuration you are about to run
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputRange</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>startToken</name></decl></param>, <param><decl><type><name>String</name></type> <name>endToken</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>KeyRange</name></type> <name>range</name> <init>= <expr>new <call><name>KeyRange</name><argument_list>()</argument_list></call>.<call><name>setStart_token</name><argument_list>(<argument><expr><name>startToken</name></expr></argument>)</argument_list></call>.<call><name>setEnd_token</name><argument_list>(<argument><expr><name>endToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_KEYRANGE_CONFIG</name></expr></argument>, <argument><expr><call><name>thriftToString</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set the KeyRange to limit the rows.
     * @param conf Job configuration you are about to run
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputRange</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>startToken</name></decl></param>, <param><decl><type><name>String</name></type> <name>endToken</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>IndexExpression</name></argument>&gt;</argument_list></name></type> <name>filter</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>KeyRange</name></type> <name>range</name> <init>= <expr>new <call><name>KeyRange</name><argument_list>()</argument_list></call>.<call><name>setStart_token</name><argument_list>(<argument><expr><name>startToken</name></expr></argument>)</argument_list></call>.<call><name>setEnd_token</name><argument_list>(<argument><expr><name>endToken</name></expr></argument>)</argument_list></call>.<call><name>setRow_filter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_KEYRANGE_CONFIG</name></expr></argument>, <argument><expr><call><name>thriftToString</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set the KeyRange to limit the rows.
     * @param conf Job configuration you are about to run
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputRange</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>IndexExpression</name></argument>&gt;</argument_list></name></type> <name>filter</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>KeyRange</name></type> <name>range</name> <init>= <expr>new <call><name>KeyRange</name><argument_list>()</argument_list></call>.<call><name>setRow_filter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_KEYRANGE_CONFIG</name></expr></argument>, <argument><expr><call><name>thriftToString</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/** may be null if unset */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KeyRange</name></type> <name>getInputKeyRange</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>INPUT_KEYRANGE_CONFIG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>str</name> == null ? null : <call><name>keyRangeFromString</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>KeyRange</name></type> <name>keyRangeFromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>st</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>st</name> != null</expr>;</assert>
        <decl_stmt><decl><type><name>TDeserializer</name></type> <name>deserializer</name> <init>= <expr>new <call><name>TDeserializer</name><argument_list>(<argument><expr>new <call><name><name>TBinaryProtocol</name>.<name>Factory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>KeyRange</name></type> <name>keyRange</name> <init>= <expr>new <call><name>KeyRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>deserializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>keyRange</name></expr></argument>, <argument><expr><call><name><name>Hex</name>.<name>hexToBytes</name></name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>TException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>keyRange</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getInputKeyspace</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>INPUT_KEYSPACE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getOutputKeyspace</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>OUTPUT_KEYSPACE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputKeyspaceUserNameAndPassword</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>username</name></decl></param>, <param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>setInputKeyspaceUserName</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setInputKeyspacePassword</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputKeyspaceUserName</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>username</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_KEYSPACE_USERNAME_CONFIG</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getInputKeyspaceUserName</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
    	<return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>INPUT_KEYSPACE_USERNAME_CONFIG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputKeyspacePassword</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_KEYSPACE_PASSWD_CONFIG</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getInputKeyspacePassword</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
    	<return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>INPUT_KEYSPACE_PASSWD_CONFIG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOutputKeyspaceUserNameAndPassword</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>username</name></decl></param>, <param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>setOutputKeyspaceUserName</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setOutputKeyspacePassword</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOutputKeyspaceUserName</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>username</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>OUTPUT_KEYSPACE_USERNAME_CONFIG</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getOutputKeyspaceUserName</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
    	<return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>OUTPUT_KEYSPACE_USERNAME_CONFIG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOutputKeyspacePassword</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>OUTPUT_KEYSPACE_PASSWD_CONFIG</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getOutputKeyspacePassword</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
    	<return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>OUTPUT_KEYSPACE_PASSWD_CONFIG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getInputColumnFamily</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>INPUT_COLUMNFAMILY_CONFIG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getOutputColumnFamily</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
    	<if>if <condition>(<expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>OUTPUT_COLUMNFAMILY_CONFIG</name></expr></argument>)</argument_list></call> != null</expr>)</condition><then>
    		<return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>OUTPUT_COLUMNFAMILY_CONFIG</name></expr></argument>)</argument_list></call></expr>;</return></then>
    	<else>else
    		<throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"You must set the output column family using either setOutputColumnFamily or by adding a named output with MultipleOutputs"</expr></argument>)</argument_list></call></expr>;</throw></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getInputIsWide</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Boolean</name>.<name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>INPUT_WIDEROWS_CONFIG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getReadConsistencyLevel</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>READ_CONSISTENCY_LEVEL</name></expr></argument>, <argument><expr>"ONE"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getWriteConsistencyLevel</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>WRITE_CONSISTENCY_LEVEL</name></expr></argument>, <argument><expr>"ONE"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInputRpcPort</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>INPUT_THRIFT_PORT</name></expr></argument>, <argument><expr>"9160"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputRpcPort</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>port</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_THRIFT_PORT</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getInputInitialAddress</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>INPUT_INITIAL_THRIFT_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputInitialAddress</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>address</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_INITIAL_THRIFT_ADDRESS</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputPartitioner</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_PARTITIONER_CONFIG</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IPartitioner</name></type> <name>getInputPartitioner</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>FBUtilities</name>.<name>newPartitioner</name></name><argument_list>(<argument><expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>INPUT_PARTITIONER_CONFIG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getOutputRpcPort</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>OUTPUT_THRIFT_PORT</name></expr></argument>, <argument><expr>"9160"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOutputRpcPort</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>port</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>OUTPUT_THRIFT_PORT</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getOutputInitialAddress</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>OUTPUT_INITIAL_THRIFT_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOutputInitialAddress</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>address</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>OUTPUT_INITIAL_THRIFT_ADDRESS</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOutputPartitioner</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>OUTPUT_PARTITIONER_CONFIG</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IPartitioner</name></type> <name>getOutputPartitioner</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>FBUtilities</name>.<name>newPartitioner</name></name><argument_list>(<argument><expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>OUTPUT_PARTITIONER_CONFIG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getOutputCompressionClass</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>OUTPUT_COMPRESSION_CLASS</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getOutputCompressionChunkLength</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>OUTPUT_COMPRESSION_CHUNK_LENGTH</name></expr></argument>, <argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name><name>CompressionParameters</name>.<name>DEFAULT_CHUNK_LENGTH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOutputCompressionClass</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>OUTPUT_COMPRESSION_CLASS</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOutputCompressionChunkLength</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>length</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>OUTPUT_COMPRESSION_CHUNK_LENGTH</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParameters</name></type> <name>getOutputCompressionParamaters</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name>getOutputCompressionClass</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call> == null</expr>)</condition><then>
            <return>return <expr>new <call><name>CompressionParameters</name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</return></then></if>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>options</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>CompressionParameters</name>.<name>SSTABLE_COMPRESSION</name></name></expr></argument>, <argument><expr><call><name>getOutputCompressionClass</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>CompressionParameters</name>.<name>CHUNK_LENGTH_KB</name></name></expr></argument>, <argument><expr><call><name>getOutputCompressionChunkLength</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <return>return <expr><call><name><name>CompressionParameters</name>.<name>create</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Cassandra</name>.<name>Client</name></name></type> <name>getClientFromInputAddressList</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name>getClientFromAddressList</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><call><name><name>ConfigHelper</name>.<name>getInputInitialAddress</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call>.<call><name>split</name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ConfigHelper</name>.<name>getInputRpcPort</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Cassandra</name>.<name>Client</name></name></type> <name>getClientFromOutputAddressList</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name>getClientFromAddressList</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><call><name><name>ConfigHelper</name>.<name>getOutputInitialAddress</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call>.<call><name>split</name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ConfigHelper</name>.<name>getOutputRpcPort</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Cassandra</name>.<name>Client</name></name></type> <name>getClientFromAddressList</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>addresses</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Cassandra</name>.<name>Client</name></name></type> <name>client</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>IOException</name></argument>&gt;</argument_list></name></type> <name>exceptions</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>IOException</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>String</name></type> <name>address</name> <range>: <expr><name>addresses</name></expr></range></decl></init>)
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><name>client</name> = <call><name>createConnection</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>exceptions</name>.<name>add</name></name><argument_list>(<argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></for>
        <if>if <condition>(<expr><name>client</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"failed to connect to any initial addresses"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>IOException</name></type> <name>ioe</name> <range>: <expr><name>exceptions</name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <throw>throw <expr><call><name><name>exceptions</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>exceptions</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>client</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Cassandra</name>.<name>Client</name></name></type> <name>createConnection</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>host</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>port</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>TSocket</name></type> <name>socket</name> <init>= <expr>new <call><name>TSocket</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TTransport</name></type> <name>transport</name> <init>= <expr><call><name>getInputTransportFactory</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call>.<call><name>openTransport</name><argument_list>(<argument><expr><name>socket</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name><name>Cassandra</name>.<name>Client</name></name><argument_list>(<argument><expr>new <call><name>TBinaryProtocol</name><argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>LoginException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Unable to login to server " + <name>host</name> + ":" + <name>port</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>TTransportException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Unable to connect to server " + <name>host</name> + ":" + <name>port</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ITransportFactory</name></type> <name>getInputTransportFactory</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getTransportFactory</name><argument_list>(<argument><expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>INPUT_TRANSPORT_FACTORY_CLASS</name></expr></argument>, <argument><expr><call><name><name>TFramedTransportFactory</name>.<name><name>class</name>.<name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInputTransportFactoryClass</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>INPUT_TRANSPORT_FACTORY_CLASS</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ITransportFactory</name></type> <name>getOutputTransportFactory</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getTransportFactory</name><argument_list>(<argument><expr><call><name><name>conf</name>.<name>get</name></name><argument_list>(<argument><expr><name>OUTPUT_TRANSPORT_FACTORY_CLASS</name></expr></argument>, <argument><expr><call><name><name>TFramedTransportFactory</name>.<name><name>class</name>.<name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOutputTransportFactoryClass</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>conf</name>.<name>set</name></name><argument_list>(<argument><expr><name>OUTPUT_TRANSPORT_FACTORY_CLASS</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ITransportFactory</name></type> <name>getTransportFactory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>factoryClassName</name></decl></param>)</parameter_list> <block>{
        <try>try
        <block>{
            <return>return <expr>(<name>ITransportFactory</name>) <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>factoryClassName</name></expr></argument>)</argument_list></call>.<call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Failed to instantiate transport factory:" + <name>factoryClassName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
