<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\obs\OffHeapBitSet.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>obs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name>.<name>RefCountedMemory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>Memory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Off-heap bitset,
 * file compatible with OpeBitSet
 */</comment>
<class><specifier>public</specifier> class <name>OffHeapBitSet</name> <super><implements>implements <name>IBitSet</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Memory</name></type> <name>bytes</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>OffHeapBitSet</name><parameter_list>(<param><decl><type><name>long</name></type> <name>numBits</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// OpenBitSet.bits2words calculation is there for backward compatibility.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>byteCount</name> <init>= <expr><call><name><name>OpenBitSet</name>.<name>bits2words</name></name><argument_list>(<argument><expr><name>numBits</name></expr></argument>)</argument_list></call> * 8</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>bytes</name> = <call><name><name>RefCountedMemory</name>.<name>allocate</name></name><argument_list>(<argument><expr><name>byteCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// flush/clear the existing memory.</comment>
        <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>OffHeapBitSet</name><parameter_list>(<param><decl><type><name>Memory</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>bytes</name></name> = <name>bytes</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>capacity</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>bytes</name>.<name>size</name></name><argument_list>()</argument_list></call> * 8</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>get</name><parameter_list>(<param><decl><type><name>long</name></type> <name>index</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><name>index</name> &gt;&gt; 3</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>bit</name> <init>= <expr><name>index</name> &amp; 0x7</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bitmask</name> <init>= <expr>0x1 &lt;&lt; <name>bit</name></expr></init></decl>;</decl_stmt>
        <return>return <expr>((<call><name><name>bytes</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> &amp; 0xFF) &amp; <name>bitmask</name>) != 0</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<param><decl><type><name>long</name></type> <name>index</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><name>index</name> &gt;&gt; 3</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>bit</name> <init>= <expr><name>index</name> &amp; 0x7</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bitmask</name> <init>= <expr>0x1 &lt;&lt; <name>bit</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bytes</name>.<name>setByte</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr><name>bitmask</name> | <call><name><name>bytes</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<param><decl><type><name>long</name></type> <name>offset</name></decl></param>, <param><decl><type><name>byte</name></type> <name>b</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>bytes</name>.<name>setByte</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>(<param><decl><type><name>long</name></type> <name>index</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><name>index</name> &gt;&gt; 3</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>bit</name> <init>= <expr><name>index</name> &amp; 0x7</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bitmask</name> <init>= <expr>0x1 &lt;&lt; <name>bit</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nativeByte</name> <init>= <expr>(<call><name><name>bytes</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> &amp; 0xFF)</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>nativeByte</name> &amp;= ~<name>bitmask</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bytes</name>.<name>setByte</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>byte</name>) <name>nativeByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>bytes</name>.<name>setMemory</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>bytes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>byte</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>bytes</name>.<name>size</name></name><argument_list>()</argument_list></call> / 8</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>long</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>bytes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>value</name> <init>= <expr>((<call><name><name>bytes</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>)</argument_list></call> &amp; 0xff) &lt;&lt; 0) 
                       + ((<call><name><name>bytes</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>)</argument_list></call> &amp; 0xff) &lt;&lt; 8)
                       + ((<call><name><name>bytes</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>)</argument_list></call> &amp; 0xff) &lt;&lt; 16)
                       + (<call>(<name>long</name>) <argument_list>(<argument><expr><call><name><name>bytes</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>)</argument_list></call> &amp; 0xff</expr></argument>)</argument_list></call> &lt;&lt; 24)
                       + (<call>(<name>long</name>) <argument_list>(<argument><expr><call><name><name>bytes</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>)</argument_list></call> &amp; 0xff</expr></argument>)</argument_list></call> &lt;&lt; 32)
                       + (<call>(<name>long</name>) <argument_list>(<argument><expr><call><name><name>bytes</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>)</argument_list></call> &amp; 0xff</expr></argument>)</argument_list></call> &lt;&lt; 40)
                       + (<call>(<name>long</name>) <argument_list>(<argument><expr><call><name><name>bytes</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>)</argument_list></call> &amp; 0xff</expr></argument>)</argument_list></call> &lt;&lt; 48)
                       + ((<name>long</name>) <call><name><name>bytes</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>)</argument_list></call> &lt;&lt; 56)</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeLong</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>TypeSizes</name></type> <name>type</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>type</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>int</name>) <call><name><name>bytes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + <call><name><name>bytes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>OffHeapBitSet</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>byteCount</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call> * 8</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Memory</name></type> <name>memory</name> <init>= <expr><call><name><name>RefCountedMemory</name>.<name>allocate</name></name><argument_list>(<argument><expr><name>byteCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>byteCount</name></expr>;</condition><incr/>)
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>v</name> <init>= <expr><call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>memory</name>.<name>setByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>, <argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr><name>v</name> &gt;&gt;&gt; 0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>memory</name>.<name>setByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>, <argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr><name>v</name> &gt;&gt;&gt; 8</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>memory</name>.<name>setByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>, <argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr><name>v</name> &gt;&gt;&gt; 16</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>memory</name>.<name>setByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>, <argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr><name>v</name> &gt;&gt;&gt; 24</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>memory</name>.<name>setByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>, <argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr><name>v</name> &gt;&gt;&gt; 32</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>memory</name>.<name>setByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>, <argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr><name>v</name> &gt;&gt;&gt; 40</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>memory</name>.<name>setByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>, <argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr><name>v</name> &gt;&gt;&gt; 48</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>memory</name>.<name>setByte</name></name><argument_list>(<argument><expr><name>i</name>++</expr></argument>, <argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr><name>v</name> &gt;&gt;&gt; 56</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr>new <call><name>OffHeapBitSet</name><argument_list>(<argument><expr><name>memory</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>bytes</name>.<name>free</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>o</name></expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then></if>
        <if>if <condition>(<expr>!(<name>o</name> instanceof <name>OffHeapBitSet</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <decl_stmt><decl><type><name>OffHeapBitSet</name></type> <name>b</name> <init>= <expr>(<name>OffHeapBitSet</name>) <name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>bytes</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>b</name>.<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// Similar to open bitset.</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>h</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>long</name></type> <name>i</name> <init>= <expr><call><name><name>bytes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition><incr/>)
        <block>{
            <expr_stmt><expr><name>h</name> ^= <call><name><name>bytes</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>h</name> = (<name>h</name> &lt;&lt; 1) | (<name>h</name> &gt;&gt;&gt; 63)</expr>;</expr_stmt> <comment type="line">// rotate left</comment>
        }</block></for>
        <return>return <expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>h</name> &gt;&gt; 32) ^ <name>h</name></expr></argument>)</argument_list></call> + 0x98761234</expr>;</return>
    }</block></function>
}</block></class>
</unit>
