<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\messages\StartupMessage.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffers</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>ClientState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>QueryState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>SemanticVersion</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The initial message of the protocol.
 * Sets up a number of connection options.
 */</comment>
<class><specifier>public</specifier> class <name>StartupMessage</name> <super><extends>extends <name><name>Message</name>.<name>Request</name></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CQL_VERSION</name> <init>= <expr>"CQL_VERSION"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMPRESSION</name> <init>= <expr>"COMPRESSION"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>StartupMessage</name></argument>&gt;</argument_list></name></name></type> <name>codec</name> <init>= <expr>new <class><super><name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>StartupMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>StartupMessage</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>StartupMessage</name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>readStringMap</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>StartupMessage</name></type> <name>msg</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>cb</name> <init>= <expr><call><name><name>ChannelBuffers</name>.<name>dynamicBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>CBUtil</name>.<name>writeStringMap</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name><name>msg</name>.<name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>cb</name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>StartupMessage</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Message</name>.<name>Type</name>.<name>STARTUP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>options</name></name> = <name>options</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>codec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Message</name>.<name>Response</name></name></type> <name>execute</name><parameter_list>(<param><decl><type><name>QueryState</name></type> <name>state</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name><name>state</name>.<name>getClientState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cqlVersion</name> <init>= <expr><call><name><name>options</name>.<name>get</name></name><argument_list>(<argument><expr><name>CQL_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cqlVersion</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr>"Missing value CQL_VERSION in STARTUP message"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <try>try 
        <block>{
            <expr_stmt><expr><call><name><name>cState</name>.<name>setCQLVersion</name></name><argument_list>(<argument><expr><name>cqlVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <if>if <condition>(<expr><call><name><name>cState</name>.<name>getCQLVersion</name></name><argument_list>()</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr>new <call><name>SemanticVersion</name><argument_list>(<argument><expr>"2.99.0"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"CQL version %s is not supported by the binary protocol (supported version are &gt;= 3.0.0)"</expr></argument>, <argument><expr><name>cqlVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <if>if <condition>(<expr><call><name><name>options</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>COMPRESSION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>compression</name> <init>= <expr><call><name><name>options</name>.<name>get</name></name><argument_list>(<argument><expr><name>COMPRESSION</name></expr></argument>)</argument_list></call>.<call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>compression</name>.<name>equals</name></name><argument_list>(<argument><expr>"snappy"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name><name>FrameCompressor</name>.<name>SnappyCompressor</name>.<name>instance</name></name> == null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr>"This instance does not support Snappy compression"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <expr_stmt><expr><call><name><name>connection</name>.<name>setCompressor</name></name><argument_list>(<argument><expr><name><name>FrameCompressor</name>.<name>SnappyCompressor</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unknown compression algorithm: %s"</expr></argument>, <argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name>.<name>getAuthenticator</name></name><argument_list>()</argument_list></call>.<call><name>requireAuthentication</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>new <call><name>AuthenticateMessage</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getAuthenticator</name></name><argument_list>()</argument_list></call>.<call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
        <else>else
            <return>return <expr>new <call><name>ReadyMessage</name><argument_list>()</argument_list></call></expr>;</return></else></if>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"STARTUP " + <name>options</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
