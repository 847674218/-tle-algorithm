<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\StatusLogger.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>management</name>.<name>ManagementFactory</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>JMX</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>MBeanServer</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>MalformedObjectNameException</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>ObjectName</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Iterables</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name>.<name>AutoSavingCache</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name>.<name>IRowCacheEntry</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name>.<name>KeyCacheKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name>.<name>RowCacheKey</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name>.<name>JMXEnabledThreadPoolExecutorMBean</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>RowIndexEntry</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name>.<name>CompactionManager</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>CacheService</name></name>;</import>

<class><specifier>public</specifier> class <name>StatusLogger</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>StatusLogger</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>log</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>MBeanServer</name></type> <name>server</name> <init>= <expr><call><name><name>ManagementFactory</name>.<name>getPlatformMBeanServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// everything from o.a.c.concurrent</comment>
        <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%-25s%10s%10s%10s"</expr></argument>, <argument><expr>"Pool Name"</expr></argument>, <argument><expr>"Active"</expr></argument>, <argument><expr>"Pending"</expr></argument>, <argument><expr>"Blocked"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>ObjectName</name></argument>&gt;</argument_list></name></type> <name>request</name></decl>, <decl><type ref="prev"/><name>internal</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>request</name> = <call><name><name>server</name>.<name>queryNames</name></name><argument_list>(<argument><expr>new <call><name>ObjectName</name><argument_list>(<argument><expr>"org.apache.cassandra.request:type=*"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>internal</name> = <call><name><name>server</name>.<name>queryNames</name></name><argument_list>(<argument><expr>new <call><name>ObjectName</name><argument_list>(<argument><expr>"org.apache.cassandra.internal:type=*"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>MalformedObjectNameException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <for>for (<init><decl><type><name>ObjectName</name></type> <name>objectName</name> <range>: <expr><call><name><name>Iterables</name>.<name>concat</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>internal</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>poolName</name> <init>= <expr><call><name><name>objectName</name>.<name>getKeyProperty</name></name><argument_list>(<argument><expr>"type"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JMXEnabledThreadPoolExecutorMBean</name></type> <name>threadPoolProxy</name> <init>= <expr><call><name><name>JMX</name>.<name>newMBeanProxy</name></name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>, <argument><expr><name><name>JMXEnabledThreadPoolExecutorMBean</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%-25s%10s%10s%10s"</expr></argument>,
                                      <argument><expr><name>poolName</name></expr></argument>, <argument><expr><call><name><name>threadPoolProxy</name>.<name>getActiveCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>threadPoolProxy</name>.<name>getPendingTasks</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>threadPoolProxy</name>.<name>getCurrentlyBlockedTasks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <comment type="line">// one offs</comment>
        <decl_stmt><decl><type><name>CompactionManager</name></type> <name>cm</name> <init>= <expr><name><name>CompactionManager</name>.<name>instance</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%-25s%10s%10s"</expr></argument>,
                                  <argument><expr>"CompactionManager"</expr></argument>, <argument><expr><call><name><name>cm</name>.<name>getActiveCompactions</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cm</name>.<name>getPendingTasks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pendingCommands</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>n</name> <range>: <expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>getCommandPendingTasks</name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><name>pendingCommands</name> += <name>n</name></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>pendingResponses</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>n</name> <range>: <expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>getResponsePendingTasks</name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><name>pendingResponses</name> += <name>n</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%-25s%10s%10s"</expr></argument>,
                                  <argument><expr>"MessagingService"</expr></argument>, <argument><expr>"n/a"</expr></argument>, <argument><expr><name>pendingCommands</name> + "," + <name>pendingResponses</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Global key/row cache information</comment>
        <decl_stmt><decl><type><name><name>AutoSavingCache</name><argument_list>&lt;<argument><name>KeyCacheKey</name></argument>, <argument><name>RowIndexEntry</name></argument>&gt;</argument_list></name></type> <name>keyCache</name> <init>= <expr><name><name>CacheService</name>.<name>instance</name>.<name>keyCache</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AutoSavingCache</name><argument_list>&lt;<argument><name>RowCacheKey</name></argument>, <argument><name>IRowCacheEntry</name></argument>&gt;</argument_list></name></type> <name>rowCache</name> <init>= <expr><name><name>CacheService</name>.<name>instance</name>.<name>rowCache</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>keyCacheKeysToSave</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getKeyCacheKeysToSave</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rowCacheKeysToSave</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getRowCacheKeysToSave</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%-25s%10s%25s%25s%65s"</expr></argument>, <argument><expr>"Cache Type"</expr></argument>, <argument><expr>"Size"</expr></argument>, <argument><expr>"Capacity"</expr></argument>, <argument><expr>"KeysToSave"</expr></argument>, <argument><expr>"Provider"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%-25s%10s%25s%25s%65s"</expr></argument>, <argument><expr>"KeyCache"</expr></argument>,
                                                           <argument><expr><call><name><name>keyCache</name>.<name>weightedSize</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>keyCache</name>.<name>getCapacity</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><name>keyCacheKeysToSave</name> == <name><name>Integer</name>.<name>MAX_VALUE</name></name> ? "all" : <name>keyCacheKeysToSave</name></expr></argument>,
                                                           <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%-25s%10s%25s%25s%65s"</expr></argument>, <argument><expr>"RowCache"</expr></argument>,
                                                           <argument><expr><call><name><name>rowCache</name>.<name>weightedSize</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>rowCache</name>.<name>getCapacity</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><name>rowCacheKeysToSave</name> == <name><name>Integer</name>.<name>MAX_VALUE</name></name> ? "all" : <name>rowCacheKeysToSave</name></expr></argument>,
                                                           <argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getRowCacheProvider</name></name><argument_list>()</argument_list></call>.<call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// per-CF stats</comment>
        <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%-25s%20s"</expr></argument>, <argument><expr>"ColumnFamily"</expr></argument>, <argument><expr>"Memtable ops,data"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name><name>ColumnFamilyStore</name>.<name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%-25s%20s"</expr></argument>,
                                      <argument><expr><name><name>cfs</name>.<name>table</name>.<name>name</name></name> + "." + <name><name>cfs</name>.<name>columnFamily</name></name></expr></argument>,
                                      <argument><expr><call><name><name>cfs</name>.<name>getMemtableColumnsCount</name></name><argument_list>()</argument_list></call> + "," + <call><name><name>cfs</name>.<name>getMemtableDataSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class>
</unit>
