<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\ColumnNameBuilder.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>InvalidRequestException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Build a potentially composite column name.
 */</comment>
<class type="interface"><specifier>public</specifier> interface <name>ColumnNameBuilder</name>
<block>{
    <comment type="block" format="javadoc">/**
     * Add a new ByteBuffer as the next component for this name.
     * @param bb the ByteBuffer to add
     * @throws IllegalStateException if the builder if full, i.e. if enough component has been added.
     * @return this builder
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>ColumnNameBuilder</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Add a new Term as the next component for this name.
     * @param t the Term to add
     * @param op the relationship this component should respect.
     * @param variables the variables corresponding to prepared markers
     * @throws IllegalStateException if the builder if full, i.e. if enough component has been added.
     * @return this builder
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>ColumnNameBuilder</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Term</name></type> <name>t</name></decl></param>, <param><decl><type><name><name>Relation</name>.<name>Type</name></name></type> <name>op</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the number of component already added to this builder.
     * @return the number of component in this Builder
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>componentCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return the maximum number of component that can still be added to this Builder
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>remainingCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Build the column name.
     * @return the built column name
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Build the column name so that the result sorts at the end of the range
     * represented by this (uncomplete) column name.
     * @throws IllegalStateException if the builder is empty or full.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>buildAsEndOfRange</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Clone this builder.
     * @return the cloned builder.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>ColumnNameBuilder</name></type> <name>copy</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>
</unit>
