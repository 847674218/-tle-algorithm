<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\Mx4jTool.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>management</name>.<name>ManagementFactory</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>MBeanServer</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>ObjectName</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * If mx4j-tools is in the classpath call maybeLoad to load the HTTP interface of mx4j.
 *
 * The default port is 8081. To override that provide e.g. -Dmx4jport=8082
 * The default listen address is 0.0.0.0. To override that provide -Dmx4jaddress=127.0.0.1
 */</comment>
<class><specifier>public</specifier> class <name>Mx4jTool</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>Mx4jTool</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Starts a JMX over http interface if and mx4j-tools.jar is in the classpath.
     * @return true if successfully loaded.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>maybeLoad</name><parameter_list>()</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Will try to load mx4j now, if it's in the classpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>MBeanServer</name></type> <name>mbs</name> <init>= <expr><call><name><name>ManagementFactory</name>.<name>getPlatformMBeanServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectName</name></type> <name>processorName</name> <init>= <expr>new <call><name>ObjectName</name><argument_list>(<argument><expr>"Server:name=XSLTProcessor"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>httpAdaptorClass</name> <init>= <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"mx4j.tools.adaptor.http.HttpAdaptor"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>httpAdaptor</name> <init>= <expr><call><name><name>httpAdaptorClass</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>httpAdaptorClass</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"setHost"</expr></argument>, <argument><expr><name><name>String</name>.<name>class</name></name></expr></argument>)</argument_list></call>.<call><name>invoke</name><argument_list>(<argument><expr><name>httpAdaptor</name></expr></argument>, <argument><expr><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>httpAdaptorClass</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"setPort"</expr></argument>, <argument><expr><name><name>Integer</name>.<name>TYPE</name></name></expr></argument>)</argument_list></call>.<call><name>invoke</name><argument_list>(<argument><expr><name>httpAdaptor</name></expr></argument>, <argument><expr><call><name>getPort</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ObjectName</name></type> <name>httpName</name> <init>= <expr>new <call><name>ObjectName</name><argument_list>(<argument><expr>"system:name=http"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mbs</name>.<name>registerMBean</name></name><argument_list>(<argument><expr><name>httpAdaptor</name></expr></argument>, <argument><expr><name>httpName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>xsltProcessorClass</name> <init>= <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"mx4j.tools.adaptor.http.XSLTProcessor"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>xsltProcessor</name> <init>= <expr><call><name><name>xsltProcessorClass</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>httpAdaptorClass</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"setProcessor"</expr></argument>, <argument><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"mx4j.tools.adaptor.http.ProcessorMBean"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.
                    <call><name>invoke</name><argument_list>(<argument><expr><name>httpAdaptor</name></expr></argument>, <argument><expr><name>xsltProcessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbs</name>.<name>registerMBean</name></name><argument_list>(<argument><expr><name>xsltProcessor</name></expr></argument>, <argument><expr><name>processorName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>httpAdaptorClass</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"start"</expr></argument>)</argument_list></call>.<call><name>invoke</name><argument_list>(<argument><expr><name>httpAdaptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"mx4j successfuly loaded"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Will not load MX4J, mx4j-tools.jar is not in the classpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Could not start register mbean in JMX"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getAddress</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"mx4jaddress"</expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call>.<call><name>getHostAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>getPort</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr>8081</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sPort</name> <init>= <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"mx4jport"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>sPort</name> != null &amp;&amp; !<call><name><name>sPort</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>port</name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>sPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>port</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
