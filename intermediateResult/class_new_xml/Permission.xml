<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\auth\Permission.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>EnumSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>ImmutableSet</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An enum encapsulating the set of possible permissions that an authenticated user can have on a resource.
 *
 * IAuthorizer implementations may encode permissions using ordinals, so the Enum order must never change order.
 * Adding new values is ok.
 */</comment>
<enum><specifier>public</specifier> enum <name>Permission</name>
<block>{
    <decl_stmt><decl><type><annotation>@<name>Deprecated</name></annotation></type>
    <name>READ</name></decl></decl_stmt>,
    <decl_stmt><decl><type><annotation>@<name>Deprecated</name></annotation></type>
    <name>WRITE</name></decl></decl_stmt>,

    <comment type="line">// schema management</comment>
    <decl><name>CREATE</name></decl>, <comment type="line">// required for CREATE KEYSPACE and CREATE TABLE.</comment>
    <decl><name>ALTER</name></decl>,  <comment type="line">// required for ALTER KEYSPACE, ALTER TABLE, CREATE INDEX, DROP INDEX.</comment>
    <decl><name>DROP</name></decl>,   <comment type="line">// required for DROP KEYSPACE and DROP TABLE.</comment>

    <comment type="line">// data access</comment>
    <decl><name>SELECT</name></decl>, <comment type="line">// required for SELECT.</comment>
    <decl><name>MODIFY</name></decl>, <comment type="line">// required for INSERT, UPDATE, DELETE, TRUNCATE.</comment>

    <comment type="line">// permission management</comment>
    <decl><name>AUTHORIZE</name></decl>; <comment type="line">// required for GRANT and REVOKE.</comment>


    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>ALL_DATA</name> <init>=
            <expr><call><name><name>ImmutableSet</name>.<name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>EnumSet</name>.<name>range</name></name><argument_list>(<argument><expr><name><name>Permission</name>.<name>CREATE</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>AUTHORIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>ALL</name> <init>=
            <expr><call><name><name>ImmutableSet</name>.<name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>EnumSet</name>.<name>range</name></name><argument_list>(<argument><expr><name><name>Permission</name>.<name>CREATE</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>AUTHORIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>NONE</name> <init>= <expr><call><name><name>ImmutableSet</name>.<name>of</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
}</block></enum>
</unit>
