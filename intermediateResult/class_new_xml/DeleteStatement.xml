<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\statements\DeleteStatement.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>statements</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>operations</name>.<name>ListOperation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>operations</name>.<name>MapOperation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>operations</name>.<name>Operation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>operations</name>.<name>SetOperation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamily</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DeletionInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>RowMutation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ThriftValidation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A &lt;code&gt;DELETE&lt;/code&gt; parsed from a CQL query statement.
 */</comment>
<class><specifier>public</specifier> class <name>DeleteStatement</name> <super><extends>extends <name>ModificationStatement</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>CFDefinition</name></type> <name>cfDef</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Selector</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Relation</name></argument>&gt;</argument_list></name></type> <name>whereClause</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name><name>CFDefinition</name>.<name>Name</name></name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>toRemove</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>processedKeys</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DeleteStatement</name><parameter_list>(<param><decl><type><name>CFName</name></type> <name>name</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Selector</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Relation</name></argument>&gt;</argument_list></name></type> <name>whereClause</name></decl></param>, <param><decl><type><name>Attributes</name></type> <name>attrs</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>columns</name></name> = <name>columns</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>whereClause</name></name> = <name>whereClause</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>toRemove</name></name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name><name>CFDefinition</name>.<name>Name</name></name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>validateConsistency</name><parameter_list>(<param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>type</name> == <name><name>Type</name>.<name>COUNTER</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cl</name>.<name>validateCounterForWrite</name></name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>cfm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name><name>cl</name>.<name>validateForWrite</name></name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>cfm</name>.<name>ksName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>RowMutation</name></argument>&gt;</argument_list></name></type> <name>getMutations</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>local</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>, <param><decl><type><name>long</name></type> <name>now</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument>, <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{
        <comment type="line">// keys</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name><name>UpdateStatement</name>.<name>buildKeyNames</name></name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>processedKeys</name></expr></argument>, <argument><expr><name>variables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// columns</comment>
        <decl_stmt><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name> <init>= <expr><call><name><name>cfDef</name>.<name>getColumnNameBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>firstEmpty</name> <init>= <expr><call><name><name>UpdateStatement</name>.<name>buildColumnNames</name></name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>processedKeys</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr><name>variables</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>fullKey</name> <init>= <expr><call><name><name>builder</name>.<name>componentCount</name></name><argument_list>()</argument_list></call> == <call><name><name>cfDef</name>.<name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isRange</name> <init>= <expr><name><name>cfDef</name>.<name>isCompact</name></name> ? !<name>fullKey</name> : (!<name>fullKey</name> || <call><name><name>toRemove</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call>)</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<call><name><name>toRemove</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>isRange</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Missing mandatory PRIMARY KEY part %s since %s specified"</expr></argument>, <argument><expr><name>firstEmpty</name></expr></argument>, <argument><expr><call><name><name>toRemove</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call>.<name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <comment type="line">// Lists DISCARD operation incurs a read. Do that now.</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>toRead</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name><name>CFDefinition</name>.<name>Name</name></name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>p</name> <range>: <expr><name>toRemove</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>name</name> <init>= <expr><name><name>p</name>.<name>left</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Term</name></type> <name>value</name> <init>= <expr><name><name>p</name>.<name>right</name></name></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr>(<name><name>name</name>.<name>type</name></name> instanceof <name>ListType</name>) &amp;&amp; <name>value</name> != null</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>toRead</name> == null</expr>)</condition><then>
                    <expr_stmt><expr><name>toRead</name> = new <call><name><name>TreeSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>UTF8Type</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name><name>toRead</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnGroupMap</name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr><name>toRead</name> != null ? <call><name>readRows</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr><name>toRead</name></expr></argument>, <argument><expr>(<name>CompositeType</name>)<name><name>cfDef</name>.<name>cfm</name>.<name>comparator</name></name></expr></argument>, <argument><expr><name>local</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call> : null</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>RowMutation</name></argument>&gt;</argument_list></name></type> <name>rowMutations</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>RowMutation</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>keys</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UpdateParameters</name></type> <name>params</name> <init>= <expr>new <call><name>UpdateParameters</name><argument_list>(<argument><expr><name>variables</name></expr></argument>, <argument><expr><call><name>getTimestamp</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>key</name> <range>: <expr><name>keys</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>rowMutations</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>mutationForKey</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr><name>isRange</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>rows</name> == null ? null : <call><name><name>rows</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <return>return <expr><name>rowMutations</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>RowMutation</name></type> <name>mutationForKey</name><parameter_list>(<param><decl><type><name>CFDefinition</name></type> <name>cfDef</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isRange</name></decl></param>, <param><decl><type><name>UpdateParameters</name></type> <name>params</name></decl></param>, <param><decl><type><name>ColumnGroupMap</name></type> <name>group</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>QueryProcessor</name>.<name>validateKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>cfm</name>.<name>ksName</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>rm</name>.<name>addOrGet</name></name><argument_list>(<argument><expr><call><name>columnFamily</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>columns</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>builder</name>.<name>componentCount</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
        <block>{
            <comment type="line">// No columns, delete the row</comment>
            <expr_stmt><expr><call><name><name>cf</name>.<name>delete</name></name><argument_list>(<argument><expr>new <call><name>DeletionInfo</name><argument_list>(<argument><expr><name><name>params</name>.<name>timestamp</name></name></expr></argument>, <argument><expr><name><name>params</name>.<name>localDeletionTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <if>if <condition>(<expr><name>isRange</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>start</name> <init>= <expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>end</name> <init>= <expr><call><name><name>builder</name>.<name>buildAsEndOfRange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>QueryProcessor</name>.<name>validateColumnName</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// If start is good, end is too</comment>
                <expr_stmt><expr><call><name><name>cf</name>.<name>addAtom</name></name><argument_list>(<argument><expr><call><name><name>params</name>.<name>makeRangeTombstone</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <comment type="line">// Delete specific columns</comment>
                <if>if <condition>(<expr><name><name>cfDef</name>.<name>isCompact</name></name></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>columnName</name> <init>= <expr><call><name><name>builder</name>.<name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>QueryProcessor</name>.<name>validateColumnName</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>params</name>.<name>makeTombstone</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name><name>CFDefinition</name>.<name>Name</name></name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>toRemove</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{
                        <decl_stmt><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name><name>CFDefinition</name>.<name>Name</name></name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>p</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>column</name> <init>= <expr><name><name>p</name>.<name>left</name></name></expr></init></decl>;</decl_stmt>

                        <if>if <condition>(<expr><call><name><name>column</name>.<name>type</name>.<name>isCollection</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block>{
                            <decl_stmt><decl><type><name>CollectionType</name></type> <name>validator</name> <init>= <expr>(<name>CollectionType</name>) <name><name>column</name>.<name>type</name></name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>Term</name></type> <name>keySelected</name> <init>= <expr><name><name>p</name>.<name>right</name></name></expr></init></decl>;</decl_stmt>

                            <if>if <condition>(<expr><name>keySelected</name> == null</expr>)</condition><then>
                            <block>{
                                <comment type="line">// Delete the whole collection</comment>
                                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>start</name> <init>= <expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name><name>column</name>.<name>name</name>.<name>key</name></name></expr></argument>)</argument_list></call>.<call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name>QueryProcessor</name>.<name>validateColumnName</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <decl_stmt><decl><type><name>ColumnNameBuilder</name></type> <name>b</name> <init>= <expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call> : <name>builder</name></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>end</name> <init>= <expr><call><name><name>b</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>column</name>.<name>name</name>.<name>key</name></name></expr></argument>)</argument_list></call>.<call><name>buildAsEndOfRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name>cf</name>.<name>addAtom</name></name><argument_list>(<argument><expr><call><name><name>params</name>.<name>makeRangeTombstone</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then>
                            <else>else
                            <block>{
                                <expr_stmt><expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>column</name>.<name>name</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>args</name> <init>= <expr><call><name><name>Collections</name>.<name>singletonList</name></name><argument_list>(<argument><expr><name>keySelected</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>Operation</name></type> <name>op</name></decl>;</decl_stmt>
                                <switch>switch <condition>(<expr><name><name>validator</name>.<name>kind</name></name></expr>)</condition>
                                <block>{
                                    <case>case <expr><name>LIST</name></expr>:
                                        <expr_stmt><expr><name>op</name> = <call><name><name>ListOperation</name>.<name>DiscardKey</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <break>break;</break>
                                    </case><case>case <expr><name>SET</name></expr>:
                                        <expr_stmt><expr><name>op</name> = <call><name><name>SetOperation</name>.<name>Discard</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <break>break;</break>
                                    </case><case>case <expr><name>MAP</name></expr>:
                                        <expr_stmt><expr><name>op</name> = <call><name><name>MapOperation</name>.<name>DiscardKey</name></name><argument_list>(<argument><expr><name>keySelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <break>break;</break>
                                    </case><default>default:
                                        <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Unknown collection type: " + <name><name>validator</name>.<name>kind</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                                </default>}</block></switch>

                                <expr_stmt><expr><call><name><name>op</name>.<name>execute</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr><name>validator</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>group</name> == null ? null : <call><name><name>group</name>.<name>getCollection</name></name><argument_list>(<argument><expr><name><name>column</name>.<name>name</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></then>
                        <else>else
                        <block>{
                            <decl_stmt><decl><type><name>ColumnNameBuilder</name></type> <name>b</name> <init>= <expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call> : <name>builder</name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>columnName</name> <init>= <expr><call><name><name>b</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>column</name>.<name>name</name>.<name>key</name></name></expr></argument>)</argument_list></call>.<call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>QueryProcessor</name>.<name>validateColumnName</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>params</name>.<name>makeTombstone</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></while>
                }</block></else></if>
            }</block></else></if>
        }</block></else></if>

        <return>return <expr><name>rm</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>ParsedStatement</name>.<name>Prepared</name></name></type> <name>prepare</name><parameter_list>(<param><decl><type><name><name>ColumnSpecification</name><index>[]</index></name></type> <name>boundNames</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>metadata</name> <init>= <expr><call><name><name>ThriftValidation</name>.<name>validateColumnFamily</name></name><argument_list>(<argument><expr><call><name>keyspace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>columnFamily</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>type</name> = <call><name><name>metadata</name>.<name>getDefaultValidator</name></name><argument_list>()</argument_list></call>.<call><name>isCommutative</name><argument_list>()</argument_list></call> ? <name><name>Type</name>.<name>COUNTER</name></name> : <name><name>Type</name>.<name>LOGGED</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>cfDef</name> = <call><name><name>metadata</name>.<name>getCfDef</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UpdateStatement</name>.<name>processKeys</name></name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>whereClause</name></expr></argument>, <argument><expr><name>processedKeys</name></expr></argument>, <argument><expr><name>boundNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>Selector</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>name</name> <init>= <expr><call><name><name>cfDef</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>name</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unknown identifier %s"</expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <comment type="line">// For compact, we only have one value except the key, so the only form of DELETE that make sense is without a column</comment>
            <comment type="line">// list. However, we support having the value name for coherence with the static/sparse case</comment>
            <if>if <condition>(<expr><name><name>name</name>.<name>kind</name></name> != <name><name>CFDefinition</name>.<name>Name</name>.<name>Kind</name>.<name>COLUMN_METADATA</name></name> &amp;&amp; <name><name>name</name>.<name>kind</name></name> != <name><name>CFDefinition</name>.<name>Name</name>.<name>Kind</name>.<name>VALUE_ALIAS</name></name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid identifier %s for deletion (should not be a PRIMARY KEY part)"</expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if>if <condition>(<expr><call><name><name>column</name>.<name>key</name></name><argument_list>()</argument_list></call> != null</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name><name>name</name>.<name>type</name></name> instanceof <name>ListType</name></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><call><name><name>column</name>.<name>key</name></name><argument_list>()</argument_list></call>.<call><name>isBindMarker</name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <expr_stmt><expr><name><name>boundNames</name><index>[<expr><call><name><name>column</name>.<name>key</name></name><argument_list>()</argument_list></call>.<name>bindIndex</name></expr>]</index></name> = <call><name><name>ListOperation</name>.<name>indexSpecOf</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></then>
                <else>else <if>if <condition>(<expr><name><name>name</name>.<name>type</name></name> instanceof <name>MapType</name></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><call><name><name>column</name>.<name>key</name></name><argument_list>()</argument_list></call>.<call><name>isBindMarker</name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <expr_stmt><expr><name><name>boundNames</name><index>[<expr><call><name><name>column</name>.<name>key</name></name><argument_list>()</argument_list></call>.<name>bindIndex</name></expr>]</index></name> = <call><name><name>MapOperation</name>.<name>keySpecOf</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>(<name>MapType</name>)<name><name>name</name>.<name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></then>
                <else>else
                <block>{
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid selection %s since %s is neither a list or a map"</expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><call><name><name>column</name>.<name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if></else></if>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>toRemove</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>column</name>.<name>key</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr>new <call><name><name>ParsedStatement</name>.<name>Prepared</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Arrays</name>.</name>&lt;<name>ColumnSpecification</name>&gt;<call><name>asList</name><argument_list>(<argument><expr><name>boundNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>ParsedStatement</name>.<name>Prepared</name></name></type> <name>prepare</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ColumnSpecification</name><index>[]</index></type> <name>boundNames</name> <init>= <expr>new <name><name>ColumnSpecification</name><index>[<expr><call><name>getBoundsTerms</name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>prepare</name><argument_list>(<argument><expr><name>boundNames</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"DeleteStatement(name=%s, columns=%s, keys=%s)"</expr></argument>,
                             <argument><expr><name>cfName</name></expr></argument>,
                             <argument><expr><name>columns</name></expr></argument>,
                             <argument><expr><name>whereClause</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
