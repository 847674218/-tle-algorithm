<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\filter\QueryPath.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ColumnParent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ColumnPath</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>QueryPath</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>columnFamilyName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>superColumnName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>columnName</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>QueryPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>columnFamilyName</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>superColumnName</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>columnFamilyName</name></name> = <name>columnFamilyName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>superColumnName</name></name> = <name>superColumnName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columnName</name></name> = <name>columnName</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>QueryPath</name><parameter_list>(<param><decl><type><name>ColumnParent</name></type> <name>columnParent</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>columnParent</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>columnParent</name>.<name>super_column</name></name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>QueryPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>columnFamilyName</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>superColumnName</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>columnFamilyName</name></expr></argument>, <argument><expr><name>superColumnName</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>QueryPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>columnFamilyName</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>columnFamilyName</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>QueryPath</name><parameter_list>(<param><decl><type><name>ColumnPath</name></type> <name>column_path</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>column_path</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>column_path</name>.<name>super_column</name></name></expr></argument>, <argument><expr><name><name>column_path</name>.<name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>QueryPath</name></type> <name>column</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>QueryPath</name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getSimpleName</name><argument_list>()</argument_list></call> + "(" +
               "columnFamilyName='" + <name>columnFamilyName</name> + '\'' +
               ", superColumnName='" + <name>superColumnName</name> + '\'' +
               ", columnName='" + <name>columnName</name> + '\'' +
               ')'</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <assert>assert <expr>!"".<call><name>equals</name><argument_list>(<argument><expr><name>columnFamilyName</name></expr></argument>)</argument_list></call></expr>;</assert>
        <assert>assert <expr><name>superColumnName</name> == null || <call><name><name>superColumnName</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>;</assert>
        <assert>assert <expr><name>columnName</name> == null || <call><name><name>columnName</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>;</assert>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><name>columnFamilyName</name> == null ? "" : <name>columnFamilyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name>superColumnName</name> == null ? <name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name> : <name>superColumnName</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name>columnName</name> == null ? <name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name> : <name>columnName</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>QueryPath</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>din</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>cfName</name> <init>= <expr><call><name><name>din</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>scName</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>din</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>cName</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>din</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><call><name><name>cfName</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? null : <name>cfName</name></expr></argument>,
                             <argument><expr><call><name><name>scName</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 ? null : <name>scName</name></expr></argument>,
                             <argument><expr><call><name><name>cName</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 ? null : <name>cName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>TypeSizes</name></type> <name>typeSizes</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>columnFamilyName</name> == null</expr>)</condition><then>
            <expr_stmt><expr><name>size</name> += <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>size</name> += <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr><name>columnFamilyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

        <if>if <condition>(<expr><name>superColumnName</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>size</name> += <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>scNameSize</name> <init>= <expr><call><name><name>superColumnName</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> += <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>) <name>scNameSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> += <name>scNameSize</name></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>columnName</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>size</name> += <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>cNameSize</name> <init>= <expr><call><name><name>columnName</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> += <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>) <name>cNameSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> += <name>cNameSize</name></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
