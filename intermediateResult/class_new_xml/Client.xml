<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\Client.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Splitter</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>Int32Type</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>UTF8Type</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>CredentialsMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>ExecuteMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>OptionsMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>PrepareMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>QueryMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>RegisterMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>StartupMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Hex</name></name>;</import>
<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>EncryptionOptions</name>.<name>ClientEncryptionOptions</name></name>;</import>

<class><specifier>public</specifier> class <name>Client</name> <super><extends>extends <name>SimpleClient</name></extends></super>
<block>{
    <constructor><specifier>public</specifier> <name>Client</name><parameter_list>(<param><decl><type><name>String</name></type> <name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>, <param><decl><type><name>ClientEncryptionOptions</name></type> <name>encryptionOptions</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>encryptionOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <comment type="line">// Start the connection attempt.</comment>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"Connecting..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>establishConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Read commands from the stdin.</comment>
        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in</name> <init>= <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name><name>System</name>.<name>in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init>;</init><condition>;</condition><incr/>)
        <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"&gt;&gt; "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr><call><name><name>in</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>line</name> == null</expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <decl_stmt><decl><type><name><name>Message</name>.<name>Request</name></name></type> <name>req</name> <init>= <expr><call><name>parseLine</name><argument_list>(<argument><expr><call><name><name>line</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>req</name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"! Error parsing line."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <try>try
            <block>{
                <decl_stmt><decl><type><name><name>Message</name>.<name>Response</name></name></type> <name>resp</name> <init>= <expr><call><name>execute</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"-&gt; " + <name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"ERROR: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></for>

        <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>Message</name>.<name>Request</name></name></type> <name>parseLine</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Splitter</name></type> <name>splitter</name> <init>= <expr><call><name><name>Splitter</name>.<name>on</name></name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call>.<call><name>trimResults</name><argument_list>()</argument_list></call>.<call><name>omitEmptyStrings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>splitter</name>.<name>split</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>msgType</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>msgType</name>.<name>equals</name></name><argument_list>(<argument><expr>"STARTUP"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>options</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>StartupMessage</name>.<name>CQL_VERSION</name></name></expr></argument>, <argument><expr>"3.0.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{
               <decl_stmt><decl><type><name>String</name></type> <name>next</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
               <if>if <condition>(<expr><call><name><name>next</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"snappy"</expr></argument>)</argument_list></call></expr>)</condition><then>
               <block>{
                   <expr_stmt><expr><call><name><name>options</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>StartupMessage</name>.<name>COMPRESSION</name></name></expr></argument>, <argument><expr>"snappy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name><name>connection</name>.<name>setCompressor</name></name><argument_list>(<argument><expr><name><name>FrameCompressor</name>.<name>SnappyCompressor</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               }</block></then></if>
            }</block></while>
            <return>return <expr>new <call><name>StartupMessage</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>msgType</name>.<name>equals</name></name><argument_list>(<argument><expr>"QUERY"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>line</name>.<name>substring</name></name><argument_list>(<argument><expr>6</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>QueryMessage</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>ConsistencyLevel</name>.<name>ONE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>msgType</name>.<name>equals</name></name><argument_list>(<argument><expr>"PREPARE"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>line</name>.<name>substring</name></name><argument_list>(<argument><expr>8</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>PrepareMessage</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>msgType</name>.<name>equals</name></name><argument_list>(<argument><expr>"EXECUTE"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>id</name> <init>= <expr><call><name><name>Hex</name>.<name>hexToBytes</name></name><argument_list>(<argument><expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while<condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>next</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl>;</decl_stmt>
                    <try>try
                    <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>bb</name> = <call><name><name>Int32Type</name>.<name>instance</name>.<name>decompose</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block>
                    <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
                    <block>{
                        <expr_stmt><expr><name>bb</name> = <call><name><name>UTF8Type</name>.<name>instance</name>.<name>decompose</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                    <expr_stmt><expr><call><name><name>values</name>.<name>add</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <return>return <expr>new <call><name>ExecuteMessage</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name><name>ConsistencyLevel</name>.<name>ONE</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr>null</expr>;</return>
            }</block></catch></try>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>msgType</name>.<name>equals</name></name><argument_list>(<argument><expr>"OPTIONS"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr>new <call><name>OptionsMessage</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>msgType</name>.<name>equals</name></name><argument_list>(<argument><expr>"CREDENTIALS"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>CredentialsMessage</name></type> <name>msg</name> <init>= <expr>new <call><name>CredentialsMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>next</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>kv</name> <init>= <expr><call><name><name>next</name>.<name>split</name></name><argument_list>(<argument><expr>"="</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>kv</name>.<name>length</name></name> != 2</expr>)</condition><then>
                    <return>return <expr>null</expr>;</return></then></if>
                <expr_stmt><expr><call><name><name>msg</name>.<name>credentials</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>kv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>kv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><name>msg</name></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>msgType</name>.<name>equals</name></name><argument_list>(<argument><expr>"REGISTER"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>line</name>.<name>substring</name></name><argument_list>(<argument><expr>9</expr></argument>)</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <return>return <expr>new <call><name>RegisterMessage</name><argument_list>(<argument><expr><call><name><name>Collections</name>.<name>singletonList</name></name><argument_list>(<argument><expr><call><name><name>Enum</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name><name>Event</name>.<name>Type</name>.<name>class</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"[ERROR] Unknown event type: " + <name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>null</expr>;</return>
            }</block></catch></try>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
        <return>return <expr>null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
    <block>{
        <comment type="line">// Print usage if no argument is specified.</comment>
        <if>if <condition>(<expr><name><name>args</name>.<name>length</name></name> != 2</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Usage: " + <call><name><name>Client</name>.<name><name>class</name>.<name>getSimpleName</name></name></name><argument_list>()</argument_list></call> + " &lt;host&gt; &lt;port&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// Parse options.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>host</name> <init>= <expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ClientEncryptionOptions</name></type> <name>encryptionOptions</name> <init>= <expr>new <call><name>ClientEncryptionOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"CQL binary protocol console " + <name>host</name> + "@" + <name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr>new <call><name>Client</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>encryptionOptions</name></expr></argument>)</argument_list></call>.<call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
