<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\gms\GossipDigestAckVerbHandler.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>gms</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>IVerbHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessageIn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessageOut</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>

<class><specifier>public</specifier> class <name>GossipDigestAckVerbHandler</name> <super><implements>implements <name><name>IVerbHandler</name><argument_list>&lt;<argument><name>GossipDigestAck</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>GossipDigestAckVerbHandler</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>doVerb</name><parameter_list>(<param><decl><type><name><name>MessageIn</name><argument_list>&lt;<argument><name>GossipDigestAck</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>id</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>InetAddress</name></type> <name>from</name> <init>= <expr><name><name>message</name>.<name>from</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr>"Received a GossipDigestAckMessage from {}"</expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>!<call><name><name>Gossiper</name>.<name>instance</name>.<name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><call><name><name>logger</name>.<name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr>"Ignoring GossipDigestAckMessage because gossip is disabled"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>GossipDigestAck</name></type> <name>gDigestAckMessage</name> <init>= <expr><name><name>message</name>.<name>payload</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>GossipDigest</name></argument>&gt;</argument_list></name></type> <name>gDigestList</name> <init>= <expr><call><name><name>gDigestAckMessage</name>.<name>getGossipDigestList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>epStateMap</name> <init>= <expr><call><name><name>gDigestAckMessage</name>.<name>getEndpointStateMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>( <expr><call><name><name>epStateMap</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr> )</condition><then>
        <block>{
            <comment type="block">/* Notify the Failure Detector */</comment>
            <expr_stmt><expr><call><name><name>Gossiper</name>.<name>instance</name>.<name>notifyFailureDetector</name></name><argument_list>(<argument><expr><name>epStateMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Gossiper</name>.<name>instance</name>.<name>applyStateLocally</name></name><argument_list>(<argument><expr><name>epStateMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* Get the state required to send to this gossipee - construct GossipDigestAck2Message */</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>deltaEpStateMap</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>GossipDigest</name></type> <name>gDigest</name> <range>: <expr><name>gDigestList</name></expr></range></decl></init> )
        <block>{
            <decl_stmt><decl><type><name>InetAddress</name></type> <name>addr</name> <init>= <expr><call><name><name>gDigest</name>.<name>getEndpoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>EndpointState</name></type> <name>localEpStatePtr</name> <init>= <expr><call><name><name>Gossiper</name>.<name>instance</name>.<name>getStateForVersionBiggerThan</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name><name>gDigest</name>.<name>getMaxVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>( <expr><name>localEpStatePtr</name> != null</expr> )</condition><then>
                <expr_stmt><expr><call><name><name>deltaEpStateMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>localEpStatePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>

        <decl_stmt><decl><type><name><name>MessageOut</name><argument_list>&lt;<argument><name>GossipDigestAck2</name></argument>&gt;</argument_list></name></type> <name>gDigestAck2Message</name> <init>= <expr>new <call><name><name>MessageOut</name><argument_list>&lt;<argument><name>GossipDigestAck2</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>MessagingService</name>.<name>Verb</name>.<name>GOSSIP_DIGEST_ACK2</name></name></expr></argument>,
                                                                                                         <argument><expr>new <call><name>GossipDigestAck2</name><argument_list>(<argument><expr><name>deltaEpStateMap</name></expr></argument>)</argument_list></call></expr></argument>,
                                                                                                         <argument><expr><name><name>GossipDigestAck2</name>.<name>serializer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr>"Sending a GossipDigestAck2Message to {}"</expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>sendOneWay</name><argument_list>(<argument><expr><name>gDigestAck2Message</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
