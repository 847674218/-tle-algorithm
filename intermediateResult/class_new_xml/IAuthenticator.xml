<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\auth\IAuthenticator.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>AuthenticationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>InvalidRequestException</name></name>;</import>

<class type="interface"><specifier>public</specifier> interface <name>IAuthenticator</name>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USERNAME_KEY</name> <init>= <expr>"username"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PASSWORD_KEY</name> <init>= <expr>"password"</expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Supported CREATE USER/ALTER USER options.
     * Currently only PASSWORD is available.
     */</comment>
    <enum>enum <name>Option</name>
    <block>{
        <decl><name>PASSWORD</name></decl>
    }</block></enum>

    <comment type="block" format="javadoc">/**
     * Whether or not the authenticator requires explicit login.
     * If false will instantiate user with AuthenticatedUser.ANONYMOUS_USER.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>requireAuthentication</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set of options supported by CREATE USER and ALTER USER queries.
     * Should never return null - always return an empty set instead.
     */</comment>
    <function_decl><type><name><name>Set</name><argument_list>&lt;<argument><name>Option</name></argument>&gt;</argument_list></name></type> <name>supportedOptions</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Subset of supportedOptions that users are allowed to alter when performing ALTER USER [themselves].
     * Should never return null - always return an empty set instead.
     */</comment>
    <function_decl><type><name><name>Set</name><argument_list>&lt;<argument><name>Option</name></argument>&gt;</argument_list></name></type> <name>alterableOptions</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Authenticates a user given a Map&lt;String, String&gt; of credentials.
     * Should never return null - always throw AuthenticationException instead.
     * Returning AuthenticatedUser.ANONYMOUS_USER is an option as well if authentication is not required.
     *
     * @throws AuthenticationException if credentials don't match any known user.
     */</comment>
    <function_decl><type><name>AuthenticatedUser</name></type> <name>authenticate</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>credentials</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>AuthenticationException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called during execution of CREATE USER query (also may be called on startup, see seedSuperuserOptions method).
     * If authenticator is static then the body of the method should be left blank, but don't throw an exception.
     * options are guaranteed to be a subset of supportedOptions().
     *
     * @param username Username of the user to create.
     * @param options Options the user will be created with.
     * @throws InvalidRequestException
     */</comment>
    <function_decl><type><name>void</name></type> <name>create</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Option</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called during execution of ALTER USER query.
     * options are always guaranteed to be a subset of supportedOptions(). Furthermore, if the user performing the query
     * is not a superuser and is altering himself, then options are guaranteed to be a subset of alterableOptions().
     * Keep the body of the method blank if your implementation doesn't support any options.
     *
     * @param username Username of the user that will be altered.
     * @param options Options to alter.
     * @throws InvalidRequestException
     */</comment>
    <function_decl><type><name>void</name></type> <name>alter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Option</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>;</function_decl>


    <comment type="block" format="javadoc">/**
     * Called during execution of DROP USER query.
     *
     * @param username Username of the user that will be dropped.
     * @throws InvalidRequestException
     */</comment>
    <function_decl><type><name>void</name></type> <name>drop</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>;</function_decl>

     <comment type="block" format="javadoc">/**
     * Set of resources that should be made inaccessible to users and only accessible internally.
     *
     * @return Keyspaces, column families that will be unreadable and unmodifiable by users; other resources.
     */</comment>
    <function_decl><type><name><name>Set</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>IResource</name></extends></argument>&gt;</argument_list></name></type> <name>protectedResources</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Validates configuration of IAuthenticator implementation (if configurable).
     *
     * @throws ConfigurationException when there is a configuration error.
     */</comment>
    <function_decl><type><name>void</name></type> <name>validateConfiguration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Setup is called once upon system startup to initialize the IAuthenticator.
     *
     * For example, use this method to create any required keyspaces/column families.
     */</comment>
    <function_decl><type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>
</unit>
