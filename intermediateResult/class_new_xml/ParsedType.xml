<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\ParsedType.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>SyntaxException</name></name>;</import>

<class type="interface"><specifier>public</specifier> interface <name>ParsedType</name>
<block>{
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isCollection</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isCounter</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getType</name><parameter_list>()</parameter_list>;</function_decl>

    <enum><specifier>public</specifier> enum <name>Native</name> <super><implements>implements <name>ParsedType</name></implements></super>
    <block>{
        <constructor><name>ASCII</name>    <parameter_list>(<param><decl><type><name><name>AsciiType</name>.<name>instance</name></name></type></decl></param>)</parameter_list>,
        BIGINT   (LongType.instance</constructor>)</block>,
        <constructor><name>BLOB</name>     <parameter_list>(<param><decl><type><name><name>BytesType</name>.<name>instance</name></name></type></decl></param>)</parameter_list>,
        BOOLEAN  (BooleanType.instance</constructor></enum>)</block>,
        <expr_stmt><expr><call><name>COUNTER</name>  <argument_list>(<argument><expr><name><name>CounterColumnType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>DECIMAL</name>  <argument_list>(<argument><expr><name><name>DecimalType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>DOUBLE</name>   <argument_list>(<argument><expr><name><name>DoubleType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>FLOAT</name>    <argument_list>(<argument><expr><name><name>FloatType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>INET</name>     <argument_list>(<argument><expr><name><name>InetAddressType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>INT</name>      <argument_list>(<argument><expr><name><name>Int32Type</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>TEXT</name>     <argument_list>(<argument><expr><name><name>UTF8Type</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>TIMESTAMP</name><argument_list>(<argument><expr><name><name>DateType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>UUID</name>     <argument_list>(<argument><expr><name><name>UUIDType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>VARCHAR</name>  <argument_list>(<argument><expr><name><name>UTF8Type</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>VARINT</name>   <argument_list>(<argument><expr><name><name>IntegerType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>TIMEUUID</name> <argument_list>(<argument><expr><name><name>TimeUUIDType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></class>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Native</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCollection</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getType</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>type</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCounter</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>this</name> == <name>COUNTER</name></expr>;</return>
        }</block></function>
    }

    public <class><specifier>static</specifier> class <name>Custom</name> <super><implements>implements <name>ParsedType</name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Custom</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCollection</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getType</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>type</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCounter</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Collection</name> <super><implements>implements <name>ParsedType</name></implements></super>
    <block>{
        <decl_stmt><decl><type><name>CollectionType</name></type> <name>type</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Collection</name><parameter_list>(<param><decl><type><name>CollectionType</name></type> <name>type</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Collection</name></type> <name>map</name><parameter_list>(<param><decl><type><name>ParsedType</name></type> <name>t1</name></decl></param>, <param><decl><type><name>ParsedType</name></type> <name>t2</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr><call><name><name>t1</name>.<name>isCollection</name></name><argument_list>()</argument_list></call> || <call><name><name>t2</name>.<name>isCollection</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"map type cannot contain another collection"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if>if <condition>(<expr><call><name><name>t1</name>.<name>isCounter</name></name><argument_list>()</argument_list></call> || <call><name><name>t2</name>.<name>isCounter</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"counters are not allowed inside a collection"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return>return <expr>new <call><name>Collection</name><argument_list>(<argument><expr><call><name><name>MapType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>t1</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>t2</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Collection</name></type> <name>list</name><parameter_list>(<param><decl><type><name>ParsedType</name></type> <name>t</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr><call><name><name>t</name>.<name>isCollection</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"list type cannot contain another collection"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if>if <condition>(<expr><call><name><name>t</name>.<name>isCounter</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"counters are not allowed inside a collection"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return>return <expr>new <call><name>Collection</name><argument_list>(<argument><expr><call><name><name>ListType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>t</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Collection</name></type> <name>set</name><parameter_list>(<param><decl><type><name>ParsedType</name></type> <name>t</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr><call><name><name>t</name>.<name>isCollection</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"set type cannot contain another collection"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if>if <condition>(<expr><call><name><name>t</name>.<name>isCounter</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"counters are not allowed inside a collection"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return>return <expr>new <call><name>Collection</name><argument_list>(<argument><expr><call><name><name>SetType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>t</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCollection</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getType</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>type</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCounter</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>
    }</block></class>
}
</unit>
