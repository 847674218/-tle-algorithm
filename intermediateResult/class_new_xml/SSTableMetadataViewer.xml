<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\tools\SSTableMetadataViewer.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tools</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>Descriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableMetadata</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Shows the contents of sstable metadata
 */</comment>
<class><specifier>public</specifier> class <name>SSTableMetadataViewer</name>
<block>{
    <comment type="block" format="javadoc">/**
     * @param args a list of sstables whose metadata we're interested in
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>out</name> <init>= <expr><name><name>System</name>.<name>out</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>args</name>.<name>length</name></name> == 0</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Usage: sstablemetadata &lt;sstable filenames&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <for>for (<init><decl><type><name>String</name></type> <name>fname</name> <range>: <expr><name>args</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>Descriptor</name></type> <name>descriptor</name> <init>= <expr><call><name><name>Descriptor</name>.<name>fromFilename</name></name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SSTableMetadata</name></type> <name>metadata</name> <init>= <expr><call><name><name>SSTableMetadata</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"SSTable: %s%n"</expr></argument>, <argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"Partitioner: %s%n"</expr></argument>, <argument><expr><name><name>metadata</name>.<name>partitioner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"Maximum timestamp: %s%n"</expr></argument>, <argument><expr><name><name>metadata</name>.<name>maxTimestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"Compression ratio: %s%n"</expr></argument>, <argument><expr><name><name>metadata</name>.<name>compressionRatio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"Estimated droppable tombstones: %s%n"</expr></argument>, <argument><expr><call><name><name>metadata</name>.<name>getEstimatedDroppableTombstoneRatio</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> / 1000</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name><name>metadata</name>.<name>replayPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printHistograms</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>printHistograms</name><parameter_list>(<param><decl><type><name>SSTableMetadata</name></type> <name>metadata</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>offsets</name> <init>= <expr><call><name><name>metadata</name>.<name>estimatedRowSize</name>.<name>getBucketOffsets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>ersh</name> <init>= <expr><call><name><name>metadata</name>.<name>estimatedRowSize</name>.<name>getBuckets</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>ecch</name> <init>= <expr><call><name><name>metadata</name>.<name>estimatedColumnCount</name>.<name>getBuckets</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%-10s%18s%18s"</expr></argument>,
                                  <argument><expr>"Count"</expr></argument>, <argument><expr>"Row Size"</expr></argument>, <argument><expr>"Column Count"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>offsets</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%-10d%18s%18s"</expr></argument>,
                                      <argument><expr><name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                      <argument><expr>(<name>i</name> &lt; <name><name>ersh</name>.<name>length</name></name> ? <name><name>ersh</name><index>[<expr><name>i</name></expr>]</index></name> : "")</expr></argument>,
                                      <argument><expr>(<name>i</name> &lt; <name><name>ecch</name>.<name>length</name></name> ? <name><name>ecch</name><index>[<expr><name>i</name></expr>]</index></name> : "")</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class>
</unit>
