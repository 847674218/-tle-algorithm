<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\io\sstable\AbstractSSTableSimpleWriter.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FilenameFilter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>context</name>.<name>CounterContext</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>CounterId</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractSSTableSimpleWriter</name>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>File</name></type> <name>directory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>metadata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>DecoratedKey</name></type> <name>currentKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ColumnFamily</name></type> <name>columnFamily</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>SuperColumn</name></type> <name>currentSuperColumn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>CounterId</name></type> <name>counterid</name> <init>= <expr><call><name><name>CounterId</name>.<name>generate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AbstractSSTableSimpleWriter</name><parameter_list>(<param><decl><type><name>File</name></type> <name>directory</name></decl></param>, <param><decl><type><name>CFMetaData</name></type> <name>metadata</name></decl></param>, <param><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>metadata</name></name> = <name>metadata</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>directory</name></name> = <name>directory</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name>.<name>setPartitioner</name></name><argument_list>(<argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>SSTableWriter</name></type> <name>getWriter</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>SSTableWriter</name><argument_list>(
            <argument><expr><call><name>makeFilename</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name><name>metadata</name>.<name>ksName</name></name></expr></argument>, <argument><expr><name><name>metadata</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr>0</expr></argument>, <comment type="line">// We don't care about the bloom filter</comment>
            <argument><expr><name>metadata</name></expr></argument>,
            <argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>SSTableMetadata</name>.<name>createCollector</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// find available generation and pick up filename from that</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>makeFilename</name><parameter_list>(<param><decl><type><name>File</name></type> <name>directory</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>Descriptor</name></argument>&gt;</argument_list></name></type> <name>existing</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>Descriptor</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>directory</name>.<name>list</name></name><argument_list>(<argument><expr>new <class><super><name>FilenameFilter</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>
            <block>{
                <decl_stmt><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>Descriptor</name></argument>, <argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>p</name> <init>= <expr><call><name><name>SSTable</name>.<name>tryComponentFromFilename</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Descriptor</name></type> <name>desc</name> <init>= <expr><name>p</name> == null ? null : <name><name>p</name>.<name>left</name></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>desc</name> == null</expr>)</condition><then>
                    <return>return <expr>false</expr>;</return></then></if>

                <if>if <condition>(<expr><call><name><name>desc</name>.<name>cfname</name>.<name>equals</name></name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>existing</name>.<name>add</name></name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <return>return <expr>false</expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>maxGen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Descriptor</name></type> <name>desc</name> <range>: <expr><name>existing</name></expr></range></decl></init>)
            <expr_stmt><expr><name>maxGen</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxGen</name></expr></argument>, <argument><expr><name><name>desc</name>.<name>generation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr>new <call><name>Descriptor</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>maxGen</name> + 1</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call>.<call><name>filenameFor</name><argument_list>(<argument><expr><name><name>Component</name>.<name>DATA</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Start a new row whose key is {@code key}.
     * @param key the row key
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>newRow</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>currentKey</name> != null &amp;&amp; !<call><name><name>columnFamily</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>writeRow</name><argument_list>(<argument><expr><name>currentKey</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><name>currentKey</name> = <call><name><name>DatabaseDescriptor</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>decorateKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnFamily</name> = <call><name>getColumnFamily</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Start a new super column with name {@code name}.
     * @param name the name for the super column
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>newSuperColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>columnFamily</name>.<name>isSuper</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Cannot add a super column to a standard column family"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <expr_stmt><expr><name>currentSuperColumn</name> = new <call><name>SuperColumn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>metadata</name>.<name>subcolumnComparator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>columnFamily</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>currentSuperColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>columnFamily</name>.<name>isSuper</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>currentSuperColumn</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Trying to add a column to a super column family, but no super column has been started."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>IColumnContainer</name></type> <name>container</name> <init>= <expr><call><name><name>columnFamily</name>.<name>isSuper</name></name><argument_list>()</argument_list></call> ? <name>currentSuperColumn</name> : <name>columnFamily</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>container</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Insert a new "regular" column to the current row (and super column if applicable).
     * @param name the column name
     * @param value the column value
     * @param timestamp the column timestamp
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr>new <call><name>Column</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Insert a new expiring column to the current row (and super column if applicable).
     * @param name the column name
     * @param value the column value
     * @param timestamp the column timestamp
     * @param ttl the column time to live in seconds
     * @param expirationTimestampMS the local expiration timestamp in milliseconds. This is the server time timestamp used for actually
     * expiring the column, and as a consequence should be synchronized with the cassandra servers time. If {@code timestamp} represents
     * the insertion time in microseconds (which is not required), this should be {@code (timestamp / 1000) + (ttl * 1000)}.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addExpiringColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>, <param><decl><type><name>int</name></type> <name>ttl</name></decl></param>, <param><decl><type><name>long</name></type> <name>expirationTimestampMS</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr>new <call><name>ExpiringColumn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>expirationTimestampMS</name> / 1000</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Insert a new counter column to the current row (and super column if applicable).
     * @param name the column name
     * @param value the value of the counter
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCounterColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name>long</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr>new <call><name>CounterColumn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>CounterContext</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>create</name><argument_list>(<argument><expr><name>counterid</name></expr></argument>, <argument><expr>1L</expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Close this writer.
     * This method should be called, otherwise the produced sstables are not
     * guaranteed to be complete (and won't be in practice).
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>writeRow</name><parameter_list>(<param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnFamily</name></type> <name>columnFamily</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>ColumnFamily</name></type> <name>getColumnFamily</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>
</unit>
