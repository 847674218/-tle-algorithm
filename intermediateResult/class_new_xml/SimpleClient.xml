<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\SimpleClient.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>BlockingQueue</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>Executors</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>SynchronousQueue</name></name>;</import>
<import>import <name><name>javax</name>.<name>net</name>.<name>ssl</name>.<name>SSLContext</name></name>;</import>
<import>import <name><name>javax</name>.<name>net</name>.<name>ssl</name>.<name>SSLEngine</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>security</name>.<name>SSLFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>CredentialsMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>ErrorMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>ExecuteMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>PrepareMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>QueryMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>ResultMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>StartupMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>bootstrap</name>.<name>ClientBootstrap</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>Channel</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>ChannelFuture</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>ChannelHandlerContext</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>ChannelPipeline</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>ChannelPipelineFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>ChannelStateEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>Channels</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>ExceptionEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>MessageEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>SimpleChannelUpstreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>socket</name>.<name>nio</name>.<name>NioClientSocketChannelFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>handler</name>.<name>logging</name>.<name>LoggingHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>handler</name>.<name>ssl</name>.<name>SslHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>logging</name>.<name>InternalLoggerFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>logging</name>.<name>Slf4JLoggerFactory</name></name>;</import>
<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>EncryptionOptions</name>.<name>ClientEncryptionOptions</name></name>;</import>

<class><specifier>public</specifier> class <name>SimpleClient</name>
<block>{
    <expr_stmt><expr>static
    <block>{
        <expr><call><name><name>InternalLoggerFactory</name>.<name>setDefaultFactory</name></name><argument_list>(<argument><expr>new <call><name>Slf4JLoggerFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    private static <name>final</name> <name>Logger</name> <name>logger</name> = <call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>SimpleClient</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>host</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ClientEncryptionOptions</name></type> <name>encryptionOptions</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>ResponseHandler</name></type> <name>responseHandler</name> <init>= <expr>new <call><name>ResponseHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>Connection</name>.<name>Tracker</name></name></type> <name>tracker</name> <init>= <expr>new <call><name>ConnectionTracker</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Connection</name></type> <name>connection</name> <init>= <expr>new <call><name>Connection</name><argument_list>(<argument><expr><name>tracker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ClientBootstrap</name></type> <name>bootstrap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Channel</name></type> <name>channel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ChannelFuture</name></type> <name>lastWriteFuture</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Connection</name>.<name>Factory</name></name></type> <name>connectionFactory</name> <init>= <expr>new <class><super><name><name>Connection</name>.<name>Factory</name></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>Connection</name></type> <name>newConnection</name><parameter_list>(<param><decl><type><name><name>Connection</name>.<name>Tracker</name></name></type> <name>tracker</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><name>connection</name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SimpleClient</name><parameter_list>(<param><decl><type><name>String</name></type> <name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>, <param><decl><type><name>ClientEncryptionOptions</name></type> <name>encryptionOptions</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>host</name></name> = <name>host</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>encryptionOptions</name></name> = <name>encryptionOptions</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>connect</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>useCompression</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>establishConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>options</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>StartupMessage</name>.<name>CQL_VERSION</name></name></expr></argument>, <argument><expr>"3.0.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>useCompression</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>options</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>StartupMessage</name>.<name>COMPRESSION</name></name></expr></argument>, <argument><expr>"snappy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>connection</name>.<name>setCompressor</name></name><argument_list>(<argument><expr><name><name>FrameCompressor</name>.<name>SnappyCompressor</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr>new <call><name>StartupMessage</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>establishConnection</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <comment type="line">// Configure the client.</comment>
        <expr_stmt><expr><name>bootstrap</name> = new <call><name>ClientBootstrap</name><argument_list>(
                        <argument><expr>new <call><name>NioClientSocketChannelFactory</name><argument_list>(
                            <argument><expr><call><name><name>Executors</name>.<name>newCachedThreadPool</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>Executors</name>.<name>newCachedThreadPool</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bootstrap</name>.<name>setOption</name></name><argument_list>(<argument><expr>"tcpNoDelay"</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Configure the pipeline factory.</comment>
        <if>if<condition>(<expr><name><name>encryptionOptions</name>.<name>enabled</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>bootstrap</name>.<name>setPipelineFactory</name></name><argument_list>(<argument><expr>new <call><name>SecurePipelineFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>bootstrap</name>.<name>setPipelineFactory</name></name><argument_list>(<argument><expr>new <call><name>PipelineFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>ChannelFuture</name></type> <name>future</name> <init>= <expr><call><name><name>bootstrap</name>.<name>connect</name></name><argument_list>(<argument><expr>new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Wait until the connection attempt succeeds or fails.</comment>
        <expr_stmt><expr><name>channel</name> = <call><name><name>future</name>.<name>awaitUninterruptibly</name></name><argument_list>()</argument_list></call>.<call><name>getChannel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>future</name>.<name>isSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>bootstrap</name>.<name>releaseExternalResources</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Connection Error"</expr></argument>, <argument><expr><call><name><name>future</name>.<name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>login</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>credentials</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>CredentialsMessage</name></type> <name>msg</name> <init>= <expr>new <call><name>CredentialsMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>msg</name>.<name>credentials</name>.<name>putAll</name></name><argument_list>(<argument><expr><name>credentials</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>String</name></type> <name>query</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Message</name>.<name>Response</name></name></type> <name>msg</name> <init>= <expr><call><name>execute</name><argument_list>(<argument><expr>new <call><name>QueryMessage</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>consistency</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>msg</name> instanceof <name>ResultMessage</name></expr>;</assert>
        <return>return <expr>(<name>ResultMessage</name>)<name>msg</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>ResultMessage</name>.<name>Prepared</name></name></type> <name>prepare</name><parameter_list>(<param><decl><type><name>String</name></type> <name>query</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Message</name>.<name>Response</name></name></type> <name>msg</name> <init>= <expr><call><name>execute</name><argument_list>(<argument><expr>new <call><name>PrepareMessage</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>msg</name> instanceof <name><name>ResultMessage</name>.<name>Prepared</name></name></expr>;</assert>
        <return>return <expr>(<name><name>ResultMessage</name>.<name>Prepared</name></name>)<name>msg</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>executePrepared</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>statementId</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>values</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Message</name>.<name>Response</name></name></type> <name>msg</name> <init>= <expr><call><name>execute</name><argument_list>(<argument><expr>new <call><name>ExecuteMessage</name><argument_list>(<argument><expr><name>statementId</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>consistency</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>msg</name> instanceof <name>ResultMessage</name></expr>;</assert>
        <return>return <expr>(<name>ResultMessage</name>)<name>msg</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// Wait until all messages are flushed before closing the channel.</comment>
        <if>if <condition>(<expr><name>lastWriteFuture</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>lastWriteFuture</name>.<name>awaitUninterruptibly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

        <comment type="line">// Close the connection.  Make sure the close operation ends because</comment>
        <comment type="line">// all I/O operations are asynchronous in Netty.</comment>
        <expr_stmt><expr><call><name><name>channel</name>.<name>close</name></name><argument_list>()</argument_list></call>.<call><name>awaitUninterruptibly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Shut down all thread pools to exit.</comment>
        <expr_stmt><expr><call><name><name>bootstrap</name>.<name>releaseExternalResources</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name><name>Message</name>.<name>Response</name></name></type> <name>execute</name><parameter_list>(<param><decl><type><name><name>Message</name>.<name>Request</name></name></type> <name>request</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>request</name>.<name>attach</name></name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lastWriteFuture</name> = <call><name><name>channel</name>.<name>write</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Message</name>.<name>Response</name></name></type> <name>msg</name> <init>= <expr><call><name><name>responseHandler</name>.<name>responses</name>.<name>take</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>msg</name> instanceof <name>ErrorMessage</name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call>(<name>Throwable</name>)<argument_list>(<argument><expr>(<name>ErrorMessage</name>)<name>msg</name></expr></argument>)</argument_list></call>.<name>error</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <return>return <expr><name>msg</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="line">// Stateless handlers</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name>ProtocolDecoder</name></name></type> <name>messageDecoder</name> <init>= <expr>new <call><name><name>Message</name>.<name>ProtocolDecoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name>ProtocolEncoder</name></name></type> <name>messageEncoder</name> <init>= <expr>new <call><name><name>Message</name>.<name>ProtocolEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Frame</name>.<name>Decompressor</name></name></type> <name>frameDecompressor</name> <init>= <expr>new <call><name><name>Frame</name>.<name>Decompressor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Frame</name>.<name>Compressor</name></name></type> <name>frameCompressor</name> <init>= <expr>new <call><name><name>Frame</name>.<name>Compressor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Frame</name>.<name>Encoder</name></name></type> <name>frameEncoder</name> <init>= <expr>new <call><name><name>Frame</name>.<name>Encoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ConnectionTracker</name> <super><implements>implements <name><name>Connection</name>.<name>Tracker</name></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addConnection</name><parameter_list>(<param><decl><type><name>Channel</name></type> <name>ch</name></decl></param>, <param><decl><type><name>Connection</name></type> <name>connection</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>closeAll</name><parameter_list>()</parameter_list> <block>{}</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>PipelineFactory</name> <super><implements>implements <name>ChannelPipelineFactory</name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>ChannelPipeline</name></type> <name>getPipeline</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>ChannelPipeline</name></type> <name>pipeline</name> <init>= <expr><call><name><name>Channels</name>.<name>pipeline</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">//pipeline.addLast("debug", new LoggingHandler());</comment>

            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"frameDecoder"</expr></argument>, <argument><expr>new <call><name><name>Frame</name>.<name>Decoder</name></name><argument_list>(<argument><expr><name>tracker</name></expr></argument>, <argument><expr><name>connectionFactory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"frameEncoder"</expr></argument>, <argument><expr><name>frameEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"frameDecompressor"</expr></argument>, <argument><expr><name>frameDecompressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"frameCompressor"</expr></argument>, <argument><expr><name>frameCompressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"messageDecoder"</expr></argument>, <argument><expr><name>messageDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"messageEncoder"</expr></argument>, <argument><expr><name>messageEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"handler"</expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>pipeline</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>SecurePipelineFactory</name> <super><extends>extends <name>PipelineFactory</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SSLContext</name></type> <name>sslContext</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SecurePipelineFactory</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>sslContext</name></name> = <call><name><name>SSLFactory</name>.<name>createSSLContext</name></name><argument_list>(<argument><expr><name>encryptionOptions</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>ChannelPipeline</name></type> <name>getPipeline</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>SSLEngine</name></type> <name>sslEngine</name> <init>= <expr><call><name><name>sslContext</name>.<name>createSSLEngine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sslEngine</name>.<name>setUseClientMode</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sslEngine</name>.<name>setEnabledCipherSuites</name></name><argument_list>(<argument><expr><name><name>encryptionOptions</name>.<name>cipher_suites</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ChannelPipeline</name></type> <name>pipeline</name> <init>= <expr><call><name><name>super</name>.<name>getPipeline</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addFirst</name></name><argument_list>(<argument><expr>"ssl"</expr></argument>, <argument><expr>new <call><name>SslHandler</name><argument_list>(<argument><expr><name>sslEngine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>pipeline</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ResponseHandler</name> <super><extends>extends <name>SimpleChannelUpstreamHandler</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>BlockingQueue</name><argument_list>&lt;<argument><name><name>Message</name>.<name>Response</name></name></argument>&gt;</argument_list></name></type> <name>responses</name> <init>= <expr>new <call><name><name>SynchronousQueue</name><argument_list>&lt;<argument><name><name>Message</name>.<name>Response</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>void</name></type> <name>messageReceived</name><parameter_list>(<param><decl><type><name>ChannelHandlerContext</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>MessageEvent</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <assert>assert <expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> instanceof <name><name>Message</name>.<name>Response</name></name></expr>;</assert>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>responses</name>.<name>put</name></name><argument_list>(<argument><expr>(<name><name>Message</name>.<name>Response</name></name>)<call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>exceptionCaught</name><parameter_list>(<param><decl><type><name>ChannelHandlerContext</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>ExceptionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr><name>this</name> == <call><name><name>ctx</name>.<name>getPipeline</name></name><argument_list>()</argument_list></call>.<call><name>getLast</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Exception in response"</expr></argument>, <argument><expr><call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name>ctx</name>.<name>sendUpstream</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
