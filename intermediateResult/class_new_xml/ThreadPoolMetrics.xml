<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\metrics\ThreadPoolMetrics.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>metrics</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ThreadPoolExecutor</name></name>;</import>

<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>Metrics</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name></name>.*;</import>

<comment type="block" format="javadoc">/**
 * Metrics for {@link ThreadPoolExecutor}.
 */</comment>
<class><specifier>public</specifier> class <name>ThreadPoolMetrics</name>
<block>{
    <comment type="block" format="javadoc">/** Number of active tasks. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>activeTasks</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of tasks that had blocked before being accepted (or rejected). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>totalBlocked</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Number of tasks currently blocked, waiting to be accepted by
     * the executor (because all threads are busy and the backing queue is full).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>currentBlocked</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of completed tasks. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>completedTasks</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of tasks waiting to be executed. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>pendingTasks</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>MetricNameFactory</name></type> <name>factory</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create metrics for given ThreadPoolExecutor.
     *
     * @param executor Thread pool
     * @param path Type of thread pool
     * @param poolName Name of thread pool to identify metrics
     */</comment>
    <constructor><specifier>public</specifier> <name>ThreadPoolMetrics</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>ThreadPoolExecutor</name></type> <name>executor</name></decl></param>, <param><decl><type><name>String</name></type> <name>path</name></decl></param>, <param><decl><type><name>String</name></type> <name>poolName</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>factory</name></name> = new <call><name>ThreadPoolMetricNameFactory</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>poolName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>activeTasks</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"ActiveTasks"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Integer</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>executor</name>.<name>getActiveCount</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>totalBlocked</name> = <call><name><name>Metrics</name>.<name>newCounter</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"TotalBlockedTasks"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentBlocked</name> = <call><name><name>Metrics</name>.<name>newCounter</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"CurrentlyBlockedTasks"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>completedTasks</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"CompletedTasks"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>executor</name>.<name>getCompletedTaskCount</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pendingTasks</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"PendingTasks"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>executor</name>.<name>getTaskCount</name></name><argument_list>()</argument_list></call> - <call><name><name>executor</name>.<name>getCompletedTaskCount</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>release</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"ActiveTasks"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"PendingTasks"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"CompletedTasks"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"TotalBlockedTasks"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"CurrentlyBlockedTasks"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class>class <name>ThreadPoolMetricNameFactory</name> <super><implements>implements <name>MetricNameFactory</name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>path</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>poolName</name></decl>;</decl_stmt>

        <constructor><name>ThreadPoolMetricNameFactory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>, <param><decl><type><name>String</name></type> <name>poolName</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>poolName</name></name> = <name>poolName</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>MetricName</name></type> <name>createMetricName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>metricName</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>groupName</name> <init>= <expr><call><name><name>ThreadPoolMetrics</name>.<name><name>class</name>.<name>getPackage</name></name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr>"ThreadPools"</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>mbeanName</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name>.<name>append</name></name><argument_list>(<argument><expr><name>groupName</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name>.<name>append</name></name><argument_list>(<argument><expr>"type="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name>.<name>append</name></name><argument_list>(<argument><expr>",path="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name>.<name>append</name></name><argument_list>(<argument><expr>",scope="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>poolName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name>.<name>append</name></name><argument_list>(<argument><expr>",name="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>metricName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>groupName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>metricName</name></expr></argument>, <argument><expr><name>path</name> + "." + <name>poolName</name></expr></argument>, <argument><expr><call><name><name>mbeanName</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
