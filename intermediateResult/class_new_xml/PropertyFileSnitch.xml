<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\locator\PropertyFileSnitch.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ResourceWatcher</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>WrappedRunnable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Used to determine if two IP's are in the same datacenter or on the same rack.
 * &lt;p/&gt;
 * Based on a properties file in the following format:
 *
 * 10.0.0.13=DC1:RAC2
 * 10.21.119.14=DC3:RAC2
 * 10.20.114.15=DC2:RAC2
 * default=DC1:r1
 */</comment>
<class><specifier>public</specifier> class <name>PropertyFileSnitch</name> <super><extends>extends <name>AbstractNetworkTopologySnitch</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>PropertyFileSnitch</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SNITCH_PROPERTIES_FILENAME</name> <init>= <expr>"cassandra-topology.properties"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name>String</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>endpointMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>String</name><index>[]</index></type> <name>defaultDCRack</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>gossipStarted</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PropertyFileSnitch</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>reloadConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>FBUtilities</name>.<name>resourceToFile</name></name><argument_list>(<argument><expr><name>SNITCH_PROPERTIES_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Runnable</name></type> <name>runnable</name> <init>= <expr>new <class><super><name>WrappedRunnable</name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>protected</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
                <block>{
                    <expr_stmt><expr><call><name>reloadConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ResourceWatcher</name>.<name>watch</name></name><argument_list>(<argument><expr><name>SNITCH_PROPERTIES_FILENAME</name></expr></argument>, <argument><expr><name>runnable</name></expr></argument>, <argument><expr>60 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>ex</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr><name>SNITCH_PROPERTIES_FILENAME</name> + " found, but does not look like a plain file. Will not watch it for changes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Get the raw information about an end point
     *
     * @param endpoint endpoint to process
     * @return a array of string with the first index being the data center and the second being the rack
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getEndpointInfo</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>rawEndpointInfo</name> <init>= <expr><call><name>getRawEndpointInfo</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rawEndpointInfo</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Unknown host " + <name>endpoint</name> + " with no default configured"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <return>return <expr><name>rawEndpointInfo</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>getRawEndpointInfo</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>value</name> <init>= <expr><call><name><name>endpointMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Could not find end point information for {}, will use default"</expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>defaultDCRack</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return the data center for which an endpoint resides in
     *
     * @param endpoint the endpoint to process
     * @return string of data center
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDatacenter</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>info</name> <init>= <expr><call><name>getEndpointInfo</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>info</name> != null : "No location defined for endpoint " + <name>endpoint</name></expr>;</assert>
        <return>return <expr><name><name>info</name><index>[<expr>0</expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return the rack for which an endpoint resides in
     *
     * @param endpoint the endpoint to process
     * @return string of rack
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRack</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>info</name> <init>= <expr><call><name>getEndpointInfo</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>info</name> != null : "No location defined for endpoint " + <name>endpoint</name></expr>;</assert>
        <return>return <expr><name><name>info</name><index>[<expr>1</expr>]</index></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reloadConfiguration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name>String</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>reloadedMap</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name><name>String</name><index>[]</index></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Properties</name></type> <name>properties</name> <init>= <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>stream</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>stream</name> = <call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call>.<call><name>getResourceAsStream</name><argument_list>(<argument><expr><name>SNITCH_PROPERTIES_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>properties</name>.<name>load</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Unable to read " + <name>SNITCH_PROPERTIES_FILENAME</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Object</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>properties</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr>(<name>String</name>) <call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr>(<name>String</name>) <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>key</name>.<name>equals</name></name><argument_list>(<argument><expr>"default"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>newDefault</name> <init>= <expr><call><name><name>value</name>.<name>split</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>newDefault</name>.<name>length</name></name> &lt; 2</expr>)</condition><then>
                    <expr_stmt><expr><name>defaultDCRack</name> = new <name><name>String</name><index>[]</index></name> <block>{ <expr>"default"</expr>, <expr>"default"</expr> }</block></expr>;</expr_stmt></then>
                <else>else
                    <expr_stmt><expr><name>defaultDCRack</name> = new <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>newDefault</name><index>[<expr>0</expr>]</index></name>.<call><name>trim</name><argument_list>()</argument_list></call></expr>, <expr><name><name>newDefault</name><index>[<expr>1</expr>]</index></name>.<call><name>trim</name><argument_list>()</argument_list></call></expr> }</block></expr>;</expr_stmt></else></if>
            }</block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name>InetAddress</name></type> <name>host</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>hostString</name> <init>= <expr><call><name><name>key</name>.<name>replace</name></name><argument_list>(<argument><expr>"/"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try
                <block>{
                    <expr_stmt><expr><name>host</name> = <call><name><name>InetAddress</name>.<name>getByName</name></name><argument_list>(<argument><expr><name>hostString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Unknown host " + <name>hostString</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>token</name> <init>= <expr><call><name><name>value</name>.<name>split</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>token</name>.<name>length</name></name> &lt; 2</expr>)</condition><then>
                    <expr_stmt><expr><name>token</name> = new <name><name>String</name><index>[]</index></name> <block>{ <expr>"default"</expr>, <expr>"default"</expr> }</block></expr>;</expr_stmt></then>
                <else>else
                    <expr_stmt><expr><name>token</name> = new <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>token</name><index>[<expr>0</expr>]</index></name>.<call><name>trim</name><argument_list>()</argument_list></call></expr>, <expr><name><name>token</name><index>[<expr>1</expr>]</index></name>.<call><name>trim</name><argument_list>()</argument_list></call></expr> }</block></expr>;</expr_stmt></else></if>
                <expr_stmt><expr><call><name><name>reloadedMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <if>if <condition>(<expr>!<call><name><name>reloadedMap</name>.<name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Snitch definitions at %s do not define a location for this node's broadcast address %s"</expr></argument>,
                                                           <argument><expr><name>SNITCH_PROPERTIES_FILENAME</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"loaded network topology {}"</expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>toString</name></name><argument_list>(<argument><expr><name>reloadedMap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>endpointMap</name> = <name>reloadedMap</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>StorageService</name>.<name>instance</name></name> != null</expr>)</condition><then> <comment type="line">// null check tolerates circular dependency; see CASSANDRA-4145</comment>
            <expr_stmt><expr><call><name><name>StorageService</name>.<name>instance</name>.<name>getTokenMetadata</name></name><argument_list>()</argument_list></call>.<call><name>invalidateCaches</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><name>gossipStarted</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>StorageService</name>.<name>instance</name>.<name>gossipSnitchInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>gossiperStarting</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>gossipStarted</name> = true</expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
