<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\metrics\ConnectionMetrics.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>metrics</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>

<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>Metrics</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>Gauge</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>Meter</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>MetricName</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>OutboundTcpConnectionPool</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Metrics for {@link OutboundTcpConnectionPool}.
 */</comment>
<class><specifier>public</specifier> class <name>ConnectionMetrics</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GROUP_NAME</name> <init>= <expr>"org.apache.cassandra.metrics"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TYPE_NAME</name> <init>= <expr>"Connection"</expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Total number of timeouts happened on this node */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Meter</name></type> <name>totalTimeouts</name> <init>= <expr><call><name><name>Metrics</name>.<name>newMeter</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"TotalTimeouts"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"total timeouts"</expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>recentTimeouts</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>address</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Pending tasks for Command(Mutations, Read etc) TCP Connections */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>commandPendingTasks</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Completed tasks for Command(Mutations, Read etc) TCP Connections */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>commandCompletedTasks</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Dropped tasks for Command(Mutations, Read etc) TCP Connections */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>commandDroppedTasks</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Pending tasks for Response(GOSSIP &amp; RESPONSE) TCP Connections */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>responsePendingTasks</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Completed tasks for Response(GOSSIP &amp; RESPONSE) TCP Connections */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>responseCompletedTasks</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of timeouts for specific IP */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Meter</name></type> <name>timeouts</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>recentTimeoutCount</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create metrics for given connection pool.
     *
     * @param ip IP address to use for metrics label
     * @param connectionPool Connection pool
     */</comment>
    <constructor><specifier>public</specifier> <name>ConnectionMetrics</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>ip</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>OutboundTcpConnectionPool</name></type> <name>connectionPool</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>address</name> = <call><name><name>ip</name>.<name>getHostAddress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>commandPendingTasks</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"CommandPendingTasks"</expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Integer</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>connectionPool</name>.<name>cmdCon</name>.<name>getPendingMessages</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>commandCompletedTasks</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"CommandCompletedTasks"</expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>connectionPool</name>.<name>cmdCon</name>.<name>getCompletedMesssages</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>commandDroppedTasks</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"CommandDroppedTasks"</expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>connectionPool</name>.<name>cmdCon</name>.<name>getDroppedMessages</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>responsePendingTasks</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"ResponsePendingTasks"</expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Integer</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>connectionPool</name>.<name>ackCon</name>.<name>getPendingMessages</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>responseCompletedTasks</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"ResponseCompletedTasks"</expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>connectionPool</name>.<name>ackCon</name>.<name>getCompletedMesssages</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>timeouts</name> = <call><name><name>Metrics</name>.<name>newMeter</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"Timeouts"</expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"timeouts"</expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>release</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"CommandPendingTasks"</expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"CommandCompletedTasks"</expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"CommandDroppedTasks"</expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"ResponsePendingTasks"</expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"ResponseCompletedTasks"</expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"Timeouts"</expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getRecentTotalTimeout</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><call><name><name>totalTimeouts</name>.<name>count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>recent</name> <init>= <expr><name>total</name> - <name>recentTimeouts</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>recentTimeouts</name> = <name>total</name></expr>;</expr_stmt>
        <return>return <expr><name>recent</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>getRecentTimeout</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>timeoutCount</name> <init>= <expr><call><name><name>timeouts</name>.<name>count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>recent</name> <init>= <expr><name>timeoutCount</name> - <name>recentTimeoutCount</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>recentTimeoutCount</name> = <name>timeoutCount</name></expr>;</expr_stmt>
        <return>return <expr><name>recent</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
