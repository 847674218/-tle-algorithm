<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\security\SSLFactory.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>security</name></name>;</package>


<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>KeyStore</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>javax</name>.<name>net</name>.<name>ssl</name>.<name>KeyManagerFactory</name></name>;</import>
<import>import <name><name>javax</name>.<name>net</name>.<name>ssl</name>.<name>SSLContext</name></name>;</import>
<import>import <name><name>javax</name>.<name>net</name>.<name>ssl</name>.<name>SSLServerSocket</name></name>;</import>
<import>import <name><name>javax</name>.<name>net</name>.<name>ssl</name>.<name>SSLSocket</name></name>;</import>
<import>import <name><name>javax</name>.<name>net</name>.<name>ssl</name>.<name>TrustManager</name></name>;</import>
<import>import <name><name>javax</name>.<name>net</name>.<name>ssl</name>.<name>TrustManagerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>EncryptionOptions</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Sets</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A Factory for providing and setting up Client and Server SSL wrapped
 * Socket and ServerSocket
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SSLFactory</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>SSLFactory</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSLServerSocket</name></type> <name>getServerSocket</name><parameter_list>(<param><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>address</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>SSLContext</name></type> <name>ctx</name> <init>= <expr><call><name>createSSLContext</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSLServerSocket</name></type> <name>serverSocket</name> <init>= <expr>(<name>SSLServerSocket</name>)<call><name><name>ctx</name>.<name>getServerSocketFactory</name></name><argument_list>()</argument_list></call>.<call><name>createServerSocket</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>serverSocket</name>.<name>setReuseAddress</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>suits</name> <init>= <expr><call><name>filterCipherSuites</name><argument_list>(<argument><expr><call><name><name>serverSocket</name>.<name>getSupportedCipherSuites</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>options</name>.<name>cipher_suites</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>serverSocket</name>.<name>setEnabledCipherSuites</name></name><argument_list>(<argument><expr><name>suits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverSocket</name>.<name>setNeedClientAuth</name></name><argument_list>(<argument><expr><name><name>options</name>.<name>require_client_auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverSocket</name>.<name>bind</name></name><argument_list>(<argument><expr>new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>serverSocket</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** Create a socket and connect */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSLSocket</name></type> <name>getSocket</name><parameter_list>(<param><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>address</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>localAddress</name></decl></param>, <param><decl><type><name>int</name></type> <name>localPort</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>SSLContext</name></type> <name>ctx</name> <init>= <expr><call><name>createSSLContext</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSLSocket</name></type> <name>socket</name> <init>= <expr>(<name>SSLSocket</name>) <call><name><name>ctx</name>.<name>getSocketFactory</name></name><argument_list>()</argument_list></call>.<call><name>createSocket</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>localAddress</name></expr></argument>, <argument><expr><name>localPort</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>suits</name> <init>= <expr><call><name>filterCipherSuites</name><argument_list>(<argument><expr><call><name><name>socket</name>.<name>getSupportedCipherSuites</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>options</name>.<name>cipher_suites</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>socket</name>.<name>setEnabledCipherSuites</name></name><argument_list>(<argument><expr><name>suits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>socket</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** Create a socket and connect, using any local address */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSLSocket</name></type> <name>getSocket</name><parameter_list>(<param><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>address</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>SSLContext</name></type> <name>ctx</name> <init>= <expr><call><name>createSSLContext</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSLSocket</name></type> <name>socket</name> <init>= <expr>(<name>SSLSocket</name>) <call><name><name>ctx</name>.<name>getSocketFactory</name></name><argument_list>()</argument_list></call>.<call><name>createSocket</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>suits</name> <init>= <expr><call><name>filterCipherSuites</name><argument_list>(<argument><expr><call><name><name>socket</name>.<name>getSupportedCipherSuites</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>options</name>.<name>cipher_suites</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>socket</name>.<name>setEnabledCipherSuites</name></name><argument_list>(<argument><expr><name>suits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>socket</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** Just create a socket */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSLSocket</name></type> <name>getSocket</name><parameter_list>(<param><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>SSLContext</name></type> <name>ctx</name> <init>= <expr><call><name>createSSLContext</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSLSocket</name></type> <name>socket</name> <init>= <expr>(<name>SSLSocket</name>) <call><name><name>ctx</name>.<name>getSocketFactory</name></name><argument_list>()</argument_list></call>.<call><name>createSocket</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>suits</name> <init>= <expr><call><name>filterCipherSuites</name><argument_list>(<argument><expr><call><name><name>socket</name>.<name>getSupportedCipherSuites</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>options</name>.<name>cipher_suites</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>socket</name>.<name>setEnabledCipherSuites</name></name><argument_list>(<argument><expr><name>suits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>socket</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSLContext</name></type> <name>createSSLContext</name><parameter_list>(<param><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>buildTruststore</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>tsf</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>ksf</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSLContext</name></type> <name>ctx</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>ctx</name> = <call><name><name>SSLContext</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>options</name>.<name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>TrustManager</name><index>[]</index></type> <name>trustManagers</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

            <if>if<condition>(<expr><name>buildTruststore</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>tsf</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name><name>options</name>.<name>truststore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>TrustManagerFactory</name></type> <name>tmf</name> <init>= <expr><call><name><name>TrustManagerFactory</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>options</name>.<name>algorithm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>KeyStore</name></type> <name>ts</name> <init>= <expr><call><name><name>KeyStore</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>options</name>.<name>store_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ts</name>.<name>load</name></name><argument_list>(<argument><expr><name>tsf</name></expr></argument>, <argument><expr><call><name><name>options</name>.<name>truststore_password</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tmf</name>.<name>init</name></name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>trustManagers</name> = <call><name><name>tmf</name>.<name>getTrustManagers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name>ksf</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name><name>options</name>.<name>keystore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>KeyManagerFactory</name></type> <name>kmf</name> <init>= <expr><call><name><name>KeyManagerFactory</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>options</name>.<name>algorithm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>KeyStore</name></type> <name>ks</name> <init>= <expr><call><name><name>KeyStore</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>options</name>.<name>store_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ks</name>.<name>load</name></name><argument_list>(<argument><expr><name>ksf</name></expr></argument>, <argument><expr><call><name><name>options</name>.<name>keystore_password</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>kmf</name>.<name>init</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><call><name><name>options</name>.<name>keystore_password</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>ctx</name>.<name>init</name></name><argument_list>(<argument><expr><call><name><name>kmf</name>.<name>getKeyManagers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>trustManagers</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Error creating the initializing the SSL Context"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>tsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>ksf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <return>return <expr><name>ctx</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name><index>[]</index></type> <name>filterCipherSuites</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>supported</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>desired</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>des</name> <init>= <expr><call><name><name>Sets</name>.<name>newHashSet</name></name><argument_list>(<argument><expr><name>desired</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toReturn</name> <init>= <expr><call><name><name>Sets</name>.<name>intersection</name></name><argument_list>(<argument><expr><call><name><name>Sets</name>.<name>newHashSet</name></name><argument_list>(<argument><expr><name>supported</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>des</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>des</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>toReturn</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Filtering out {} as it isnt supported by the socket"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><call><name><name>Sets</name>.<name>difference</name></name><argument_list>(<argument><expr><name>des</name></expr></argument>, <argument><expr><name>toReturn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>","</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><call><name><name>toReturn</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr><call><name><name>toReturn</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
