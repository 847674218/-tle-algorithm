<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\RowIndexEntry.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>Descriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>IndexHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>IFilter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FilterFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>RowIndexEntry</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Serializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>Serializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>position</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RowIndexEntry</name><parameter_list>(<param><decl><type><name>long</name></type> <name>position</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>position</name></name> = <name>position</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>serializedSize</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RowIndexEntry</name></type> <name>create</name><parameter_list>(<param><decl><type><name>long</name></type> <name>position</name></decl></param>, <param><decl><type><name>DeletionInfo</name></type> <name>deletionInfo</name></decl></param>, <param><decl><type><name>ColumnIndex</name></type> <name>index</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>index</name> != null &amp;&amp; <name><name>index</name>.<name>columnsIndex</name></name> != null &amp;&amp; <call><name><name>index</name>.<name>columnsIndex</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then>
            <return>return <expr>new <call><name>IndexedEntry</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>deletionInfo</name></expr></argument>, <argument><expr><name><name>index</name>.<name>columnsIndex</name></name></expr></argument>, <argument><expr><name><name>index</name>.<name>bloomFilter</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
        <else>else
            <return>return <expr>new <call><name>RowIndexEntry</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isIndexed</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>!<call><name>columnsIndex</name><argument_list>()</argument_list></call>.<call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>DeletionInfo</name></type> <name>deletionInfo</name><parameter_list>()</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name><name>IndexHelper</name>.<name>IndexInfo</name></name></argument>&gt;</argument_list></name></type> <name>columnsIndex</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>Collections</name>.</name>&lt;<name><name>IndexHelper</name>.<name>IndexInfo</name></name>&gt;<call><name>emptyList</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IFilter</name></type> <name>bloomFilter</name><parameter_list>()</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Serializer</name>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>RowIndexEntry</name></type> <name>rie</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeLong</name></name><argument_list>(<argument><expr><name><name>rie</name>.<name>position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>rie</name>.<name>isIndexed</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr>((<name>IndexedEntry</name>)<name>rie</name>).<call><name>serializedSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>DeletionInfo</name>.<name>serializer</name></name><argument_list>()</argument_list></call>.<call><name>serializeForSSTable</name><argument_list>(<argument><expr><call><name><name>rie</name>.<name>deletionInfo</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>rie</name>.<name>columnsIndex</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name><name>IndexHelper</name>.<name>IndexInfo</name></name></type> <name>info</name> <range>: <expr><call><name><name>rie</name>.<name>columnsIndex</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                    <expr_stmt><expr><call><name><name>info</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
                <expr_stmt><expr><call><name><name>FilterFactory</name>.<name>serialize</name></name><argument_list>(<argument><expr><call><name><name>rie</name>.<name>bloomFilter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>RowIndexEntry</name></type> <name>deserializePositionOnly</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name><name>Descriptor</name>.<name>Version</name></name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>position</name> <init>= <expr><call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>version</name>.<name>hasPromotedIndexes</name></name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>size</name> &gt; 0</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>FileUtils</name>.<name>skipBytesFully</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if>
            <return>return <expr>new <call><name>RowIndexEntry</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>RowIndexEntry</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name><name>Descriptor</name>.<name>Version</name></name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>position</name> <init>= <expr><call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>version</name>.<name>hasPromotedIndexes</name></name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>size</name> &gt; 0</expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>DeletionInfo</name></type> <name>delInfo</name> <init>= <expr><call><name><name>DeletionInfo</name>.<name>serializer</name></name><argument_list>()</argument_list></call>.<call><name>deserializeFromSSTable</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>entries</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>IndexHelper</name>.<name>IndexInfo</name></name></argument>&gt;</argument_list></name></type> <name>columnsIndex</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>IndexHelper</name>.<name>IndexInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>entries</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                        <expr_stmt><expr><call><name><name>columnsIndex</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>IndexHelper</name>.<name>IndexInfo</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
                    <decl_stmt><decl><type><name>IFilter</name></type> <name>bf</name> <init>= <expr><call><name><name>FilterFactory</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name><name>version</name>.<name>filterType</name></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <return>return <expr>new <call><name>IndexedEntry</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>delInfo</name></expr></argument>, <argument><expr><name>columnsIndex</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then>
                <else>else
                <block>{
                    <return>return <expr>new <call><name>RowIndexEntry</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></else></if>
            }</block></then>
            <else>else
            <block>{
                <return>return <expr>new <call><name>RowIndexEntry</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>skip</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name><name>Descriptor</name>.<name>Version</name></name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>version</name>.<name>hasPromotedIndexes</name></name></expr>)</condition><then>
                <expr_stmt><expr><call><name>skipPromotedIndex</name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>skipPromotedIndex</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>size</name> &lt;= 0</expr>)</condition><then>
                <return>return;</return></then></if>

            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>skipBytesFully</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * An entry in the row index for a row whose columns are indexed.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>IndexedEntry</name> <super><extends>extends <name>RowIndexEntry</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DeletionInfo</name></type> <name>deletionInfo</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name><name>IndexHelper</name>.<name>IndexInfo</name></name></argument>&gt;</argument_list></name></type> <name>columnsIndex</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IFilter</name></type> <name>bloomFilter</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>IndexedEntry</name><parameter_list>(<param><decl><type><name>long</name></type> <name>position</name></decl></param>, <param><decl><type><name>DeletionInfo</name></type> <name>deletionInfo</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>IndexHelper</name>.<name>IndexInfo</name></name></argument>&gt;</argument_list></name></type> <name>columnsIndex</name></decl></param>, <param><decl><type><name>IFilter</name></type> <name>bloomFilter</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <assert>assert <expr><name>deletionInfo</name> != null</expr>;</assert>
            <assert>assert <expr><name>columnsIndex</name> != null &amp;&amp; <call><name><name>columnsIndex</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 1</expr>;</assert>
            <expr_stmt><expr><name><name>this</name>.<name>deletionInfo</name></name> = <name>deletionInfo</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>columnsIndex</name></name> = <name>columnsIndex</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>bloomFilter</name></name> = <name>bloomFilter</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>DeletionInfo</name></type> <name>deletionInfo</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>deletionInfo</name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name><name>IndexHelper</name>.<name>IndexInfo</name></name></argument>&gt;</argument_list></name></type> <name>columnsIndex</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>columnsIndex</name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>IFilter</name></type> <name>bloomFilter</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>bloomFilter</name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>int</name></type> <name>serializedSize</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>TypeSizes</name></type> <name>typeSizes</name> <init>= <expr><name><name>TypeSizes</name>.<name>NATIVE</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>DeletionTime</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><call><name><name>deletionInfo</name>.<name>getTopLevelDeletion</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>typeSizes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> += <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>columnsIndex</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// number of entries</comment>
            <for>for (<init><decl><type><name><name>IndexHelper</name>.<name>IndexInfo</name></name></type> <name>info</name> <range>: <expr><name>columnsIndex</name></expr></range></decl></init>)
                <expr_stmt><expr><name>size</name> += <call><name><name>info</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name>typeSizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

            <expr_stmt><expr><name>size</name> += <call><name><name>FilterFactory</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name>bloomFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <assert>assert <expr><name>size</name> &lt;= <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>;</assert>
            <return>return <expr>(<name>int</name>)<name>size</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
