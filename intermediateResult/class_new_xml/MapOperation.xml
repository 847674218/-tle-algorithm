<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\operations\MapOperation.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>operations</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>ColumnIdentifier</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>ColumnNameBuilder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>ColumnSpecification</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>Term</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>UpdateParameters</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamily</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>IColumn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>CollectionType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>MapType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>MarshalException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<class><specifier>public</specifier> class <name>MapOperation</name> <super><implements>implements <name>Operation</name></implements></super>
<block>{
    <enum>enum <name>Kind</name> <block>{ <decl><name>SET</name></decl>, <decl><name>PUT</name></decl>, <decl><name>DISCARD</name></decl> }</block></enum>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Term</name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>values</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Term</name></type> <name>discardKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>MapOperation</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Term</name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>values</name></decl></param>, <param><decl><type><name>Kind</name></type> <name>kind</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>values</name></name> = <name>values</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>discardKey</name></name> = null</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>kind</name></name> = <name>kind</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>MapOperation</name><parameter_list>(<param><decl><type><name>Term</name></type> <name>discardKey</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>values</name></name> = null</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>discardKey</name></name> = <name>discardKey</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>kind</name></name> = <name><name>Kind</name>.<name>DISCARD</name></name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>,
                        <param><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name></decl></param>,
                        <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name></decl></param>,
                        <param><decl><type><name>UpdateParameters</name></type> <name>params</name></decl></param>,
                        <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>list</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!(<name>validator</name> instanceof <name>MapType</name>)</expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Map operations are only supported on Map typed columns, but " + <name>validator</name> + " given."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <switch>switch <condition>(<expr><name>kind</name></expr>)</condition>
        <block>{
            <case>case <expr><name>SET</name></expr>: <comment type="line">// fallthrough on purpose; remove previous Map before setting (PUT) the new one</comment>
                <expr_stmt><expr><call><name><name>cf</name>.<name>addAtom</name></name><argument_list>(<argument><expr><call><name><name>params</name>.<name>makeTombstoneForOverwrite</name></name><argument_list>(<argument><expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>build</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>buildAsEndOfRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </case><case>case <expr><name>PUT</name></expr>:
                <expr_stmt><expr><call><name>doPut</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr>(<name>CollectionType</name>)<name>validator</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>DISCARD</name></expr>:
                <expr_stmt><expr><call><name>doDiscard</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr>(<name>CollectionType</name>)<name>validator</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr>"Unsupported Map operation: " + <name>kind</name></expr></argument>)</argument_list></call></expr>;</throw>
        </default>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>doSetFromPrepared</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name></decl></param>, <param><decl><type><name>MapType</name></type> <name>validator</name></decl></param>, <param><decl><type><name>Term</name></type> <name>values</name></decl></param>, <param><decl><type><name>UpdateParameters</name></type> <name>params</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>values</name>.<name>isBindMarker</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Can't apply operation on column with " + <name>validator</name> + " type."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <expr_stmt><expr><call><name><name>cf</name>.<name>addAtom</name></name><argument_list>(<argument><expr><call><name><name>params</name>.<name>makeTombstoneForOverwrite</name></name><argument_list>(<argument><expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>build</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>buildAsEndOfRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doPutFromPrepared</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr><name>validator</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>doPutFromPrepared</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name></decl></param>, <param><decl><type><name>MapType</name></type> <name>validator</name></decl></param>, <param><decl><type><name>Term</name></type> <name>values</name></decl></param>, <param><decl><type><name>UpdateParameters</name></type> <name>params</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>values</name>.<name>isBindMarker</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Can't apply operation on column with " + <name>validator</name> + " type."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <try>try
        <block>{
            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr><call><name><name>validator</name>.<name>compose</name></name><argument_list>(<argument><expr><call><name><name>params</name>.<name>variables</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>values</name>.<name>bindIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>m</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>name</name> <init>= <expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><call><name><name>validator</name>.<name>nameComparator</name></name><argument_list>()</argument_list></call>.<call><name>decompose</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>value</name> <init>= <expr><call><name><name>validator</name>.<name>valueComparator</name></name><argument_list>()</argument_list></call>.<call><name>decompose</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>params</name>.<name>makeColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>MarshalException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doPut</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name></decl></param>, <param><decl><type><name>CollectionType</name></type> <name>validator</name></decl></param>, <param><decl><type><name>UpdateParameters</name></type> <name>params</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Term</name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>values</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>name</name> <init>= <expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>getByteBuffer</name><argument_list>(<argument><expr><call><name><name>validator</name>.<name>nameComparator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>params</name>.<name>variables</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>value</name> <init>= <expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>getByteBuffer</name><argument_list>(<argument><expr><call><name><name>validator</name>.<name>valueComparator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>params</name>.<name>variables</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>params</name>.<name>makeColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doDiscard</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name></decl></param>, <param><decl><type><name>CollectionType</name></type> <name>validator</name></decl></param>, <param><decl><type><name>UpdateParameters</name></type> <name>params</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>name</name> <init>= <expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>discardKey</name>.<name>getByteBuffer</name></name><argument_list>(<argument><expr><call><name><name>validator</name>.<name>nameComparator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>params</name>.<name>variables</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>params</name>.<name>makeTombstone</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addBoundNames</name><parameter_list>(<param><decl><type><name>ColumnSpecification</name></type> <name>column</name></decl></param>, <param><decl><type><name><name>ColumnSpecification</name><index>[]</index></name></type> <name>boundNames</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!(<name><name>column</name>.<name>type</name></name> instanceof <name>MapType</name>)</expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid operation, %s is not of map type"</expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>MapType</name></type> <name>mt</name> <init>= <expr>(<name>MapType</name>)<name><name>column</name>.<name>type</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Term</name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>values</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>Term</name></type> <name>key</name> <init>= <expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Term</name></type> <name>value</name> <init>= <expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>key</name>.<name>isBindMarker</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name><name>boundNames</name><index>[<expr><name><name>key</name>.<name>bindIndex</name></name></expr>]</index></name> = <call><name>keySpecOf</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <if>if <condition>(<expr><call><name><name>value</name>.<name>isBindMarker</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name><name>boundNames</name><index>[<expr><name><name>value</name>.<name>bindIndex</name></name></expr>]</index></name> = <call><name>valueSpecOf</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnSpecification</name></type> <name>keySpecOf</name><parameter_list>(<param><decl><type><name>ColumnSpecification</name></type> <name>column</name></decl></param>, <param><decl><type><name>MapType</name></type> <name>type</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name><name>column</name>.<name>ksName</name></name></expr></argument>, <argument><expr><name><name>column</name>.<name>cfName</name></name></expr></argument>, <argument><expr>new <call><name>ColumnIdentifier</name><argument_list>(<argument><expr>"key(" + <name><name>column</name>.<name>name</name></name> + ")"</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>type</name>.<name>keys</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnSpecification</name></type> <name>valueSpecOf</name><parameter_list>(<param><decl><type><name>ColumnSpecification</name></type> <name>column</name></decl></param>, <param><decl><type><name>MapType</name></type> <name>type</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name><name>column</name>.<name>ksName</name></name></expr></argument>, <argument><expr><name><name>column</name>.<name>cfName</name></name></expr></argument>, <argument><expr>new <call><name>ColumnIdentifier</name><argument_list>(<argument><expr>"value(" + <name><name>column</name>.<name>name</name></name> + ")"</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>type</name>.<name>values</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>getValues</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>l</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>2 * <call><name><name>values</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Term</name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>values</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>l</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>l</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>l</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>requiresRead</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>kind</name> == <name><name>Kind</name>.<name>SET</name></name> || <name>kind</name> == <name><name>Kind</name>.<name>DISCARD</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Type</name></type> <name>getType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>Type</name>.<name>MAP</name></name></expr>;</return>
    }</block></function>

    <comment type="block">/* Utility methods */</comment>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Operation</name></type> <name>Set</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Term</name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>values</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>MapOperation</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name><name>Kind</name>.<name>SET</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Operation</name></type> <name>Put</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Term</name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>values</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>MapOperation</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name><name>Kind</name>.<name>PUT</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Operation</name></type> <name>Put</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Term</name></type> <name>key</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Term</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>Put</name><argument_list>(<argument><expr>new <class><super><name><name>HashMap</name><argument_list>&lt;<argument><name>Term</name></argument>, <argument><name>Term</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr>1</expr></argument>)</argument_list> <block>{<block>{ <constructor_decl><name>put</name><parameter_list>(<param><decl><type><name>key</name></type></decl></param>, <param><decl><type><name>value</name></type></decl></param>)</parameter_list>;</constructor_decl> }</block>}</block></class></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Operation</name></type> <name>DiscardKey</name><parameter_list>(<param><decl><type><name>Term</name></type> <name>discardKey</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>MapOperation</name><argument_list>(<argument><expr><name>discardKey</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
