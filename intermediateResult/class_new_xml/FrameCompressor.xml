<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\FrameCompressor.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffers</name></name>;</import>
<import>import <name><name>org</name>.<name>xerial</name>.<name>snappy</name>.<name>Snappy</name></name>;</import>

<class type="interface"><specifier>public</specifier> interface <name>FrameCompressor</name>
<block>{
    <function_decl><type><specifier>public</specifier> <name>Frame</name></type> <name>compress</name><parameter_list>(<param><decl><type><name>Frame</name></type> <name>frame</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>Frame</name></type> <name>decompress</name><parameter_list>(<param><decl><type><name>Frame</name></type> <name>frame</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block">/*
     * TODO: We can probably do more efficient, like by avoiding copy.
     * Also, we don't reuse ICompressor because the API doesn't expose enough.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SnappyCompressor</name> <super><implements>implements <name>FrameCompressor</name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SnappyCompressor</name></type> <name>instance</name></decl>;</decl_stmt>
        <expr_stmt><expr>static
        <block>{
            <expr><name>SnappyCompressor</name> <name>i</name></expr>;
            <try>try
            <block>{
                <expr_stmt><expr><name>i</name> = new <call><name>SnappyCompressor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/></block></try>}</block></expr></expr_stmt>
            <catch>catch <parameter_list>(<param><decl><type><name>NoClassDefFoundError</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><name>i</name> = null</expr>;</expr_stmt>
            }</block></catch>
            <expr_stmt><expr><name>instance</name> = <name>i</name></expr>;</expr_stmt>
        }</block></class>

        <constructor><specifier>private</specifier> <name>SnappyCompressor</name><parameter_list>()</parameter_list>
        <block>{
            <comment type="line">// this would throw java.lang.NoClassDefFoundError if Snappy class</comment>
            <comment type="line">// wasn't found at runtime which should be processed by the calling method</comment>
            <expr_stmt><expr><call><name><name>Snappy</name>.<name>getNativeLibraryVersion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>Frame</name></type> <name>compress</name><parameter_list>(<param><decl><type><name>Frame</name></type> <name>frame</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>input</name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>frame</name>.<name>body</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>output</name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>Snappy</name>.<name>maxCompressedLength</name></name><argument_list>(<argument><expr><name><name>input</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>frame</name>.<name>body</name>.<name>readBytes</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>written</name> <init>= <expr><call><name><name>Snappy</name>.<name>compress</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>input</name>.<name>length</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>frame</name>.<name>with</name></name><argument_list>(<argument><expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Frame</name></type> <name>decompress</name><parameter_list>(<param><decl><type><name>Frame</name></type> <name>frame</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>input</name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>frame</name>.<name>body</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>frame</name>.<name>body</name>.<name>readBytes</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr>!<call><name><name>Snappy</name>.<name>isValidCompressedBuffer</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>input</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr>"Provided frame does not appear to be Snappy compressed"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>output</name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>Snappy</name>.<name>uncompressedLength</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>Snappy</name>.<name>uncompress</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>input</name>.<name>length</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>frame</name>.<name>with</name></name><argument_list>(<argument><expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}
</unit>
