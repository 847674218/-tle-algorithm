<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\commitlog\CommitLogDescriptor.java"><comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>commitlog</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>regex</name>.<name>Matcher</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>regex</name>.<name>Pattern</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>

<class><specifier>public</specifier> class <name>CommitLogDescriptor</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SEPARATOR</name> <init>= <expr>"-"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FILENAME_PREFIX</name> <init>= <expr>"CommitLog" + <name>SEPARATOR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FILENAME_EXTENSION</name> <init>= <expr>".log"</expr></init></decl>;</decl_stmt>
    <comment type="line">// match both legacy and new version of commitlogs Ex: CommitLog-12345.log and CommitLog-4-12345.log.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>COMMIT_LOG_FILE_PATTERN</name> <init>= <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr><name>FILENAME_PREFIX</name> + "((\\d+)(" + <name>SEPARATOR</name> + "\\d+)?)" + <name>FILENAME_EXTENSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LEGACY_VERSION</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_12</name> <init>= <expr>2</expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Increment this number if there is a changes in the commit log disc layout or MessagingVersion changes.
     * Note: make sure to handle {@link #getMessagingVersion()}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>current_version</name> <init>= <expr><name>VERSION_12</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>version</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>id</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CommitLogDescriptor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>version</name></decl></param>, <param><decl><type><name>long</name></type> <name>id</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>version</name></name> = <name>version</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>id</name></name> = <name>id</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>CommitLogDescriptor</name><parameter_list>(<param><decl><type><name>long</name></type> <name>id</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>current_version</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CommitLogDescriptor</name></type> <name>fromFileName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Matcher</name></type> <name>matcher</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!(<name>matcher</name> = <call><name><name>COMMIT_LOG_FILE_PATTERN</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>).<call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Cannot parse the version of the file: " + <name>name</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <if>if <condition>(<expr><call><name><name>matcher</name>.<name>group</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call> != null</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name><name>Long</name>.<name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>matcher</name>.<name>group</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call>.<call><name>split</name><argument_list>(<argument><expr><name>SEPARATOR</name></expr></argument>)</argument_list></call><index>[<expr>1</expr>]</index></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>CommitLogDescriptor</name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>matcher</name>.<name>group</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name><name>Long</name>.<name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>matcher</name>.<name>group</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>CommitLogDescriptor</name><argument_list>(<argument><expr><name>LEGACY_VERSION</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMessagingVersion</name><parameter_list>()</parameter_list>
    <block>{
        <assert>assert <expr><name><name>MessagingService</name>.<name>current_version</name></name> == <name><name>MessagingService</name>.<name>VERSION_12</name></name></expr>;</assert>
        <switch>switch <condition>(<expr><name>version</name></expr>)</condition>
        <block>{
            <case>case <expr><name>LEGACY_VERSION</name></expr>:
                <return>return <expr><name><name>MessagingService</name>.<name>VERSION_11</name></name></expr>;</return>
            </case><case>case <expr><name>VERSION_12</name></expr>:
                <return>return <expr><name><name>MessagingService</name>.<name>VERSION_12</name></name></expr>;</return>
            </case><default>default:
                <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Unknown commitlog version " + <name>version</name></expr></argument>)</argument_list></call></expr>;</throw>
        </default>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>fileName</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>FILENAME_PREFIX</name> + <name>version</name> + <name>SEPARATOR</name> + <name>id</name> + <name>FILENAME_EXTENSION</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param   filename  the filename to check
     * @return true if filename could be a commit log based on it's filename
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValid</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>COMMIT_LOG_FILE_PATTERN</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call>.<call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
