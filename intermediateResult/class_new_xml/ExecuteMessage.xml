<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\messages\ExecuteMessage.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>UUID</name></name>;</import>

<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>CQLStatement</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>PreparedQueryNotFoundException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>QueryState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name>.<name>Tracing</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>MD5Digest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>UUIDGen</name></name>;</import>

<class><specifier>public</specifier> class <name>ExecuteMessage</name> <super><extends>extends <name><name>Message</name>.<name>Request</name></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ExecuteMessage</name></argument>&gt;</argument_list></name></name></type> <name>codec</name> <init>= <expr>new <class><super><name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ExecuteMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>ExecuteMessage</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>id</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readBytes</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>body</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <expr_stmt><expr><call><name><name>values</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>readValue</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

            <decl_stmt><decl><type><name>ConsistencyLevel</name></type> <name>consistency</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readConsistencyLevel</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>ExecuteMessage</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>consistency</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>ExecuteMessage</name></type> <name>msg</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// We have:</comment>
            <comment type="line">//   - statementId</comment>
            <comment type="line">//   - Number of values</comment>
            <comment type="line">//   - The values</comment>
            <comment type="line">//   - options</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>vs</name> <init>= <expr><call><name><name>msg</name>.<name>values</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>CBUtil</name>.<name>BufferBuilder</name></name></type> <name>builder</name> <init>= <expr>new <call><name><name>CBUtil</name>.<name>BufferBuilder</name></name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>bytesToCB</name></name><argument_list>(<argument><expr><name><name>msg</name>.<name>statementId</name>.<name>bytes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>shortToCB</name></name><argument_list>(<argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Values</comment>
            <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>value</name> <range>: <expr><name><name>msg</name>.<name>values</name></name></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name>builder</name>.<name>addValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

            <expr_stmt><expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>consistencyLevelToCB</name></name><argument_list>(<argument><expr><name><name>msg</name>.<name>consistency</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>builder</name>.<name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>MD5Digest</name></type> <name>statementId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>values</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ConsistencyLevel</name></type> <name>consistency</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ExecuteMessage</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>statementId</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>values</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>MD5Digest</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>statementId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>consistency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>ExecuteMessage</name><parameter_list>(<param><decl><type><name>MD5Digest</name></type> <name>statementId</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>values</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Message</name>.<name>Type</name>.<name>EXECUTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>statementId</name></name> = <name>statementId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>values</name></name> = <name>values</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>consistency</name></name> = <name>consistency</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>codec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Message</name>.<name>Response</name></name></type> <name>execute</name><parameter_list>(<param><decl><type><name>QueryState</name></type> <name>state</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>CQLStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>QueryProcessor</name>.<name>getPrepared</name></name><argument_list>(<argument><expr><name>statementId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>statement</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>PreparedQueryNotFoundException</name><argument_list>(<argument><expr><name>statementId</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>UUID</name></type> <name>tracingId</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>isTracingRequested</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>tracingId</name> = <call><name><name>UUIDGen</name>.<name>getTimeUUID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name>.<name>prepareTracingSession</name></name><argument_list>(<argument><expr><name>tracingId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>state</name>.<name>traceNextQuery</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>state</name>.<name>createTracingSession</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// TODO we don't have [typed] access to CQL bind variables here.  CASSANDRA-4560 is open to add support.</comment>
                <expr_stmt><expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>begin</name><argument_list>(<argument><expr>"Execute CQL3 prepared query"</expr></argument>, <argument><expr><name><name>Collections</name>.</name>&lt;<name>String</name></expr></argument>, <argument><expr><name>String</name>&gt;<call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name><name>Message</name>.<name>Response</name></name></type> <name>response</name> <init>= <expr><call><name><name>QueryProcessor</name>.<name>processPrepared</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>consistency</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>tracingId</name> != null</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>response</name>.<name>setTracingId</name></name><argument_list>(<argument><expr><name>tracingId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <return>return <expr><name>response</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>ErrorMessage</name>.<name>fromException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></catch>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>stopSession</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"EXECUTE " + <name>statementId</name> + " with " + <call><name><name>values</name>.<name>size</name></name><argument_list>()</argument_list></call> + " values at consistency " + <name>consistency</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
