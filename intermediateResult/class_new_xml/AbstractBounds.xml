<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\dht\AbstractBounds.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>RowPosition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name> <extends>extends <name>RingPosition</name></extends></argument>&gt;</argument_list></name> <super><implements>implements <name>Serializable</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr>1L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>AbstractBoundsSerializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>AbstractBoundsSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <enum><specifier>private</specifier> enum <name>Type</name>
    <block>{
        <decl><name>RANGE</name></decl>,
        <decl><name>BOUNDS</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T</name></type> <name>right</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <specifier>final</specifier> <name>IPartitioner</name></type> <name>partitioner</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AbstractBounds</name><parameter_list>(<param><decl><type><name>T</name></type> <name>left</name></decl></param>, <param><decl><type><name>T</name></type> <name>right</name></decl></param>, <param><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>left</name></name> = <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>right</name></name> = <name>right</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>partitioner</name></name> = <name>partitioner</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Given token T and AbstractBounds ?L,R?, returns Pair(?L,T], (T,R?),
     * where ? means that the same type of AbstractBounds is returned as the original.
     *
     * Put another way, returns a Pair of everything this AbstractBounds contains
     * up to and including the split position, and everything it contains after
     * (not including the split position).
     *
     * The original AbstractBounds must either contain the position T, or T
     * should be equals to the left bound L.
     *
     * If the split would only yield the same AbstractBound, null is returned
     * instead.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Pair</name><argument_list>&lt;<argument><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>split</name><parameter_list>(<param><decl><type><name>T</name></type> <name>position</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>31 * <call><name><name>left</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> + <call><name><name>right</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** return true if @param range intersects any of the given @param ranges */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>intersects</name><parameter_list>(<param><decl><type><name><name>Iterable</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name><name>Range</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>range2</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>range2</name>.<name>intersects</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr>true</expr>;</return></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name>T</name></type> <name>start</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>unwrap</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyValidator</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getOpeningString</name><argument_list>()</argument_list></call> + <call><name>format</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>keyValidator</name></expr></argument>)</argument_list></call> + ", " + <call><name>format</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>keyValidator</name></expr></argument>)</argument_list></call> + <call><name>getClosingString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>format</name><parameter_list>(<param><decl><type><name>T</name></type> <name>value</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyValidator</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>value</name> instanceof <name>DecoratedKey</name></expr>)</condition><then>
        <block>{
            <return>return <expr><call><name><name>keyValidator</name>.<name>getString</name></name><argument_list>(<argument><expr>((<name>DecoratedKey</name>)<name>value</name>).<name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <return>return <expr><call><name><name>value</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getOpeningString</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getClosingString</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Transform this abstract bounds to equivalent covering bounds of row positions.
     * If this abstract bounds was already an abstractBounds of row positions, this is a noop.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>toRowBounds</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Transform this abstract bounds to a token abstract bounds.
     * If this abstract bounds was already an abstractBounds of token, this is a noop, otherwise this use the row position tokens.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>AbstractBounds</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>toTokenBounds</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withNewRight</name><parameter_list>(<param><decl><type><name>T</name></type> <name>newRight</name></decl></param>)</parameter_list>;</function_decl>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>AbstractBoundsSerializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <comment type="line">// Older version don't know how to handle abstract bounds of keys</comment>
            <comment type="line">// However, the serialization has been designed so that token bounds are serialized the same way that before 1.1</comment>
            <if>if <condition>(<expr><name>version</name> &lt; <name><name>MessagingService</name>.<name>VERSION_11</name></name></expr>)</condition><then>
                <expr_stmt><expr><name>range</name> = <call><name><name>range</name>.<name>toTokenBounds</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

            <comment type="block">/*
             * The first int tells us if it's a range or bounds (depending on the value) _and_ if it's tokens or keys (depending on the
             * sign). We use negative kind for keys so as to preserve the serialization of token from older version.
             */</comment>
            <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name>kindInt</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>range</name>.<name>left</name></name> instanceof <name>Token</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>Token</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr>(<name>Token</name>) <name><name>range</name>.<name>left</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Token</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr>(<name>Token</name>) <name><name>range</name>.<name>right</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><call><name><name>RowPosition</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr>(<name>RowPosition</name>) <name><name>range</name>.<name>left</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>RowPosition</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr>(<name>RowPosition</name>) <name><name>range</name>.<name>right</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>kindInt</name><parameter_list>(<param><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>ab</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>kind</name> <init>= <expr><name>ab</name> instanceof <name>Range</name> ? <call><name><name>Type</name>.<name>RANGE</name>.<name>ordinal</name></name><argument_list>()</argument_list></call> : <call><name><name>Type</name>.<name>BOUNDS</name>.<name>ordinal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!(<name><name>ab</name>.<name>left</name></name> instanceof <name>Token</name>)</expr>)</condition><then>
                <expr_stmt><expr><name>kind</name> = -(<name>kind</name> + 1)</expr>;</expr_stmt></then></if>
            <return>return <expr><name>kind</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>AbstractBounds</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>kind</name> <init>= <expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isToken</name> <init>= <expr><name>kind</name> &gt;= 0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>isToken</name></expr>)</condition><then>
                <expr_stmt><expr><name>kind</name> = -(<name>kind</name>+1)</expr>;</expr_stmt></then></if>

            <decl_stmt><decl><type><name>RingPosition</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>isToken</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>left</name> = <call><name><name>Token</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>right</name> = <call><name><name>Token</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>left</name> = <call><name><name>RowPosition</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>right</name> = <call><name><name>RowPosition</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name>kind</name> == <call><name><name>Type</name>.<name>RANGE</name>.<name>ordinal</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
            <return>return <expr>new <call><name>Bounds</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>ab</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr><call><name>kindInt</name><argument_list>(<argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>ab</name>.<name>left</name></name> instanceof <name>Token</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>size</name> += <call><name><name>Token</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr>(<name>Token</name>) <name><name>ab</name>.<name>left</name></name></expr></argument>, <argument><expr><name><name>TypeSizes</name>.<name>NATIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name> += <call><name><name>Token</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr>(<name>Token</name>) <name><name>ab</name>.<name>right</name></name></expr></argument>, <argument><expr><name><name>TypeSizes</name>.<name>NATIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>size</name> += <call><name><name>RowPosition</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr>(<name>RowPosition</name>) <name><name>ab</name>.<name>left</name></name></expr></argument>, <argument><expr><name><name>TypeSizes</name>.<name>NATIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name> += <call><name><name>RowPosition</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr>(<name>RowPosition</name>) <name><name>ab</name>.<name>right</name></name></expr></argument>, <argument><expr><name><name>TypeSizes</name>.<name>NATIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <return>return <expr><name>size</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
