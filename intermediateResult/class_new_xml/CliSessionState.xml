<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cli\CliSessionState.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cli</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cli</name>.<name>transport</name>.<name>FramedTransportFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>EncryptionOptions</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>EncryptionOptions</name>.<name>ClientEncryptionOptions</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tools</name>.<name>NodeProbe</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TTransportFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Used to hold the state for the CLI.
 */</comment>
<class><specifier>public</specifier> class <name>CliSessionState</name>
<block>{

    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type>  <name>hostName</name></decl>;</decl_stmt>      <comment type="line">// cassandra server name</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type>     <name>thriftPort</name></decl>;</decl_stmt>    <comment type="line">// cassandra server's thrift port</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>debug</name> <init>= <expr>false</expr></init></decl>;</decl_stmt> <comment type="line">// print stack traces when errors occur in the CLI</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type>  <name>username</name></decl>;</decl_stmt>      <comment type="line">// cassandra login name (if SimpleAuthenticator is used)</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type>  <name>password</name></decl>;</decl_stmt>      <comment type="line">// cassandra login password (if SimpleAuthenticator is used)</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type>  <name>keyspace</name></decl>;</decl_stmt>      <comment type="line">// cassandra keyspace user is authenticating</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>batch</name> <init>= <expr>false</expr></init></decl>;</decl_stmt> <comment type="line">// enable/disable batch processing mode</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type>  <name>filename</name> <init>= <expr>""</expr></init></decl>;</decl_stmt> <comment type="line">// file to read commands from</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type>     <name>jmxPort</name> <init>= <expr>7199</expr></init></decl>;</decl_stmt><comment type="line">// JMX service port</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>verbose</name> <init>= <expr>false</expr></init></decl>;</decl_stmt> <comment type="line">// verbose output</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type>     <name>schema_mwt</name> <init>= <expr>10 * 1000</expr></init></decl>;</decl_stmt>    <comment type="line">// Schema migration wait time (secs.)</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>TTransportFactory</name></type> <name>transportFactory</name> <init>= <expr>new <call><name>FramedTransportFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>encOptions</name> <init>= <expr>new <call><name>ClientEncryptionOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Streams to read/write from
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>InputStream</name></type> <name>in</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>PrintStream</name></type> <name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>PrintStream</name></type> <name>err</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CliSessionState</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>in</name> = <name><name>System</name>.<name>in</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> = <name><name>System</name>.<name>out</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = <name><name>System</name>.<name>err</name></name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOut</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>newOut</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>out</name></name> = <name>newOut</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setErr</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>newErr</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>err</name></name> = <name>newErr</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>inFileMode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>!<call><name><name>this</name>.<name>filename</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>NodeProbe</name></type> <name>getNodeProbe</name><parameter_list>()</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr>new <call><name>NodeProbe</name><argument_list>(<argument><expr><name>hostName</name></expr></argument>, <argument><expr><name>jmxPort</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>err</name>.<name>printf</name></name><argument_list>(<argument><expr>"WARNING: Could not connect to the JMX on %s:%d, information won't be shown.%n%n"</expr></argument>, <argument><expr><name>hostName</name></expr></argument>, <argument><expr><name>jmxPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr>null</expr>;</return>
    }</block></function>
}</block></class>
</unit>
