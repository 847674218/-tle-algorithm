<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\operations\PreparedOperation.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>operations</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamily</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>IColumn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>CollectionType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>ListType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>MapType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>SetType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<class><specifier>public</specifier> class <name>PreparedOperation</name> <super><implements>implements <name>Operation</name></implements></super>
<block>{
    <enum><specifier>public</specifier> enum <name>Kind</name> <block>{ <decl><name>SET</name></decl>, <decl><name>PREPARED_PLUS</name></decl>, <decl><name>PLUS_PREPARED</name></decl>, <decl><name>MINUS_PREPARED</name></decl> }</block></enum>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Term</name></type> <name>preparedValue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PreparedOperation</name><parameter_list>(<param><decl><type><name>Term</name></type> <name>value</name></decl></param>, <param><decl><type><name>Kind</name></type> <name>kind</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><call><name><name>value</name>.<name>isBindMarker</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>preparedValue</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>kind</name></name> = <name>kind</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>,
                        <param><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name></decl></param>,
                        <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name></decl></param>,
                        <param><decl><type><name>UpdateParameters</name></type> <name>params</name></decl></param>,
                        <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>list</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>validator</name> instanceof <name>CollectionType</name></expr>)</condition><then>
        <block>{
            <switch>switch <condition>(<expr>((<name>CollectionType</name>)<name>validator</name>).<name>kind</name></expr>)</condition>
            <block>{
                <case>case <expr><name>LIST</name></expr>:
                    <switch>switch <condition>(<expr><name>kind</name></expr>)</condition>
                    <block>{
                        <case>case <expr><name>SET</name></expr>:
                            <expr_stmt><expr><call><name><name>ListOperation</name>.<name>doSetFromPrepared</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr>(<name>ListType</name>)<name>validator</name></expr></argument>, <argument><expr><name>preparedValue</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </case><case>case <expr><name>PREPARED_PLUS</name></expr>:
                            <expr_stmt><expr><call><name><name>ListOperation</name>.<name>doPrependFromPrepared</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr>(<name>ListType</name>)<name>validator</name></expr></argument>, <argument><expr><name>preparedValue</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </case><case>case <expr><name>PLUS_PREPARED</name></expr>:
                            <expr_stmt><expr><call><name><name>ListOperation</name>.<name>doAppendFromPrepared</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr>(<name>ListType</name>)<name>validator</name></expr></argument>, <argument><expr><name>preparedValue</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </case><case>case <expr><name>MINUS_PREPARED</name></expr>:
                            <expr_stmt><expr><call><name><name>ListOperation</name>.<name>doDiscardFromPrepared</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr>(<name>ListType</name>)<name>validator</name></expr></argument>, <argument><expr><name>preparedValue</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                    </case>}</block></switch>
                    <break>break;</break>
                </case><case>case <expr><name>SET</name></expr>:
                    <switch>switch <condition>(<expr><name>kind</name></expr>)</condition>
                    <block>{
                        <case>case <expr><name>SET</name></expr>:
                            <expr_stmt><expr><call><name><name>SetOperation</name>.<name>doSetFromPrepared</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr>(<name>SetType</name>)<name>validator</name></expr></argument>, <argument><expr><name>preparedValue</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </case><case>case <expr><name>PREPARED_PLUS</name></expr>:
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Unsupported syntax, cannot add to a prepared set"</expr></argument>)</argument_list></call></expr>;</throw>
                        </case><case>case <expr><name>PLUS_PREPARED</name></expr>:
                            <expr_stmt><expr><call><name><name>SetOperation</name>.<name>doAddFromPrepared</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr>(<name>SetType</name>)<name>validator</name></expr></argument>, <argument><expr><name>preparedValue</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </case><case>case <expr><name>MINUS_PREPARED</name></expr>:
                            <expr_stmt><expr><call><name><name>SetOperation</name>.<name>doDiscardFromPrepared</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr>(<name>SetType</name>)<name>validator</name></expr></argument>, <argument><expr><name>preparedValue</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                    </case>}</block></switch>
                    <break>break;</break>
                </case><case>case <expr><name>MAP</name></expr>:
                    <switch>switch <condition>(<expr><name>kind</name></expr>)</condition>
                    <block>{
                        <case>case <expr><name>SET</name></expr>:
                            <expr_stmt><expr><call><name><name>MapOperation</name>.<name>doSetFromPrepared</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr>(<name>MapType</name>)<name>validator</name></expr></argument>, <argument><expr><name>preparedValue</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </case><case>case <expr><name>PREPARED_PLUS</name></expr>:
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Unsupported syntax, cannot put to a prepared map"</expr></argument>)</argument_list></call></expr>;</throw>
                        </case><case>case <expr><name>PLUS_PREPARED</name></expr>:
                            <expr_stmt><expr><call><name><name>MapOperation</name>.<name>doPutFromPrepared</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr>(<name>MapType</name>)<name>validator</name></expr></argument>, <argument><expr><name>preparedValue</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </case><case>case <expr><name>MINUS_PREPARED</name></expr>:
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Unsuppoted syntax, discard syntax for map not supported"</expr></argument>)</argument_list></call></expr>;</throw>
                    </case>}</block></switch>
                    <break>break;</break>
            </case>}</block></switch>
        }</block></then>
        <else>else
        <block>{
            <switch>switch <condition>(<expr><name>kind</name></expr>)</condition>
            <block>{
                <case>case <expr><name>SET</name></expr>:
                    <expr_stmt><expr><call><name><name>ColumnOperation</name>.<name>Set</name></name><argument_list>(<argument><expr><name>preparedValue</name></expr></argument>)</argument_list></call>.<call><name>execute</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr><name>validator</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>PREPARED_PLUS</name></expr>:
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Unsupported syntax for increment, must be of the form X = X + &lt;value&gt;"</expr></argument>)</argument_list></call></expr>;</throw>
                </case><case>case <expr><name>PLUS_PREPARED</name></expr>:
                    <expr_stmt><expr><call><name><name>ColumnOperation</name>.<name>CounterInc</name></name><argument_list>(<argument><expr><name>preparedValue</name></expr></argument>)</argument_list></call>.<call><name>execute</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr><name>validator</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>MINUS_PREPARED</name></expr>:
                    <expr_stmt><expr><call><name><name>ColumnOperation</name>.<name>CounterDec</name></name><argument_list>(<argument><expr><name>preparedValue</name></expr></argument>)</argument_list></call>.<call><name>execute</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr><name>validator</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </case>}</block></switch>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addBoundNames</name><parameter_list>(<param><decl><type><name>ColumnSpecification</name></type> <name>column</name></decl></param>, <param><decl><type><name><name>ColumnSpecification</name><index>[]</index></name></type> <name>boundNames</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name><name>preparedValue</name>.<name>isBindMarker</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name><name>boundNames</name><index>[<expr><name><name>preparedValue</name>.<name>bindIndex</name></name></expr>]</index></name> = <name>column</name></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>getValues</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>singletonList</name></name><argument_list>(<argument><expr><name>preparedValue</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>requiresRead</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Only prepared operation requiring a read is list discard</comment>
        <return>return <expr>(<name>validator</name> instanceof <name>ListType</name>) &amp;&amp; <name>kind</name> == <name><name>Kind</name>.<name>MINUS_PREPARED</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPotentialCounterOperation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>kind</name> == <name><name>Kind</name>.<name>PLUS_PREPARED</name></name> || <name>kind</name> == <name><name>Kind</name>.<name>MINUS_PREPARED</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Type</name></type> <name>getType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>Type</name>.<name>PREPARED</name></name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
