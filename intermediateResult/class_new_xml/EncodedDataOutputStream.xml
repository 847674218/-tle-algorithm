<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\vint\EncodedDataOutputStream.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>vint</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>AbstractDataOutput</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Borrows idea from
 * https://developers.google.com/protocol-buffers/docs/encoding#varints
 */</comment>
<class><specifier>public</specifier> class <name>EncodedDataOutputStream</name> <super><extends>extends <name>AbstractDataOutput</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>out</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>EncodedDataOutputStream</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>out</name></name> = <name>out</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>int</name></type> <name>b</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></param>, <param><decl><type><name>int</name></type> <name>off</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/* as all of the integer types could be encoded using VInt we can use single method vintEncode */</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeInt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>v</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>vintEncode</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeLong</name><parameter_list>(<param><decl><type><name>long</name></type> <name>v</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>vintEncode</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeShort</name><parameter_list>(<param><decl><type><name>int</name></type> <name>v</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>vintEncode</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>vintEncode</name><parameter_list>(<param><decl><type><name>long</name></type> <name>i</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>i</name> &gt;= -112 &amp;&amp; <name>i</name> &lt;= 127</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>writeByte</name><argument_list>(<argument><expr>(<name>byte</name>) <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr>-112</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>i</name> ^= -1L</expr>;</expr_stmt> <comment type="line">// take one's complement'</comment>
            <expr_stmt><expr><name>len</name> = -120</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>long</name></type> <name>tmp</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>tmp</name> != 0</expr>)</condition>
        <block>{
            <expr_stmt><expr><name>tmp</name> = <name>tmp</name> &gt;&gt; 8</expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name>--</expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name>writeByte</name><argument_list>(<argument><expr>(<name>byte</name>) <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> = (<name>len</name> &lt; -120) ? -(<name>len</name> + 120) : -(<name>len</name> + 112)</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>len</name></expr></init></decl>;</init> <condition><expr><name>idx</name> != 0</expr>;</condition> <incr><expr><name>idx</name>--</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>shiftbits</name> <init>= <expr>(<name>idx</name> - 1) * 8</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>mask</name> <init>= <expr>0xFFL &lt;&lt; <name>shiftbits</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>writeByte</name><argument_list>(<argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>i</name> &amp; <name>mask</name>) &gt;&gt; <name>shiftbits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class>
</unit>
