<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\marshal\UUIDType.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>;</package>


<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>ParseException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>UUID</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>jdbc</name>.<name>JdbcUUID</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>UUIDGen</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>time</name>.<name>DateUtils</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>jdbc</name>.<name>JdbcDate</name>.<name>iso8601Patterns</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Compares UUIDs using the following criteria:&lt;br&gt;
 * - if count of supplied bytes is less than 16, compare counts&lt;br&gt;
 * - compare UUID version fields&lt;br&gt;
 * - nil UUID is always lesser&lt;br&gt;
 * - compare timestamps if both are time-based&lt;br&gt;
 * - compare lexically, unsigned msb-to-lsb comparison&lt;br&gt;
 *
 * @see "com.fasterxml.uuid.UUIDComparator"
 */</comment>
<class><specifier>public</specifier> class <name>UUIDType</name> <super><extends>extends <name><name>AbstractType</name><argument_list>&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UUIDType</name></type> <name>instance</name> <init>= <expr>new <call><name>UUIDType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><name>UUIDType</name><parameter_list>()</parameter_list>
    <block>{
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>b1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>b2</name></decl></param>)</parameter_list>
    <block>{

        <comment type="line">// Compare for length</comment>

        <if>if <condition>(<expr>(<name>b1</name> == null) || (<call><name><name>b1</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &lt; 16)</expr>)</condition><then>
        <block>{
            <return>return <expr>((<name>b2</name> == null) || (<call><name><name>b2</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &lt; 16)) ? 0 : -1</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>(<name>b2</name> == null) || (<call><name><name>b2</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &lt; 16)</expr>)</condition><then>
        <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>s1</name> <init>= <expr><call><name><name>b1</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>s2</name> <init>= <expr><call><name><name>b2</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Compare versions</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>v1</name> <init>= <expr>(<call><name><name>b1</name>.<name>get</name></name><argument_list>(<argument><expr><name>s1</name> + 6</expr></argument>)</argument_list></call> &gt;&gt; 4) &amp; 0x0f</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>v2</name> <init>= <expr>(<call><name><name>b2</name>.<name>get</name></name><argument_list>(<argument><expr><name>s2</name> + 6</expr></argument>)</argument_list></call> &gt;&gt; 4) &amp; 0x0f</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>v1</name> != <name>v2</name></expr>)</condition><then>
        <block>{
            <return>return <expr><name>v1</name> - <name>v2</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// Compare timestamps for version 1</comment>

        <if>if <condition>(<expr><name>v1</name> == 1</expr>)</condition><then>
        <block>{
            <comment type="line">// if both time-based, compare as timestamps</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>compareTimestampBytes</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>c</name> != 0</expr>)</condition><then>
            <block>{
                <return>return <expr><name>c</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// Compare the two byte arrays starting from the first</comment>
        <comment type="line">// byte in the sequence until an inequality is</comment>
        <comment type="line">// found. This should provide equivalent results</comment>
        <comment type="line">// to the comparison performed by the RFC 4122</comment>
        <comment type="line">// Appendix A - Sample Implementation.</comment>
        <comment type="line">// Note: java.util.UUID.compareTo is not a lexical</comment>
        <comment type="line">// comparison</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 16</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr>((<call><name><name>b1</name>.<name>get</name></name><argument_list>(<argument><expr><name>s1</name> + <name>i</name></expr></argument>)</argument_list></call>) &amp; 0xFF) - ((<call><name><name>b2</name>.<name>get</name></name><argument_list>(<argument><expr><name>s2</name> + <name>i</name></expr></argument>)</argument_list></call>) &amp; 0xFF)</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>c</name> != 0</expr>)</condition><then>
            <block>{
                <return>return <expr><name>c</name></expr>;</return>
            }</block></then></if>
        }</block></for>

        <return>return <expr>0</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>compareTimestampBytes</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>o1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>o2</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>o1Pos</name> <init>= <expr><call><name><name>o1</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>o2Pos</name> <init>= <expr><call><name><name>o2</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr>(<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name> + 6</expr></argument>)</argument_list></call> &amp; 0xF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name> + 6</expr></argument>)</argument_list></call> &amp; 0xF)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then>
        <block>{
            <return>return <expr><name>d</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>d</name> = (<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name> + 7</expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name> + 7</expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then>
        <block>{
            <return>return <expr><name>d</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>d</name> = (<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name> + 4</expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name> + 4</expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then>
        <block>{
            <return>return <expr><name>d</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>d</name> = (<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name> + 5</expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name> + 5</expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then>
        <block>{
            <return>return <expr><name>d</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>d</name> = (<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name></expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name></expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then>
        <block>{
            <return>return <expr><name>d</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>d</name> = (<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name> + 1</expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name> + 1</expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then>
        <block>{
            <return>return <expr><name>d</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>d</name> = (<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name> + 2</expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name> + 2</expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then>
        <block>{
            <return>return <expr><name>d</name></expr>;</return>
        }</block></then></if>

        <return>return <expr>(<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name> + 3</expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name> + 3</expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>compose</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{

        <return>return <expr><call><name><name>JdbcUUID</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>(<call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call> != 0) &amp;&amp; (<call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call> != 16)</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr>"UUIDs must be exactly 16 bytes"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>JdbcUUID</name>.<name>instance</name>.<name>getString</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>jdbc</name>.<name>MarshalException</name></name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>decompose</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>JdbcUUID</name>.<name>instance</name>.<name>decompose</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>ByteBuffer</name></type> <name>fromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{
        <comment type="line">// Return an empty ByteBuffer for an empty string.</comment>
        <if>if <condition>(<expr><call><name><name>source</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>idBytes</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

        <comment type="line">// ffffffff-ffff-ffff-ffff-ffffffffff</comment>
        <if>if <condition>(<expr><call><name><name>TimeUUIDType</name>.<name>regexPattern</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call>.<call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>UUID</name></type> <name>uuid</name></decl>;</decl_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name>uuid</name> = <call><name><name>UUID</name>.<name>fromString</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>idBytes</name> = <call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>decompose</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"unable to make UUID from '%s'"</expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>source</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"now"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>idBytes</name> = <call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>getTimeUUIDBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <comment type="line">// Milliseconds since epoch?</comment>
        <else>else <if>if <condition>(<expr><call><name><name>source</name>.<name>matches</name></name><argument_list>(<argument><expr>"^\\d+$"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><name>idBytes</name> = <call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>getTimeUUIDBytes</name></name><argument_list>(<argument><expr><call><name><name>Long</name>.<name>parseLong</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"unable to make version 1 UUID from '%s'"</expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then>
        <comment type="line">// Last chance, attempt to parse as date-time string</comment>
        <else>else
        <block>{
            <try>try
            <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>timestamp</name> <init>= <expr><call><name><name>DateUtils</name>.<name>parseDate</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>iso8601Patterns</name></expr></argument>)</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>idBytes</name> = <call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>getTimeUUIDBytes</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>ParseException</name></type> <name>e1</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"unable to coerce '%s' to version 1 UUID"</expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></else></if></else></if></else></if>

        <return>return <expr><name>idBytes</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
