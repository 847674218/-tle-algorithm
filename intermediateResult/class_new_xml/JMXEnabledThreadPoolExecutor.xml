<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\concurrent\JMXEnabledThreadPoolExecutor.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>management</name>.<name>ManagementFactory</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>BlockingQueue</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>LinkedBlockingQueue</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>MBeanServer</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>ObjectName</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>metrics</name>.<name>ThreadPoolMetrics</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This is a wrapper class for the &lt;i&gt;ScheduledThreadPoolExecutor&lt;/i&gt;. It provides an implementation
 * for the &lt;i&gt;afterExecute()&lt;/i&gt; found in the &lt;i&gt;ThreadPoolExecutor&lt;/i&gt; class to log any unexpected
 * Runtime Exceptions.
 */</comment>

<class><specifier>public</specifier> class <name>JMXEnabledThreadPoolExecutor</name> <super><extends>extends <name>DebuggableThreadPoolExecutor</name></extends> <implements>implements <name>JMXEnabledThreadPoolExecutorMBean</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>mbeanName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ThreadPoolMetrics</name></type> <name>metrics</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>JMXEnabledThreadPoolExecutor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>threadPoolName</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>, <argument><expr>new <call><name><name>LinkedBlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><name>threadPoolName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"internal"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>JMXEnabledThreadPoolExecutor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>threadPoolName</name></decl></param>, <param><decl><type><name>String</name></type> <name>jmxPath</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>, <argument><expr>new <call><name><name>LinkedBlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><name>threadPoolName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>jmxPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>JMXEnabledThreadPoolExecutor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>threadPoolName</name></decl></param>, <param><decl><type><name>int</name></type> <name>priority</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>, <argument><expr>new <call><name><name>LinkedBlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><name>threadPoolName</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"internal"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>JMXEnabledThreadPoolExecutor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>corePoolSize</name></decl></param>,
            <param><decl><type><name>long</name></type> <name>keepAliveTime</name></decl></param>,
            <param><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></param>,
            <param><decl><type><name><name>BlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>workQueue</name></decl></param>,
            <param><decl><type><name>NamedThreadFactory</name></type> <name>threadFactory</name></decl></param>,
            <param><decl><type><name>String</name></type> <name>jmxPath</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>corePoolSize</name></expr></argument>, <argument><expr><name>corePoolSize</name></expr></argument>, <argument><expr><name>keepAliveTime</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>workQueue</name></expr></argument>, <argument><expr><name>threadFactory</name></expr></argument>, <argument><expr><name>jmxPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>JMXEnabledThreadPoolExecutor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>corePoolSize</name></decl></param>,
                                        <param><decl><type><name>int</name></type> <name>maxPoolSize</name></decl></param>,
                                        <param><decl><type><name>long</name></type> <name>keepAliveTime</name></decl></param>,
                                        <param><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></param>,
                                        <param><decl><type><name><name>BlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>workQueue</name></decl></param>,
                                        <param><decl><type><name>NamedThreadFactory</name></type> <name>threadFactory</name></decl></param>,
                                        <param><decl><type><name>String</name></type> <name>jmxPath</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>corePoolSize</name></expr></argument>, <argument><expr><name>maxPoolSize</name></expr></argument>, <argument><expr><name>keepAliveTime</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>workQueue</name></expr></argument>, <argument><expr><name>threadFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>prestartAllCoreThreads</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>metrics</name> = new <call><name>ThreadPoolMetrics</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>jmxPath</name></expr></argument>, <argument><expr><name><name>threadFactory</name>.<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MBeanServer</name></type> <name>mbs</name> <init>= <expr><call><name><name>ManagementFactory</name>.<name>getPlatformMBeanServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mbeanName</name> = "org.apache.cassandra." + <name>jmxPath</name> + ":type=" + <name><name>threadFactory</name>.<name>id</name></name></expr>;</expr_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>mbs</name>.<name>registerMBean</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>new <call><name>ObjectName</name><argument_list>(<argument><expr><name>mbeanName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>JMXEnabledThreadPoolExecutor</name><parameter_list>(<param><decl><type><name>Stage</name></type> <name>stage</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>stage</name>.<name>getJmxName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>stage</name>.<name>getJmxType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>unregisterMBean</name><parameter_list>()</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>ManagementFactory</name>.<name>getPlatformMBeanServer</name></name><argument_list>()</argument_list></call>.<call><name>unregisterMBean</name><argument_list>(<argument><expr>new <call><name>ObjectName</name><argument_list>(<argument><expr><name>mbeanName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <comment type="line">// release metrics</comment>
        <expr_stmt><expr><call><name><name>metrics</name>.<name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>shutdown</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// synchronized, because there is no way to access super.mainLock, which would be</comment>
        <comment type="line">// the preferred way to make this threadsafe</comment>
        <if>if <condition>(<expr>!<call><name>isShutdown</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>unregisterMBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>synchronized</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>shutdownNow</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// synchronized, because there is no way to access super.mainLock, which would be</comment>
        <comment type="line">// the preferred way to make this threadsafe</comment>
        <if>if <condition>(<expr>!<call><name>isShutdown</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>unregisterMBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>shutdownNow</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get the number of completed tasks
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getCompletedTasks</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getCompletedTaskCount</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get the number of tasks waiting to be executed
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getPendingTasks</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getTaskCount</name><argument_list>()</argument_list></call> - <call><name>getCompletedTaskCount</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getTotalBlockedTasks</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>(<name>int</name>) <call><name><name>metrics</name>.<name>totalBlocked</name>.<name>count</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCurrentlyBlockedTasks</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>(<name>int</name>) <call><name><name>metrics</name>.<name>currentBlocked</name>.<name>count</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCoreThreads</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getCorePoolSize</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCoreThreads</name><parameter_list>(<param><decl><type><name>int</name></type> <name>number</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>setCorePoolSize</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaximumThreads</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getMaximumPoolSize</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumThreads</name><parameter_list>(<param><decl><type><name>int</name></type> <name>number</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>setMaximumPoolSize</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>void</name></type> <name>onInitialRejection</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>task</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>metrics</name>.<name>totalBlocked</name>.<name>inc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>metrics</name>.<name>currentBlocked</name>.<name>inc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>void</name></type> <name>onFinalAccept</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>task</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>metrics</name>.<name>currentBlocked</name>.<name>dec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>void</name></type> <name>onFinalRejection</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>task</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>metrics</name>.<name>currentBlocked</name>.<name>dec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
