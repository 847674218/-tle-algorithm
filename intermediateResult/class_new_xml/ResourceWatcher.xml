<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\ResourceWatcher.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>

<class><specifier>public</specifier> class <name>ResourceWatcher</name>
<block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>watch</name><parameter_list>(<param><decl><type><name>String</name></type> <name>resource</name></decl></param>, <param><decl><type><name>Runnable</name></type> <name>callback</name></decl></param>, <param><decl><type><name>int</name></type> <name>period</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>StorageService</name>.<name>scheduledTasks</name>.<name>scheduleWithFixedDelay</name></name><argument_list>(<argument><expr>new <call><name>WatchedResource</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>period</name></expr></argument>, <argument><expr><name>period</name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WatchedResource</name> <super><implements>implements <name>Runnable</name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>WatchedResource</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>resource</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Runnable</name></type> <name>callback</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lastLoaded</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>WatchedResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>resource</name></decl></param>, <param><decl><type><name>Runnable</name></type> <name>callback</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>resource</name></name> = <name>resource</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>callback</name></name> = <name>callback</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lastLoaded</name> = 0</expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{
            <try>try
            <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>FBUtilities</name>.<name>resourceToFile</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>lastModified</name> <init>= <expr>new <call><name>File</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call>.<call><name>lastModified</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>lastModified</name> &gt; <name>lastLoaded</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>callback</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lastLoaded</name> = <name>lastModified</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Timed run of %s failed."</expr></argument>, <argument><expr><call><name><name>callback</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
