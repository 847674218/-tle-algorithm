<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\obs\ArrayUtil.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>obs</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Methods for manipulating arrays.
 *
 * @lucene.internal
 */</comment>

<class><specifier>final</specifier> class <name>ArrayUtil</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name><index>[]</index></type> <name>grow</name><parameter_list>(<param><decl><type><name><name>long</name><index>[]</index></name></type> <name>array</name></decl></param>, <param><decl><type><name>int</name></type> <name>minSize</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>array</name>.<name>length</name></name> &lt; <name>minSize</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>newArray</name> <init>= <expr>new <name><name>long</name><index>[<expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>array</name>.<name>length</name></name> &lt;&lt; 1</expr></argument>, <argument><expr><name>minSize</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>newArray</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>array</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>newArray</name></expr>;</return>
    }</block></then> <else>else
      <return>return <expr><name>array</name></expr>;</return></else></if>
  }</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name><index>[]</index></type> <name>grow</name><parameter_list>(<param><decl><type><name><name>long</name><index>[]</index></name></type> <name>array</name></decl></param>)</parameter_list> <block>{
    <return>return <expr><call><name>grow</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr>1 + <name><name>array</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
