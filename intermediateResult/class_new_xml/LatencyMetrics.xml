<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\metrics\LatencyMetrics.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>metrics</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>

<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>Metrics</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>Counter</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>MetricName</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>Timer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>EstimatedHistogram</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Metrics about latencies
 */</comment>
<class><specifier>public</specifier> class <name>LatencyMetrics</name>
<block>{
    <comment type="block" format="javadoc">/** Latency */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Timer</name></type> <name>latency</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total latency in micro sec */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>totalLatency</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>MetricNameFactory</name></type> <name>factory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>namePrefix</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><annotation>@<name>Deprecated</name></annotation> <specifier>public</specifier> <specifier>final</specifier> <name>EstimatedHistogram</name></type> <name>totalLatencyHistogram</name> <init>= <expr>new <call><name>EstimatedHistogram</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><annotation>@<name>Deprecated</name></annotation> <specifier>public</specifier> <specifier>final</specifier> <name>EstimatedHistogram</name></type> <name>recentLatencyHistogram</name> <init>= <expr>new <call><name>EstimatedHistogram</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>lastLatency</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>lastOpCount</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create LatencyMetrics with given group, type, and scope. Name prefix for each metric will be empty.
     *
     * @param group Group name
     * @param type Type name
     * @param scope Scope
     */</comment>
    <constructor><specifier>public</specifier> <name>LatencyMetrics</name><parameter_list>(<param><decl><type><name>String</name></type> <name>group</name></decl></param>, <param><decl><type><name>String</name></type> <name>type</name></decl></param>, <param><decl><type><name>String</name></type> <name>scope</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Create LatencyMetrics with given group, type, prefix to append to each metric name, and scope.
     *
     * @param group Group name
     * @param type Type name
     * @param namePrefix Prefix to append to each metric name
     * @param scope Scope of metrics
     */</comment>
    <constructor><specifier>public</specifier> <name>LatencyMetrics</name><parameter_list>(<param><decl><type><name>String</name></type> <name>group</name></decl></param>, <param><decl><type><name>String</name></type> <name>type</name></decl></param>, <param><decl><type><name>String</name></type> <name>namePrefix</name></decl></param>, <param><decl><type><name>String</name></type> <name>scope</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>LatencyMetricNameFactory</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>namePrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Create LatencyMetrics with given group, type, prefix to append to each metric name, and scope.
     *
     * @param factory MetricName factory to use
     * @param namePrefix Prefix to append to each metric name
     */</comment>
    <constructor><specifier>public</specifier> <name>LatencyMetrics</name><parameter_list>(<param><decl><type><name>MetricNameFactory</name></type> <name>factory</name></decl></param>, <param><decl><type><name>String</name></type> <name>namePrefix</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>factory</name></name> = <name>factory</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>namePrefix</name></name> = <name>namePrefix</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>latency</name> = <call><name><name>Metrics</name>.<name>newTimer</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr><name>namePrefix</name> + "Latency"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>MICROSECONDS</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>totalLatency</name> = <call><name><name>Metrics</name>.<name>newCounter</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr><name>namePrefix</name> + "TotalLatency"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/** takes nanoseconds **/</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNano</name><parameter_list>(<param><decl><type><name>long</name></type> <name>nanos</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// convert to microseconds. 1 millionth</comment>
        <expr_stmt><expr><call><name>addMicro</name><argument_list>(<argument><expr><name>nanos</name> / 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMicro</name><parameter_list>(<param><decl><type><name>long</name></type> <name>micros</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>latency</name>.<name>update</name></name><argument_list>(<argument><expr><name>micros</name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>MICROSECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>totalLatency</name>.<name>inc</name></name><argument_list>(<argument><expr><name>micros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>totalLatencyHistogram</name>.<name>add</name></name><argument_list>(<argument><expr><name>micros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recentLatencyHistogram</name>.<name>add</name></name><argument_list>(<argument><expr><name>micros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>release</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr><name>namePrefix</name> + "Latency"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr><name>namePrefix</name> + "TotalLatency"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>double</name></type> <name>getRecentLatency</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>ops</name> <init>= <expr><call><name><name>latency</name>.<name>count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><call><name><name>totalLatency</name>.<name>count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <return>return <expr>((<name>double</name>) <name>n</name> - <name>lastLatency</name>) / (<name>ops</name> - <name>lastOpCount</name>)</expr>;</return>
        }</block>
        <finally>finally
        <block>{
            <expr_stmt><expr><name>lastLatency</name> = <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lastOpCount</name> = <name>ops</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <class><specifier>static</specifier> class <name>LatencyMetricNameFactory</name> <super><implements>implements <name>MetricNameFactory</name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>group</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>scope</name></decl>;</decl_stmt>

        <constructor><name>LatencyMetricNameFactory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>group</name></decl></param>, <param><decl><type><name>String</name></type> <name>type</name></decl></param>, <param><decl><type><name>String</name></type> <name>scope</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>group</name></name> = <name>group</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>scope</name></name> = <name>scope</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>MetricName</name></type> <name>createMetricName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>metricName</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>metricName</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
