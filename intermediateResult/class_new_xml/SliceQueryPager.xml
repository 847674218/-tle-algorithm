<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\SliceQueryPager.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name></name>.*;</import>

<class><specifier>public</specifier> class <name>SliceQueryPager</name> <super><implements>implements <name><name>Iterator</name><argument_list>&lt;<argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_PAGE_SIZE</name> <init>= <expr>10000</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>DecoratedKey</name></type> <name>key</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ColumnSlice</name><index>[]</index></type> <name>slices</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>exhausted</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SliceQueryPager</name><parameter_list>(<param><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></param>, <param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>, <param><decl><type><name><name>ColumnSlice</name><index>[]</index></name></type> <name>slices</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>cfs</name></name> = <name>cfs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>slices</name></name> = <name>slices</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">// This will *not* do a query</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>!<name>exhausted</name></expr>;</return>
    }</block></function>

    <comment type="line">// This might return an empty column family (but never a null one)</comment>
    <function><type><specifier>public</specifier> <name>ColumnFamily</name></type> <name>next</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>exhausted</name></expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>

        <decl_stmt><decl><type><name>QueryPath</name></type> <name>path</name> <init>= <expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><call><name><name>cfs</name>.<name>getColumnFamilyName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SliceQueryFilter</name></type> <name>sliceFilter</name> <init>= <expr>new <call><name>SliceQueryFilter</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>DEFAULT_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QueryFilter</name></type> <name>filter</name> <init>= <expr>new <call><name>QueryFilter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>sliceFilter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>cfs</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cf</name> == null || <call><name><name>sliceFilter</name>.<name>getLiveCount</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call> &lt; <name>DEFAULT_PAGE_SIZE</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>exhausted</name> = true</expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>cf</name>.<name>getReverseSortedColumns</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>IColumn</name></type> <name>lastColumn</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>lastColumn</name>.<name>isMarkedForDelete</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <expr_stmt><expr><name>lastColumn</name> = <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></while>

            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <for>for (<init>;</init> <condition><expr><name>i</name> &lt; <name><name>slices</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
            <block>{
                <decl_stmt><decl><type><name>ColumnSlice</name></type> <name>current</name> <init>= <expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>cfs</name>.<name>getComparator</name></name><argument_list>()</argument_list></call>.<call><name>compare</name><argument_list>(<argument><expr><call><name><name>lastColumn</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>current</name>.<name>finish</name></name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then>
                    <break>break;</break></then></if>
            }</block></for>
            <if>if <condition>(<expr><name>i</name> &gt;= <name><name>slices</name>.<name>length</name></name></expr>)</condition><then>
                <expr_stmt><expr><name>exhausted</name> = true</expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>slices</name> = <call><name><name>Arrays</name>.<name>copyOfRange</name></name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>slices</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></else></if>
        <return>return <expr><name>cf</name> == null ? <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>cfs</name>.<name>metadata</name></name></expr></argument>)</argument_list></call> : <name>cf</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>
}</block></class>
</unit>
