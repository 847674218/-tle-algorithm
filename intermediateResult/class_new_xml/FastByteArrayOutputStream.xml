<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\io\util\FastByteArrayOutputStream.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>

<comment type="block">/*
 * This file has been modified from Apache Harmony's ByteArrayOutputStream
 * implementation. The synchronized methods of the original have been
 * replaced by non-synchronized methods. This makes certain operations
 * much FASTer, but also *not thread-safe*.
 *
 * This file remains formatted the same as the Apache Harmony original to
 * make patching easier if any bug fixes are made to the Harmony version.
 */</comment>

<comment type="block" format="javadoc">/**
 * A specialized {@link OutputStream} for class for writing content to an
 * (internal) byte array. As bytes are written to this stream, the byte array
 * may be expanded to hold more bytes. When the writing is considered to be
 * finished, a copy of the byte array can be requested from the class.
 *
 * @see ByteArrayOutputStream
 */</comment>
<class><specifier>public</specifier> class <name>FastByteArrayOutputStream</name> <super><extends>extends <name>OutputStream</name></extends></super> <block>{
    <comment type="block" format="javadoc">/**
     * The byte array containing the bytes written.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>byte</name><index>[]</index></type> <name>buf</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The number of bytes written.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>count</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructs a new ByteArrayOutputStream with a default size of 32 bytes.
     * If more than 32 bytes are written to this instance, the underlying byte
     * array will expand.
     */</comment>
    <constructor><specifier>public</specifier> <name>FastByteArrayOutputStream</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>buf</name> = new <name><name>byte</name><index>[<expr>32</expr>]</index></name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new {@code ByteArrayOutputStream} with a default size of
     * {@code size} bytes. If more than {@code size} bytes are written to this
     * instance, the underlying byte array will expand.
     *
     * @param size
     *            initial size for the underlying byte array, must be
     *            non-negative.
     * @throws IllegalArgumentException
     *             if {@code size} &lt; 0.
     */</comment>
    <constructor><specifier>public</specifier> <name>FastByteArrayOutputStream</name><parameter_list>(<param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>size</name> &gt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>buf</name> = new <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Closes this stream. This releases system resources used for this stream.
     *
     * @throws IOException
     *             if an error occurs while attempting to close this stream.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="block" format="javadoc">/**
         * Although the spec claims "A closed stream cannot perform output
         * operations and cannot be reopened.", this implementation must do
         * nothing.
         */</comment>
        <expr_stmt><expr><call><name><name>super</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>expand</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <comment type="block">/* Can the buffer handle @i more bytes, if not expand it */</comment>
        <if>if <condition>(<expr><name>count</name> + <name>i</name> &lt;= <name><name>buf</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>newbuf</name> <init>= <expr>new <name><name>byte</name><index>[<expr>(<name>count</name> + <name>i</name>) * 2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>newbuf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>buf</name> = <name>newbuf</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Resets this stream to the beginning of the underlying byte array. All
     * subsequent writes will overwrite any bytes previously stored in this
     * stream.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>count</name> = 0</expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the total number of bytes written to this stream so far.
     *
     * @return the number of bytes written to this stream.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>count</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the contents of this ByteArrayOutputStream as a byte array. Any
     * changes made to the receiver after returning will not be reflected in the
     * byte array returned to the caller.
     *
     * @return this stream's current contents as a byte array.
     */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>toByteArray</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>newArray</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>newArray</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newArray</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the contents of this ByteArrayOutputStream as a string. Any
     * changes made to the receiver after returning will not be reflected in the
     * string returned to the caller.
     *
     * @return this stream's current contents as a string.
     */</comment>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the contents of this ByteArrayOutputStream as a string. Each byte
     * {@code b} in this stream is converted to a character {@code c} using the
     * following function:
     * {@code c == (char)(((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))}. This method is
     * deprecated and either {@link #toString()} or {@link #toString(String)}
     * should be used.
     *
     * @param hibyte
     *            the high byte of each resulting Unicode character.
     * @return this stream's current contents as a string with the high byte set
     *         to {@code hibyte}.
     * @deprecated Use {@link #toString()}.
     */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<param><decl><type><name>int</name></type> <name>hibyte</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>newBuf</name> <init>= <expr>new <name><name>char</name><index>[<expr><call><name>size</name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>newBuf</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>newBuf</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>char</name>) <argument_list>(<argument><expr>((<name>hibyte</name> &amp; 0xff) &lt;&lt; 8) | (<name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0xff)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>newBuf</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the contents of this ByteArrayOutputStream as a string converted
     * according to the encoding declared in {@code enc}.
     *
     * @param enc
     *            a string representing the encoding to use when translating
     *            this stream to a string.
     * @return this stream's current contents as an encoded string.
     * @throws UnsupportedEncodingException
     *             if the provided encoding is not supported.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>enc</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes {@code count} bytes from the byte array {@code buffer} starting at
     * offset {@code index} to this stream.
     *
     * @param buffer
     *            the buffer to be written.
     * @param offset
     *            the initial position in {@code buffer} to retrieve bytes.
     * @param len
     *            the number of bytes of {@code buffer} to write.
     * @throws NullPointerException
     *             if {@code buffer} is {@code null}.
     * @throws IndexOutOfBoundsException
     *             if {@code offset &lt; 0} or {@code len &lt; 0}, or if
     *             {@code offset + len} is greater than the length of
     *             {@code buffer}.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// avoid int overflow</comment>
        <if>if <condition>(<expr><name><name>offset</name> <argument_list>&lt; <argument>0 || <name>offset</name></argument> &gt;</argument_list></name> <name><name>buffer</name>.<name>length</name></name> || <name><name>len</name> <argument_list>&lt; <argument>0
                || <name>len</name></argument> &gt;</argument_list></name> <name><name>buffer</name>.<name>length</name></name> - <name>offset</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="block">/* Expand if necessary */</comment>
        <expr_stmt><expr><call><name>expand</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>this</name>.<name>count</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>count</name></name> += <name>len</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes the specified byte {@code oneByte} to the OutputStream. Only the
     * low order byte of {@code oneByte} is written.
     *
     * @param oneByte
     *            the byte to be written.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>int</name></type> <name>oneByte</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>count</name> == <name><name>buf</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>expand</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><name>count</name>++</expr>]</index></name> = (<name>byte</name>) <name>oneByte</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Takes the contents of this stream and writes it to the output stream
     * {@code out}.
     *
     * @param out
     *            an OutputStream on which to write the contents of this stream.
     * @throws IOException
     *             if an error occurs while writing to {@code out}.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeTo</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
