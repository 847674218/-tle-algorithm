<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\Term.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>MarshalException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>InvalidRequestException</name></name>;</import>

<comment type="block" format="javadoc">/** A term parsed from a CQL statement. */</comment>
<class><specifier>public</specifier> class <name>Term</name>
<block>{
    <enum><specifier>public</specifier> enum <name>Type</name>
    <block>{
        <decl><name>STRING</name></decl>, <decl><name>INTEGER</name></decl>, <decl><name>UUID</name></decl>, <decl><name>FLOAT</name></decl>, <decl><name>BOOLEAN</name></decl>, <decl><name>QMARK</name></decl>;

        <function><type><specifier>static</specifier> <name>Type</name></type> <name>forInt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr>(<name>type</name> == <name><name>CqlParser</name>.<name>STRING_LITERAL</name></name>) || (<name>type</name> == <name><name>CqlParser</name>.<name>IDENT</name></name>)</expr>)</condition><then>
                <return>return <expr><name>STRING</name></expr>;</return></then>
            <else>else <if>if <condition>(<expr><name>type</name> == <name><name>CqlParser</name>.<name>INTEGER</name></name></expr>)</condition><then>
                <return>return <expr><name>INTEGER</name></expr>;</return></then>
            <else>else <if>if <condition>(<expr><name>type</name> == <name><name>CqlParser</name>.<name>UUID</name></name></expr>)</condition><then>
                <return>return <expr><name>UUID</name></expr>;</return></then>
            <else>else <if>if <condition>(<expr><name>type</name> == <name><name>CqlParser</name>.<name>FLOAT</name></name></expr>)</condition><then>
                <return>return <expr><name>FLOAT</name></expr>;</return></then>
            <else>else <if>if <condition>(<expr><name>type</name> == <name><name>CqlParser</name>.<name>K_TRUE</name></name> || <name>type</name> == <name><name>CqlParser</name>.<name>K_FALSE</name></name></expr>)</condition><then>
                <return>return <expr><name>BOOLEAN</name></expr>;</return></then>
            <else>else <if>if <condition>(<expr><name>type</name> == <name><name>CqlParser</name>.<name>QMARK</name></name></expr>)</condition><then>
                <return>return <expr><name>QMARK</name></expr>;</return></then></if></else></if></else></if></else></if></else></if></else></if>

            <comment type="line">// FIXME: handled scenario that should never occur.</comment>
            <return>return <expr>null</expr>;</return>
        }</block></function>
    }</block></enum>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>text</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Type</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>bindIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isToken</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Term</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>, <param><decl><type><name>Type</name></type> <name>type</name></decl></param>, <param><decl><type><name>int</name></type> <name>bindIndex</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isToken</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>text</name></name> = <name>text</name> == null ? "" : <name>text</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>bindIndex</name></name> = <name>bindIndex</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>isToken</name></name> = <name>isToken</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Term</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>, <param><decl><type><name>Type</name></type> <name>type</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Create new Term instance from a string, and an integer that corresponds
     * with the token ID from CQLParser.
     *
     * @param text the text representation of the term.
     * @param type the term's type as an integer token ID.
     */</comment>
    <constructor><specifier>public</specifier> <name>Term</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name><name>Type</name>.<name>forInt</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Term</name><parameter_list>(<param><decl><type><name>long</name></type> <name>value</name></decl></param>, <param><decl><type><name>Type</name></type> <name>type</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Term</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name><name>Type</name>.<name>forInt</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Term</name></type> <name>tokenOf</name><parameter_list>(<param><decl><type><name>Term</name></type> <name>t</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>Term</name><argument_list>(<argument><expr><name><name>t</name>.<name>text</name></name></expr></argument>, <argument><expr><name><name>t</name>.<name>type</name></name></expr></argument>, <argument><expr><name><name>t</name>.<name>bindIndex</name></name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the text parsed to create this term.
     *
     * @return the string term acquired from a CQL statement.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getText</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>isToken</name> ? "token(" + <name>text</name> + ")" : <name>text</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the typed value, serialized to a ByteBuffer according to a
     * comparator/validator.
     *
     * @return a ByteBuffer of the value.
     * @throws InvalidRequestException if unable to coerce the string to its type.
     */</comment>
    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>getByteBuffer</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <if>if <condition>(<expr>!<call><name>isBindMarker</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr><call><name><name>validator</name>.<name>fromString</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

            <comment type="line">// must be a marker term so check for a CqlBindValue stored in the term</comment>
            <if>if <condition>(<expr><name>bindIndex</name> == -1</expr>)</condition><then>
                <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr>"a marker Term was encountered with no index value"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>value</name> <init>= <expr><call><name><name>variables</name>.<name>get</name></name><argument_list>(<argument><expr><name>bindIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// We don't yet support null values in prepared statements</comment>
            <if>if <condition>(<expr><name>value</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Invalid null value for prepared variable " + <name>bindIndex</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <expr_stmt><expr><call><name><name>validator</name>.<name>validate</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>value</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>MarshalException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Obtain the term's type.
     *
     * @return the type
     */</comment>
    <function><type><specifier>public</specifier> <name>Type</name></type> <name>getType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>type</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBindMarker</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>type</name> == <name><name>Type</name>.<name>QMARK</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>asList</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>singletonList</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Term(%s, type=%s%s)"</expr></argument>, <argument><expr><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>isToken</name> ? ", isToken" : ""</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>prime</name> <init>= <expr>31</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>1 + (<name>isToken</name> ? 1 : 0)</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <name>prime</name> * <name>result</name> + ((<name>text</name> == null) ? 0 : <call><name><name>text</name>.<name>hashCode</name></name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <name>prime</name> * <name>result</name> + ((<name>type</name> == null) ? 0 : <call><name><name>type</name>.<name>hashCode</name></name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>obj</name></expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then></if>
        <if>if <condition>(<expr><name>obj</name> == null</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <if>if <condition>(<expr><call><name>getClass</name><argument_list>()</argument_list></call> != <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <decl_stmt><decl><type><name>Term</name></type> <name>other</name> <init>= <expr>(<name>Term</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>type</name>==<name><name>Type</name>.<name>QMARK</name></name></expr>)</condition><then> <return>return <expr>false</expr>;</return></then></if> <comment type="line">// markers are never equal</comment>
        <if>if <condition>(<expr><name>text</name> == null</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name><name>other</name>.<name>text</name></name> != null</expr>)</condition><then>
                <return>return <expr>false</expr>;</return></then></if>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>text</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>text</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if></else></if>
        <if>if <condition>(<expr><name>type</name> != <name><name>other</name>.<name>type</name></name></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <if>if <condition>(<expr><name>isToken</name> != <name><name>other</name>.<name>isToken</name></name></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
}</block></class>
</unit>
