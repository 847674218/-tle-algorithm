<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\locator\IEndpointSnitch.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This interface helps determine location of node in the data center relative to another node.
 * Give a node A and another node B it can tell if A and B are on the same rack or in the same
 * data center.
 */</comment>

<class type="interface"><specifier>public</specifier> interface <name>IEndpointSnitch</name>
<block>{
    <comment type="block" format="javadoc">/**
     * returns a String repesenting the rack this endpoint belongs to
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getRack</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * returns a String representing the datacenter this endpoint belongs to
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getDatacenter</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * returns a new &lt;tt&gt;List&lt;/tt&gt; sorted by proximity to the given endpoint
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>getSortedListByProximity</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>address</name></decl></param>, <param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>unsortedAddress</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * This method will sort the &lt;tt&gt;List&lt;/tt&gt; by proximity to the given address.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>sortByProximity</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>address</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>addresses</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * compares two endpoints in relation to the target endpoint, returning as Comparator.compare would
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>compareEndpoints</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>target</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>a1</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>a2</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * called after Gossiper instance exists immediately before it starts gossiping
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>gossiperStarting</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns whether for a range query doing a query against merged is likely
     * to be faster than 2 sequential queries, one against l1 followed by one against l2.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isWorthMergingForRangeQuery</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>merged</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>l1</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>l2</name></decl></param>)</parameter_list>;</function_decl>
}</block></class>
</unit>
