<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\compaction\AbstractCompactedRow.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Closeable</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>MessageDigest</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>ColumnStats</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DeletionInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnIndex</name></name>;</import>

<comment type="block" format="javadoc">/**
 * a CompactedRow is an object that takes a bunch of rows (keys + columnfamilies)
 * and can write a compacted version of those rows to an output stream.  It does
 * NOT necessarily require creating a merged CF object in memory.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractCompactedRow</name> <super><implements>implements <name>Closeable</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>DecoratedKey</name></type> <name>key</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AbstractCompactedRow</name><parameter_list>(<param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * write the row (size + column index + filter + column data, but NOT row key) to @param out.
     * It is an error to call this if isEmpty is false.  (Because the key is appended first,
     * so we'd have an incomplete row written.)
     *
     * write() may change internal state; it is NOT valid to call write() or update() a second time.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>write</name><parameter_list>(<param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * update @param digest with the data bytes of the row (not including row key or row size).
     * May be called even if empty.
     *
     * update() may change internal state; it is NOT valid to call write() or update() a second time.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name>MessageDigest</name></type> <name>digest</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return true if there are no columns in the row AND there are no row-level tombstones to be preserved
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return aggregate information about the columns in this row.  Some fields may
     * contain default values if computing them value would require extra effort we're not willing to make.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ColumnStats</name></type> <name>columnStats</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return the compacted row deletion infos.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>DeletionInfo</name></type> <name>deletionInfo</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return the column index for this row.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ColumnIndex</name></type> <name>index</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>
</unit>
