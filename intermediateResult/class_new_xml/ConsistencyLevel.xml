<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\ConsistencyLevel.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Iterables</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ReadRepairDecision</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>UnavailableException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>AbstractReplicationStrategy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>NetworkTopologyStrategy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>ProtocolException</name></name>;</import>


<enum><specifier>public</specifier> enum <name>ConsistencyLevel</name>
<block>{
    <decl><name>ANY</name>         <argument_list>(<argument><expr>0</expr></argument>)</argument_list></decl>,
    <decl><name>ONE</name>         <argument_list>(<argument><expr>1</expr></argument>)</argument_list></decl>,
    <decl><name>TWO</name>         <argument_list>(<argument><expr>2</expr></argument>)</argument_list></decl>,
    <decl><name>THREE</name>       <argument_list>(<argument><expr>3</expr></argument>)</argument_list></decl>,
    <decl><name>QUORUM</name>      <argument_list>(<argument><expr>4</expr></argument>)</argument_list></decl>,
    <decl><name>ALL</name>         <argument_list>(<argument><expr>5</expr></argument>)</argument_list></decl>,
    <decl><name>LOCAL_QUORUM</name><argument_list>(<argument><expr>6</expr></argument>)</argument_list></decl>,
    <decl><name>EACH_QUORUM</name> <argument_list>(<argument><expr>7</expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>ConsistencyLevel</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Used by the binary protocol</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ConsistencyLevel</name><index>[]</index></type> <name>codeIdx</name></decl>;</decl_stmt>
    <expr>static
    <block>{
        <expr><name>int</name> <name>maxCode</name> = -1</expr>;
        <for>for (<init><decl><type><name>ConsistencyLevel</name></type> <name>cl</name> <range>: <expr><call><name><name>ConsistencyLevel</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><name>maxCode</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxCode</name></expr></argument>, <argument><expr><name><name>cl</name>.<name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <name>codeIdx</name> = new <name><name>ConsistencyLevel</name><index>[<expr><name>maxCode</name> + 1</expr>]</index></name></block></expr>;
        <for>for (<init><decl><type><name>ConsistencyLevel</name></type> <name>cl</name> <range>: <expr><call><name><name>ConsistencyLevel</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><name><name>codeIdx</name><index>[<expr><name><name>cl</name>.<name>code</name></name></expr>]</index></name> != null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Duplicate code"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <expr_stmt><expr><name><name>codeIdx</name><index>[<expr><name><name>cl</name>.<name>code</name></name></expr>]</index></name> = <name>cl</name></expr>;</expr_stmt>
        }</block></for>
    }</block></enum>

    <constructor><specifier>private</specifier> <name>ConsistencyLevel</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>code</name></name> = <name>code</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ConsistencyLevel</name></type> <name>fromCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>code</name> <argument_list>&lt; <argument>0 || <name>code</name></argument> &gt;</argument_list></name>= <name><name>codeIdx</name>.<name>length</name></name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unknown code %d for a consistency level"</expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <return>return <expr><name><name>codeIdx</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>localQuorumFor</name><parameter_list>(<param><decl><type><name>Table</name></type> <name>table</name></decl></param>, <param><decl><type><name>String</name></type> <name>dc</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>(((<name>NetworkTopologyStrategy</name>) <call><name><name>table</name>.<name>getReplicationStrategy</name></name><argument_list>()</argument_list></call>).<call><name>getReplicationFactor</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call> / 2) + 1</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>blockFor</name><parameter_list>(<param><decl><type><name>Table</name></type> <name>table</name></decl></param>)</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>this</name></expr>)</condition>
        <block>{
            <case>case <expr><name>ONE</name></expr>:
                <return>return <expr>1</expr>;</return>
            </case><case>case <expr><name>ANY</name></expr>:
                <return>return <expr>1</expr>;</return>
            </case><case>case <expr><name>TWO</name></expr>:
                <return>return <expr>2</expr>;</return>
            </case><case>case <expr><name>THREE</name></expr>:
                <return>return <expr>3</expr>;</return>
            </case><case>case <expr><name>QUORUM</name></expr>:
                <return>return <expr>(<call><name><name>table</name>.<name>getReplicationStrategy</name></name><argument_list>()</argument_list></call>.<call><name>getReplicationFactor</name><argument_list>()</argument_list></call> / 2) + 1</expr>;</return>
            </case><case>case <expr><name>ALL</name></expr>:
                <return>return <expr><call><name><name>table</name>.<name>getReplicationStrategy</name></name><argument_list>()</argument_list></call>.<call><name>getReplicationFactor</name><argument_list>()</argument_list></call></expr>;</return>
            </case><case>case <expr><name>LOCAL_QUORUM</name></expr>:
                <return>return <expr><call><name>localQuorumFor</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getLocalDataCenter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>EACH_QUORUM</name></expr>:
                <decl_stmt><decl><type><name>NetworkTopologyStrategy</name></type> <name>strategy</name> <init>= <expr>(<name>NetworkTopologyStrategy</name>) <call><name><name>table</name>.<name>getReplicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>String</name></type> <name>dc</name> <range>: <expr><call><name><name>strategy</name>.<name>getDatacenters</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                    <expr_stmt><expr><name>n</name> += <call><name>localQuorumFor</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
                <return>return <expr><name>n</name></expr>;</return>
            </case><default>default:
                <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"Invalid consistency level: " + <call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </default>}</block></switch>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isLocal</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>DatabaseDescriptor</name>.<name>getLocalDataCenter</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getEndpointSnitch</name></name><argument_list>()</argument_list></call>.<call><name>getDatacenter</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>countLocalEndpoints</name><parameter_list>(<param><decl><type><name><name>Iterable</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>liveEndpoints</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>InetAddress</name></type> <name>endpoint</name> <range>: <expr><name>liveEndpoints</name></expr></range></decl></init>)
            <if>if <condition>(<expr><call><name>isLocal</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt></then></if></for>
        <return>return <expr><name>count</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>countPerDCEndpoints</name><parameter_list>(<param><decl><type><name>Table</name></type> <name>table</name></decl></param>, <param><decl><type><name><name>Iterable</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>liveEndpoints</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>NetworkTopologyStrategy</name></type> <name>strategy</name> <init>= <expr>(<name>NetworkTopologyStrategy</name>) <call><name><name>table</name>.<name>getReplicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>dcEndpoints</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>String</name></type> <name>dc</name><range>: <expr><call><name><name>strategy</name>.<name>getDatacenters</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>dcEndpoints</name>.<name>put</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <for>for (<init><decl><type><name>InetAddress</name></type> <name>endpoint</name> <range>: <expr><name>liveEndpoints</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>dc</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getEndpointSnitch</name></name><argument_list>()</argument_list></call>.<call><name>getDatacenter</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dcEndpoints</name>.<name>put</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><call><name><name>dcEndpoints</name>.<name>get</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>dcEndpoints</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>filterForQuery</name><parameter_list>(<param><decl><type><name>Table</name></type> <name>table</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>liveEndpoints</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>filterForQuery</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>liveEndpoints</name></expr></argument>, <argument><expr><name><name>ReadRepairDecision</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>filterForQuery</name><parameter_list>(<param><decl><type><name>Table</name></type> <name>table</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>liveEndpoints</name></decl></param>, <param><decl><type><name>ReadRepairDecision</name></type> <name>readRepair</name></decl></param>)</parameter_list>
    <block>{
        <comment type="block">/*
         * Endpoints are expected to be restricted to live replicas, sorted by snitch preference.
         * For LOCAL_QORUM, move local-DC replicas in front first as we need them there whether
         * we do read repair (since the first replica gets the data read) or not (since we'll take
         * the blockFor first ones).
         */</comment>
        <if>if <condition>(<expr><name>this</name> == <name>LOCAL_QUORUM</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>liveEndpoints</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getLocalComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <switch>switch <condition>(<expr><name>readRepair</name></expr>)</condition>
        <block>{
            <case>case <expr><name>NONE</name></expr>:
                <return>return <expr><call><name><name>liveEndpoints</name>.<name>subList</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>liveEndpoints</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>blockFor</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>GLOBAL</name></expr>:
                <return>return <expr><name>liveEndpoints</name></expr>;</return>
            </case><case>case <expr><name>DC_LOCAL</name></expr>:
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>local</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>other</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>InetAddress</name></type> <name>add</name> <range>: <expr><name>liveEndpoints</name></expr></range></decl></init>)
                <block>{
                    <if>if <condition>(<expr><call><name>isLocal</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>local</name>.<name>add</name></name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else>else
                        <expr_stmt><expr><call><name><name>other</name>.<name>add</name></name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                }</block></for>
                <comment type="line">// check if blockfor more than we have localep's</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>blockFor</name> <init>= <expr><call><name>blockFor</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>local</name>.<name>size</name></name><argument_list>()</argument_list></call> &lt; <name>blockFor</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>local</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name><name>other</name>.<name>subList</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>blockFor</name> - <call><name><name>local</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>other</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <return>return <expr><name>local</name></expr>;</return>
            </case><default>default:
                <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        </default>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSufficientLiveNodes</name><parameter_list>(<param><decl><type><name>Table</name></type> <name>table</name></decl></param>, <param><decl><type><name><name>Iterable</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>liveEndpoints</name></decl></param>)</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>this</name></expr>)</condition>
        <block>{
            <case>case <expr><name>ANY</name></expr>:
                <comment type="line">// local hint is acceptable, and local node is always live</comment>
                <return>return <expr>true</expr>;</return>
            </case><case>case <expr><name>LOCAL_QUORUM</name></expr>:
                <return>return <expr><call><name>countLocalEndpoints</name><argument_list>(<argument><expr><name>liveEndpoints</name></expr></argument>)</argument_list></call> &gt;= <call><name>blockFor</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>EACH_QUORUM</name></expr>:
                <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name>countPerDCEndpoints</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>liveEndpoints</name></expr></argument>)</argument_list></call>.<call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <if>if <condition>(<expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call> &lt; <call><name>localQuorumFor</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <return>return <expr>false</expr>;</return></then></if>
                }</block></for>
                <return>return <expr>true</expr>;</return>
            </case><default>default:
                <return>return <expr><call><name><name>Iterables</name>.<name>size</name></name><argument_list>(<argument><expr><name>liveEndpoints</name></expr></argument>)</argument_list></call> &gt;= <call><name>blockFor</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
        </default>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>assureSufficientLiveNodes</name><parameter_list>(<param><decl><type><name>Table</name></type> <name>table</name></decl></param>, <param><decl><type><name><name>Iterable</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>liveEndpoints</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnavailableException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>blockFor</name> <init>= <expr><call><name>blockFor</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>this</name></expr>)</condition>
        <block>{
            <case>case <expr><name>ANY</name></expr>:
                <comment type="line">// local hint is acceptable, and local node is always live</comment>
                <break>break;</break>
            </case><case>case <expr><name>LOCAL_QUORUM</name></expr>:
                <decl_stmt><decl><type><name>int</name></type> <name>localLive</name> <init>= <expr><call><name>countLocalEndpoints</name><argument_list>(<argument><expr><name>liveEndpoints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>localLive</name> &lt; <name>blockFor</name></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block>{
                        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"Local replicas ["</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for (<init><decl><type><name>InetAddress</name></type> <name>endpoint</name> <range>: <expr><name>liveEndpoints</name></expr></range></decl></init>)
                        <block>{
                            <if>if <condition>(<expr><call><name>isLocal</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                                <expr_stmt><expr><call><name><name>builder</name>.<name>append</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                        }</block></for>
                        <expr_stmt><expr><call><name><name>builder</name>.<name>append</name></name><argument_list>(<argument><expr>"] are insufficient to satisfy LOCAL_QUORUM requirement of "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>blockFor</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" live nodes in '"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getLocalDataCenter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr><call><name><name>builder</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <throw>throw <expr>new <call><name>UnavailableException</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>blockFor</name></expr></argument>, <argument><expr><name>localLive</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <break>break;</break>
            </case><case>case <expr><name>EACH_QUORUM</name></expr>:
                <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name>countPerDCEndpoints</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>liveEndpoints</name></expr></argument>)</argument_list></call>.<call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>dcBlockFor</name> <init>= <expr><call><name>localQuorumFor</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>dcLive</name> <init>= <expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>dcLive</name> &lt; <name>dcBlockFor</name></expr>)</condition><then>
                        <throw>throw <expr>new <call><name>UnavailableException</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>dcBlockFor</name></expr></argument>, <argument><expr><name>dcLive</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                }</block></for>
                <break>break;</break>
            </case><default>default:
                <decl_stmt><decl><type><name>int</name></type> <name>live</name> <init>= <expr><call><name><name>Iterables</name>.<name>size</name></name><argument_list>(<argument><expr><name>liveEndpoints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>live</name> &lt; <name>blockFor</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Live nodes {} do not satisfy ConsistencyLevel ({} required)"</expr></argument>, <argument><expr><call><name><name>Iterables</name>.<name>toString</name></name><argument_list>(<argument><expr><name>liveEndpoints</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>blockFor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr>new <call><name>UnavailableException</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>blockFor</name></expr></argument>, <argument><expr><name>live</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <break>break;</break>
        </default>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateForRead</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <switch>switch <condition>(<expr><name>this</name></expr>)</condition>
        <block>{
            <case>case <expr><name>ANY</name></expr>:
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"ANY ConsistencyLevel is only supported for writes"</expr></argument>)</argument_list></call></expr>;</throw>
            </case><case>case <expr><name>LOCAL_QUORUM</name></expr>:
                <expr_stmt><expr><call><name>requireNetworkTopologyStrategy</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>EACH_QUORUM</name></expr>:
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"EACH_QUORUM ConsistencyLevel is only supported for writes"</expr></argument>)</argument_list></call></expr>;</throw>
        </case>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateForWrite</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <switch>switch <condition>(<expr><name>this</name></expr>)</condition>
        <block>{
            <case>case <expr><name>LOCAL_QUORUM</name></expr>:
            </case><case>case <expr><name>EACH_QUORUM</name></expr>:
                <expr_stmt><expr><call><name>requireNetworkTopologyStrategy</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateCounterForWrite</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>metadata</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name><name>ConsistencyLevel</name>.<name>ANY</name></name></expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Consistency level ANY is not yet supported for counter columnfamily " + <name><name>metadata</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<call><name><name>metadata</name>.<name>getReplicateOnWrite</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>this</name> != <name><name>ConsistencyLevel</name>.<name>ONE</name></name></expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"cannot achieve CL &gt; CL.ONE without replicate_on_write on columnfamily " + <name><name>metadata</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>requireNetworkTopologyStrategy</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>strategy</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>.<call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!(<name>strategy</name> instanceof <name>NetworkTopologyStrategy</name>)</expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"consistency level %s not compatible with replication strategy (%s)"</expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>strategy</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>
}
</unit>
