<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\FilterFactory.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>obs</name>.<name>IBitSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>obs</name>.<name>OffHeapBitSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>obs</name>.<name>OpenBitSet</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>FilterFactory</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>FilterFactory</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeSizes</name></type> <name>TYPE_SIZES</name> <init>= <expr><name><name>TypeSizes</name>.<name>NATIVE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>BITSET_EXCESS</name> <init>= <expr>20</expr></init></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>Type</name>
    <block>{
        <decl><name>SHA</name></decl>, <decl><name>MURMUR2</name></decl>, <decl><name>MURMUR3</name></decl>
    }</block></enum>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>IFilter</name></type> <name>bf</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>output</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>serialize</name><argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>Type</name>.<name>MURMUR3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>IFilter</name></type> <name>bf</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>output</name></decl></param>, <param><decl><type><name>Type</name></type> <name>type</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
        <block>{
            <case>case <expr><name>SHA</name></expr>:
                <expr_stmt><expr><call><name><name>LegacyBloomFilter</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr>(<name>LegacyBloomFilter</name>) <name>bf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>MURMUR2</name></expr>:
                <expr_stmt><expr><call><name><name>Murmur2BloomFilter</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr>(<name>Murmur2BloomFilter</name>) <name>bf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <expr_stmt><expr><call><name><name>Murmur3BloomFilter</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr>(<name>Murmur3BloomFilter</name>) <name>bf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </default>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IFilter</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>input</name></decl></param>, <param><decl><type><name>Type</name></type> <name>type</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>offheap</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
        <block>{
            <case>case <expr><name>SHA</name></expr>:
                <return>return <expr><call><name><name>LegacyBloomFilter</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>MURMUR2</name></expr>:
                <return>return <expr><call><name><name>Murmur2BloomFilter</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>offheap</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><default>default:
                <return>return <expr><call><name><name>Murmur3BloomFilter</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>offheap</name></expr></argument>)</argument_list></call></expr>;</return>
        </default>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>IFilter</name></type> <name>bf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>serializedSize</name><argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name><name>Type</name>.<name>MURMUR3</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>IFilter</name></type> <name>bf</name></decl></param>, <param><decl><type><name>Type</name></type> <name>type</name></decl></param>)</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
        <block>{
            <case>case <expr><name>SHA</name></expr>:
                <return>return <expr><call><name><name>LegacyBloomFilter</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr>(<name>LegacyBloomFilter</name>) <name>bf</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>MURMUR2</name></expr>:
                <return>return <expr><call><name><name>Murmur2BloomFilter</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr>(<name>Murmur2BloomFilter</name>) <name>bf</name></expr></argument>, <argument><expr><name>TYPE_SIZES</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><default>default:
                <return>return <expr><call><name><name>Murmur3BloomFilter</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr>(<name>Murmur3BloomFilter</name>) <name>bf</name></expr></argument>, <argument><expr><name>TYPE_SIZES</name></expr></argument>)</argument_list></call></expr>;</return>
        </default>}</block></switch>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return A BloomFilter with the lowest practical false positive
     *         probability for the given number of elements.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IFilter</name></type> <name>getFilter</name><parameter_list>(<param><decl><type><name>long</name></type> <name>numElements</name></decl></param>, <param><decl><type><name>int</name></type> <name>targetBucketsPerElem</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>offheap</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getFilter</name><argument_list>(<argument><expr><name>numElements</name></expr></argument>, <argument><expr><name>targetBucketsPerElem</name></expr></argument>, <argument><expr><name><name>Type</name>.<name>MURMUR3</name></name></expr></argument>, <argument><expr><name>offheap</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// helper method for test.</comment>
    <function><type><specifier>static</specifier> <name>IFilter</name></type> <name>getFilter</name><parameter_list>(<param><decl><type><name>long</name></type> <name>numElements</name></decl></param>, <param><decl><type><name>int</name></type> <name>targetBucketsPerElem</name></decl></param>, <param><decl><type><name>Type</name></type> <name>type</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>offheap</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>maxBucketsPerElement</name> <init>= <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>BloomCalculations</name>.<name>maxBucketsPerElement</name></name><argument_list>(<argument><expr><name>numElements</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bucketsPerElement</name> <init>= <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>targetBucketsPerElem</name></expr></argument>, <argument><expr><name>maxBucketsPerElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>bucketsPerElement</name> &lt; <name>targetBucketsPerElem</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Cannot provide an optimal BloomFilter for %d elements (%d/%d buckets per element)."</expr></argument>, <argument><expr><name>numElements</name></expr></argument>, <argument><expr><name>bucketsPerElement</name></expr></argument>, <argument><expr><name>targetBucketsPerElem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>BloomCalculations</name>.<name>BloomSpecification</name></name></type> <name>spec</name> <init>= <expr><call><name><name>BloomCalculations</name>.<name>computeBloomSpec</name></name><argument_list>(<argument><expr><name>bucketsPerElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>createFilter</name><argument_list>(<argument><expr><name><name>spec</name>.<name>K</name></name></expr></argument>, <argument><expr><name>numElements</name></expr></argument>, <argument><expr><name><name>spec</name>.<name>bucketsPerElement</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>offheap</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return The smallest BloomFilter that can provide the given false
     *         positive probability rate for the given number of elements.
     *
     *         Asserts that the given probability can be satisfied using this
     *         filter.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IFilter</name></type> <name>getFilter</name><parameter_list>(<param><decl><type><name>long</name></type> <name>numElements</name></decl></param>, <param><decl><type><name>double</name></type> <name>maxFalsePosProbability</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>offheap</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getFilter</name><argument_list>(<argument><expr><name>numElements</name></expr></argument>, <argument><expr><name>maxFalsePosProbability</name></expr></argument>, <argument><expr><name><name>Type</name>.<name>MURMUR3</name></name></expr></argument>, <argument><expr><name>offheap</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// helper method for test.</comment>
    <function><type><specifier>static</specifier> <name>IFilter</name></type> <name>getFilter</name><parameter_list>(<param><decl><type><name>long</name></type> <name>numElements</name></decl></param>, <param><decl><type><name>double</name></type> <name>maxFalsePosProbability</name></decl></param>, <param><decl><type><name>Type</name></type> <name>type</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>offheap</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>maxFalsePosProbability</name> &lt;= 1.0 : "Invalid probability"</expr>;</assert>
        <if>if <condition>(<expr><name>maxFalsePosProbability</name> == 1.0</expr>)</condition><then>
            <return>return <expr>new <call><name>AlwaysPresentFilter</name><argument_list>()</argument_list></call></expr>;</return></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>bucketsPerElement</name> <init>= <expr><call><name><name>BloomCalculations</name>.<name>maxBucketsPerElement</name></name><argument_list>(<argument><expr><name>numElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>BloomCalculations</name>.<name>BloomSpecification</name></name></type> <name>spec</name> <init>= <expr><call><name><name>BloomCalculations</name>.<name>computeBloomSpec</name></name><argument_list>(<argument><expr><name>bucketsPerElement</name></expr></argument>, <argument><expr><name>maxFalsePosProbability</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>createFilter</name><argument_list>(<argument><expr><name><name>spec</name>.<name>K</name></name></expr></argument>, <argument><expr><name>numElements</name></expr></argument>, <argument><expr><name><name>spec</name>.<name>bucketsPerElement</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>offheap</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>IFilter</name></type> <name>createFilter</name><parameter_list>(<param><decl><type><name>int</name></type> <name>hash</name></decl></param>, <param><decl><type><name>long</name></type> <name>numElements</name></decl></param>, <param><decl><type><name>int</name></type> <name>bucketsPer</name></decl></param>, <param><decl><type><name>Type</name></type> <name>type</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>offheap</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>numBits</name> <init>= <expr>(<name>numElements</name> * <name>bucketsPer</name>) + <name>BITSET_EXCESS</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IBitSet</name></type> <name>bitset</name> <init>= <expr><name>offheap</name> ? new <call><name>OffHeapBitSet</name><argument_list>(<argument><expr><name>numBits</name></expr></argument>)</argument_list></call> : new <call><name>OpenBitSet</name><argument_list>(<argument><expr><name>numBits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
        <block>{
            <case>case <expr><name>MURMUR2</name></expr>:
              <return>return <expr>new <call><name>Murmur2BloomFilter</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>bitset</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><default>default:
              <return>return <expr>new <call><name>Murmur3BloomFilter</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>bitset</name></expr></argument>)</argument_list></call></expr>;</return>
        </default>}</block></switch>
    }</block></function>
}</block></class>
</unit>
