<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\service\QueryState.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>UUID</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name>.<name>Tracing</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents the state related to a given query.
 */</comment>
<class><specifier>public</specifier> class <name>QueryState</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ClientState</name></type> <name>clientState</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>clock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>UUID</name></type> <name>preparedTracingSession</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>QueryState</name><parameter_list>(<param><decl><type><name>ClientState</name></type> <name>clientState</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>clientState</name></name> = <name>clientState</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ClientState</name></type> <name>getClientState</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>clientState</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * This clock guarantees that updates for the same QueryState will be ordered
     * in the sequence seen, even if multiple updates happen in the same millisecond.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTimestamp</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>current</name> <init>= <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> * 1000</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>clock</name> = <name>clock</name> &gt;= <name>current</name> ? <name>clock</name> + 1 : <name>current</name></expr>;</expr_stmt>
        <return>return <expr><name>clock</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>traceNextQuery</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>preparedTracingSession</name> != null</expr>)</condition><then>
        <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>tracingProbability</name> <init>= <expr><call><name><name>StorageService</name>.<name>instance</name>.<name>getTracingProbability</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>tracingProbability</name> != 0 &amp;&amp; <call><name><name>FBUtilities</name>.<name>threadLocalRandom</name></name><argument_list>()</argument_list></call>.<call><name>nextDouble</name><argument_list>()</argument_list></call> &lt; <name>tracingProbability</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareTracingSession</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>sessionId</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>preparedTracingSession</name></name> = <name>sessionId</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>createTracingSession</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>preparedTracingSession</name></name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>newSession</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>UUID</name></type> <name>session</name> <init>= <expr><name><name>this</name>.<name>preparedTracingSession</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>preparedTracingSession</name></name> = null</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>newSession</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class>

</unit>
