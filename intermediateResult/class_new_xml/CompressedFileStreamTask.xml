<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\streaming\compress\CompressedFileStreamTask.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>streaming</name>.<name>compress</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>channels</name>.<name>FileChannel</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>channels</name>.<name>SocketChannel</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name>.<name>CompressionMetadata</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>RandomAccessReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>metrics</name>.<name>StreamingMetrics</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>streaming</name>.<name>FileStreamTask</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>streaming</name>.<name>StreamHeader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<comment type="block" format="javadoc">/**
 * FileStreamTask for compressed SSTable.
 *
 * This class sends relevant part of compressed file directly using nio if available.
 */</comment>
<class><specifier>public</specifier> class <name>CompressedFileStreamTask</name> <super><extends>extends <name>FileStreamTask</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>CompressedFileStreamTask</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// 10MB chunks</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CHUNK_SIZE</name> <init>= <expr>10*1024*1024</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CompressedFileStreamTask</name><parameter_list>(<param><decl><type><name>StreamHeader</name></type> <name>header</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>to</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>stream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <assert>assert <expr><name><name>header</name>.<name>file</name>.<name>compressionInfo</name></name> != null</expr>;</assert>

        <decl_stmt><decl><type><name>SocketChannel</name></type> <name>sc</name> <init>= <expr><call><name><name>socket</name>.<name>getChannel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>transferBuffer</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

        <comment type="line">// write header</comment>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>headerBuffer</name> <init>= <expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>constructStreamHeader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>getVersion</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>socket</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call>.<call><name>write</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>getArray</name></name><argument_list>(<argument><expr><name>headerBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RandomAccessReader</name></type> <name>file</name> <init>= <expr><call><name><name>RandomAccessReader</name>.<name>open</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>header</name>.<name>file</name>.<name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileChannel</name></type> <name>fc</name> <init>= <expr><call><name><name>file</name>.<name>getChannel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>StreamingMetrics</name>.<name>activeStreamsOutbound</name>.<name>inc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// calculate chunks to transfer. we want to send continuous chunks altogether.</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sections</name> <init>= <expr><call><name>getTransferSections</name><argument_list>(<argument><expr><name><name>header</name>.<name>file</name>.<name>compressionInfo</name>.<name>chunks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>totalBytesTransferred</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <comment type="line">// stream each of the required sections of the file</comment>
            <for>for (<init><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>section</name> <range>: <expr><name>sections</name></expr></range></decl></init>)
            <block>{
                <comment type="line">// length of the section to stream</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>length</name> <init>= <expr><name><name>section</name>.<name>right</name></name> - <name><name>section</name>.<name>left</name></name></expr></init></decl>;</decl_stmt>
                <comment type="line">// tracks write progress</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>bytesTransferred</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>bytesTransferred</name> &lt; <name>length</name></expr>)</condition>
                <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>toTransfer</name> <init>= <expr>(<name>int</name>) <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>CHUNK_SIZE</name></expr></argument>, <argument><expr><name>length</name> - <name>bytesTransferred</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>long</name></type> <name>lastWrite</name></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>sc</name> != null</expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>lastWrite</name> = <call><name><name>fc</name>.<name>transferTo</name></name><argument_list>(<argument><expr><name><name>section</name>.<name>left</name></name> + <name>bytesTransferred</name></expr></argument>, <argument><expr><name>toTransfer</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>throttle</name>.<name>throttleDelta</name></name><argument_list>(<argument><expr><name>lastWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else
                    <block>{
                        <comment type="line">// NIO is not available. Fall back to normal streaming.</comment>
                        <comment type="line">// This happens when inter-node encryption is turned on.</comment>
                        <if>if <condition>(<expr><name>transferBuffer</name> == null</expr>)</condition><then>
                            <expr_stmt><expr><name>transferBuffer</name> = new <name><name>byte</name><index>[<expr><name>CHUNK_SIZE</name></expr>]</index></name></expr>;</expr_stmt></then></if>
                        <expr_stmt><expr><call><name><name>file</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>transferBuffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>toTransfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>socket</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call>.<call><name>write</name><argument_list>(<argument><expr><name>transferBuffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>toTransfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>throttle</name>.<name>throttleDelta</name></name><argument_list>(<argument><expr><name>toTransfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>lastWrite</name> = <name>toTransfer</name></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>totalBytesTransferred</name> += <name>lastWrite</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>bytesTransferred</name> += <name>lastWrite</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>header</name>.<name>file</name>.<name>progress</name></name> += <name>lastWrite</name></expr>;</expr_stmt>
                }</block></while>

                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Bytes transferred " + <name>bytesTransferred</name> + "/" + <name><name>header</name>.<name>file</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>StreamingMetrics</name>.<name>totalOutgoingBytes</name>.<name>inc</name></name><argument_list>(<argument><expr><name>totalBytesTransferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>metrics</name>.<name>outgoingBytes</name>.<name>inc</name></name><argument_list>(<argument><expr><name>totalBytesTransferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// receive reply confirmation</comment>
            <expr_stmt><expr><call><name>receiveReply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>StreamingMetrics</name>.<name>activeStreamsOutbound</name>.<name>dec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// no matter what happens close file</comment>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="line">// chunks are assumed to be sorted by offset</comment>
    <function><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getTransferSections</name><parameter_list>(<param><decl><type><name><name>CompressionMetadata</name>.<name>Chunk</name><index>[]</index></name></type> <name>chunks</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>transferSections</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>lastSection</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>CompressionMetadata</name>.<name>Chunk</name></name></type> <name>chunk</name> <range>: <expr><name>chunks</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><name>lastSection</name> != null</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name><name>chunk</name>.<name>offset</name></name> == <name><name>lastSection</name>.<name>right</name></name></expr>)</condition><then>
                <block>{
                    <comment type="line">// extend previous section to end of this chunk</comment>
                    <expr_stmt><expr><name>lastSection</name> = <call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>lastSection</name>.<name>left</name></name></expr></argument>, <argument><expr><name><name>chunk</name>.<name>offset</name></name> + <name><name>chunk</name>.<name>length</name></name> + 4</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 4 bytes for CRC</comment>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><call><name><name>transferSections</name>.<name>add</name></name><argument_list>(<argument><expr><name>lastSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lastSection</name> = <call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>chunk</name>.<name>offset</name></name></expr></argument>, <argument><expr><name><name>chunk</name>.<name>offset</name></name> + <name><name>chunk</name>.<name>length</name></name> + 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>lastSection</name> = <call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>chunk</name>.<name>offset</name></name></expr></argument>, <argument><expr><name><name>chunk</name>.<name>offset</name></name> + <name><name>chunk</name>.<name>length</name></name> + 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <if>if <condition>(<expr><name>lastSection</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>transferSections</name>.<name>add</name></name><argument_list>(<argument><expr><name>lastSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>transferSections</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
