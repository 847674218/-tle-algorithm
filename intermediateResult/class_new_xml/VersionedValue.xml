<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\gms\VersionedValue.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>gms</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>UUID</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Iterables</name></name>;</import>
<import>import static <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Charsets</name>.<name>ISO_8859_1</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Token</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>


<comment type="block" format="javadoc">/**
 * This abstraction represents the state associated with a particular node which an
 * application wants to make available to the rest of the nodes in the cluster.
 * Whenever a piece of state needs to be disseminated to the rest of cluster wrap
 * the state in an instance of &lt;i&gt;ApplicationState&lt;/i&gt; and add it to the Gossiper.
 *
 * e.g. if we want to disseminate load information for node A do the following:
 *
 *      ApplicationState loadState = new ApplicationState(&lt;string representation of load&gt;);
 *      Gossiper.instance.addApplicationState("LOAD STATE", loadState);
 */</comment>

<class><specifier>public</specifier> class <name>VersionedValue</name> <super><implements>implements <name><name>Comparable</name><argument_list>&lt;<argument><name>VersionedValue</name></argument>&gt;</argument_list></name></implements></super>
<block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>serializer</name> <init>= <expr>new <call><name>VersionedValueSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// this must be a char that cannot be present in any token</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>char</name></type> <name>DELIMITER</name> <init>= <expr>','</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>DELIMITER_STR</name> <init>= <expr>new <call><name>String</name><argument_list>(<argument><expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr><name>DELIMITER</name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// values for ApplicationState.STATUS</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>STATUS_BOOTSTRAPPING</name> <init>= <expr>"BOOT"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>STATUS_NORMAL</name> <init>= <expr>"NORMAL"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>STATUS_LEAVING</name> <init>= <expr>"LEAVING"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>STATUS_LEFT</name> <init>= <expr>"LEFT"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>STATUS_MOVING</name> <init>= <expr>"MOVING"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>STATUS_RELOCATING</name> <init>= <expr>"RELOCATING"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>REMOVING_TOKEN</name> <init>= <expr>"removing"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>REMOVED_TOKEN</name> <init>= <expr>"removed"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>HIBERNATE</name> <init>= <expr>"hibernate"</expr></init></decl>;</decl_stmt>

    <comment type="line">// values for ApplicationState.REMOVAL_COORDINATOR</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>REMOVAL_COORDINATOR</name> <init>= <expr>"REMOVER"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>version</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>VersionedValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>value</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>version</name></name> = <name>version</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>VersionedValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>VersionGenerator</name>.<name>getNextVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>VersionedValue</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name><name>this</name>.<name>version</name></name> - <name><name>value</name>.<name>version</name></name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"Value(" + <name>value</name> + "," + <name>version</name> + ")"</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>versionString</name><parameter_list>(<param><decl><type><name>String</name>...</type><name>args</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>VersionedValue</name>.<name>DELIMITER</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>VersionedValueFactory</name>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>IPartitioner</name></type> <name>partitioner</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>VersionedValueFactory</name><parameter_list>(<param><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>partitioner</name></name> = <name>partitioner</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>bootstrapping</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name>versionString</name><argument_list>(<argument><expr><name><name>VersionedValue</name>.<name>STATUS_BOOTSTRAPPING</name></name></expr></argument>,
                                                    <argument><expr><call><name>makeTokenString</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>normal</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name>versionString</name><argument_list>(<argument><expr><name><name>VersionedValue</name>.<name>STATUS_NORMAL</name></name></expr></argument>,
                                                    <argument><expr><call><name>makeTokenString</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>makeTokenString</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>partitioner</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>(<argument><expr><call><name><name>Iterables</name>.<name>get</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>load</name><parameter_list>(<param><decl><type><name>double</name></type> <name>load</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>schema</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>newVersion</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name><name>newVersion</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>leaving</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name>versionString</name><argument_list>(<argument><expr><name><name>VersionedValue</name>.<name>STATUS_LEAVING</name></name></expr></argument>,
                    <argument><expr><call><name>makeTokenString</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>left</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></param>, <param><decl><type><name>long</name></type> <name>expireTime</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name>versionString</name><argument_list>(<argument><expr><name><name>VersionedValue</name>.<name>STATUS_LEFT</name></name></expr></argument>,
                    <argument><expr><call><name><name>Long</name>.<name>toString</name></name><argument_list>(<argument><expr><name>expireTime</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>makeTokenString</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>moving</name><parameter_list>(<param><decl><type><name>Token</name></type> <name>token</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><name><name>VersionedValue</name>.<name>STATUS_MOVING</name></name> + <name><name>VersionedValue</name>.<name>DELIMITER</name></name> + <call><name><name>partitioner</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>relocating</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>srcTokens</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(
                    <argument><expr><call><name>versionString</name><argument_list>(<argument><expr><name><name>VersionedValue</name>.<name>STATUS_RELOCATING</name></name></expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><name>srcTokens</name></expr></argument>, <argument><expr><name><name>VersionedValue</name>.<name>DELIMITER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>hostId</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>hostId</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name><name>hostId</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>tokens</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>bos</name> <init>= <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DataOutputStream</name></type> <name>dos</name> <init>= <expr>new <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>bos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>TokenSerializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>partitioner</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>bos</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>removingNonlocal</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>hostId</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name>versionString</name><argument_list>(<argument><expr><name><name>VersionedValue</name>.<name>REMOVING_TOKEN</name></name></expr></argument>, <argument><expr><call><name><name>hostId</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>removedNonlocal</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>hostId</name></decl></param>, <param><decl><type><name>long</name></type> <name>expireTime</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name>versionString</name><argument_list>(<argument><expr><name><name>VersionedValue</name>.<name>REMOVED_TOKEN</name></name></expr></argument>, <argument><expr><call><name><name>hostId</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Long</name>.<name>toString</name></name><argument_list>(<argument><expr><name>expireTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>removalCoordinator</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>hostId</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name>versionString</name><argument_list>(<argument><expr><name><name>VersionedValue</name>.<name>REMOVAL_COORDINATOR</name></name></expr></argument>, <argument><expr><call><name><name>hostId</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>hibernate</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><name><name>VersionedValue</name>.<name>HIBERNATE</name></name> + <name><name>VersionedValue</name>.<name>DELIMITER</name></name> + <name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>datacenter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dcId</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><name>dcId</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>rack</name><parameter_list>(<param><decl><type><name>String</name></type> <name>rackId</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><name>rackId</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>rpcaddress</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name><name>endpoint</name>.<name>getHostAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>releaseVersion</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getReleaseVersionString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>networkVersion</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name><name>MessagingService</name>.<name>current_version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>internalIP</name><parameter_list>(<param><decl><type><name>String</name></type> <name>private_ip</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><name>private_ip</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>severity</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>VersionedValueSerializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>VersionedValue</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>VersionedValue</name></type> <name>value</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><call><name>outValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>value</name>.<name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>outValue</name><parameter_list>(<param><decl><type><name>VersionedValue</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>outValue</name> <init>= <expr><name><name>value</name>.<name>value</name></name></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>version</name> &lt; <name><name>MessagingService</name>.<name>VERSION_12</name></name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>pieces</name> <init>= <expr><call><name><name>value</name>.<name>value</name>.<name>split</name></name><argument_list>(<argument><expr><name>DELIMITER_STR</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><name><name>pieces</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr>(<call><name><name>type</name>.<name>equals</name></name><argument_list>(<argument><expr><name>STATUS_NORMAL</name></expr></argument>)</argument_list></call>) || <call><name><name>type</name>.<name>equals</name></name><argument_list>(<argument><expr><name>STATUS_BOOTSTRAPPING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <assert>assert <expr><name><name>pieces</name>.<name>length</name></name> &gt;= 2</expr>;</assert>
                    <expr_stmt><expr><name>outValue</name> = <call><name>versionString</name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>pieces</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <if>if <condition>(<expr><call><name><name>type</name>.<name>equals</name></name><argument_list>(<argument><expr><name>STATUS_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <assert>assert <expr><name><name>pieces</name>.<name>length</name></name> &gt;= 3</expr>;</assert>

                    <comment type="line">// three component 'left' was adopted starting from Cassandra 1.0</comment>
                    <comment type="line">// previous versions have '&lt;type&gt;:&lt;token&gt;' format</comment>
                    <expr_stmt><expr><name>outValue</name> = (<name>version</name> &lt; <name><name>MessagingService</name>.<name>VERSION_10</name></name>)
                                ? <call><name>versionString</name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>pieces</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call>
                                : <call><name>versionString</name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>pieces</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>pieces</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <if>if <condition>(<expr>(<call><name><name>type</name>.<name>equals</name></name><argument_list>(<argument><expr><name>REMOVAL_COORDINATOR</name></expr></argument>)</argument_list></call>) || (<call><name><name>type</name>.<name>equals</name></name><argument_list>(<argument><expr><name>REMOVING_TOKEN</name></expr></argument>)</argument_list></call>) || (<call><name><name>type</name>.<name>equals</name></name><argument_list>(<argument><expr><name>REMOVED_TOKEN</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unable to serialize %s(%s...) for nodes older than 1.2"</expr></argument>,
                                                             <argument><expr><call><name><name>VersionedValue</name>.<name><name>class</name>.<name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            }</block></then></if>
            <return>return <expr><name>outValue</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>dis</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>valVersion</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>VersionedValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>valVersion</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>VersionedValue</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr><call><name>outValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> + <call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr><name><name>value</name>.<name>version</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>

</unit>
