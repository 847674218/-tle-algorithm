<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\auth\DataResource.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name></name>;</package>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Objects</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>Schema</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The primary type of resource in Cassandra.
 *
 * Used to represent a column family or a keyspace or the root level "data" resource.
 * "data"                                 - the root level data resource.
 * "data/keyspace_name"                   - keyspace-level data resource.
 * "data/keyspace_name/column_family_name" - cf-level data resource.
 */</comment>
<class><specifier>public</specifier> class <name>DataResource</name> <super><implements>implements <name>IResource</name></implements></super>
<block>{
    <enum>enum <name>Level</name>
    <block>{
        <decl><name>ROOT</name></decl>, <decl><name>KEYSPACE</name></decl>, <decl><name>COLUMN_FAMILY</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ROOT_NAME</name> <init>= <expr>"data"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DataResource</name></type> <name>ROOT_RESOURCE</name> <init>= <expr>new <call><name>DataResource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Level</name></type> <name>level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>columnFamily</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>DataResource</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>level</name> = <name><name>Level</name>.<name>ROOT</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>keyspace</name> = null</expr>;</expr_stmt>
        <expr_stmt><expr><name>columnFamily</name> = null</expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>DataResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>level</name> = <name><name>Level</name>.<name>KEYSPACE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>keyspace</name></name> = <name>keyspace</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnFamily</name> = null</expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>DataResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>level</name> = <name><name>Level</name>.<name>COLUMN_FAMILY</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>keyspace</name></name> = <name>keyspace</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columnFamily</name></name> = <name>columnFamily</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return the root-level resource.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DataResource</name></type> <name>root</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>ROOT_RESOURCE</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a DataResource representing a keyspace.
     *
     * @param keyspace Name of the keyspace.
     * @return DataResource instance representing the keyspace.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DataResource</name></type> <name>keyspace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>DataResource</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a DataResource instance representing a column family.
     *
     * @param keyspace Name of the keyspace.
     * @param columnFamily Name of the column family.
     * @return DataResource instance representing the column family.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DataResource</name></type> <name>columnFamily</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>DataResource</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Parses a data resource name into a DataResource instance.
     *
     * @param name Name of the data resource.
     * @return DataResource instance matching the name.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DataResource</name></type> <name>fromName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>parts</name> <init>= <expr><call><name><name>StringUtils</name>.<name>split</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<name><name>parts</name><index>[<expr>0</expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr><name>ROOT_NAME</name></expr></argument>)</argument_list></call> || <name><name>parts</name>.<name>length</name></name> &gt; 3</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s is not a valid data resource name"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <if>if <condition>(<expr><name><name>parts</name>.<name>length</name></name> == 1</expr>)</condition><then>
            <return>return <expr><call><name>root</name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <if>if <condition>(<expr><name><name>parts</name>.<name>length</name></name> == 2</expr>)</condition><then>
            <return>return <expr><call><name>keyspace</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

        <return>return <expr><call><name>columnFamily</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>parts</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return Printable name of the resource.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>level</name></expr>)</condition>
        <block>{
            <case>case <expr><name>ROOT</name></expr>:
                <return>return <expr><name>ROOT_NAME</name></expr>;</return>
            </case><case>case <expr><name>KEYSPACE</name></expr>:
                <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s/%s"</expr></argument>, <argument><expr><name>ROOT_NAME</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>COLUMN_FAMILY</name></expr>:
                <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s/%s/%s"</expr></argument>, <argument><expr><name>ROOT_NAME</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</return>
        </case>}</block></switch>
        <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return Parent of the resource, if any. Throws IllegalStateException if it's the root-level resource.
     */</comment>
    <function><type><specifier>public</specifier> <name>IResource</name></type> <name>getParent</name><parameter_list>()</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>level</name></expr>)</condition>
        <block>{
            <case>case <expr><name>KEYSPACE</name></expr>:
                <return>return <expr><call><name>root</name><argument_list>()</argument_list></call></expr>;</return>
            </case><case>case <expr><name>COLUMN_FAMILY</name></expr>:
                <return>return <expr><call><name>keyspace</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
        </case>}</block></switch>
        <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Root-level resource can't have a parent"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRootLevel</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>level</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>Level</name>.<name>ROOT</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isKeyspaceLevel</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>level</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>Level</name>.<name>KEYSPACE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isColumnFamilyLevel</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>level</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>Level</name>.<name>COLUMN_FAMILY</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * @return keyspace of the resource. Throws IllegalStateException if it's the root-level resource.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeyspace</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name>isRootLevel</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"ROOT data resource has no keyspace"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <return>return <expr><name>keyspace</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return column family of the resource. Throws IllegalStateException if it's not a cf-level resource.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getColumnFamily</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name>isColumnFamilyLevel</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s data resource has no column family"</expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <return>return <expr><name>columnFamily</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return Whether or not the resource has a parent in the hierarchy.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasParent</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>!<call><name><name>level</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>Level</name>.<name>ROOT</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return Whether or not the resource exists in Cassandra.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>()</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>level</name></expr>)</condition>
        <block>{
            <case>case <expr><name>ROOT</name></expr>:
                <return>return <expr>true</expr>;</return>
            </case><case>case <expr><name>KEYSPACE</name></expr>:
                <return>return <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getTables</name></name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>COLUMN_FAMILY</name></expr>:
                <return>return <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getCFMetaData</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call> != null</expr>;</return>
        </case>}</block></switch>
        <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>level</name></expr>)</condition>
        <block>{
            <case>case <expr><name>ROOT</name></expr>:
                <return>return <expr>"&lt;all keyspaces&gt;"</expr>;</return>
            </case><case>case <expr><name>KEYSPACE</name></expr>:
                <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"&lt;keyspace %s&gt;"</expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>COLUMN_FAMILY</name></expr>:
                <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"&lt;table %s.%s&gt;"</expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</return>
        </case>}</block></switch>
        <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>o</name></expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then></if>

        <if>if <condition>(<expr>!(<name>o</name> instanceof <name>DataResource</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>

        <decl_stmt><decl><type><name>DataResource</name></type> <name>ds</name> <init>= <expr>(<name>DataResource</name>) <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>Objects</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>level</name></name></expr></argument>, <argument><expr><name><name>ds</name>.<name>level</name></name></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>Objects</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>keyspace</name></name></expr></argument>, <argument><expr><name><name>ds</name>.<name>keyspace</name></name></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>Objects</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>columnFamily</name></name></expr></argument>, <argument><expr><name><name>ds</name>.<name>columnFamily</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Objects</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
