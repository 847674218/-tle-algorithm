<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\vint\EncodedDataInputStream.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>vint</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>AbstractDataInput</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Borrows idea from
 * https://developers.google.com/protocol-buffers/docs/encoding#varints
 * 
 * Should be used with EncodedDataOutputStream
 */</comment>
<class><specifier>public</specifier> class <name>EncodedDataInputStream</name> <super><extends>extends <name>AbstractDataInput</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>DataInput</name></type> <name>input</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>EncodedDataInputStream</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>input</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>input</name></name> = <name>input</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>skipBytes</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>input</name>.<name>skipBytes</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>input</name>.<name>readByte</name></name><argument_list>()</argument_list></call> &amp; 0xFF</expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>seekInternal</name><parameter_list>(<param><decl><type><name>int</name></type> <name>position</name></decl></param>)</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>int</name></type> <name>getPosition</name><parameter_list>()</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block">/* as all of the integer types could be decoded using VInt we can use single method vintEncode */</comment>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>readInt</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr>(<name>int</name>) <call><name>vintDecode</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>readLong</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name>vintDecode</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>readUnsignedShort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr>(<name>short</name>) <call><name>vintDecode</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>short</name></type> <name>readShort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr>(<name>short</name>) <call><name>vintDecode</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>vintDecode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>byte</name></type> <name>firstByte</name> <init>= <expr><call><name><name>input</name>.<name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>vintDecodeSize</name><argument_list>(<argument><expr><name>firstByte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>len</name> == 1</expr>)</condition><then>
            <return>return <expr><name>firstByte</name></expr>;</return></then></if>
        <decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>idx</name> &lt; <name>len</name> - 1</expr>;</condition> <incr><expr><name>idx</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><call><name><name>input</name>.<name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>i</name> = <name>i</name> &lt;&lt; 8</expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name> = <name>i</name> | (<name>b</name> &amp; 0xFF)</expr>;</expr_stmt>
        }</block></for>
        <return>return <expr>(<call><name>vintIsNegative</name><argument_list>(<argument><expr><name>firstByte</name></expr></argument>)</argument_list></call> ? (<name>i</name> ^ -1L) : <name>i</name>)</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>vintDecodeSize</name><parameter_list>(<param><decl><type><name>byte</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>value</name> &gt;= -112</expr>)</condition><then>
        <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>value</name> &lt; -120</expr>)</condition><then>
        <block>{
            <return>return <expr>-119 - <name>value</name></expr>;</return>
        }</block></then></if></else></if>
        <return>return <expr>-111 - <name>value</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>vintIsNegative</name><parameter_list>(<param><decl><type><name>byte</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>value</name> &lt; -120 || (<name>value</name> &gt;= -112 &amp;&amp; <name>value</name> &lt; 0)</expr>;</return>
    }</block></function>
}</block></class>
</unit>
