<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\concurrent\DebuggableThreadPoolExecutor.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name></name>.*;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name>.<name>TraceState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name>.<name>Tracing</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name>.<name>Tracing</name>.<name>isTracing</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class encorporates some Executor best practices for Cassandra.  Most of the executors in the system
 * should use or extend this.  There are two main improvements over a vanilla TPE:
 *
 * - If a task throws an exception, the default uncaught exception handler will be invoked; if there is
 *   no such handler, the exception will be logged.
 * - MaximumPoolSize is not supported.  Here is what that means (quoting TPE javadoc):
 *
 *     If fewer than corePoolSize threads are running, the Executor always prefers adding a new thread rather than queuing.
 *     If corePoolSize or more threads are running, the Executor always prefers queuing a request rather than adding a new thread.
 *     If a request cannot be queued, a new thread is created unless this would exceed maximumPoolSize, in which case, the task will be rejected.
 *
 *   We don't want this last stage of creating new threads if the queue is full; it makes it needlessly difficult to
 *   reason about the system's behavior.  In other words, if DebuggableTPE has allocated our maximum number of (core)
 *   threads and the queue is full, we want the enqueuer to block.  But to allow the number of threads to drop if a
 *   stage is less busy, core thread timeout is enabled.
 */</comment>
<class><specifier>public</specifier> class <name>DebuggableThreadPoolExecutor</name> <super><extends>extends <name>ThreadPoolExecutor</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>DebuggableThreadPoolExecutor</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RejectedExecutionHandler</name></type> <name>blockingExecutionHandler</name> <init>= <expr>new <class><super><name>RejectedExecutionHandler</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>rejectedExecution</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>task</name></decl></param>, <param><decl><type><name>ThreadPoolExecutor</name></type> <name>executor</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr>((<name>DebuggableThreadPoolExecutor</name>) <name>executor</name>).<call><name>onInitialRejection</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>BlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>queue</name> <init>= <expr><call><name><name>executor</name>.<name>getQueue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr>true</expr>)</condition>
            <block>{
                <if>if <condition>(<expr><call><name><name>executor</name>.<name>isShutdown</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr>((<name>DebuggableThreadPoolExecutor</name>) <name>executor</name>).<call><name>onFinalRejection</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr>new <call><name>RejectedExecutionException</name><argument_list>(<argument><expr>"ThreadPoolExecutor has shut down"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <try>try
                <block>{
                    <if>if <condition>(<expr><call><name><name>queue</name>.<name>offer</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr>1000</expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr>((<name>DebuggableThreadPoolExecutor</name>) <name>executor</name>).<call><name>onFinalAccept</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></while>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DebuggableThreadPoolExecutor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>threadPoolName</name></decl></param>, <param><decl><type><name>int</name></type> <name>priority</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>, <argument><expr>new <call><name><name>LinkedBlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><name>threadPoolName</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>DebuggableThreadPoolExecutor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>corePoolSize</name></decl></param>, <param><decl><type><name>long</name></type> <name>keepAliveTime</name></decl></param>, <param><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></param>, <param><decl><type><name><name>BlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>queue</name></decl></param>, <param><decl><type><name>ThreadFactory</name></type> <name>factory</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>corePoolSize</name></expr></argument>, <argument><expr><name>corePoolSize</name></expr></argument>, <argument><expr><name>keepAliveTime</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>DebuggableThreadPoolExecutor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>corePoolSize</name></decl></param>, <param><decl><type><name>int</name></type> <name>maximumPoolSize</name></decl></param>, <param><decl><type><name>long</name></type> <name>keepAliveTime</name></decl></param>, <param><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></param>, <param><decl><type><name><name>BlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>workQueue</name></decl></param>, <param><decl><type><name>ThreadFactory</name></type> <name>threadFactory</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>corePoolSize</name></expr></argument>, <argument><expr><name>maximumPoolSize</name></expr></argument>, <argument><expr><name>keepAliveTime</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>workQueue</name></expr></argument>, <argument><expr><name>threadFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>allowCoreThreadTimeOut</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// block task submissions until queue has room.</comment>
        <comment type="line">// this is fighting TPE's design a bit because TPE rejects if queue.offer reports a full queue.</comment>
        <comment type="line">// we'll just override this with a handler that retries until it gets in.  ugly, but effective.</comment>
        <comment type="line">// (there is an extensive analysis of the options here at</comment>
        <comment type="line">//  http://today.java.net/pub/a/today/2008/10/23/creating-a-notifying-blocking-thread-pool-executor.html)</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>setRejectedExecutionHandler</name></name><argument_list>(<argument><expr><name>blockingExecutionHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns a ThreadPoolExecutor with a fixed number of threads.
     * When all threads are actively executing tasks, new tasks are queued.
     * If (most) threads are expected to be idle most of the time, prefer createWithMaxSize() instead.
     * @param threadPoolName the name of the threads created by this executor
     * @param size the fixed number of threads for this executor
     * @return the new DebuggableThreadPoolExecutor
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DebuggableThreadPoolExecutor</name></type> <name>createWithFixedPoolSize</name><parameter_list>(<param><decl><type><name>String</name></type> <name>threadPoolName</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>createWithMaximumPoolSize</name><argument_list>(<argument><expr><name>threadPoolName</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a ThreadPoolExecutor with a fixed maximum number of threads, but whose
     * threads are terminated when idle for too long.
     * When all threads are actively executing tasks, new tasks are queued.
     * @param threadPoolName the name of the threads created by this executor
     * @param size the maximum number of threads for this executor
     * @param keepAliveTime the time an idle thread is kept alive before being terminated
     * @param unit tht time unit for {@code keepAliveTime}
     * @return the new DebuggableThreadPoolExecutor
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DebuggableThreadPoolExecutor</name></type> <name>createWithMaximumPoolSize</name><parameter_list>(<param><decl><type><name>String</name></type> <name>threadPoolName</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>, <param><decl><type><name>int</name></type> <name>keepAliveTime</name></decl></param>, <param><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>DebuggableThreadPoolExecutor</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name>keepAliveTime</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr>new <call><name><name>LinkedBlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><name>threadPoolName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onInitialRejection</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>task</name></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onFinalAccept</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>task</name></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onFinalRejection</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>task</name></decl></param>)</parameter_list> <block>{}</block></function>

    <comment type="line">// execute does not call newTaskFor</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>command</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>execute</name></name><argument_list>(<argument><expr><call><name>isTracing</name><argument_list>()</argument_list></call> &amp;&amp; !(<name>command</name> instanceof <name>TraceSessionWrapper</name>)
                      ? new <call><name><name>TraceSessionWrapper</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call>
                      : <name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name><name>RunnableFuture</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>newTaskFor</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>runnable</name></decl></param>, <param><decl><type><name>T</name></type> <name>result</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name>isTracing</name><argument_list>()</argument_list></call> &amp;&amp; !(<name>runnable</name> instanceof <name>TraceSessionWrapper</name>)</expr>)</condition><then>
        <block>{
            <return>return <expr>new <call><name><name>TraceSessionWrapper</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>runnable</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>newTaskFor</name></name><argument_list>(<argument><expr><name>runnable</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name><name>RunnableFuture</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>newTaskFor</name><parameter_list>(<param><decl><type><name><name>Callable</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>callable</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name>isTracing</name><argument_list>()</argument_list></call> &amp;&amp; !(<name>callable</name> instanceof <name>TraceSessionWrapper</name>)</expr>)</condition><then>
        <block>{
            <return>return <expr>new <call><name><name>TraceSessionWrapper</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>callable</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>newTaskFor</name></name><argument_list>(<argument><expr><name>callable</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>void</name></type> <name>afterExecute</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>r</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>afterExecute</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>r</name> instanceof <name>TraceSessionWrapper</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>TraceSessionWrapper</name></type> <name>tsw</name> <init>= <expr>(<name>TraceSessionWrapper</name>) <name>r</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// we have to reset trace state as its presence is what denotes the current thread is tracing</comment>
            <comment type="line">// and if left this thread might start tracing unrelated tasks</comment>
            <expr_stmt><expr><call><name><name>tsw</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><call><name>logExceptionsAfterExecute</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>void</name></type> <name>beforeExecute</name><parameter_list>(<param><decl><type><name>Thread</name></type> <name>t</name></decl></param>, <param><decl><type><name>Runnable</name></type> <name>r</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>r</name> instanceof <name>TraceSessionWrapper</name></expr>)</condition><then>
            <expr_stmt><expr>((<name>TraceSessionWrapper</name>) <name>r</name>).<call><name>setupContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name><name>super</name>.<name>beforeExecute</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Send @param t and any exception wrapped by @param r to the default uncaught exception handler,
     * or log them if none such is set up
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>logExceptionsAfterExecute</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>r</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Throwable</name></type> <name>hiddenThrowable</name> <init>= <expr><call><name>extractThrowable</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>hiddenThrowable</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name>handleOrLog</name><argument_list>(<argument><expr><name>hiddenThrowable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <comment type="line">// ThreadPoolExecutor will re-throw exceptions thrown by its Task (which will be seen by</comment>
        <comment type="line">// the default uncaught exception handler) so we only need to do anything if that handler</comment>
        <comment type="line">// isn't set up yet.</comment>
        <if>if <condition>(<expr><name>t</name> != null &amp;&amp; <call><name><name>Thread</name>.<name>getDefaultUncaughtExceptionHandler</name></name><argument_list>()</argument_list></call> == null</expr>)</condition><then>
            <expr_stmt><expr><call><name>handleOrLog</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Send @param t to the default uncaught exception handler, or log it if none such is set up
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>handleOrLog</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>Thread</name>.<name>getDefaultUncaughtExceptionHandler</name></name><argument_list>()</argument_list></call> == null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Error in ThreadPoolExecutor"</expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name><name>Thread</name>.<name>getDefaultUncaughtExceptionHandler</name></name><argument_list>()</argument_list></call>.<call><name>uncaughtException</name><argument_list>(<argument><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return any exception wrapped by @param runnable, i.e., if it is a FutureTask
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Throwable</name></type> <name>extractThrowable</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>runnable</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Check for exceptions wrapped by FutureTask.  We do this by calling get(), which will</comment>
        <comment type="line">// cause it to throw any saved exception.</comment>
        <comment type="line">//</comment>
        <comment type="line">// Complicating things, calling get() on a ScheduledFutureTask will block until the task</comment>
        <comment type="line">// is cancelled.  Hence, the extra isDone check beforehand.</comment>
        <if>if <condition>(<expr>(<name>runnable</name> instanceof <name><name>Future</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name>) &amp;&amp; ((<name><name>Future</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name>) <name>runnable</name>).<call><name>isDone</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr>((<name><name>Future</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name>) <name>runnable</name>).<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>CancellationException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Task cancelled"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>ExecutionException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr><call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></catch></try>
        }</block></then></if>

        <return>return <expr>null</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Used to wrap a Runnable or Callable passed to submit or execute so we can clone the TraceSessionContext and move
     * it into the worker thread.
     *
     * @param &lt;T&gt;
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name><name>TraceSessionWrapper</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>FutureTask</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TraceState</name></type> <name>state</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>TraceSessionWrapper</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>runnable</name></decl></param>, <param><decl><type><name>T</name></type> <name>result</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>runnable</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> = <call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>public</specifier> <name>TraceSessionWrapper</name><parameter_list>(<param><decl><type><name><name>Callable</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>callable</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>callable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> = <call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>setupContext</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>set</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>set</name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
