<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\dht\AbstractByteOrderedPartitioner.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name></name>;</package>

<import>import <name><name>java</name>.<name>math</name>.<name>BigInteger</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>ArrayUtils</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Hex</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractByteOrderedPartitioner</name> <super><extends>extends <name><name>AbstractPartitioner</name><argument_list>&lt;<argument><name>BytesToken</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BytesToken</name></type> <name>MINIMUM</name> <init>= <expr>new <call><name>BytesToken</name><argument_list>(<argument><expr><name><name>ArrayUtils</name>.<name>EMPTY_BYTE_ARRAY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BigInteger</name></type> <name>BYTE_MASK</name> <init>= <expr>new <call><name>BigInteger</name><argument_list>(<argument><expr>"255"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>decorateKey</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>DecoratedKey</name><argument_list>(<argument><expr><call><name>getToken</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>convertFromDiskFormat</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>DecoratedKey</name><argument_list>(<argument><expr><call><name>getToken</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>BytesToken</name></type> <name>midpoint</name><parameter_list>(<param><decl><type><name>Token</name></type> <name>ltoken</name></decl></param>, <param><decl><type><name>Token</name></type> <name>rtoken</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ll</name></decl>,<decl><type ref="prev"/><name>rl</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>lb</name></decl>,<decl><type ref="prev"/><name>rb</name></decl>;</decl_stmt>

        <if>if<condition>(<expr><name><name>ltoken</name>.<name>token</name></name> instanceof <name><name>byte</name><index>[]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ll</name> = ((<name><name>byte</name><index>[]</index></name>)<name><name>ltoken</name>.<name>token</name></name>).<name>length</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lb</name> = <call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr>((<name><name>byte</name><index>[]</index></name>)<name><name>ltoken</name>.<name>token</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>ll</name> = ((<name>ByteBuffer</name>)<name><name>ltoken</name>.<name>token</name></name>).<call><name>remaining</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lb</name> = (<name>ByteBuffer</name>)<name><name>ltoken</name>.<name>token</name></name></expr>;</expr_stmt>
        }</block></else></if>

        <if>if<condition>(<expr><name><name>rtoken</name>.<name>token</name></name> instanceof <name><name>byte</name><index>[]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>rl</name> = ((<name><name>byte</name><index>[]</index></name>)<name><name>rtoken</name>.<name>token</name></name>).<name>length</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rb</name> = <call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr>((<name><name>byte</name><index>[]</index></name>)<name><name>rtoken</name>.<name>token</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>rl</name> = ((<name>ByteBuffer</name>)<name><name>rtoken</name>.<name>token</name></name>).<call><name>remaining</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rb</name> = (<name>ByteBuffer</name>)<name><name>rtoken</name>.<name>token</name></name></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>int</name></type> <name>sigbytes</name> <init>= <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>rl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>left</name> <init>= <expr><call><name>bigForBytes</name><argument_list>(<argument><expr><name>lb</name></expr></argument>, <argument><expr><name>sigbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>right</name> <init>= <expr><call><name>bigForBytes</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name>sigbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>BigInteger</name></argument>,<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>midpair</name> <init>= <expr><call><name><name>FBUtilities</name>.<name>midpoint</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr>8*<name>sigbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>BytesToken</name><argument_list>(<argument><expr><call><name>bytesForBig</name><argument_list>(<argument><expr><name><name>midpair</name>.<name>left</name></name></expr></argument>, <argument><expr><name>sigbytes</name></expr></argument>, <argument><expr><name><name>midpair</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a byte array containing the most significant of 'sigbytes' bytes
     * representing a big-endian magnitude into a BigInteger.
     */</comment>
    <function><type><specifier>private</specifier> <name>BigInteger</name></type> <name>bigForBytes</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>, <param><decl><type><name>int</name></type> <name>sigbytes</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>b</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>sigbytes</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>arrayCopy</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><call><name><name>bytes</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <call><name>BigInteger</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a (positive) BigInteger into a byte array representing its magnitude.
     * If remainder is true, an additional byte with the high order bit enabled
     * will be added to the end of the array
     */</comment>
    <function><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>bytesForBig</name><parameter_list>(<param><decl><type><name>BigInteger</name></type> <name>big</name></decl></param>, <param><decl><type><name>int</name></type> <name>sigbytes</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>remainder</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>sigbytes</name> + (<name>remainder</name> ? 1 : 0)</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>remainder</name></expr>)</condition><then>
        <block>{
            <comment type="line">// remaining bit is the most significant in the last byte</comment>
            <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>sigbytes</name></expr>]</index></name> |= 0x80</expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// bitmask for a single byte</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>sigbytes</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>maskpos</name> <init>= <expr>8 * (<name>sigbytes</name> - (<name>i</name> + 1))</expr></init></decl>;</decl_stmt>
            <comment type="line">// apply bitmask and get byte value</comment>
            <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>byte</name>)<argument_list>(<argument><expr><call><name><name>big</name>.<name>and</name></name><argument_list>(<argument><expr><call><name><name>BYTE_MASK</name>.<name>shiftLeft</name></name><argument_list>(<argument><expr><name>maskpos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>shiftRight</name><argument_list>(<argument><expr><name>maskpos</name></expr></argument>)</argument_list></call>.<call><name>intValue</name><argument_list>()</argument_list></call> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>bytes</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>BytesToken</name></type> <name>getMinimumToken</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>MINIMUM</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>BytesToken</name></type> <name>getRandomToken</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Random</name></type> <name>r</name> <init>= <expr>new <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> <init>= <expr>new <name><name>byte</name><index>[<expr>16</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>r</name>.<name>nextBytes</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <call><name>BytesToken</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Token</name>.<name><name>TokenFactory</name><argument_list>&lt;<argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></name></type> <name>tokenFactory</name> <init>= <expr>new <class><super><name><name>Token</name>.<name><name>TokenFactory</name><argument_list>&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>toByteArray</name><parameter_list>(<param><decl><type><name><name>Token</name><argument_list>&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>bytesToken</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name><name>bytesToken</name>.<name>token</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>Token</name><argument_list>&lt;<argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>fromByteArray</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>BytesToken</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<param><decl><type><name><name>Token</name><argument_list>&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>bytesToken</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>Hex</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name><name>bytesToken</name>.<name>token</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>token</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
        <block>{
            <try>try
            <block>{
                <if>if <condition>(<expr><call><name><name>token</name>.<name>length</name></name><argument_list>()</argument_list></call> % 2 == 1</expr>)</condition><then>
                    <expr_stmt><expr><name>token</name> = "0" + <name>token</name></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name><name>Hex</name>.<name>hexToBytes</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Token " + <name>token</name> + " contains non-hex digits"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>Token</name><argument_list>&lt;<argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>fromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>string</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><call><name><name>string</name>.<name>length</name></name><argument_list>()</argument_list></call> % 2 == 1</expr>)</condition><then>
                <expr_stmt><expr><name>string</name> = "0" + <name>string</name></expr>;</expr_stmt></then></if>
            <return>return <expr>new <call><name>BytesToken</name><argument_list>(<argument><expr><call><name><name>Hex</name>.<name>hexToBytes</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name><name>Token</name>.<name><name>TokenFactory</name><argument_list>&lt;<argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></name></type> <name>getTokenFactory</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>tokenFactory</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>preservesOrder</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>BytesToken</name></type> <name>getToken</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>describeOwnership</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>sortedTokens</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// allTokens will contain the count and be returned, sorted_ranges is shorthand for token&lt;-&gt;token math.</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>allTokens</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sortedRanges</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>sortedTokens</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// this initializes the counts to 0 and calcs the ranges in order.</comment>
        <decl_stmt><decl><type><name>Token</name></type> <name>lastToken</name> <init>= <expr><call><name><name>sortedTokens</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>sortedTokens</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Token</name></type> <name>node</name> <range>: <expr><name>sortedTokens</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>allTokens</name>.<name>put</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr>new <call><name>Float</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sortedRanges</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lastToken</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lastToken</name> = <name>node</name></expr>;</expr_stmt>
        }</block></for>

        <for>for (<init><decl><type><name>String</name></type> <name>ks</name> <range>: <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <for>for (<init><decl><type><name>CFMetaData</name></type> <name>cfmd</name> <range>: <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getKSMetaData</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call>.<call><name>cfMetaData</name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <for>for (<init><decl><type><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>r</name> <range>: <expr><name>sortedRanges</name></expr></range></decl></init>)
                <block>{
                    <comment type="line">// Looping over every KS:CF:Range, get the splits size and add it to the count</comment>
                    <expr_stmt><expr><call><name><name>allTokens</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>r</name>.<name>right</name></name></expr></argument>, <argument><expr><call><name><name>allTokens</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>r</name>.<name>right</name></name></expr></argument>)</argument_list></call> + <call><name><name>StorageService</name>.<name>instance</name>.<name>getSplits</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><name><name>cfmd</name>.<name>cfName</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></for>

        <comment type="line">// Sum every count up and divide count/total for the fractional ownership.</comment>
        <decl_stmt><decl><type><name>Float</name></type> <name>total</name> <init>= <expr>new <call><name>Float</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Float</name></type> <name>f</name> <range>: <expr><call><name><name>allTokens</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><name>total</name> += <name>f</name></expr>;</expr_stmt></for>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></name></type> <name>row</name> <range>: <expr><call><name><name>allTokens</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>allTokens</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>row</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>row</name>.<name>getValue</name></name><argument_list>()</argument_list></call> / <name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <return>return <expr><name>allTokens</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
