<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\FBUtilities.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Field</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>math</name>.<name>BigInteger</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>NetworkInterface</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>SocketException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ExecutionException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>Future</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeoutException</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Joiner</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>AbstractIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name>.<name>IRowCacheProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name>.<name>CreationTimeAwareFuture</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Token</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>DataOutputBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>IAsyncResult</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TBase</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TDeserializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>codehaus</name>.<name>jackson</name>.<name>JsonFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>codehaus</name>.<name>jackson</name>.<name>map</name>.<name>ObjectMapper</name></name>;</import>

<class><specifier>public</specifier> class <name>FBUtilities</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>FBUtilities</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ObjectMapper</name></type> <name>jsonMapper</name> <init>= <expr>new <call><name>ObjectMapper</name><argument_list>(<argument><expr>new <call><name>JsonFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BigInteger</name></type> <name>TWO</name> <init>= <expr>new <call><name>BigInteger</name><argument_list>(<argument><expr>"2"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>InetAddress</name></type> <name>localInetAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>InetAddress</name></type> <name>broadcastInetAddress</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getAvailableProcessors</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"cassandra.available_processors"</expr></argument>)</argument_list></call> != null</expr>)</condition><then>
            <return>return <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"cassandra.available_processors"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
        <else>else
            <return>return <expr><call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call>.<call><name>availableProcessors</name><argument_list>()</argument_list></call></expr>;</return></else></if>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list>&lt;<argument><name>MessageDigest</name></argument>&gt;</argument_list></name></type> <name>localMD5Digest</name> <init>= <expr>new <class><super><name><name>ThreadLocal</name><argument_list>&lt;<argument><name>MessageDigest</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <name>MessageDigest</name></type> <name>initialValue</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name>newMessageDigest</name><argument_list>(<argument><expr>"MD5"</expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>MessageDigest</name></type> <name>get</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>MessageDigest</name></type> <name>digest</name> <init>= <expr><call><name><name>super</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>digest</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>digest</name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list>&lt;<argument><name>Random</name></argument>&gt;</argument_list></name></type> <name>localRandom</name> <init>= <expr>new <class><super><name><name>ThreadLocal</name><argument_list>&lt;<argument><name>Random</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <name>Random</name></type> <name>initialValue</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>new <call><name>Random</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_UNSIGNED_SHORT</name> <init>= <expr>0xFFFF</expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>threadLocalMD5Digest</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>localMD5Digest</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>newMessageDigest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>algorithm</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>MessageDigest</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NoSuchAlgorithmException</name></type> <name>nsae</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"the requested digest algorithm (" + <name>algorithm</name> + ") is not available"</expr></argument>, <argument><expr><name>nsae</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Random</name></type> <name>threadLocalRandom</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>localRandom</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Please use getBroadcastAddress instead. You need this only when you have to listen/connect.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getLocalAddress</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>localInetAddress</name> == null</expr>)</condition><then>
            <try>try
            <block>{
                <expr_stmt><expr><name>localInetAddress</name> = <call><name><name>DatabaseDescriptor</name>.<name>getListenAddress</name></name><argument_list>()</argument_list></call> == null
                                    ? <call><name><name>InetAddress</name>.<name>getLocalHost</name></name><argument_list>()</argument_list></call>
                                    : <call><name><name>DatabaseDescriptor</name>.<name>getListenAddress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try></then></if>
        <return>return <expr><name>localInetAddress</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getBroadcastAddress</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>broadcastInetAddress</name> == null</expr>)</condition><then>
            <expr_stmt><expr><name>broadcastInetAddress</name> = <call><name><name>DatabaseDescriptor</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call> == null
                                 ? <call><name>getLocalAddress</name><argument_list>()</argument_list></call>
                                 : <call><name><name>DatabaseDescriptor</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>broadcastInetAddress</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>getAllLocalAddresses</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>localAddresses</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>NetworkInterface</name></argument>&gt;</argument_list></name></type> <name>nets</name> <init>= <expr><call><name><name>NetworkInterface</name>.<name>getNetworkInterfaces</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>nets</name> != null</expr>)</condition><then>
            <block>{
                <while>while <condition>(<expr><call><name><name>nets</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition>
                    <expr_stmt><expr><call><name><name>localAddresses</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Collections</name>.<name>list</name></name><argument_list>(<argument><expr><call><name><name>nets</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>getInetAddresses</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
            }</block></then></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>SocketException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>localAddresses</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Given two bit arrays represented as BigIntegers, containing the given
     * number of significant bits, calculate a midpoint.
     *
     * @param left The left point.
     * @param right The right point.
     * @param sigbits The number of bits in the points that are significant.
     * @return A midpoint that will compare bitwise halfway between the params, and
     * a boolean representing whether a non-zero lsbit remainder was generated.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Pair</name><argument_list>&lt;<argument><name>BigInteger</name></argument>,<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>midpoint</name><parameter_list>(<param><decl><type><name>BigInteger</name></type> <name>left</name></decl></param>, <param><decl><type><name>BigInteger</name></type> <name>right</name></decl></param>, <param><decl><type><name>int</name></type> <name>sigbits</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>midpoint</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>remainder</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>left</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>sum</name> <init>= <expr><call><name><name>left</name>.<name>add</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>remainder</name> = <call><name><name>sum</name>.<name>testBit</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>midpoint</name> = <call><name><name>sum</name>.<name>shiftRight</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>max</name> <init>= <expr><call><name><name>TWO</name>.<name>pow</name></name><argument_list>(<argument><expr><name>sigbits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// wrapping case</comment>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>distance</name> <init>= <expr><call><name><name>max</name>.<name>add</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call>.<call><name>subtract</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>remainder</name> = <call><name><name>distance</name>.<name>testBit</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>midpoint</name> = <call><name><name>distance</name>.<name>shiftRight</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call>.<call><name>mod</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><name>midpoint</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>compareUnsigned</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes1</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes2</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset1</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset2</name></decl></param>, <param><decl><type><name>int</name></type> <name>len1</name></decl></param>, <param><decl><type><name>int</name></type> <name>len2</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>FastByteComparisons</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>bytes1</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>bytes2</name></expr></argument>, <argument><expr><name>offset2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return The bitwise XOR of the inputs. The output will be the same length as the
     * longer input, but if either input is null, the output will be null.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>xor</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>left</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>right</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>left</name> == null || <name>right</name> == null</expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>
        <if>if <condition>(<expr><name><name>left</name>.<name>length</name></name> &gt; <name><name>right</name>.<name>length</name></name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>swap</name> <init>= <expr><name>left</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>left</name> = <name>right</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>right</name> = <name>swap</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// left.length is now &lt;= right.length</comment>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>out</name> <init>= <expr><call><name><name>Arrays</name>.<name>copyOf</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name><name>right</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>left</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>byte</name>)<argument_list>(<argument><expr>(<name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0xFF) ^ (<name><name>right</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0xFF)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>out</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BigInteger</name></type> <name>hashToBigInteger</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>data</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>result</name> <init>= <expr><call><name>hash</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>hash</name> <init>= <expr>new <call><name>BigInteger</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>hash</name>.<name>abs</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>hash</name><parameter_list>(<param><decl><type><name>ByteBuffer</name>...</type> <name>data</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>messageDigest</name> <init>= <expr><call><name><name>localMD5Digest</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>block</name> <range>: <expr><name>data</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>block</name>.<name>hasArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>block</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call> + <call><name><name>block</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>block</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></for>

        <return>return <expr><call><name><name>messageDigest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>TSerializer</name></type> <name>serializer</name></decl></param>, <param><decl><type><name>TBase</name></type> <name>struct</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <assert>assert <expr><name>serializer</name> != null</expr>;</assert>
        <assert>assert <expr><name>struct</name> != null</expr>;</assert>
        <assert>assert <expr><name>out</name> != null</expr>;</assert>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>bytes</name> = <call><name><name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>struct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>TException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>bytes</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>TDeserializer</name></type> <name>deserializer</name></decl></param>, <param><decl><type><name>TBase</name></type> <name>struct</name></decl></param>, <param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <assert>assert <expr><name>deserializer</name> != null</expr>;</assert>
        <assert>assert <expr><name>struct</name> != null</expr>;</assert>
        <assert>assert <expr><name>in</name> != null</expr>;</assert>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>in</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>deserializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>struct</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>TException</name></type> <name>ex</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>sortSampledKeys</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>keys</name></decl></param>, <param><decl><type><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>range</name>.<name>left</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>range</name>.<name>right</name></name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then>
        <block>{
            <comment type="line">// range wraps.  have to be careful that we sort in the same order as the range to find the right midpoint.</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Token</name></type> <name>right</name> <init>= <expr><name><name>range</name>.<name>right</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr>new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>DecoratedKey</name></type> <name>o1</name></decl></param>, <param><decl><type><name>DecoratedKey</name></type> <name>o2</name></decl></param>)</parameter_list>
                <block>{
                    <if>if <condition>(<expr>(<call><name><name>right</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>o1</name>.<name>token</name></name></expr></argument>)</argument_list></call> &lt; 0 &amp;&amp; <call><name><name>right</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>o2</name>.<name>token</name></name></expr></argument>)</argument_list></call> &lt; 0)
                        || (<call><name><name>right</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>o1</name>.<name>token</name></name></expr></argument>)</argument_list></call> &gt; 0 &amp;&amp; <call><name><name>right</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>o2</name>.<name>token</name></name></expr></argument>)</argument_list></call> &gt; 0)</expr>)</condition><then>
                    <block>{
                        <comment type="line">// both tokens are on the same side of the wrap point</comment>
                        <return>return <expr><call><name><name>o1</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></then></if>
                    <return>return <expr><call><name><name>o2</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <comment type="line">// unwrapped range (left &lt; right).  standard sort is all we need.</comment>
            <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>resourceToFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>loader</name> <init>= <expr><call><name><name>FBUtilities</name>.<name><name>class</name>.<name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>URL</name></type> <name>scpurl</name> <init>= <expr><call><name><name>loader</name>.<name>getResource</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>scpurl</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"unable to locate " + <name>filename</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <return>return <expr><call><name><name>scpurl</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getReleaseVersionString</name><parameter_list>()</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><call><name><name>FBUtilities</name>.<name><name>class</name>.<name>getClassLoader</name></name></name><argument_list>()</argument_list></call>.<call><name>getResourceAsStream</name><argument_list>(<argument><expr>"org/apache/cassandra/config/version.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>in</name> == null</expr>)</condition><then>
            <block>{
                <return>return <expr>"Unknown"</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> <init>= <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>props</name>.<name>load</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"CassandraVersion"</expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Unable to load version.properties"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>"debug version"</expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>timestampMicros</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// we use microsecond resolution for compatibility with other client libraries, even though</comment>
        <comment type="line">// we can't actually get microsecond precision.</comment>
        <return>return <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> * 1000</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>waitOnFutures</name><parameter_list>(<param><decl><type><name><name>Iterable</name><argument_list>&lt;<argument><name><name>Future</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>futures</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>Future</name></type> <name>f</name> <range>: <expr><name>futures</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name>waitOnFuture</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>waitOnFuture</name><parameter_list>(<param><decl><type><name><name>Future</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>future</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>future</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ExecutionException</name></type> <name>ee</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>waitOnFutures</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>IAsyncResult</name></argument>&gt;</argument_list></name></type> <name>results</name></decl></param>, <param><decl><type><name>long</name></type> <name>ms</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TimeoutException</name></expr></argument></throws>
    <block>{
        <for>for (<init><decl><type><name>IAsyncResult</name></type> <name>result</name> <range>: <expr><name>results</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>result</name>.<name>get</name></name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Waits for the futures to complete.
     * @param timeout the timeout expressed in &lt;code&gt;TimeUnit&lt;/code&gt; units
     * @param timeUnit TimeUnit
     * @throws TimeoutException if the waiting time exceeds &lt;code&gt;timeout&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>waitOnFutures</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>CreationTimeAwareFuture</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>hintFutures</name></decl></param>, <param><decl><type><name>long</name></type> <name>timeout</name></decl></param>, <param><decl><type><name>TimeUnit</name></type> <name>timeUnit</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TimeoutException</name></expr></argument></throws>
    <block>{
        <for>for (<init><decl><type><name><name>Future</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>future</name> <range>: <expr><name>hintFutures</name></expr></range></decl></init>)
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>future</name>.<name>get</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>ex</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>ExecutionException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IPartitioner</name></type> <name>newPartitioner</name><parameter_list>(<param><decl><type><name>String</name></type> <name>partitionerClassName</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>partitionerClassName</name>.<name>contains</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>partitionerClassName</name> = "org.apache.cassandra.dht." + <name>partitionerClassName</name></expr>;</expr_stmt></then></if>
        <return>return <expr><call><name><name>FBUtilities</name>.<name>construct</name></name><argument_list>(<argument><expr><name>partitionerClassName</name></expr></argument>, <argument><expr>"partitioner"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return The Class for the given name.
     * @param classname Fully qualified classname.
     * @param readable Descriptive noun for the role the class plays.
     * @throws ConfigurationException If the class cannot be found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>classForName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>, <param><decl><type><name>String</name></type> <name>readable</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <return>return <expr>(<name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unable to find %s class '%s'"</expr></argument>, <argument><expr><name>readable</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>NoClassDefFoundError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unable to find %s class '%s'"</expr></argument>, <argument><expr><name>readable</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Constructs an instance of the given class, which must have a no-arg constructor.
     * @param classname Fully qualified classname.
     * @param readable Descriptive noun for the role the class plays.
     * @throws ConfigurationException If the class cannot be found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name>T</name></type> <name>construct</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>, <param><decl><type><name>String</name></type> <name>readable</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>cls</name> <init>= <expr><call><name><name>FBUtilities</name>.<name>classForName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr><name>readable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <return>return <expr><call><name><name>cls</name>.<name>getConstructor</name></name><argument_list>()</argument_list></call>.<call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"No default constructor for %s class '%s'."</expr></argument>, <argument><expr><name>readable</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Default constructor for %s class '%s' is inaccessible."</expr></argument>, <argument><expr><name>readable</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>InstantiationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Cannot use abstract class '%s' as %s."</expr></argument>, <argument><expr><name>classname</name></expr></argument>, <argument><expr><name>readable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call> instanceof <name>ConfigurationException</name></expr>)</condition><then>
                <throw>throw <expr>(<name>ConfigurationException</name>)<call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call></expr>;</throw></then></if>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Error instantiating %s class '%s'."</expr></argument>, <argument><expr><name>readable</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>T</name> <extends>extends <name>Comparable</name></extends></argument>&gt;</argument_list> <name><name>SortedSet</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>singleton</name><parameter_list>(<param><decl><type><name>T</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name><name>TreeSet</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>?</name></argument>,<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Joiner</name>.<name>MapJoiner</name></name></type> <name>joiner</name> <init>= <expr><call><name><name>Joiner</name>.<name>on</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call>.<call><name>withKeyValueSeparator</name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>joiner</name>.<name>join</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Used to get access to protected/private field of the specified class
     * @param klass - name of the class
     * @param fieldName - name of the field
     * @return Field or null on error
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Field</name></type> <name>getProtectedField</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>klass</name></decl></param>, <param><decl><type><name>String</name></type> <name>fieldName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Field</name></type> <name>field</name></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>field</name> = <call><name><name>klass</name>.<name>getDeclaredField</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>field</name>.<name>setAccessible</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <return>return <expr><name>field</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IRowCacheProvider</name></type> <name>newCacheProvider</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cache_provider</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>cache_provider</name>.<name>contains</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>cache_provider</name> = "org.apache.cassandra.cache." + <name>cache_provider</name></expr>;</expr_stmt></then></if>
        <return>return <expr><call><name><name>FBUtilities</name>.<name>construct</name></name><argument_list>(<argument><expr><name>cache_provider</name></expr></argument>, <argument><expr>"row cache provider"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>closeableIterator</name><parameter_list>(<param><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>iterator</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name><name>WrappedCloseableIterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fromJsonMap</name><parameter_list>(<param><decl><type><name>String</name></type> <name>json</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>jsonMapper</name>.<name>readValue</name></name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name><name>Map</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fromJsonList</name><parameter_list>(<param><decl><type><name>String</name></type> <name>json</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>jsonMapper</name>.<name>readValue</name></name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name><name>List</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>json</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>object</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>jsonMapper</name>.<name>writeValueAsString</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Starts and waits for the given @param pb to finish.
     * @throws java.io.IOException on non-zero exit code
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>exec</name><parameter_list>(<param><decl><type><name>ProcessBuilder</name></type> <name>pb</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>Process</name></type> <name>p</name> <init>= <expr><call><name><name>pb</name>.<name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>errCode</name> <init>= <expr><call><name><name>p</name>.<name>waitFor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>errCode</name> != 0</expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in</name> <init>= <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>BufferedReader</name></type> <name>err</name> <init>= <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getErrorStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>str</name></decl>;</decl_stmt>
                <while>while <condition>(<expr>(<name>str</name> = <call><name><name>in</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != null</expr>)</condition>
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
                <while>while <condition>(<expr>(<name>str</name> = <call><name><name>err</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != null</expr>)</condition>
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Exception while executing the command: "+ <call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><call><name><name>pb</name>.<name>command</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call> +
                                      ", command error Code: " + <name>errCode</name> +
                                      ", command output: "+ <call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>sleep</name><parameter_list>(<param><decl><type><name>int</name></type> <name>millis</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name><name>WrappedCloseableIterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>
        <super><extends>extends <name><name>AbstractIterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends> <implements>implements <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>source</name></decl>;</decl_stmt>
        <constructor><specifier>public</specifier> <name>WrappedCloseableIterator</name><parameter_list>(<param><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>source</name></name> = <name>source</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>protected</specifier> <name>T</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr>!<call><name><name>source</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></then></if>
            <return>return <expr><call><name><name>source</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name>byte</name><index>[]</index></type> <name>serialize</name><parameter_list>(<param><decl><type><name>T</name></type> <name>object</name></decl></param>, <param><decl><type><name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>serializer</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr>(<name>int</name>) <call><name><name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DataOutputBuffer</name></type> <name>buffer</name> <init>= <expr>new <call><name>DataOutputBuffer</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><call><name><name>buffer</name>.<name>getLength</name></name><argument_list>()</argument_list></call> == <name>size</name> &amp;&amp; <call><name><name>buffer</name>.<name>getData</name></name><argument_list>()</argument_list></call>.<name>length</name> == <name>size</name>
               : <call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Final buffer length %s to accommodate data size of %s (predicted %s) for %s"</expr></argument>,
                               <argument><expr><call><name><name>buffer</name>.<name>getData</name></name><argument_list>()</argument_list></call>.<name>length</name></expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</assert>
        <return>return <expr><call><name><name>buffer</name>.<name>getData</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
