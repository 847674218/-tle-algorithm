<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\service\ScheduledRangeTransferExecutorService.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>;</package>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>QueryProcessor</name>.<name>processInternal</name></name>;</import>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>Executors</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ScheduledExecutorService</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ThreadFactory</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicInteger</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>UntypedResultSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>SystemTable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Token</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>ScheduledRangeTransferExecutorService</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>ScheduledRangeTransferExecutorService</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INTERVAL</name> <init>= <expr>10</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ScheduledExecutorService</name></type> <name>scheduler</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name>.<name>getNumTokens</name></name><argument_list>()</argument_list></call> == 1</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>LOG</name>.<name>warn</name></name><argument_list>(<argument><expr>"Cannot start range transfer scheduler: endpoint is not virtual nodes-enabled"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><name>scheduler</name> = <call><name><name>Executors</name>.<name>newSingleThreadScheduledExecutor</name></name><argument_list>(<argument><expr>new <call><name>RangeTransferThreadFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scheduler</name>.<name>scheduleWithFixedDelay</name></name><argument_list>(<argument><expr>new <call><name>RangeTransfer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>INTERVAL</name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>LOG</name>.<name>info</name></name><argument_list>(<argument><expr>"Enabling scheduled transfers of token ranges"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>scheduler</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>LOG</name>.<name>warn</name></name><argument_list>(<argument><expr>"Unabled to shutdown; Scheduler never enabled"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>LOG</name>.<name>info</name></name><argument_list>(<argument><expr>"Shutting down range transfer scheduler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scheduler</name>.<name>shutdownNow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<class>class <name>RangeTransfer</name> <super><implements>implements <name>Runnable</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>RangeTransfer</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>res</name> <init>= <expr><call><name>processInternal</name><argument_list>(<argument><expr>"SELECT * FROM system." + <name><name>SystemTable</name>.<name>RANGE_XFERS_CF</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>res</name>.<name>size</name></name><argument_list>()</argument_list></call> &lt; 1</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>LOG</name>.<name>debug</name></name><argument_list>(<argument><expr>"No queued ranges to transfer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>isReady</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name><name>UntypedResultSet</name>.<name>Row</name></name></type> <name>row</name> <init>= <expr><call><name><name>res</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>requestedAt</name> <init>= <expr><call><name><name>row</name>.<name>getTimestamp</name></name><argument_list>(<argument><expr>"requested_at"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>tokenBytes</name> <init>= <expr><call><name><name>row</name>.<name>getBytes</name></name><argument_list>(<argument><expr>"token_bytes"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Token</name></type> <name>token</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>getTokenFactory</name><argument_list>()</argument_list></call>.<call><name>fromByteArray</name><argument_list>(<argument><expr><name>tokenBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>LOG</name>.<name>info</name></name><argument_list>(<argument><expr>"Initiating transfer of {} (scheduled at {})"</expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><call><name><name>requestedAt</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>StorageService</name>.<name>instance</name>.<name>relocateTokens</name></name><argument_list>(<argument><expr><call><name><name>Collections</name>.<name>singleton</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>LOG</name>.<name>error</name></name><argument_list>(<argument><expr>"Error removing {}: {}"</expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>LOG</name>.<name>debug</name></name><argument_list>(<argument><expr>"Removing queued entry for transfer of {}"</expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>processInternal</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"DELETE FROM system.%s WHERE token_bytes = '%s'"</expr></argument>,
                                          <argument><expr><name><name>SystemTable</name>.<name>RANGE_XFERS_CF</name></name></expr></argument>,
                                          <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name>tokenBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isReady</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>targetTokens</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getNumTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>highMark</name> <init>= <expr>(<name>int</name>)<call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><name>targetTokens</name> + (<name>targetTokens</name> * .10)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>actualTokens</name> <init>= <expr><call><name><name>StorageService</name>.<name>instance</name>.<name>getTokens</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>actualTokens</name> &gt;= <name>highMark</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>LOG</name>.<name>warn</name></name><argument_list>(<argument><expr>"Pausing until token count stabilizes (target={}, actual={})"</expr></argument>, <argument><expr><name>targetTokens</name></expr></argument>, <argument><expr><name>actualTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <return>return <expr>true</expr>;</return>
    }</block></function>
}</block></class>

<class>class <name>RangeTransferThreadFactory</name> <super><implements>implements <name>ThreadFactory</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>AtomicInteger</name></type> <name>count</name> <init>= <expr>new <call><name>AtomicInteger</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>Thread</name></type> <name>newThread</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>r</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Thread</name></type> <name>rangeXferThread</name> <init>= <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rangeXferThread</name>.<name>setName</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"ScheduledRangeXfers:%d"</expr></argument>, <argument><expr><call><name><name>count</name>.<name>getAndIncrement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rangeXferThread</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
