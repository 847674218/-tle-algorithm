<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\compaction\AbstractCompactionIterable.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicInteger</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicLong</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>CloseableIterator</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractCompactionIterable</name> <super><extends>extends <name><name>CompactionInfo</name>.<name>Holder</name></name></extends> <implements>implements <name><name>Iterable</name><argument_list>&lt;<argument><name>AbstractCompactedRow</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>OperationType</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>CompactionController</name></type> <name>controller</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>long</name></type> <name>totalBytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>bytesRead</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ICompactionScanner</name></argument>&gt;</argument_list></name></type> <name>scanners</name></decl>;</decl_stmt>
    <comment type="block">/*
     * counters for merged rows.
     * array index represents (number of merged rows - 1), so index 0 is counter for no merge (1 row),
     * index 1 is counter for 2 rows merged, and so on.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>AtomicLong</name><index>[]</index></type> <name>mergeCounters</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AbstractCompactionIterable</name><parameter_list>(<param><decl><type><name>CompactionController</name></type> <name>controller</name></decl></param>, <param><decl><type><name>OperationType</name></type> <name>type</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ICompactionScanner</name></argument>&gt;</argument_list></name></type> <name>scanners</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>controller</name></name> = <name>controller</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>scanners</name></name> = <name>scanners</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>bytesRead</name></name> = 0</expr>;</expr_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>bytes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ICompactionScanner</name></type> <name>scanner</name> <range>: <expr><name>scanners</name></expr></range></decl></init>)
            <expr_stmt><expr><name>bytes</name> += <call><name><name>scanner</name>.<name>getLengthInBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
        <expr_stmt><expr><name><name>this</name>.<name>totalBytes</name></name> = <name>bytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mergeCounters</name> = new <name><name>AtomicLong</name><index>[<expr><call><name><name>scanners</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>mergeCounters</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <expr_stmt><expr><name><name>mergeCounters</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>AtomicLong</name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>CompactionInfo</name></type> <name>getCompactionInfo</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>CompactionInfo</name><argument_list>(<argument><expr><name><name>controller</name>.<name>cfs</name>.<name>metadata</name></name></expr></argument>,
                                  <argument><expr><name>type</name></expr></argument>,
                                  <argument><expr><name>bytesRead</name></expr></argument>,
                                  <argument><expr><name>totalBytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>updateCounterFor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>rows</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>rows</name> &gt; 0 &amp;&amp; <name>rows</name> - 1 &lt; <name><name>mergeCounters</name>.<name>length</name></name></expr>;</assert>
        <expr_stmt><expr><name><name>mergeCounters</name><index>[<expr><name>rows</name> - 1</expr>]</index></name>.<call><name>incrementAndGet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getMergedRowCounts</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>counters</name> <init>= <expr>new <name><name>long</name><index>[<expr><name><name>mergeCounters</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>counters</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <expr_stmt><expr><name><name>counters</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>mergeCounters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><name>counters</name></expr>;</return>
    }</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>AbstractCompactedRow</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>
</unit>
