<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\ResultSet.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffers</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>LongType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>ReversedType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>Column</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CqlMetadata</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CqlResult</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CqlResultType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CqlRow</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>ResultSet</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Codec</name></type> <name>codec</name> <init>= <expr>new <call><name>Codec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ColumnIdentifier</name></type> <name>COUNT_COLUMN</name> <init>= <expr>new <call><name>ColumnIdentifier</name><argument_list>(<argument><expr>"count"</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Metadata</name></type> <name>metadata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rows</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ResultSet</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Metadata</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>ResultSet</name><parameter_list>(<param><decl><type><name>Metadata</name></type> <name>metadata</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>metadata</name></name> = <name>metadata</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rows</name></name> = <name>rows</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumnValue</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>rows</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> || <call><name>lastRow</name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> == <call><name><name>metadata</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>rows</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name>lastRow</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>lastRow</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>rows</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reverse</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>Collections</name>.<name>reverse</name></name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>trim</name><parameter_list>(<param><decl><type><name>int</name></type> <name>limit</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>toRemove</name> <init>= <expr><call><name><name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call> - <name>limit</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>toRemove</name> &gt; 0</expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>toRemove</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <expr_stmt><expr><call><name><name>rows</name>.<name>remove</name></name><argument_list>(<argument><expr><call><name><name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ResultSet</name></type> <name>makeCountResult</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>ksName</name> <init>= <expr><call><name><name>metadata</name>.<name>names</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<name>ksName</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cfName</name> <init>= <expr><call><name><name>metadata</name>.<name>names</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<name>cfName</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>metadata</name>.<name>names</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>metadata</name>.<name>names</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>COUNT_COLUMN</name></expr></argument>, <argument><expr><name><name>LongType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><call><name><name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rows</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rows</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>Collections</name>.<name>singletonList</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CqlResult</name></type> <name>toThriftResult</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>UTF8</name> <init>= <expr>"UTF8Type"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CqlMetadata</name></type> <name>schema</name> <init>= <expr>new <call><name>CqlMetadata</name><argument_list>(<argument><expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// The 2 following ones shouldn't be needed in CQL3</comment>
                <argument><expr><name>UTF8</name></expr></argument>, <argument><expr><name>UTF8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>ColumnSpecification</name></type> <name>name</name> <range>: <expr><name><name>metadata</name>.<name>names</name></name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>colName</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><call><name><name>name</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>schema</name>.<name>name_types</name>.<name>put</name></name><argument_list>(<argument><expr><name>colName</name></expr></argument>, <argument><expr><name>UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>normalizedType</name> <init>= <expr><name><name>name</name>.<name>type</name></name> instanceof <name>ReversedType</name> ? ((<name>ReversedType</name>)<name><name>name</name>.<name>type</name></name>).<name>baseType</name> : <name><name>name</name>.<name>type</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>schema</name>.<name>value_types</name>.<name>put</name></name><argument_list>(<argument><expr><name>colName</name></expr></argument>, <argument><expr><call><name><name>normalizedType</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></for>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>CqlRow</name></argument>&gt;</argument_list></name></type> <name>cqlRows</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>CqlRow</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>thriftCols</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Column</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>metadata</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <decl_stmt><decl><type><name>Column</name></type> <name>col</name> <init>= <expr>new <call><name>Column</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>names</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>col</name>.<name>setValue</name></name><argument_list>(<argument><expr><call><name><name>row</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>thriftCols</name>.<name>add</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <comment type="line">// The key of CqlRow shoudn't be needed in CQL3</comment>
            <expr_stmt><expr><call><name><name>cqlRows</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>CqlRow</name><argument_list>(<argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>, <argument><expr><name>thriftCols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>CqlResult</name></type> <name>res</name> <init>= <expr>new <call><name>CqlResult</name><argument_list>(<argument><expr><name><name>CqlResultType</name>.<name>ROWS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>res</name>.<name>setRows</name></name><argument_list>(<argument><expr><name>cqlRows</name></expr></argument>)</argument_list></call>.<call><name>setSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)
            <block>{
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>row</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <block>{
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>v</name> <init>= <expr><call><name><name>row</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>v</name> == null</expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" | null"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else>else
                        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" | "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>names</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name><name>type</name>.<name>getString</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                }</block></for>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"---"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Codec</name> <super><implements>implements <name><name>CBCodec</name><argument_list>&lt;<argument><name>ResultSet</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <comment type="block">/*
         * Format:
         *   - metadata
         *   - rows count (4 bytes)
         *   - rows
         */</comment>
        <function><type><specifier>public</specifier> <name>ResultSet</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Metadata</name></type> <name>m</name> <init>= <expr><call><name><name>Metadata</name>.<name>codec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>rowCount</name> <init>= <expr><call><name><name>body</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr>new <call><name>ResultSet</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rowCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// rows</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>totalValues</name> <init>= <expr><name>rowCount</name> * <call><name><name>m</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>totalValues</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <expr_stmt><expr><call><name><name>rs</name>.<name>addColumnValue</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>readValue</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

            <return>return <expr><name>rs</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>ResultSet</name></type> <name>rs</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name><name>CBUtil</name>.<name>BufferBuilder</name></name></type> <name>builder</name> <init>= <expr>new <call><name><name>CBUtil</name>.<name>BufferBuilder</name></name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name><name>rs</name>.<name>metadata</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call> * <call><name><name>rs</name>.<name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>Metadata</name>.<name>codec</name>.<name>encode</name></name><argument_list>(<argument><expr><name><name>rs</name>.<name>metadata</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>intToCB</name></name><argument_list>(<argument><expr><call><name><name>rs</name>.<name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for (<init><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>row</name> <range>: <expr><name><name>rs</name>.<name>rows</name></name></expr></range></decl></init>)
            <block>{
                <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>bb</name> <range>: <expr><name>row</name></expr></range></decl></init>)
                    <expr_stmt><expr><call><name><name>builder</name>.<name>addValue</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            }</block></for>

            <return>return <expr><call><name><name>builder</name>.<name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Metadata</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>CBCodec</name><argument_list>&lt;<argument><name>Metadata</name></argument>&gt;</argument_list></name></type> <name>codec</name> <init>= <expr>new <call><name>Codec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>EnumSet</name><argument_list>&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Metadata</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>EnumSet</name>.<name>noneOf</name></name><argument_list>(<argument><expr><name><name>Flag</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>names</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name>allInSameCF</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>flags</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>Flag</name>.<name>GLOBAL_TABLES_SPEC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></constructor>

        <constructor><specifier>private</specifier> <name>Metadata</name><parameter_list>(<param><decl><type><name><name>EnumSet</name><argument_list>&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>names</name></name> = <name>names</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>allInSameCF</name><parameter_list>()</parameter_list>
        <block>{
            <assert>assert <expr>!<call><name><name>names</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</assert>

            <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>names</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ColumnSpecification</name></type> <name>first</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>ColumnSpecification</name></type> <name>name</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>name</name>.<name>ksName</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>first</name>.<name>ksName</name></name></expr></argument>)</argument_list></call> || !<call><name><name>name</name>.<name>cfName</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>first</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr>false</expr>;</return></then></if>
            }</block></while>
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>ColumnSpecification</name></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"["</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>name</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"("</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name><name>name</name>.<name>ksName</name></name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name><name>name</name>.<name>cfName</name></name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name><name>name</name>.<name>type</name></name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <class><specifier>private</specifier> <specifier>static</specifier> class <name>Codec</name> <super><implements>implements <name><name>CBCodec</name><argument_list>&lt;<argument><name>Metadata</name></argument>&gt;</argument_list></name></implements></super>
        <block>{
            <function><type><specifier>public</specifier> <name>Metadata</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
            <block>{
                <comment type="line">// flags &amp; column count</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>iflags</name> <init>= <expr><call><name><name>body</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>body</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>EnumSet</name><argument_list>&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name> <init>= <expr><call><name><name>Flag</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>iflags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>globalTablesSpec</name> <init>= <expr><call><name><name>flags</name>.<name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name>.<name>GLOBAL_TABLES_SPEC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>globalKsName</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>globalCfName</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>globalTablesSpec</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>globalKsName</name> = <call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>globalCfName</name> = <call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line">// metadata (names/types)</comment>
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>ksName</name> <init>= <expr><name>globalTablesSpec</name> ? <name>globalKsName</name> : <call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>cfName</name> <init>= <expr><name>globalTablesSpec</name> ? <name>globalCfName</name> : <call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ColumnIdentifier</name></type> <name>colName</name> <init>= <expr>new <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>AbstractType</name></type> <name>type</name> <init>= <expr><call><name><name>DataType</name>.<name>toType</name></name><argument_list>(<argument><expr><call><name><name>DataType</name>.<name>codec</name>.<name>decodeOne</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>names</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>colName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <return>return <expr>new <call><name>Metadata</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>Metadata</name></type> <name>m</name></decl></param>)</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>boolean</name></type> <name>globalTablesSpec</name> <init>= <expr><call><name><name>m</name>.<name>flags</name>.<name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name>.<name>GLOBAL_TABLES_SPEC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>stringCount</name> <init>= <expr><name>globalTablesSpec</name> ? 2 + <call><name><name>m</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call> : 3* <call><name><name>m</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>CBUtil</name>.<name>BufferBuilder</name></name></type> <name>builder</name> <init>= <expr>new <call><name><name>CBUtil</name>.<name>BufferBuilder</name></name><argument_list>(<argument><expr>1 + <call><name><name>m</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>stringCount</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>header</name> <init>= <expr><call><name><name>ChannelBuffers</name>.<name>buffer</name></name><argument_list>(<argument><expr>8</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>header</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>Flag</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>m</name>.<name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>header</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>globalTablesSpec</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>builder</name>.<name>addString</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>names</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<name>ksName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>builder</name>.<name>addString</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>names</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<name>cfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <for>for (<init><decl><type><name>ColumnSpecification</name></type> <name>name</name> <range>: <expr><name><name>m</name>.<name>names</name></name></expr></range></decl></init>)
                <block>{
                    <if>if <condition>(<expr>!<name>globalTablesSpec</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>builder</name>.<name>addString</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>ksName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>builder</name>.<name>addString</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>builder</name>.<name>addString</name></name><argument_list>(<argument><expr><call><name><name>name</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>DataType</name>.<name>codec</name>.<name>encodeOne</name></name><argument_list>(<argument><expr><call><name><name>DataType</name>.<name>fromType</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <return>return <expr><call><name><name>builder</name>.<name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>
    }</block></class>

    <enum><specifier>public</specifier> <specifier>static</specifier> enum <name>Flag</name>
    <block>{
        <comment type="line">// The order of that enum matters!!</comment>
        <decl><name>GLOBAL_TABLES_SPEC</name></decl>;

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>EnumSet</name><argument_list>&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name><name>EnumSet</name><argument_list>&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><call><name><name>EnumSet</name>.<name>noneOf</name></name><argument_list>(<argument><expr><name><name>Flag</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Flag</name><index>[]</index></type> <name>values</name> <init>= <expr><call><name><name>Flag</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>n</name> &lt; 32</expr>;</condition> <incr><expr><name>n</name>++</expr></incr>)
            <block>{
                <if>if <condition>(<expr>(<name>flags</name> &amp; (1 &lt;&lt; <name>n</name>)) != 0</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>set</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>
            <return>return <expr><name>set</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name><name>EnumSet</name><argument_list>&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>Flag</name></type> <name>flag</name> <range>: <expr><name>flags</name></expr></range></decl></init>)
                <expr_stmt><expr><name>i</name> |= 1 &lt;&lt; <call><name><name>flag</name>.<name>ordinal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
            <return>return <expr><name>i</name></expr>;</return>
        }</block></function>
    }</block></enum>
}</block></class>
</unit>
