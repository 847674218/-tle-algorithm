<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\statements\UpdateStatement.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>statements</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>ArrayListMultimap</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>operations</name>.<name>ColumnOperation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>operations</name>.<name>Operation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>operations</name>.<name>SetOperation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>operations</name>.<name>PreparedOperation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>QueryProcessor</name>.<name>validateKey</name></name>;</import>
<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ThriftValidation</name>.<name>validateColumnFamily</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An &lt;code&gt;UPDATE&lt;/code&gt; statement parsed from a CQL query statement.
 *
 */</comment>
<class><specifier>public</specifier> class <name>UpdateStatement</name> <super><extends>extends <name>ModificationStatement</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>CFDefinition</name></type> <name>cfDef</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>Operation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>columnNames</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Operation</name></argument>&gt;</argument_list></name></type> <name>columnOperations</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Relation</name></argument>&gt;</argument_list></name></type> <name>whereClause</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ArrayListMultimap</name><argument_list>&lt;<argument><name><name>CFDefinition</name>.<name>Name</name></name></argument>, <argument><name>Operation</name></argument>&gt;</argument_list></name></type> <name>processedColumns</name> <init>= <expr><call><name><name>ArrayListMultimap</name>.<name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>processedKeys</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new UpdateStatement from a column family name, columns map, consistency
     * level, and key term.
     *
     * @param name column family being operated on
     * @param columns a map of column name/values pairs
     * @param whereClause the where clause
     * @param attrs additional attributes for statement (CL, timestamp, timeToLive)
     */</comment>
    <constructor><specifier>public</specifier> <name>UpdateStatement</name><parameter_list>(<param><decl><type><name>CFName</name></type> <name>name</name></decl></param>,
                           <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>Operation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>,
                           <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Relation</name></argument>&gt;</argument_list></name></type> <name>whereClause</name></decl></param>,
                           <param><decl><type><name>Attributes</name></type> <name>attrs</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>columns</name></name> = <name>columns</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>whereClause</name></name> = <name>whereClause</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columnNames</name></name> = null</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columnOperations</name></name> = null</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new UpdateStatement from a column family name, a consistency level,
     * key, and lists of column names and values.  It is intended for use with the
     * alternate update format, &lt;code&gt;INSERT&lt;/code&gt;.
     *
     * @param name column family being operated on
     * @param columnNames list of column names
     * @param columnOperations list of column 'set' operations (corresponds to names)
     * @param attrs additional attributes for statement (CL, timestamp, timeToLive)
     */</comment>
    <constructor><specifier>public</specifier> <name>UpdateStatement</name><parameter_list>(<param><decl><type><name>CFName</name></type> <name>name</name></decl></param>,
                           <param><decl><type><name>Attributes</name></type> <name>attrs</name></decl></param>,
                           <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>columnNames</name></decl></param>,
                           <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Operation</name></argument>&gt;</argument_list></name></type> <name>columnOperations</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>columnNames</name></name> = <name>columnNames</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columnOperations</name></name> = <name>columnOperations</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>whereClause</name></name> = null</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columns</name></name> = null</expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>validateConsistency</name><parameter_list>(<param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>type</name> == <name><name>Type</name>.<name>COUNTER</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cl</name>.<name>validateCounterForWrite</name></name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>cfm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name><name>cl</name>.<name>validateForWrite</name></name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>cfm</name>.<name>ksName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/** {@inheritDoc} */</comment>
    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>getMutations</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>local</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>, <param><decl><type><name>long</name></type> <name>now</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument>, <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name>buildKeyNames</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>processedKeys</name></expr></argument>, <argument><expr><name>variables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name> <init>= <expr><call><name><name>cfDef</name>.<name>getColumnNameBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>buildColumnNames</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>processedKeys</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr><name>variables</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Lists SET operation incurs a read.</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>toRead</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name><name>CFDefinition</name>.<name>Name</name></name></argument>, <argument><name>Operation</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>processedColumns</name>.<name>entries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>name</name> <init>= <expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Operation</name></type> <name>value</name> <init>= <expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr>!(<name><name>name</name>.<name>type</name></name> instanceof <name>ListType</name>)</expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <if>if <condition>(<expr><call><name><name>value</name>.<name>requiresRead</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>toRead</name> == null</expr>)</condition><then>
                    <expr_stmt><expr><name>toRead</name> = new <call><name><name>TreeSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>UTF8Type</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name><name>toRead</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnGroupMap</name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr><name>toRead</name> != null ? <call><name>readRows</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr><name>toRead</name></expr></argument>, <argument><expr>(<name>CompositeType</name>)<name><name>cfDef</name>.<name>cfm</name>.<name>comparator</name></name></expr></argument>, <argument><expr><name>local</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call> : null</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name> <init>= <expr>new <call><name><name>LinkedList</name><argument_list>&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UpdateParameters</name></type> <name>params</name> <init>= <expr>new <call><name>UpdateParameters</name><argument_list>(<argument><expr><name>variables</name></expr></argument>, <argument><expr><call><name>getTimestamp</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getTimeToLive</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>key</name><range>: <expr><name>keys</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>mutations</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>mutationForKey</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>rows</name> == null ? null : <call><name><name>rows</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <return>return <expr><name>mutations</name></expr>;</return>
    }</block></function>

    <comment type="line">// Returns the first empty component or null if none are</comment>
    <function><type><specifier>static</specifier> <name><name>CFDefinition</name>.<name>Name</name></name></type> <name>buildColumnNames</name><parameter_list>(<param><decl><type><name>CFDefinition</name></type> <name>cfDef</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>processed</name></decl></param>, <param><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>requireAllComponent</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>firstEmpty</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>name</name> <range>: <expr><call><name><name>cfDef</name>.<name>columns</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><call><name><name>processed</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>values</name> == null || <call><name><name>values</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>firstEmpty</name> = <name>name</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>requireAllComponent</name> &amp;&amp; <name><name>cfDef</name>.<name>isComposite</name></name> &amp;&amp; !<name><name>cfDef</name>.<name>isCompact</name></name></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Missing mandatory PRIMARY KEY part %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>firstEmpty</name> != null</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Missing PRIMARY KEY part %s since %s is set"</expr></argument>, <argument><expr><name><name>firstEmpty</name>.<name>name</name></name></expr></argument>, <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then>
            <else>else
            <block>{
                <assert>assert <expr><call><name><name>values</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1</expr>;</assert> <comment type="line">// We only allow IN for row keys so far</comment>
                <expr_stmt><expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>values</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Relation</name>.<name>Type</name>.<name>EQ</name></name></expr></argument>, <argument><expr><name>variables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></for>
        <return>return <expr><name>firstEmpty</name></expr>;</return>
    }</block></function>

    <function><type><specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>buildKeyNames</name><parameter_list>(<param><decl><type><name>CFDefinition</name></type> <name>cfDef</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>processed</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ColumnNameBuilder</name></type> <name>keyBuilder</name> <init>= <expr><call><name><name>cfDef</name>.<name>getKeyNameBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>name</name> <range>: <expr><call><name><name>cfDef</name>.<name>keys</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><call><name><name>processed</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>values</name> == null || <call><name><name>values</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Missing mandatory PRIMARY KEY part %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if>if <condition>(<expr><call><name><name>keyBuilder</name>.<name>remainingCount</name></name><argument_list>()</argument_list></call> == 1</expr>)</condition><then>
            <block>{
                <for>for (<init><decl><type><name>Term</name></type> <name>t</name> <range>: <expr><name>values</name></expr></range></decl></init>)
                    <expr_stmt><expr><call><name><name>keys</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>keyBuilder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>Relation</name>.<name>Type</name>.<name>EQ</name></name></expr></argument>, <argument><expr><name>variables</name></expr></argument>)</argument_list></call>.<call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            }</block></then>
            <else>else
            <block>{
                <if>if <condition>(<expr><call><name><name>values</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"IN is only supported on the last column of the partition key"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <expr_stmt><expr><call><name><name>keyBuilder</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>values</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Relation</name>.<name>Type</name>.<name>EQ</name></name></expr></argument>, <argument><expr><name>variables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr><name>keys</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Compute a row mutation for a single key
     *
     * @return row mutation
     *
     * @throws InvalidRequestException on the wrong request
     */</comment>
    <function><type><specifier>private</specifier> <name>IMutation</name></type> <name>mutationForKey</name><parameter_list>(<param><decl><type><name>CFDefinition</name></type> <name>cfDef</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name></decl></param>, <param><decl><type><name>UpdateParameters</name></type> <name>params</name></decl></param>, <param><decl><type><name>ColumnGroupMap</name></type> <name>group</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>validateKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>QueryProcessor</name>.<name>validateKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>cfm</name>.<name>ksName</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>rm</name>.<name>addOrGet</name></name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>cfm</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Inserting the CQL row marker (see #4361)</comment>
        <comment type="line">// We always need to insert a marker, because of the following situation:</comment>
        <comment type="line">//   CREATE TABLE t ( k int PRIMARY KEY, c text );</comment>
        <comment type="line">//   INSERT INTO t(k, c) VALUES (1, 1)</comment>
        <comment type="line">//   DELETE c FROM t WHERE k = 1;</comment>
        <comment type="line">//   SELECT * FROM t;</comment>
        <comment type="line">// The last query should return one row (but with c == null). Adding</comment>
        <comment type="line">// the marker with the insert make sure the semantic is correct (while making sure a</comment>
        <comment type="line">// 'DELETE FROM t WHERE k = 1' does remove the row entirely)</comment>
        <if>if <condition>(<expr><name><name>cfDef</name>.<name>isComposite</name></name> &amp;&amp; !<name><name>cfDef</name>.<name>isCompact</name></name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>name</name> <init>= <expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>)</argument_list></call>.<call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>params</name>.<name>makeColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>cfDef</name>.<name>isCompact</name></name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><call><name><name>builder</name>.<name>componentCount</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Missing PRIMARY KEY part %s"</expr></argument>, <argument><expr><call><name><name>cfDef</name>.<name>columns</name>.<name>values</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>Operation</name></type> <name>operation</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>cfDef</name>.<name>value</name></name> == null</expr>)</condition><then>
            <block>{
                <comment type="line">// No value was defined, we set to the empty value</comment>
                <expr_stmt><expr><name>operation</name> = <call><name><name>ColumnOperation</name>.<name>SetToEmpty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Operation</name></argument>&gt;</argument_list></name></type> <name>operations</name> <init>= <expr><call><name><name>processedColumns</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>operations</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Missing mandatory column %s"</expr></argument>, <argument><expr><name><name>cfDef</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <assert>assert <expr><call><name><name>operations</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1</expr>;</assert>
                <expr_stmt><expr><name>operation</name> = <call><name><name>operations</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>operation</name>.<name>execute</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cfDef</name>.<name>value</name></name> == null ? null : <name><name>cfDef</name>.<name>value</name>.<name>type</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name><name>CFDefinition</name>.<name>Name</name></name></argument>, <argument><name>Operation</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>processedColumns</name>.<name>entries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>name</name> <init>= <expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Operation</name></type> <name>op</name> <init>= <expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>op</name>.<name>execute</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>name</name>.<name>type</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>group</name> == null || !<call><name><name>op</name>.<name>requiresRead</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>type</name></name></expr></argument>)</argument_list></call> ? null : <call><name><name>group</name>.<name>getCollection</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>

        <return>return <expr><name>type</name> == <name><name>Type</name>.<name>COUNTER</name></name> ? new <call><name>CounterMutation</name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call> : <name>rm</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>ParsedStatement</name>.<name>Prepared</name></name></type> <name>prepare</name><parameter_list>(<param><decl><type><name><name>ColumnSpecification</name><index>[]</index></name></type> <name>boundNames</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <comment type="line">// Deal here with the keyspace overwrite thingy to avoid mistake</comment>
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>metadata</name> <init>= <expr><call><name>validateColumnFamily</name><argument_list>(<argument><expr><call><name>keyspace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>columnFamily</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cfDef</name> = <call><name><name>metadata</name>.<name>getCfDef</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>type</name> = <call><name><name>metadata</name>.<name>getDefaultValidator</name></name><argument_list>()</argument_list></call>.<call><name>isCommutative</name><argument_list>()</argument_list></call> ? <name><name>Type</name>.<name>COUNTER</name></name> : <name><name>Type</name>.<name>LOGGED</name></name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>columns</name> == null</expr>)</condition><then>
        <block>{
            <comment type="line">// Created from an INSERT</comment>
            <if>if <condition>(<expr><name>type</name> == <name><name>Type</name>.<name>COUNTER</name></name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"INSERT statement are not allowed on counter tables, use UPDATE instead"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if>if <condition>(<expr><call><name><name>columnNames</name>.<name>size</name></name><argument_list>()</argument_list></call> != <call><name><name>columnOperations</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"unmatched column names/values"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if>if <condition>(<expr><call><name><name>columnNames</name>.<name>size</name></name><argument_list>()</argument_list></call> &lt; 1</expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"no columns specified for INSERT"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>columnNames</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>name</name> <init>= <expr><call><name><name>cfDef</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>columnNames</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>name</name> == null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unknown identifier %s"</expr></argument>, <argument><expr><call><name><name>columnNames</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <decl_stmt><decl><type><name>Operation</name></type> <name>operation</name> <init>= <expr><call><name><name>columnOperations</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>operation</name>.<name>addBoundNames</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>boundNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch>switch <condition>(<expr><name><name>name</name>.<name>kind</name></name></expr>)</condition>
                <block>{
                    <case>case <expr><name>KEY_ALIAS</name></expr>:
                    </case><case>case <expr><name>COLUMN_ALIAS</name></expr>:
                        <if>if <condition>(<expr><call><name><name>processedKeys</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Multiple definitions found for PRIMARY KEY part %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                        <comment type="line">// We know collection are not accepted for key and column aliases</comment>
                        <if>if <condition>(<expr><call><name><name>operation</name>.<name>getType</name></name><argument_list>()</argument_list></call> != <name><name>Operation</name>.<name>Type</name>.<name>COLUMN</name></name> &amp;&amp; <call><name><name>operation</name>.<name>getType</name></name><argument_list>()</argument_list></call> != <name><name>Operation</name>.<name>Type</name>.<name>PREPARED</name></name></expr>)</condition><then>
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid definition for %s, not a collection type"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                        <expr_stmt><expr><call><name><name>processedKeys</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr><call><name><name>operation</name>.<name>getValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr><name>VALUE_ALIAS</name></expr>:
                    </case><case>case <expr><name>COLUMN_METADATA</name></expr>:
                        <if>if <condition>(<expr><call><name><name>processedColumns</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Multiple definitions found for column %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                        <expr_stmt><expr><call><name>addNewOperation</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                </case>}</block></switch>
            }</block></for>
        }</block></then>
        <else>else
        <block>{
            <comment type="line">// Created from an UPDATE</comment>
            <for>for (<init><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>Operation</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
            <block>{
                <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>name</name> <init>= <expr><call><name><name>cfDef</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>entry</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>name</name> == null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unknown identifier %s"</expr></argument>, <argument><expr><name><name>entry</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <decl_stmt><decl><type><name>Operation</name></type> <name>operation</name> <init>= <expr><name><name>entry</name>.<name>right</name></name></expr></init></decl>;</decl_stmt>

                <switch>switch <condition>(<expr><call><name><name>operation</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{
                    <case>case <expr><name>COUNTER</name></expr>:
                        <if>if <condition>(<expr><name>type</name> != <name><name>Type</name>.<name>COUNTER</name></name></expr>)</condition><then>
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Invalid counter operation on non-counter table."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                        <break>break;</break>
                    </case><case>case <expr><name>LIST</name></expr>:
                    </case><case>case <expr><name>SET</name></expr>:
                    </case><case>case <expr><name>MAP</name></expr>:
                        <if>if <condition>(<expr>!<call><name><name>name</name>.<name>type</name>.<name>isCollection</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Cannot apply collection operation on column " + <name>name</name> + " with " + <name><name>name</name>.<name>type</name></name> + " type."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                    <comment type="line">// Fallthrough on purpose</comment>
                    </case><case>case <expr><name>COLUMN</name></expr>:
                        <if>if <condition>(<expr><name>type</name> == <name><name>Type</name>.<name>COUNTER</name></name></expr>)</condition><then>
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Invalid non-counter operation on counter table."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                        <break>break;</break>
                    </case><case>case <expr><name>PREPARED</name></expr>:
                        <if>if <condition>(<expr><name>type</name> == <name><name>Type</name>.<name>COUNTER</name></name> &amp;&amp; !((<name>PreparedOperation</name>)<name>operation</name>).<call><name>isPotentialCounterOperation</name><argument_list>()</argument_list></call></expr>)</condition><then>
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Invalid non-counter operation on counter table."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                        <break>break;</break>
                </case>}</block></switch>

                <switch>switch <condition>(<expr><name><name>name</name>.<name>kind</name></name></expr>)</condition>
                <block>{
                    <case>case <expr><name>KEY_ALIAS</name></expr>:
                    </case><case>case <expr><name>COLUMN_ALIAS</name></expr>:
                        <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"PRIMARY KEY part %s found in SET part"</expr></argument>, <argument><expr><name><name>entry</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </case><case>case <expr><name>VALUE_ALIAS</name></expr>:
                    </case><case>case <expr><name>COLUMN_METADATA</name></expr>:
                        <for>for (<init><decl><type><name>Operation</name></type> <name>otherOp</name> <range>: <expr><call><name><name>processedColumns</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                            <if>if <condition>(<expr><call><name><name>otherOp</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>Operation</name>.<name>Type</name>.<name>COLUMN</name></name></expr>)</condition><then>
                                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Multiple definitions found for column %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if></for>

                        <expr_stmt><expr><call><name><name>operation</name>.<name>addBoundNames</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>boundNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>addNewOperation</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                </case>}</block></switch>
            }</block></for>
            <expr_stmt><expr><call><name>processKeys</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>whereClause</name></expr></argument>, <argument><expr><name>processedKeys</name></expr></argument>, <argument><expr><name>boundNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr>new <call><name><name>ParsedStatement</name>.<name>Prepared</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Arrays</name>.</name>&lt;<name>ColumnSpecification</name>&gt;<call><name>asList</name><argument_list>(<argument><expr><name>boundNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addNewOperation</name><parameter_list>(<param><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>name</name></decl></param>, <param><decl><type><name>Operation</name></type> <name>operation</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// On the parser side, we're unable to differentiate an empty map from an empty set for add and set operations.</comment>
        <comment type="line">// Fix it now that we have the actual type.</comment>
        <if>if <condition>(<expr><call><name><name>operation</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>Operation</name>.<name>Type</name>.<name>SET</name></name> &amp;&amp; (<name><name>name</name>.<name>type</name></name> instanceof <name>MapType</name>)</expr>)</condition><then>
            <expr_stmt><expr><name>operation</name> = ((<name>SetOperation</name>)<name>operation</name>).<call><name>maybeConvertToEmptyMapOperation</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name><name>processedColumns</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>ParsedStatement</name>.<name>Prepared</name></name></type> <name>prepare</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ColumnSpecification</name><index>[]</index></type> <name>names</name> <init>= <expr>new <name><name>ColumnSpecification</name><index>[<expr><call><name>getBoundsTerms</name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>prepare</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// Reused by DeleteStatement</comment>
    <function><type><specifier>static</specifier> <name>void</name></type> <name>processKeys</name><parameter_list>(<param><decl><type><name>CFDefinition</name></type> <name>cfDef</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Relation</name></argument>&gt;</argument_list></name></type> <name>keys</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>processed</name></decl></param>, <param><decl><type><name><name>ColumnSpecification</name><index>[]</index></name></type> <name>names</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <for>for (<init><decl><type><name>Relation</name></type> <name>rel</name> <range>: <expr><name>keys</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>name</name> <init>= <expr><call><name><name>cfDef</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>rel</name>.<name>getEntity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>name</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unknown key identifier %s"</expr></argument>, <argument><expr><call><name><name>rel</name>.<name>getEntity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <switch>switch <condition>(<expr><name><name>name</name>.<name>kind</name></name></expr>)</condition>
            <block>{
                <case>case <expr><name>KEY_ALIAS</name></expr>:
                </case><case>case <expr><name>COLUMN_ALIAS</name></expr>:
                    <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>values</name></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>rel</name>.<name>operator</name></name><argument_list>()</argument_list></call> == <name><name>Relation</name>.<name>Type</name>.<name>EQ</name></name></expr>)</condition><then>
                        <expr_stmt><expr><name>values</name> = <call><name><name>Collections</name>.<name>singletonList</name></name><argument_list>(<argument><expr><call><name><name>rel</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else>else <if>if <condition>(<expr><name><name>name</name>.<name>kind</name></name> == <name><name>CFDefinition</name>.<name>Name</name>.<name>Kind</name>.<name>KEY_ALIAS</name></name> &amp;&amp; <call><name><name>rel</name>.<name>operator</name></name><argument_list>()</argument_list></call> == <name><name>Relation</name>.<name>Type</name>.<name>IN</name></name></expr>)</condition><then>
                        <expr_stmt><expr><name>values</name> = <call><name><name>rel</name>.<name>getInValues</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
                    <else>else
                        <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid operator %s for key %s"</expr></argument>, <argument><expr><call><name><name>rel</name>.<name>operator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rel</name>.<name>getEntity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></else></if></else></if>

                    <if>if <condition>(<expr><call><name><name>processed</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Multiple definitions found for PRIMARY KEY part %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                    <for>for (<init><decl><type><name>Term</name></type> <name>value</name> <range>: <expr><name>values</name></expr></range></decl></init>)
                        <if>if <condition>(<expr><call><name><name>value</name>.<name>isBindMarker</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                            <expr_stmt><expr><name><name>names</name><index>[<expr><name><name>value</name>.<name>bindIndex</name></name></expr>]</index></name> = <name>name</name></expr>;</expr_stmt></then></if></for>
                    <expr_stmt><expr><call><name><name>processed</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>VALUE_ALIAS</name></expr>:
                </case><case>case <expr><name>COLUMN_METADATA</name></expr>:
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"PRIMARY KEY part %s found in SET part"</expr></argument>, <argument><expr><call><name><name>rel</name>.<name>getEntity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </case>}</block></switch>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"UpdateStatement(name=%s, keys=%s, columns=%s, timestamp=%s, timeToLive=%s)"</expr></argument>,
                             <argument><expr><name>cfName</name></expr></argument>,
                             <argument><expr><name>whereClause</name></expr></argument>,
                             <argument><expr><name>columns</name></expr></argument>,
                             <argument><expr><call><name>isSetTimestamp</name><argument_list>()</argument_list></call> ? <call><name>getTimestamp</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call> : "&lt;now&gt;"</expr></argument>,
                             <argument><expr><call><name>getTimeToLive</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
