<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\RowIteratorFactory.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>IColumnIteratorFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>LazyColumnIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>OnDiskAtomIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryFilter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>CloseableIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>MergeIterator</name></name>;</import>

<class><specifier>public</specifier> class <name>RowIteratorFactory</name>
<block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>OnDiskAtomIterator</name></argument>&gt;</argument_list></name></type> <name>COMPARE_BY_KEY</name> <init>= <expr>new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>OnDiskAtomIterator</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>OnDiskAtomIterator</name></type> <name>o1</name></decl></param>, <param><decl><type><name>OnDiskAtomIterator</name></type> <name>o2</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>DecoratedKey</name>.<name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>o1</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>o2</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * Get a row iterator over the provided memtables and sstables, between the provided keys
     * and filtered by the queryfilter.
     * @param memtables Memtables pending flush.
     * @param sstables SStables to scan through.
     * @param startWith Start at this key
     * @param stopAt Stop and this key
     * @param filter Used to decide which columns to pull out
     * @param cfs
     * @return A row iterator following all the given restrictions
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>getIterator</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Iterable</name><argument_list>&lt;<argument><name>Memtable</name></argument>&gt;</argument_list></name></type> <name>memtables</name></decl></param>,
                                          <param><decl><type><specifier>final</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></param>,
                                          <param><decl><type><specifier>final</specifier> <name>RowPosition</name></type> <name>startWith</name></decl></param>,
                                          <param><decl><type><specifier>final</specifier> <name>RowPosition</name></type> <name>stopAt</name></decl></param>,
                                          <param><decl><type><specifier>final</specifier> <name>QueryFilter</name></type> <name>filter</name></decl></param>,
                                          <param><decl><type><specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// fetch data from current memtable, historical memtables, and SSTables in the correct order.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name><name>CloseableIterator</name><argument_list>&lt;<argument><name>OnDiskAtomIterator</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iterators</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>CloseableIterator</name><argument_list>&lt;<argument><name>OnDiskAtomIterator</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// memtables</comment>
        <for>for (<init><decl><type><name>Memtable</name></type> <name>memtable</name> <range>: <expr><name>memtables</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>iterators</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>ConvertToColumnIterator</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><call><name><name>memtable</name>.<name>getEntryIterator</name></name><argument_list>(<argument><expr><name>startWith</name></expr></argument>, <argument><expr><name>stopAt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>sstables</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>SSTableScanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>sstable</name>.<name>getScanner</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>scanner</name>.<name>seekTo</name></name><argument_list>(<argument><expr><name>startWith</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>iterators</name>.<name>add</name></name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// reduce rows from all sources into a single row</comment>
        <return>return <expr><call><name><name>MergeIterator</name>.<name>get</name></name><argument_list>(<argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>COMPARE_BY_KEY</name></expr></argument>, <argument><expr>new <class><super><name><name>MergeIterator</name>.<name><name>Reducer</name><argument_list>&lt;<argument><name>OnDiskAtomIterator</name></argument>, <argument><name>Row</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>gcBefore</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> / 1000</expr></argument>)</argument_list></call> - <call><name><name>cfs</name>.<name>metadata</name>.<name>getGcGraceSeconds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>OnDiskAtomIterator</name></argument>&gt;</argument_list></name></type> <name>colIters</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>OnDiskAtomIterator</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>DecoratedKey</name></type> <name>key</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>ColumnFamily</name></type> <name>returnCF</name></decl>;</decl_stmt>

            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <name>void</name></type> <name>onKeyChange</name><parameter_list>()</parameter_list>
            <block>{
                <expr_stmt><expr><name><name>this</name>.<name>returnCF</name></name> = <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>cfs</name>.<name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>reduce</name><parameter_list>(<param><decl><type><name>OnDiskAtomIterator</name></type> <name>current</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>colIters</name>.<name>add</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <call><name><name>current</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>returnCF</name>.<name>delete</name></name><argument_list>(<argument><expr><call><name><name>current</name>.<name>getColumnFamily</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier>protected</specifier> <name>Row</name></type> <name>getReduced</name><parameter_list>()</parameter_list>
            <block>{

                <comment type="line">// First check if this row is in the rowCache. If it is we can skip the rest</comment>
                <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cached</name> <init>= <expr><call><name><name>cfs</name>.<name>getRawCachedRow</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>cached</name> == null</expr>)</condition><then>
                <block>{
                    <comment type="line">// not cached: collate</comment>
                    <expr_stmt><expr><call><name><name>filter</name>.<name>collateOnDiskAtom</name></name><argument_list>(<argument><expr><name>returnCF</name></expr></argument>, <argument><expr><name>colIters</name></expr></argument>, <argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <decl_stmt><decl><type><name>QueryFilter</name></type> <name>keyFilter</name> <init>= <expr>new <call><name>QueryFilter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>filter</name>.<name>path</name></name></expr></argument>, <argument><expr><name><name>filter</name>.<name>filter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>returnCF</name> = <call><name><name>cfs</name>.<name>filterColumnFamily</name></name><argument_list>(<argument><expr><name>cached</name></expr></argument>, <argument><expr><name>keyFilter</name></expr></argument>, <argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <decl_stmt><decl><type><name>Row</name></type> <name>rv</name> <init>= <expr>new <call><name>Row</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>returnCF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>colIters</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>key</name> = null</expr>;</expr_stmt>
                <return>return <expr><name>rv</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get a ColumnIterator for a specific key in the memtable.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ConvertToColumnIterator</name> <super><implements>implements <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>OnDiskAtomIterator</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>QueryFilter</name></type> <name>filter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>iter</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ConvertToColumnIterator</name><parameter_list>(<param><decl><type><name>QueryFilter</name></type> <name>filter</name></decl></param>, <param><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>filter</name></name> = <name>filter</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>iter</name></name> = <name>iter</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="block">/*
         * Note that when doing get_paged_slice, we reset the start of the queryFilter after we've fetched the
         * first row. This means that this iterator should not use in any way the filter to fetch a row before
         * we call next(). Which prevents us for using guava AbstractIterator.
         * This is obviously rather fragile and we should consider refactoring that code, but such refactor will go
         * deep into the storage engine code so this will have to do until then.
         */</comment>
        <function><type><specifier>public</specifier> <name>OnDiskAtomIterator</name></type> <name>next</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>LazyColumnIterator</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <class><super><name>IColumnIteratorFactory</name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>OnDiskAtomIterator</name></type> <name>create</name><parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr><call><name><name>filter</name>.<name>getMemtableColumnIterator</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
        <block>{
            <comment type="line">// pass</comment>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
