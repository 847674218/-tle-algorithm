<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\config\Schema.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>CharacterCodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name></name>.*;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>Auth</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>Table</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>Descriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>MigrationManager</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name>.<name>Tracing</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>
<import>import <name><name>org</name>.<name>cliffc</name>.<name>high_scale_lib</name>.<name>NonBlockingHashMap</name></name>;</import>

<class><specifier>public</specifier> class <name>Schema</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>Schema</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Schema</name></type> <name>instance</name> <init>= <expr>new <call><name>Schema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * longest permissible KS or CF name.  Our main concern is that filename not be more than 255 characters;
     * the filename will contain both the KS and CF names. Since non-schema-name components only take up
     * ~64 characters, we could allow longer names than this, but on Windows, the entire path should be not greater than
     * 255 characters, so a lower limit here helps avoid problems.  See CASSANDRA-4110.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NAME_LENGTH</name> <init>= <expr>48</expr></init></decl>;</decl_stmt>

    <comment type="block">/* metadata map for faster table lookup */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>KSMetaData</name></argument>&gt;</argument_list></name></type> <name>tables</name> <init>= <expr>new <call><name><name>NonBlockingHashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>KSMetaData</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Table objects, one per keyspace. Only one instance should ever exist for any given keyspace. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>tableInstances</name> <init>= <expr>new <call><name><name>NonBlockingHashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Table</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* metadata map for faster ColumnFamily lookup */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>BiMap</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>cfIdMap</name> <init>= <expr><call><name><name>HashBiMap</name>.<name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// mapping from old ColumnFamily Id (Integer) to a new version which is UUID</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>BiMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>oldCfIdMap</name> <init>= <expr><call><name><name>HashBiMap</name>.<name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>UUID</name></type> <name>version</name></decl>;</decl_stmt>

    <comment type="line">// 59adb24e-f3cd-3e02-97f0-5b395827453f</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UUID</name></type> <name>emptyVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ImmutableSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>systemKeyspaceNames</name> <init>= <expr><call><name><name>ImmutableSet</name>.<name>of</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_KS</name></name></expr></argument>, <argument><expr><name><name>Tracing</name>.<name>TRACE_KS</name></name></expr></argument>, <argument><expr><name><name>Auth</name>.<name>AUTH_KS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr>static
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><name>emptyVersion</name> = <call><name><name>UUID</name>.<name>nameUUIDFromBytes</name></name><argument_list>(<argument><expr><call><name><name>MessageDigest</name>.<name>getInstance</name></name><argument_list>(<argument><expr>"MD5"</expr></argument>)</argument_list></call>.<call><name>digest</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block></try>}</block></expr></expr_stmt>
        <catch>catch <parameter_list>(<param><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></catch>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Initialize empty schema object
     */</comment>
    <constructor><specifier>public</specifier> <name>Schema</name><parameter_list>()</parameter_list>
    <block>{}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Load up non-system tables
     *
     * @param tableDefs The non-system table definitions
     *
     * @return self to support chaining calls
     */</comment>
    <function><type><specifier>public</specifier> <name>Schema</name></type> <name>load</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>KSMetaData</name></argument>&gt;</argument_list></name></type> <name>tableDefs</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>KSMetaData</name></type> <name>def</name> <range>: <expr><name>tableDefs</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Load specific keyspace into Schema
     *
     * @param keyspaceDef The keyspace to load up
     *
     * @return self to support chaining calls
     */</comment>
    <function><type><specifier>public</specifier> <name>Schema</name></type> <name>load</name><parameter_list>(<param><decl><type><name>KSMetaData</name></type> <name>keyspaceDef</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>CFMetaData</name></type> <name>cfm</name> <range>: <expr><call><name><name>keyspaceDef</name>.<name>cfMetaData</name></name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <expr_stmt><expr><call><name>setTableDefinition</name><argument_list>(<argument><expr><name>keyspaceDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get table instance by name
     *
     * @param tableName The name of the table
     *
     * @return Table object or null if table was not found
     */</comment>
    <function><type><specifier>public</specifier> <name>Table</name></type> <name>getTableInstance</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>tableInstances</name>.<name>get</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Store given Table instance to the schema
     *
     * @param table The Table instance to store
     *
     * @throws IllegalArgumentException if Table is already stored
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>storeTableInstance</name><parameter_list>(<param><decl><type><name>Table</name></type> <name>table</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>tableInstances</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name><name>table</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Table %s was already initialized."</expr></argument>, <argument><expr><name><name>table</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <expr_stmt><expr><call><name><name>tableInstances</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>table</name>.<name>name</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Remove table from schema
     *
     * @param tableName The name of the table to remove
     *
     * @return removed table instance or null if it wasn't found
     */</comment>
    <function><type><specifier>public</specifier> <name>Table</name></type> <name>removeTableInstance</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>tableInstances</name>.<name>remove</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Remove table definition from system
     *
     * @param ksm The table definition to remove
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearTableDefinition</name><parameter_list>(<param><decl><type><name>KSMetaData</name></type> <name>ksm</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>tables</name>.<name>remove</name></name><argument_list>(<argument><expr><name><name>ksm</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Given a table name &amp; column family name, get the column family
     * meta data. If the table name or column family name is not valid
     * this function returns null.
     *
     * @param tableName The table name
     * @param cfName The ColumnFamily name
     *
     * @return ColumnFamily Metadata object or null if it wasn't found
     */</comment>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>getCFMetaData</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>tableName</name> != null</expr>;</assert>
        <decl_stmt><decl><type><name>KSMetaData</name></type> <name>ksm</name> <init>= <expr><call><name><name>tables</name>.<name>get</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name>ksm</name> == null) ? null : <call><name><name>ksm</name>.<name>cfMetaData</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get ColumnFamily metadata by its identifier
     *
     * @param cfId The ColumnFamily identifier
     *
     * @return metadata about ColumnFamily
     */</comment>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>getCFMetaData</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>cfId</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cf</name> <init>= <expr><call><name>getCF</name><argument_list>(<argument><expr><name>cfId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name>cf</name> == null) ? null : <call><name>getCFMetaData</name><argument_list>(<argument><expr><name><name>cf</name>.<name>left</name></name></expr></argument>, <argument><expr><name><name>cf</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>getCFMetaData</name><parameter_list>(<param><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getCFMetaData</name><argument_list>(<argument><expr><name><name>descriptor</name>.<name>ksname</name></name></expr></argument>, <argument><expr><name><name>descriptor</name>.<name>cfname</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get type of the ColumnFamily but it's keyspace/name
     *
     * @param ksName The keyspace name
     * @param cfName The ColumnFamily name
     *
     * @return The type of the ColumnFamily
     */</comment>
    <function><type><specifier>public</specifier> <name>ColumnFamilyType</name></type> <name>getColumnFamilyType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>ksName</name> != null &amp;&amp; <name>cfName</name> != null</expr>;</assert>
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfMetaData</name> <init>= <expr><call><name>getCFMetaData</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name>cfMetaData</name> == null) ? null : <name><name>cfMetaData</name>.<name>cfType</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get column comparator for ColumnFamily but it's keyspace/name
     *
     * @param ksName The keyspace name
     * @param cfName The ColumnFamily name
     *
     * @return The comparator of the ColumnFamily
     */</comment>
    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>ksName</name> != null</expr>;</assert>
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfmd</name> <init>= <expr><call><name>getCFMetaData</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cfmd</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Unknown ColumnFamily " + <name>cfName</name> + " in keyspace " + <name>ksName</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <return>return <expr><name><name>cfmd</name>.<name>comparator</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get subComparator of the ColumnFamily
     *
     * @param ksName The keyspace name
     * @param cfName The ColumnFamily name
     *
     * @return The subComparator of the ColumnFamily
     */</comment>
    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getSubComparator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>ksName</name> != null</expr>;</assert>
        <return>return <expr><call><name>getCFMetaData</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call>.<name>subcolumnComparator</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get value validator for specific column
     *
     * @param ksName The keyspace name
     * @param cfName The ColumnFamily name
     * @param column The name of the column
     *
     * @return value validator specific to the column or default (per-cf) one
     */</comment>
    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getValueValidator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getCFMetaData</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call>.<call><name>getValueValidator</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get metadata about table by its name
     *
     * @param table The name of the table
     *
     * @return The table metadata or null if it wasn't found
     */</comment>
    <function><type><specifier>public</specifier> <name>KSMetaData</name></type> <name>getKSMetaData</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>table</name> != null</expr>;</assert>
        <return>return <expr><call><name><name>tables</name>.<name>get</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return collection of the non-system tables
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getNonSystemTables</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ImmutableList</name>.<name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>Sets</name>.<name>difference</name></name><argument_list>(<argument><expr><call><name><name>tables</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>systemKeyspaceNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get metadata about table by its name
     *
     * @param table The name of the table
     *
     * @return The table metadata or null if it wasn't found
     */</comment>
    <function><type><specifier>public</specifier> <name>KSMetaData</name></type> <name>getTableDefinition</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getKSMetaData</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get metadata about table inner ColumnFamilies
     *
     * @param tableName The name of the table
     *
     * @return metadata about ColumnFamilies the belong to the given table
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>getTableMetaData</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>tableName</name> != null</expr>;</assert>
        <decl_stmt><decl><type><name>KSMetaData</name></type> <name>ksm</name> <init>= <expr><call><name><name>tables</name>.<name>get</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>ksm</name> != null</expr>;</assert>
        <return>return <expr><call><name><name>ksm</name>.<name>cfMetaData</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return collection of the all table names registered in the system (system and non-system)
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTables</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>tables</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return collection of the metadata about all tables registered in the system (system and non-system)
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>KSMetaData</name></argument>&gt;</argument_list></name></type> <name>getTableDefinitions</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>tables</name>.<name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update (or insert) new table definition
     *
     * @param ksm The metadata about table
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTableDefinition</name><parameter_list>(<param><decl><type><name>KSMetaData</name></type> <name>ksm</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>ksm</name> != null</expr>;</assert>
        <expr_stmt><expr><call><name><name>tables</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>ksm</name>.<name>name</name></name></expr></argument>, <argument><expr><name>ksm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/* ColumnFamily query/control methods */</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addOldCfIdMapping</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>oldId</name></decl></param>, <param><decl><type><name>UUID</name></type> <name>newId</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>oldId</name> == null</expr>)</condition><then>
            <return>return;</return></then></if>

        <expr_stmt><expr><call><name><name>oldCfIdMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>oldId</name></expr></argument>, <argument><expr><name>newId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>convertOldCfId</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>oldCfId</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnknownColumnFamilyException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>UUID</name></type> <name>cfId</name> <init>= <expr><call><name><name>oldCfIdMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>oldCfId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>cfId</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>UnknownColumnFamilyException</name><argument_list>(<argument><expr>"ColumnFamily identified by old " + <name>oldCfId</name> + " was not found."</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <return>return <expr><name>cfId</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Integer</name></type> <name>convertNewCfId</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>newCfId</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>oldCfIdMap</name>.<name>containsValue</name></name><argument_list>(<argument><expr><name>newCfId</name></expr></argument>)</argument_list></call> ? <call><name><name>oldCfIdMap</name>.<name>inverse</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>newCfId</name></expr></argument>)</argument_list></call> : null</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param cfId The identifier of the ColumnFamily to lookup
     * @return The (ksname,cfname) pair for the given id, or null if it has been dropped.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Pair</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCF</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>cfId</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>cfIdMap</name>.<name>inverse</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>cfId</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Lookup keyspace/ColumnFamily identifier
     *
     * @param ksName The keyspace name
     * @param cfName The ColumnFamily name
     *
     * @return The id for the given (ksname,cfname) pair, or null if it has been dropped.
     */</comment>
    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getId</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>cfIdMap</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Load individual ColumnFamily Definition to the schema
     * (to make ColumnFamily lookup faster)
     *
     * @param cfm The ColumnFamily definition to load
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>load</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>key</name> <init>= <expr><call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>cfm</name>.<name>ksName</name></name></expr></argument>, <argument><expr><name><name>cfm</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>cfIdMap</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Attempting to load already loaded column family %s.%s"</expr></argument>, <argument><expr><name><name>cfm</name>.<name>ksName</name></name></expr></argument>, <argument><expr><name><name>cfm</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Adding {} to cfIdMap"</expr></argument>, <argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfIdMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>cfm</name>.<name>cfId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Used for ColumnFamily data eviction out from the schema
     *
     * @param cfm The ColumnFamily Definition to evict
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>purge</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>cfIdMap</name>.<name>remove</name></name><argument_list>(<argument><expr><call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>cfm</name>.<name>ksName</name></name></expr></argument>, <argument><expr><name><name>cfm</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/* Version control */</comment>

    <comment type="block" format="javadoc">/**
     * @return current schema version
     */</comment>
    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getVersion</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>version</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Read schema from system table and calculate MD5 digest of every row, resulting digest
     * will be converted into UUID which would act as content-based version of the schema.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateVersion</name><parameter_list>()</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>MessageDigest</name></type> <name>versionDigest</name> <init>= <expr><call><name><name>MessageDigest</name>.<name>getInstance</name></name><argument_list>(<argument><expr>"MD5"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name>Row</name></type> <name>row</name> <range>: <expr><call><name><name>SystemTable</name>.<name>serializedSchema</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr><call><name>invalidSchemaRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call> || <call><name>ignoredSchemaRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <continue>continue;</continue></then></if>

                <expr_stmt><expr><call><name><name>row</name>.<name>cf</name>.<name>updateDigest</name></name><argument_list>(<argument><expr><name>versionDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><name>version</name> = <call><name><name>UUID</name>.<name>nameUUIDFromBytes</name></name><argument_list>(<argument><expr><call><name><name>versionDigest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>SystemTable</name>.<name>updateSchemaVersion</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block">/*
     * Like updateVersion, but also announces via gossip
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateVersionAndAnnounce</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>updateVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MigrationManager</name>.<name>passiveAnnounce</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Clear all KS/CF metadata and reset version.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>String</name></type> <name>table</name> <range>: <expr><call><name>getNonSystemTables</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>KSMetaData</name></type> <name>ksm</name> <init>= <expr><call><name>getTableDefinition</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>CFMetaData</name></type> <name>cfm</name> <range>: <expr><call><name><name>ksm</name>.<name>cfMetaData</name></name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><call><name>purge</name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            <expr_stmt><expr><call><name>clearTableDefinition</name><argument_list>(<argument><expr><name>ksm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name>updateVersionAndAnnounce</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>invalidSchemaRow</name><parameter_list>(<param><decl><type><name>Row</name></type> <name>row</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name><name>row</name>.<name>cf</name></name> == null || (<call><name><name>row</name>.<name>cf</name>.<name>isMarkedForDelete</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>row</name>.<name>cf</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call>)</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>ignoredSchemaRow</name><parameter_list>(<param><decl><type><name>Row</name></type> <name>row</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>systemKeyspaceNames</name>.<name>contains</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>string</name></name><argument_list>(<argument><expr><name><name>row</name>.<name>key</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>CharacterCodingException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}
</unit>
