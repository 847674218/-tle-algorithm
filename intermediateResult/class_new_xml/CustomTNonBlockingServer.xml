<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\thrift\CustomTNonBlockingServer.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetSocketAddress</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>server</name>.<name>TNonblockingServer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>server</name>.<name>TServer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TNonblockingServerTransport</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TNonblockingSocket</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TTransportException</name></name>;</import>

<class><specifier>public</specifier> class <name>CustomTNonBlockingServer</name> <super><extends>extends <name>TNonblockingServer</name></extends></super>
<block>{
    <constructor><specifier>public</specifier> <name>CustomTNonBlockingServer</name><parameter_list>(<param><decl><type><name>Args</name></type> <name>args</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>boolean</name></type> <name>requestInvoke</name><parameter_list>(<param><decl><type><name>FrameBuffer</name></type> <name>frameBuffer</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>TNonblockingSocket</name></type> <name>socket</name> <init>= <expr>(<name>TNonblockingSocket</name>) <name><name>frameBuffer</name>.<name>trans_</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ThriftSessionManager</name>.<name>instance</name>.<name>setCurrentSocket</name></name><argument_list>(<argument><expr><call><name><name>socket</name>.<name>getSocketChannel</name></name><argument_list>()</argument_list></call>.<call><name>socket</name><argument_list>()</argument_list></call>.<call><name>getRemoteSocketAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>frameBuffer</name>.<name>invoke</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Factory</name> <super><implements>implements <name>TServerFactory</name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>TServer</name></type> <name>buildTServer</name><parameter_list>(<param><decl><type><name>Args</name></type> <name>args</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name>.<name>getClientEncryptionOptions</name></name><argument_list>()</argument_list></call>.<name>enabled</name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Client SSL is not supported for non-blocking sockets. Please remove client ssl from the configuration."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>InetSocketAddress</name></type> <name>addr</name> <init>= <expr><name><name>args</name>.<name>addr</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TNonblockingServerTransport</name></type> <name>serverTransport</name></decl>;</decl_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name>serverTransport</name> = new <call><name>TCustomNonblockingServerSocket</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>args</name>.<name>keepAlive</name></name></expr></argument>, <argument><expr><name><name>args</name>.<name>sendBufferSize</name></name></expr></argument>, <argument><expr><name><name>args</name>.<name>recvBufferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>TTransportException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unable to create thrift socket to %s:%s"</expr></argument>, <argument><expr><call><name><name>addr</name>.<name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>addr</name>.<name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <comment type="line">// This is single threaded hence the invocation will be all</comment>
            <comment type="line">// in one thread.</comment>
            <decl_stmt><decl><type><name><name>TNonblockingServer</name>.<name>Args</name></name></type> <name>serverArgs</name> <init>= <expr>new <call><name><name>TNonblockingServer</name>.<name>Args</name></name><argument_list>(<argument><expr><name>serverTransport</name></expr></argument>)</argument_list></call>.<call><name>inputTransportFactory</name><argument_list>(<argument><expr><name><name>args</name>.<name>inTransportFactory</name></name></expr></argument>)</argument_list></call>
                                                                                             .<call><name>outputTransportFactory</name><argument_list>(<argument><expr><name><name>args</name>.<name>outTransportFactory</name></name></expr></argument>)</argument_list></call>
                                                                                             .<call><name>inputProtocolFactory</name><argument_list>(<argument><expr><name><name>args</name>.<name>tProtocolFactory</name></name></expr></argument>)</argument_list></call>
                                                                                             .<call><name>outputProtocolFactory</name><argument_list>(<argument><expr><name><name>args</name>.<name>tProtocolFactory</name></name></expr></argument>)</argument_list></call>
                                                                                             .<call><name>processor</name><argument_list>(<argument><expr><name><name>args</name>.<name>processor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>CustomTNonBlockingServer</name><argument_list>(<argument><expr><name>serverArgs</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
