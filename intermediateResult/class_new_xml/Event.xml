<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\Event.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetSocketAddress</name></name>;</import>

<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffers</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Event</name>
<block>{
    <enum><specifier>public</specifier> enum <name>Type</name> <block>{ <decl><name>TOPOLOGY_CHANGE</name></decl>, <decl><name>STATUS_CHANGE</name></decl>, <decl><name>SCHEMA_CHANGE</name></decl> }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Type</name></type> <name>type</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Event</name><parameter_list>(<param><decl><type><name>Type</name></type> <name>type</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Event</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><call><name><name>CBUtil</name>.<name>readEnumValue</name></name><argument_list>(<argument><expr><name><name>Type</name>.<name>class</name></name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{
            <case>case <expr><name>TOPOLOGY_CHANGE</name></expr>:
                <return>return <expr><call><name><name>TopologyChange</name>.<name>deserializeEvent</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>STATUS_CHANGE</name></expr>:
                <return>return <expr><call><name><name>StatusChange</name>.<name>deserializeEvent</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>SCHEMA_CHANGE</name></expr>:
                <return>return <expr><call><name><name>SchemaChange</name>.<name>deserializeEvent</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>
        </case>}</block></switch>
        <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>serialize</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>enumValueToCB</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>serializeEvent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>ChannelBuffer</name></type> <name>serializeEvent</name><parameter_list>()</parameter_list>;</function_decl>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TopologyChange</name> <super><extends>extends <name>Event</name></extends></super>
    <block>{
        <enum><specifier>public</specifier> enum <name>Change</name> <block>{ <decl><name>NEW_NODE</name></decl>, <decl><name>REMOVED_NODE</name></decl>, <decl><name>MOVED_NODE</name></decl> }</block></enum>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Change</name></type> <name>change</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>InetSocketAddress</name></type> <name>node</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>TopologyChange</name><parameter_list>(<param><decl><type><name>Change</name></type> <name>change</name></decl></param>, <param><decl><type><name>InetSocketAddress</name></type> <name>node</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Type</name>.<name>TOPOLOGY_CHANGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>change</name></name> = <name>change</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>node</name></name> = <name>node</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TopologyChange</name></type> <name>newNode</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>TopologyChange</name><argument_list>(<argument><expr><name><name>Change</name>.<name>NEW_NODE</name></name></expr></argument>, <argument><expr>new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TopologyChange</name></type> <name>removedNode</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>TopologyChange</name><argument_list>(<argument><expr><name><name>Change</name>.<name>REMOVED_NODE</name></name></expr></argument>, <argument><expr>new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TopologyChange</name></type> <name>movedNode</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>TopologyChange</name><argument_list>(<argument><expr><name><name>Change</name>.<name>MOVED_NODE</name></name></expr></argument>, <argument><expr>new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line">// Assumes the type has already by been deserialized</comment>
        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>TopologyChange</name></type> <name>deserializeEvent</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Change</name></type> <name>change</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readEnumValue</name></name><argument_list>(<argument><expr><name><name>Change</name>.<name>class</name></name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InetSocketAddress</name></type> <name>node</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readInet</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>TopologyChange</name><argument_list>(<argument><expr><name>change</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>ChannelBuffer</name></type> <name>serializeEvent</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>enumValueToCB</name></name><argument_list>(<argument><expr><name>change</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>CBUtil</name>.<name>inetToCB</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>change</name> + " " + <name>node</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>StatusChange</name> <super><extends>extends <name>Event</name></extends></super>
    <block>{
        <enum><specifier>public</specifier> enum <name>Status</name> <block>{ <decl><name>UP</name></decl>, <decl><name>DOWN</name></decl> }</block></enum>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Status</name></type> <name>status</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>InetSocketAddress</name></type> <name>node</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>StatusChange</name><parameter_list>(<param><decl><type><name>Status</name></type> <name>status</name></decl></param>, <param><decl><type><name>InetSocketAddress</name></type> <name>node</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Type</name>.<name>STATUS_CHANGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>node</name></name> = <name>node</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StatusChange</name></type> <name>nodeUp</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>StatusChange</name><argument_list>(<argument><expr><name><name>Status</name>.<name>UP</name></name></expr></argument>, <argument><expr>new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StatusChange</name></type> <name>nodeDown</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>StatusChange</name><argument_list>(<argument><expr><name><name>Status</name>.<name>DOWN</name></name></expr></argument>, <argument><expr>new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line">// Assumes the type has already by been deserialized</comment>
        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>StatusChange</name></type> <name>deserializeEvent</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Status</name></type> <name>status</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readEnumValue</name></name><argument_list>(<argument><expr><name><name>Status</name>.<name>class</name></name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InetSocketAddress</name></type> <name>node</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readInet</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>StatusChange</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>ChannelBuffer</name></type> <name>serializeEvent</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>enumValueToCB</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>CBUtil</name>.<name>inetToCB</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>status</name> + " " + <name>node</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SchemaChange</name> <super><extends>extends <name>Event</name></extends></super>
    <block>{
        <enum><specifier>public</specifier> enum <name>Change</name> <block>{ <decl><name>CREATED</name></decl>, <decl><name>UPDATED</name></decl>, <decl><name>DROPPED</name></decl> }</block></enum>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Change</name></type> <name>change</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>table</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SchemaChange</name><parameter_list>(<param><decl><type><name>Change</name></type> <name>change</name></decl></param>, <param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>table</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Type</name>.<name>SCHEMA_CHANGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>change</name></name> = <name>change</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>keyspace</name></name> = <name>keyspace</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>table</name></name> = <name>table</name></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>public</specifier> <name>SchemaChange</name><parameter_list>(<param><decl><type><name>Change</name></type> <name>change</name></decl></param>, <param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>change</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line">// Assumes the type has already by been deserialized</comment>
        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>SchemaChange</name></type> <name>deserializeEvent</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Change</name></type> <name>change</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readEnumValue</name></name><argument_list>(<argument><expr><name><name>Change</name>.<name>class</name></name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>table</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>SchemaChange</name><argument_list>(<argument><expr><name>change</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>ChannelBuffer</name></type> <name>serializeEvent</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>enumValueToCB</name></name><argument_list>(<argument><expr><name>change</name></expr></argument>)</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>CBUtil</name>.<name>stringToCB</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>CBUtil</name>.<name>stringToCB</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>change</name> + " " + <name>keyspace</name> + (<call><name><name>table</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? "" : "." + <name>table</name>)</expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
