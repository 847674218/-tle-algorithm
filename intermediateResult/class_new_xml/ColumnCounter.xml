<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\filter\ColumnCounter.java"><comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>IColumn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>IColumnContainer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>CompositeType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>ColumnCounter</name>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>live</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>ignored</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>count</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>IColumnContainer</name></type> <name>container</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name>isLive</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>ignored</name>++</expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>live</name>++</expr>;</expr_stmt></else></if>
    }</block></function>

    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isLive</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>IColumnContainer</name></type> <name>container</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>column</name>.<name>isLive</name></name><argument_list>()</argument_list></call> &amp;&amp; (!<call><name><name>container</name>.<name>deletionInfo</name></name><argument_list>()</argument_list></call>.<call><name>isDeleted</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>live</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>live</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>ignored</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>ignored</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>GroupByPrefix</name> <super><extends>extends <name>ColumnCounter</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CompositeType</name></type> <name>type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>toGroup</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>ByteBuffer</name><index>[]</index></type> <name>last</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * A column counter that count only 1 for all the columns sharing a
         * given prefix of the key.
         *
         * @param type the type of the column name. This can be null if {@code
         *             toGroup} is 0, otherwise it should be a composite.
         * @param toGroup the number of composite components on which to group
         *                column. If 0, all columns are grouped, otherwise we group
         *                those for which the {@code toGroup} first component are equals.
         */</comment>
        <constructor><specifier>public</specifier> <name>GroupByPrefix</name><parameter_list>(<param><decl><type><name>CompositeType</name></type> <name>type</name></decl></param>, <param><decl><type><name>int</name></type> <name>toGroup</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>toGroup</name></name> = <name>toGroup</name></expr>;</expr_stmt>

            <assert>assert <expr><name>toGroup</name> == 0 || <name>type</name> != null</expr>;</assert>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>count</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>IColumnContainer</name></type> <name>container</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr>!<call><name>isLive</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>ignored</name>++</expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>

            <if>if <condition>(<expr><name>toGroup</name> == 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>live</name> = 1</expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name>ByteBuffer</name><index>[]</index></type> <name>current</name> <init>= <expr><call><name><name>type</name>.<name>split</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><name><name>current</name>.<name>length</name></name> &gt;= <name>toGroup</name></expr>;</assert>

            <if>if <condition>(<expr><name>last</name> != null</expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>boolean</name></type> <name>isSameGroup</name> <init>= <expr>true</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>toGroup</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <block>{
                    <if>if <condition>(<expr><call><name><name>ByteBufferUtil</name>.<name>compareUnsigned</name></name><argument_list>(<argument><expr><name><name>last</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>current</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>isSameGroup</name> = false</expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>

                <if>if <condition>(<expr><name>isSameGroup</name></expr>)</condition><then>
                    <return>return;</return></then></if>
            }</block></then></if>

            <expr_stmt><expr><name>live</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name>last</name> = <name>current</name></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
