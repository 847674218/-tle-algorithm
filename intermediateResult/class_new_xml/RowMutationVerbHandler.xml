<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\RowMutationVerbHandler.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FastByteArrayInputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name>.<name>Tracing</name></name>;</import>

<class><specifier>public</specifier> class <name>RowMutationVerbHandler</name> <super><implements>implements <name><name>IVerbHandler</name><argument_list>&lt;<argument><name>RowMutation</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>RowMutationVerbHandler</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>doVerb</name><parameter_list>(<param><decl><type><name><name>MessageIn</name><argument_list>&lt;<argument><name>RowMutation</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>id</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr><name><name>message</name>.<name>payload</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Applying mutation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Check if there were any forwarding headers in this message</comment>
            <decl_stmt><decl><type><name>InetAddress</name></type> <name>replyTo</name> <init>= <expr><name><name>message</name>.<name>from</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>from</name> <init>= <expr><call><name><name>message</name>.<name>parameters</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>RowMutation</name>.<name>FORWARD_FROM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>from</name> == null</expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>forwardBytes</name> <init>= <expr><call><name><name>message</name>.<name>parameters</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>RowMutation</name>.<name>FORWARD_TO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>forwardBytes</name> != null &amp;&amp; <name><name>message</name>.<name>version</name></name> &gt;= <name><name>MessagingService</name>.<name>VERSION_11</name></name></expr>)</condition><then>
                    <expr_stmt><expr><call><name>forwardToLocalNodes</name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name><name>message</name>.<name>verb</name></name></expr></argument>, <argument><expr><name>forwardBytes</name></expr></argument>, <argument><expr><name><name>message</name>.<name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>replyTo</name> = <call><name><name>InetAddress</name>.<name>getByAddress</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>WriteResponse</name></type> <name>response</name> <init>= <expr>new <call><name>WriteResponse</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Tracing</name>.<name>trace</name></name><argument_list>(<argument><expr>"Enqueuing response to {}"</expr></argument>, <argument><expr><name>replyTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>sendReply</name><argument_list>(<argument><expr><call><name><name>response</name>.<name>createMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>replyTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Error in row mutation"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Older version (&lt; 1.0) will not send this message at all, hence we don't
     * need to check the version of the data.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>forwardToLocalNodes</name><parameter_list>(<param><decl><type><name>RowMutation</name></type> <name>rm</name></decl></param>, <param><decl><type><name><name>MessagingService</name>.<name>Verb</name></name></type> <name>verb</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>forwardBytes</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>from</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>DataInputStream</name></type> <name>dis</name> <init>= <expr>new <call><name>DataInputStream</name><argument_list>(<argument><expr>new <call><name>FastByteArrayInputStream</name><argument_list>(<argument><expr><name>forwardBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// remove fwds from message to avoid infinite loop</comment>
        <decl_stmt><decl><type><name><name>MessageOut</name><argument_list>&lt;<argument><name>RowMutation</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr>new <call><name><name>MessageOut</name><argument_list>&lt;<argument><name>RowMutation</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name><name>RowMutation</name>.<name>serializer</name></name></expr></argument>)</argument_list></call>.<call><name>withParameter</name><argument_list>(<argument><expr><name><name>RowMutation</name>.<name>FORWARD_FROM</name></name></expr></argument>, <argument><expr><call><name><name>from</name>.<name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <comment type="line">// Send a message to each of the addresses on our Forward List</comment>
            <decl_stmt><decl><type><name>InetAddress</name></type> <name>address</name> <init>= <expr><call><name><name>CompactEndpointSerializationHelper</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><call><name><name>dis</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Forwarding message to {}@{}"</expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Let the response go back to the coordinator</comment>
            <expr_stmt><expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>sendOneWay</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class>
</unit>
