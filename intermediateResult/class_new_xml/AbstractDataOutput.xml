<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\io\util\AbstractDataOutput.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>UTFDataFormatException</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractDataOutput</name> <super><extends>extends <name>OutputStream</name></extends> <implements>implements <name>DataOutput</name></implements></super>
<block>{
    <comment type="block">/*
    !! DataOutput methods below are copied from the implementation in Apache Harmony RandomAccessFile.
    */</comment>

    <comment type="block" format="javadoc">/**
     * Writes the entire contents of the byte array &lt;code&gt;buffer&lt;/code&gt; to
     * this RandomAccessFile starting at the current file pointer.
     * 
     * @param buffer
     *            the buffer to be written.
     * 
     * @throws IOException
     *             If an error occurs trying to write to this RandomAccessFile.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buffer</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes &lt;code&gt;count&lt;/code&gt; bytes from the byte array &lt;code&gt;buffer&lt;/code&gt;
     * starting at &lt;code&gt;offset&lt;/code&gt; to this RandomAccessFile starting at
     * the current file pointer..
     * 
     * @param buffer
     *            the bytes to be written
     * @param offset
     *            offset in buffer to get bytes
     * @param count
     *            number of bytes in buffer to write
     * 
     * @throws IOException
     *             If an error occurs attempting to write to this
     *             RandomAccessFile.
     * @throws IndexOutOfBoundsException
     *             If offset or count are outside of bounds.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Writes the specified byte &lt;code&gt;oneByte&lt;/code&gt; to this RandomAccessFile
     * starting at the current file pointer. Only the low order byte of
     * &lt;code&gt;oneByte&lt;/code&gt; is written.
     * 
     * @param oneByte
     *            the byte to be written
     * 
     * @throws IOException
     *             If an error occurs attempting to write to this
     *             RandomAccessFile.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>int</name></type> <name>oneByte</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Writes a boolean to this output stream.
     * 
     * @param val
     *            the boolean value to write to the OutputStream
     * 
     * @throws IOException
     *             If an error occurs attempting to write to this
     *             DataOutputStream.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>writeBoolean</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>val</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>val</name> ? 1 : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes a 8-bit byte to this output stream.
     * 
     * @param val
     *            the byte value to write to the OutputStream
     * 
     * @throws java.io.IOException
     *             If an error occurs attempting to write to this
     *             DataOutputStream.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>writeByte</name><parameter_list>(<param><decl><type><name>int</name></type> <name>val</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>val</name> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes the low order 8-bit bytes from a String to this output stream.
     * 
     * @param str
     *            the String containing the bytes to write to the OutputStream
     * 
     * @throws IOException
     *             If an error occurs attempting to write to this
     *             DataOutputStream.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>writeBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>byte</name></type> <name><name>bytes</name><index>[]</index></name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>index</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr><call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes the specified 16-bit character to the OutputStream. Only the lower
     * 2 bytes are written with the higher of the 2 bytes written first. This
     * represents the Unicode value of val.
     * 
     * @param val
     *            the character to be written
     * 
     * @throws IOException
     *             If an error occurs attempting to write to this
     *             DataOutputStream.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>writeChar</name><parameter_list>(<param><decl><type><name>int</name></type> <name>val</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr>(<name>val</name> &gt;&gt;&gt; 8) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr>(<name>val</name> &gt;&gt;&gt; 0) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes the specified 16-bit characters contained in str to the
     * OutputStream. Only the lower 2 bytes of each character are written with
     * the higher of the 2 bytes written first. This represents the Unicode
     * value of each character in str.
     * 
     * @param str
     *            the String whose characters are to be written.
     * 
     * @throws IOException
     *             If an error occurs attempting to write to this
     *             DataOutputStream.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>writeChars</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>byte</name></type> <name><name>newBytes</name><index>[]</index></name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call> * 2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>newIndex</name> <init>= <expr><name>index</name> == 0 ? <name>index</name> : <name>index</name> * 2</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>newBytes</name><index>[<expr><name>newIndex</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>(<call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> &gt;&gt; 8) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newBytes</name><index>[<expr><name>newIndex</name> + 1</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr><call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>newBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes a 64-bit double to this output stream. The resulting output is the
     * 8 bytes resulting from calling Double.doubleToLongBits().
     * 
     * @param val
     *            the double to be written.
     * 
     * @throws IOException
     *             If an error occurs attempting to write to this
     *             DataOutputStream.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>writeDouble</name><parameter_list>(<param><decl><type><name>double</name></type> <name>val</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>writeLong</name><argument_list>(<argument><expr><call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes a 32-bit float to this output stream. The resulting output is the
     * 4 bytes resulting from calling Float.floatToIntBits().
     * 
     * @param val
     *            the float to be written.
     * 
     * @throws IOException
     *             If an error occurs attempting to write to this
     *             DataOutputStream.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>writeFloat</name><parameter_list>(<param><decl><type><name>float</name></type> <name>val</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>writeInt</name><argument_list>(<argument><expr><call><name><name>Float</name>.<name>floatToIntBits</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes a 32-bit int to this output stream. The resulting output is the 4
     * bytes, highest order first, of val.
     * 
     * @param val
     *            the int to be written.
     * 
     * @throws IOException
     *             If an error occurs attempting to write to this
     *             DataOutputStream.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeInt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>val</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr>(<name>val</name> &gt;&gt;&gt; 24) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr>(<name>val</name> &gt;&gt;&gt; 16) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr>(<name>val</name> &gt;&gt;&gt;  8) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr>(<name>val</name> &gt;&gt;&gt;  0) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes a 64-bit long to this output stream. The resulting output is the 8
     * bytes, highest order first, of val.
     * 
     * @param val
     *            the long to be written.
     * 
     * @throws IOException
     *             If an error occurs attempting to write to this
     *             DataOutputStream.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeLong</name><parameter_list>(<param><decl><type><name>long</name></type> <name>val</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>val</name> &gt;&gt;&gt; 56</expr></argument>)</argument_list></call> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>val</name> &gt;&gt;&gt; 48</expr></argument>)</argument_list></call> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>val</name> &gt;&gt;&gt; 40</expr></argument>)</argument_list></call> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>val</name> &gt;&gt;&gt; 32</expr></argument>)</argument_list></call> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>val</name> &gt;&gt;&gt; 24</expr></argument>)</argument_list></call> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>val</name> &gt;&gt;&gt; 16</expr></argument>)</argument_list></call> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>val</name> &gt;&gt;&gt;  8</expr></argument>)</argument_list></call> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>val</name> &gt;&gt;&gt;  0</expr></argument>)</argument_list></call> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes the specified 16-bit short to the OutputStream. Only the lower 2
     * bytes are written with the higher of the 2 bytes written first.
     * 
     * @param val
     *            the short to be written
     * 
     * @throws IOException
     *             If an error occurs attempting to write to this
     *             DataOutputStream.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeShort</name><parameter_list>(<param><decl><type><name>int</name></type> <name>val</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>writeChar</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes the specified String out in UTF format.
     * 
     * @param str
     *            the String to be written in UTF format.
     * 
     * @throws IOException
     *             If an error occurs attempting to write to this
     *             DataOutputStream.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>writeUTF</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>utfCount</name> <init>= <expr>0</expr></init>, <name>length</name> <init>= <expr><call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>charValue</name> <init>= <expr><call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>charValue</name> &gt; 0 &amp;&amp; <name>charValue</name> &lt;= 127</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>utfCount</name>++</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>charValue</name> &lt;= 2047</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>utfCount</name> += 2</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>utfCount</name> += 3</expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></for>
        <if>if <condition>(<expr><name>utfCount</name> &gt; 65535</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>UTFDataFormatException</name><argument_list>()</argument_list></call></expr>;</throw> <comment type="line">//$NON-NLS-1$</comment>
        }</block></then></if>
        <decl_stmt><decl><type><name>byte</name></type> <name><name>utfBytes</name><index>[]</index></name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>utfCount</name> + 2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>utfIndex</name> <init>= <expr>2</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>charValue</name> <init>= <expr><call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>charValue</name> &gt; 0 &amp;&amp; <name>charValue</name> &lt;= 127</expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>utfBytes</name><index>[<expr><name>utfIndex</name>++</expr>]</index></name> = (<name>byte</name>) <name>charValue</name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>charValue</name> &lt;= 2047</expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>utfBytes</name><index>[<expr><name>utfIndex</name>++</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>0xc0 | (0x1f &amp; (<name>charValue</name> &gt;&gt; 6))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>utfBytes</name><index>[<expr><name>utfIndex</name>++</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>0x80 | (0x3f &amp; <name>charValue</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>utfBytes</name><index>[<expr><name>utfIndex</name>++</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>0xe0 | (0x0f &amp; (<name>charValue</name> &gt;&gt; 12))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>utfBytes</name><index>[<expr><name>utfIndex</name>++</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>0x80 | (0x3f &amp; (<name>charValue</name> &gt;&gt; 6))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>utfBytes</name><index>[<expr><name>utfIndex</name>++</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr>0x80 | (0x3f &amp; <name>charValue</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></for>
        <expr_stmt><expr><name><name>utfBytes</name><index>[<expr>0</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr><name>utfCount</name> &gt;&gt; 8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>utfBytes</name><index>[<expr>1</expr>]</index></name> = (<name>byte</name>) <name>utfCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>utfBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
