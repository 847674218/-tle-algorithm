<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\thrift\ThriftClientState.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>CQLStatement</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>ClientState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>QueryState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * ClientState used by thrift that also provide a QueryState.
 *
 * Thrift is intrinsically synchronous so there could be only one query per
 * client at a given time. So ClientState and QueryState can be merge into the
 * same object.
 */</comment>
<class><specifier>public</specifier> class <name>ThriftClientState</name> <super><extends>extends <name>ClientState</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_CACHE_PREPARED</name> <init>= <expr>10000</expr></init></decl>;</decl_stmt>    <comment type="line">// Enough to keep buggy clients from OOM'ing us</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>QueryState</name></type> <name>queryState</name></decl>;</decl_stmt>

    <comment type="line">// An LRU map of prepared statements</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>CQLStatement</name></argument>&gt;</argument_list></name></type> <name>prepared</name> <init>= <expr>new <class><super><name><name>LinkedHashMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>CQLStatement</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr>16</expr></argument>, <argument><expr>0.75f</expr></argument>, <argument><expr>true</expr></argument>)</argument_list> <block>{
        <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>removeEldestEntry</name><parameter_list>(<param><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>CQLStatement</name></argument>&gt;</argument_list></name></name></type> <name>eldest</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name>size</name><argument_list>()</argument_list></call> &gt; <name>MAX_CACHE_PREPARED</name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ThriftClientState</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>queryState</name></name> = new <call><name>QueryState</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>QueryState</name></type> <name>getQueryState</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>queryState</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>CQLStatement</name></argument>&gt;</argument_list></name></type> <name>getPrepared</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>prepared</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSchedulingValue</name><parameter_list>()</parameter_list>
    <block>{
        <switch>switch<condition>(<expr><call><name><name>DatabaseDescriptor</name>.<name>getRequestSchedulerId</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{
            <case>case <expr><name>keyspace</name></expr>: <return>return <expr><call><name>getRawKeyspace</name><argument_list>()</argument_list></call></expr>;</return>
        </case>}</block></switch>
        <return>return <expr>"default"</expr>;</return>
    }</block></function>
}</block></class>
</unit>
