<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\filter\ColumnSlice.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NavigableMap</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>AbstractIterator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>ColumnSlice</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Serializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>Serializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ColumnSlice</name></type> <name>ALL_COLUMNS</name> <init>= <expr>new <call><name>ColumnSlice</name><argument_list>(<argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>, <argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ColumnSlice</name><index>[]</index></type> <name>ALL_COLUMNS_ARRAY</name> <init>= <expr>new <name><name>ColumnSlice</name><index>[]</index></name><block>{ <expr><name>ALL_COLUMNS</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>finish</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ColumnSlice</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>finish</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>start</name> != null &amp;&amp; <name>finish</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>start</name></name> = <name>start</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>finish</name></name> = <name>finish</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Validate an array of column slices.
     * To be valid, the slices must be sorted and non-overlapping and each slice must be valid.
     *
     * @throws IllegalArgumentException if the input slices are not valid.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name><name>ColumnSlice</name><index>[]</index></name></type> <name>slices</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>slices</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>ColumnSlice</name></type> <name>slice</name> <init>= <expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>validate</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr><name>reversed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>i</name> &gt; 0</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name><name>slices</name><index>[<expr><name>i</name> - 1</expr>]</index></name>.<call><name><name>finish</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 || <call><name><name>slice</name>.<name>start</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid column slices: slices must be sorted and non-overlapping"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>slices</name><index>[<expr><name>i</name> -1</expr>]</index></name>.<name>finish</name></expr></argument>, <argument><expr><name><name>slice</name>.<name>start</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>reversed</name> ? <name>cmp</name> &lt;= 0 : <name>cmp</name> &gt;= 0</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid column slices: slices must be sorted and non-overlapping"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Validate a column slices.
     * To be valid, the slice start must sort before the slice end.
     *
     * @throws IllegalArgumentException if the slice is not valid.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>ColumnSlice</name></type> <name>slice</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>orderedComparator</name> <init>= <expr><name>reversed</name> ? <name><name>comparator</name>.<name>reverseComparator</name></name> : <name>comparator</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>slice</name>.<name>start</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; <call><name><name>slice</name>.<name>finish</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; <call><name><name>orderedComparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>slice</name>.<name>start</name></name></expr></argument>, <argument><expr><name><name>slice</name>.<name>finish</name></name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Slice finish must come after start in traversal order"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>includes</name><parameter_list>(<param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>cmp</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>cmp</name>.<name>compare</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> &lt;= 0 &amp;&amp; (<call><name><name>finish</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>)</argument_list></call> || <call><name><name>cmp</name>.<name>compare</name></name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> &gt;= 0)</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>hashCode</name> <init>= <expr>31 + <call><name><name>start</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>31*<name>hashCode</name> + <call><name><name>finish</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if<condition>(<expr>!(<name>o</name> instanceof <name>ColumnSlice</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <decl_stmt><decl><type><name>ColumnSlice</name></type> <name>that</name> <init>= <expr>(<name>ColumnSlice</name>)<name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>start</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>start</name></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>finish</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>finish</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"[" + <call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> + ", " + <call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call> + "]"</expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Serializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>ColumnSlice</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>ColumnSlice</name></type> <name>cs</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name><name>cs</name>.<name>start</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name><name>cs</name>.<name>finish</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ColumnSlice</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>start</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>finish</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>ColumnSlice</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>ColumnSlice</name></type> <name>cs</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>TypeSizes</name></type> <name>sizes</name> <init>= <expr><name><name>TypeSizes</name>.<name>NATIVE</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>startSize</name> <init>= <expr><call><name><name>cs</name>.<name>start</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>finishSize</name> <init>= <expr><call><name><name>cs</name>.<name>finish</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> += <call><name><name>sizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>) <name>startSize</name></expr></argument>)</argument_list></call> + <name>startSize</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> += <call><name><name>sizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>) <name>finishSize</name></expr></argument>)</argument_list></call> + <name>finishSize</name></expr>;</expr_stmt>
            <return>return <expr><name>size</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>NavigableMapIterator</name> <super><extends>extends <name><name>AbstractIterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>NavigableMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ColumnSlice</name><index>[]</index></type> <name>slices</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>idx</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>currentSlice</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>NavigableMapIterator</name><parameter_list>(<param><decl><type><name><name>NavigableMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></param>, <param><decl><type><name><name>ColumnSlice</name><index>[]</index></name></type> <name>slices</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>map</name></name> = <name>map</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>slices</name></name> = <name>slices</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>protected</specifier> <name>IColumn</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>currentSlice</name> == null</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>idx</name> &gt;= <name><name>slices</name>.<name>length</name></name></expr>)</condition><then>
                    <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></then></if>

                <decl_stmt><decl><type><name>ColumnSlice</name></type> <name>slice</name> <init>= <expr><name><name>slices</name><index>[<expr><name>idx</name>++</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <comment type="line">// Note: we specialize the case of start == "" and finish = "" because it is slightly more efficient, but also they have a specific</comment>
                <comment type="line">// meaning (namely, they always extend to the beginning/end of the range).</comment>
                <if>if <condition>(<expr><call><name><name>slice</name>.<name>start</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><call><name><name>slice</name>.<name>finish</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                        <expr_stmt><expr><name>currentSlice</name> = <call><name><name>map</name>.<name>values</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
                    <else>else
                        <expr_stmt><expr><name>currentSlice</name> = <call><name><name>map</name>.<name>headMap</name></name><argument_list>(<argument><expr><name><name>slice</name>.<name>finish</name></name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
                }</block></then>
                <else>else <if>if <condition>(<expr><call><name><name>slice</name>.<name>finish</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>currentSlice</name> = <call><name><name>map</name>.<name>tailMap</name></name><argument_list>(<argument><expr><name><name>slice</name>.<name>start</name></name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><name>currentSlice</name> = <call><name><name>map</name>.<name>subMap</name></name><argument_list>(<argument><expr><name><name>slice</name>.<name>start</name></name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name><name>slice</name>.<name>finish</name></name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>currentSlice</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr><call><name><name>currentSlice</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>

            <expr_stmt><expr><name>currentSlice</name> = null</expr>;</expr_stmt>
            <return>return <expr><call><name>computeNext</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
