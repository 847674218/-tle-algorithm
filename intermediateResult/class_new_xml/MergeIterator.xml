<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\MergeIterator.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>AbstractIterator</name></name>;</import>

<comment type="block" format="javadoc">/** Merges sorted input iterators which individually contain unique items. */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>MergeIterator</name><argument_list>&lt;<argument><name>In</name></argument>,<argument><name>Out</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>AbstractIterator</name><argument_list>&lt;<argument><name>Out</name></argument>&gt;</argument_list></name></extends> <implements>implements <name><name>IMergeIterator</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>Reducer</name><argument_list>&lt;<argument><name>In</name></argument>,<argument><name>Out</name></argument>&gt;</argument_list></name></type> <name>reducer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>iterators</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>MergeIterator</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>iters</name></decl></param>, <param><decl><type><name><name>Reducer</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name></type> <name>reducer</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>iterators</name></name> = <name>iters</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>reducer</name></name> = <name>reducer</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list> <name><name>IMergeIterator</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name></type> <name>get</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>sources</name></decl></param>,
                                                    <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>,
                                                    <param><decl><type><specifier>final</specifier> <name><name>Reducer</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name></type> <name>reducer</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>sources</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1</expr>)</condition><then>
            <return>return <expr><call><name><name>reducer</name>.<name>trivialReduceIsTrivial</name></name><argument_list>()</argument_list></call>
                   ? new <call><name><name>TrivialOneToOne</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr><name>reducer</name></expr></argument>)</argument_list></call>
                   : new <call><name><name>OneToOne</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr><name>reducer</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <return>return <expr>new <call><name><name>ManyToOne</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr><name>reducer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>iterators</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>iterators</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{
        <for>for (<init><decl><type><name><name>CloseableIterator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <range>: <expr><name><name>this</name>.<name>iterators</name></name></expr></range></decl></init>)
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>iterator</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></for>

        <expr_stmt><expr><call><name><name>reducer</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/** A MergeIterator that consumes multiple input values per output value. */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name><name>ManyToOne</name><argument_list>&lt;<argument><name>In</name></argument>,<argument><name>Out</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>MergeIterator</name><argument_list>&lt;<argument><name>In</name></argument>,<argument><name>Out</name></argument>&gt;</argument_list></name></extends></super>
    <block>{
        <comment type="line">// a queue for return: all candidates must be open and have at least one item</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>PriorityQueue</name><argument_list>&lt;<argument><name><name>Candidate</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>queue</name></decl>;</decl_stmt>
        <comment type="line">// a stack of the last consumed candidates, so that we can lazily call 'advance()'</comment>
        <comment type="line">// TODO: if we had our own PriorityQueue implementation we could stash items</comment>
        <comment type="line">// at the end of its array, so we wouldn't need this storage</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>ArrayDeque</name><argument_list>&lt;<argument><name><name>Candidate</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl>;</decl_stmt>
        <constructor><specifier>public</specifier> <name>ManyToOne</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>iters</name></decl></param>, <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>comp</name></decl></param>, <param><decl><type><name><name>Reducer</name><argument_list>&lt;<argument><name>In</name></argument>,<argument><name>Out</name></argument>&gt;</argument_list></name></type> <name>reducer</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>iters</name></expr></argument>, <argument><expr><name>reducer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>queue</name></name> = new <call><name><name>PriorityQueue</name><argument_list>&lt;<argument><name><name>Candidate</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>iters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name><name>CloseableIterator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>iter</name> <range>: <expr><name>iters</name></expr></range></decl></init>)
            <block>{
                <decl_stmt><decl><type><name><name>Candidate</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>candidate</name> <init>= <expr>new <call><name><name>Candidate</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>candidate</name>.<name>advance</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <comment type="line">// was empty</comment>
                    <continue>continue;</continue></then></if>
                <expr_stmt><expr><call><name><name>this</name>.<name>queue</name>.<name>add</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name><name>this</name>.<name>candidates</name></name> = new <call><name><name>ArrayDeque</name><argument_list>&lt;<argument><name><name>Candidate</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>queue</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>Out</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>advance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>consume</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/** Consume values by sending them to the reducer while they are equal. */</comment>
        <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>Out</name></type> <name>consume</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>reducer</name>.<name>onKeyChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Candidate</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>candidate</name> <init>= <expr><call><name><name>queue</name>.<name>peek</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>candidate</name> == null</expr>)</condition><then>
                <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></then></if>
            <do>do
            <block>{
                <expr_stmt><expr><name>candidate</name> = <call><name><name>queue</name>.<name>poll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>candidates</name>.<name>push</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>reducer</name>.<name>reduce</name></name><argument_list>(<argument><expr><name><name>candidate</name>.<name>item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            while <condition>(<expr><call><name><name>queue</name>.<name>peek</name></name><argument_list>()</argument_list></call> != null &amp;&amp; <call><name><name>queue</name>.<name>peek</name></name><argument_list>()</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call> == 0</expr>)</condition>;</do>
            <return>return <expr><call><name><name>reducer</name>.<name>getReduced</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/** Advance and re-enqueue all items we consumed in the last iteration. */</comment>
        <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>advance</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name><name>Candidate</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>candidate</name></decl>;</decl_stmt>
            <while>while <condition>(<expr>(<name>candidate</name> = <call><name><name>candidates</name>.<name>pollFirst</name></name><argument_list>()</argument_list></call>) != null</expr>)</condition>
                <if>if <condition>(<expr><call><name><name>candidate</name>.<name>advance</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>queue</name>.<name>add</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></while>
        }</block></function>
    }</block></class>

    <comment type="line">// Holds and is comparable by the head item of an iterator it owns</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name><name>Candidate</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>Comparable</name><argument_list>&lt;<argument><name><name>Candidate</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>comp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>In</name></type> <name>item</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Candidate</name><parameter_list>(<param><decl><type><name><name>CloseableIterator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></param>, <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>comp</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>iter</name></name> = <name>iter</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>comp</name></name> = <name>comp</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="block" format="javadoc">/** @return True if our iterator had an item, and it is now available */</comment>
        <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>advance</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr>!<call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr>false</expr>;</return></then></if>
            <expr_stmt><expr><name>item</name> = <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name><name>Candidate</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>that</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>comp</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>item</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>item</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/** Accumulator that collects values of type A, and outputs a value of type B. */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name><name>Reducer</name><argument_list>&lt;<argument><name>In</name></argument>,<argument><name>Out</name></argument>&gt;</argument_list></name>
    <block>{
        <comment type="block" format="javadoc">/**
         * @return true if Out is the same as In for the case of a single source iterator
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>trivialReduceIsTrivial</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * combine this object with the previous ones.
         * intermediate state is up to your implementation.
         */</comment>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>reduce</name><parameter_list>(<param><decl><type><name>In</name></type> <name>current</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/** @return The last object computed by reduce */</comment>
        <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>Out</name></type> <name>getReduced</name><parameter_list>()</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/**
         * Called at the begining of each new key, before any reduce is called.
         * To be overriden by implementing classes.
         */</comment>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>onKeyChange</name><parameter_list>()</parameter_list> <block>{}</block></function>

        <comment type="block" format="javadoc">/**
         * May be overridden by implementations that require cleaning up after use
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name><name>OneToOne</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>MergeIterator</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></type> <name>source</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>OneToOne</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>sources</name></decl></param>, <param><decl><type><name><name>Reducer</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name></type> <name>reducer</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr><name>reducer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>source</name> = <call><name><name>sources</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>protected</specifier> <name>Out</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr>!<call><name><name>source</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></then></if>
            <expr_stmt><expr><call><name><name>reducer</name>.<name>onKeyChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>reducer</name>.<name>reduce</name></name><argument_list>(<argument><expr><call><name><name>source</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>reducer</name>.<name>getReduced</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name><name>TrivialOneToOne</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>MergeIterator</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>source</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>TrivialOneToOne</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>In</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>sources</name></decl></param>, <param><decl><type><name><name>Reducer</name><argument_list>&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name></type> <name>reducer</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr><name>reducer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>source</name> = <call><name><name>sources</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>protected</specifier> <name>Out</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr>!<call><name><name>source</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></then></if>
            <return>return <expr>(<name>Out</name>) <call><name><name>source</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
