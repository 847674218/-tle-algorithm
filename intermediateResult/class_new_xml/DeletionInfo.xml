<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\DeletionInfo.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Constructor</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Objects</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Iterables</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISSTableSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>Descriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>IntervalTree</name></name>;</import>

<class><specifier>public</specifier> class <name>DeletionInfo</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Serializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>Serializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// We don't have way to represent the full interval of keys (Interval don't support the minimum token as the right bound),</comment>
    <comment type="line">// so we keep the topLevel deletion info separatly. This also slightly optimize the case of full row deletion which is rather common.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DeletionTime</name></type> <name>topLevel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>IntervalTree</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DeletionTime</name></argument>, <argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DeletionInfo</name></type> <name>LIVE</name> <init>= <expr>new <call><name>DeletionInfo</name><argument_list>(<argument><expr><name><name>DeletionTime</name>.<name>LIVE</name></name></expr></argument>, <argument><expr><name><name>IntervalTree</name>.</name>&lt;<name>ByteBuffer</name></expr></argument>, <argument><expr><name>DeletionTime</name></expr></argument>, <argument><expr><name>RangeTombstone</name>&gt;<call><name>emptyTree</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DeletionInfo</name><parameter_list>(<param><decl><type><name>long</name></type> <name>markedForDeleteAt</name></decl></param>, <param><decl><type><name>int</name></type> <name>localDeletionTime</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Pre-1.1 node may return MIN_VALUE for non-deleted container, but the new default is MAX_VALUE</comment>
        <comment type="line">// (see CASSANDRA-3872)</comment>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>DeletionTime</name><argument_list>(<argument><expr><name>markedForDeleteAt</name></expr></argument>, <argument><expr><name>localDeletionTime</name> == <name><name>Integer</name>.<name>MIN_VALUE</name></name> ? <name><name>Integer</name>.<name>MAX_VALUE</name></name> : <name>localDeletionTime</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>IntervalTree</name>.</name>&lt;<name>ByteBuffer</name></expr></argument>, <argument><expr><name>DeletionTime</name></expr></argument>, <argument><expr><name>RangeTombstone</name>&gt;<call><name>emptyTree</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>DeletionInfo</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>end</name></decl></param>, <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>long</name></type> <name>markedForDeleteAt</name></decl></param>, <param><decl><type><name>int</name></type> <name>localDeletionTime</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>RangeTombstone</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr>new <call><name>DeletionTime</name><argument_list>(<argument><expr><name>markedForDeleteAt</name></expr></argument>, <argument><expr><name>localDeletionTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>DeletionInfo</name><parameter_list>(<param><decl><type><name>RangeTombstone</name></type> <name>rangeTombstone</name></decl></param>, <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>DeletionTime</name>.<name>LIVE</name></name></expr></argument>, <argument><expr><call><name><name>IntervalTree</name>.<name>build</name></name><argument_list>(<argument><expr><name><name>Collections</name>.</name>&lt;<name>RangeTombstone</name>&gt;<call><name>singletonList</name><argument_list>(<argument><expr><name>rangeTombstone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><name>comparator</name> != null</expr>;</assert>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>DeletionInfo</name><parameter_list>(<param><decl><type><name>DeletionTime</name></type> <name>topLevel</name></decl></param>, <param><decl><type><name><name>IntervalTree</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DeletionTime</name></argument>, <argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>topLevel</name></name> = <name>topLevel</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>ranges</name></name> = <name>ranges</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Serializer</name></type> <name>serializer</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>serializer</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether this DeletionInfo is live, that is deletes no columns.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLive</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>topLevel</name>.<name>markedForDeleteAt</name></name> == <name><name>Long</name>.<name>MIN_VALUE</name></name>
            &amp;&amp; <name><name>topLevel</name>.<name>localDeletionTime</name></name> == <name><name>Integer</name>.<name>MAX_VALUE</name></name>
            &amp;&amp; <call><name><name>ranges</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return whether a given column is deleted by the container having this
     * deletion info.
     *
     * @param column the column to check.
     * @return true if the column is deleted, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDeleted</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>isDeleted</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>column</name>.<name>mostRecentLiveChangeAt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDeleted</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name>isLive</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <if>if <condition>(<expr><name>timestamp</name> &lt;= <name><name>topLevel</name>.<name>markedForDeleteAt</name></name></expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then></if>

        <for>for (<init><decl><type><name>DeletionTime</name></type> <name>d</name> <range>: <expr><call><name><name>ranges</name>.<name>search</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><name>timestamp</name> &lt;= <name><name>d</name>.<name>markedForDeleteAt</name></name></expr>)</condition><then>
                <return>return <expr>true</expr>;</return></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return a new DeletionInfo correspond to purging every tombstones that
     * are older than {@code gcbefore}.
     *
     * @param gcBefore timestamp (in seconds) before which tombstones should
     * be purged
     * @return a new DeletionInfo with the purged info remove. Should return
     * DeletionInfo.LIVE if no tombstones remain.
     */</comment>
    <function><type><specifier>public</specifier> <name>DeletionInfo</name></type> <name>purge</name><parameter_list>(<param><decl><type><name>int</name></type> <name>gcBefore</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>ranges</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr><name><name>topLevel</name>.<name>localDeletionTime</name></name> &lt; <name>gcBefore</name> ? <name>LIVE</name> : <name>this</name></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <comment type="line">// We rebuild a new intervalTree that contains only non expired range tombstones</comment>
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>nonExpired</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>RangeTombstone</name></type> <name>range</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr><name><name>range</name>.<name>data</name>.<name>localDeletionTime</name></name> &gt;= <name>gcBefore</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>nonExpired</name>.<name>add</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>
            <decl_stmt><decl><type><name><name>IntervalTree</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DeletionTime</name></argument>, <argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>newRanges</name> <init>= <expr><call><name><name>nonExpired</name>.<name>size</name></name><argument_list>()</argument_list></call> == <call><name><name>ranges</name>.<name>intervalCount</name></name><argument_list>()</argument_list></call>
                                                                             ? <name>ranges</name>
                                                                             : <call><name><name>IntervalTree</name>.<name>build</name></name><argument_list>(<argument><expr><name>nonExpired</name></expr></argument>, <argument><expr><call><name><name>ranges</name>.<name>comparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name><name>topLevel</name>.<name>localDeletionTime</name></name> &lt; <name>gcBefore</name>
                 ? new <call><name>DeletionInfo</name><argument_list>(<argument><expr><name><name>DeletionTime</name>.<name>LIVE</name></name></expr></argument>, <argument><expr><name>newRanges</name></expr></argument>)</argument_list></call>
                 : new <call><name>DeletionInfo</name><argument_list>(<argument><expr><name>topLevel</name></expr></argument>, <argument><expr><name>newRanges</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new DeletionInfo containing of this plus the provided {@code
     * newInfo}.
     */</comment>
    <function><type><specifier>public</specifier> <name>DeletionInfo</name></type> <name>add</name><parameter_list>(<param><decl><type><name>DeletionInfo</name></type> <name>newInfo</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>ranges</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr><name><name>topLevel</name>.<name>markedForDeleteAt</name></name> &lt; <name><name>newInfo</name>.<name>topLevel</name>.<name>markedForDeleteAt</name></name>
                 ? <name>newInfo</name>
                 : <call><name><name>newInfo</name>.<name>ranges</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? <name>this</name> : new <call><name>DeletionInfo</name><argument_list>(<argument><expr><name>topLevel</name></expr></argument>, <argument><expr><name><name>newInfo</name>.<name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <if>if <condition>(<expr><call><name><name>newInfo</name>.<name>ranges</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <return>return <expr><name><name>topLevel</name>.<name>markedForDeleteAt</name></name> &lt; <name><name>newInfo</name>.<name>topLevel</name>.<name>markedForDeleteAt</name></name>
                     ? new <call><name>DeletionInfo</name><argument_list>(<argument><expr><name><name>newInfo</name>.<name>topLevel</name></name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call>
                     : <name>this</name></expr>;</return>
            }</block></then>
            <else>else
            <block>{
                <comment type="line">// Need to merge both ranges</comment>
                <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>merged</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Iterables</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>merged</name></expr></argument>, <argument><expr><call><name><name>Iterables</name>.<name>concat</name></name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name><name>newInfo</name>.<name>ranges</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>new <call><name>DeletionInfo</name><argument_list>(<argument><expr><name><name>topLevel</name>.<name>markedForDeleteAt</name></name> &lt; <name><name>newInfo</name>.<name>topLevel</name>.<name>markedForDeleteAt</name></name> ? <name><name>newInfo</name>.<name>topLevel</name></name> : <name>topLevel</name></expr></argument>,
                                        <argument><expr><call><name><name>IntervalTree</name>.<name>build</name></name><argument_list>(<argument><expr><name>merged</name></expr></argument>, <argument><expr><call><name><name>ranges</name>.<name>comparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>minTimestamp</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>minTimestamp</name> <init>= <expr><name><name>topLevel</name>.<name>markedForDeleteAt</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>RangeTombstone</name></type> <name>i</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><name>minTimestamp</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>minTimestamp</name></expr></argument>, <argument><expr><name><name>i</name>.<name>data</name>.<name>markedForDeleteAt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>minTimestamp</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * The maximum timestamp mentioned by this DeletionInfo.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>maxTimestamp</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>maxTimestamp</name> <init>= <expr><name><name>topLevel</name>.<name>markedForDeleteAt</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>RangeTombstone</name></type> <name>i</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><name>maxTimestamp</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxTimestamp</name></expr></argument>, <argument><expr><name><name>i</name>.<name>data</name>.<name>markedForDeleteAt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>maxTimestamp</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>DeletionTime</name></type> <name>getTopLevelDeletion</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>topLevel</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>rangeIterator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ranges</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>dataSize</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr><name><name>topLevel</name>.<name>markedForDeleteAt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>RangeTombstone</name></type> <name>r</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><name>size</name> += <call><name><name>r</name>.<name>min</name>.<name>remaining</name></name><argument_list>()</argument_list></call> + <call><name><name>r</name>.<name>max</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> += <call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr><name><name>r</name>.<name>data</name>.<name>markedForDeleteAt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>ranges</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"{%s}"</expr></argument>, <argument><expr><name>topLevel</name></expr></argument>)</argument_list></call></expr>;</return></then>
        <else>else
            <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"{%s, ranges=%s}"</expr></argument>, <argument><expr><name>topLevel</name></expr></argument>, <argument><expr><call><name>rangesAsString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>rangesAsString</name><parameter_list>()</parameter_list>
    <block>{
        <assert>assert <expr>!<call><name><name>ranges</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AbstractType</name></type> <name>at</name> <init>= <expr>(<name>AbstractType</name>)<call><name><name>ranges</name>.<name>comparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>at</name> != null</expr>;</assert>
        <for>for (<init><decl><type><name>RangeTombstone</name></type> <name>i</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"["</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>at</name>.<name>getString</name></name><argument_list>(<argument><expr><name><name>i</name>.<name>min</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>at</name>.<name>getString</name></name><argument_list>(<argument><expr><name><name>i</name>.<name>max</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>i</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if<condition>(<expr>!(<name>o</name> instanceof <name>DeletionInfo</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <decl_stmt><decl><type><name>DeletionInfo</name></type> <name>that</name> <init>= <expr>(<name>DeletionInfo</name>)<name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>topLevel</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>topLevel</name></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>ranges</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Objects</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>topLevel</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Serializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>DeletionInfo</name></argument>&gt;</argument_list></name>, <name><name>ISSTableSerializer</name><argument_list>&lt;<argument><name>DeletionInfo</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>ISerializer</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>bbSerializer</name> <init>= <expr>new <class><super><name><name>ISerializer</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
            <block>{
                <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
            <block>{
                <return>return <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>, <param><decl><type><name>TypeSizes</name></type> <name>typeSizes</name></decl></param>)</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>bbSize</name> <init>= <expr><call><name><name>bb</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>)<name>bbSize</name></expr></argument>)</argument_list></call> + <name>bbSize</name></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>IntervalTree</name>.<name><name>Serializer</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DeletionTime</name></argument>, <argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></name></type> <name>itSerializer</name></decl>;</decl_stmt>
        <expr_stmt><expr>static
        <block>{
            <try>try
            <block>{
                <decl_stmt><decl><type><name><name>Constructor</name><argument_list>&lt;<argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>constructor</name> <init>= <expr><call><name><name>RangeTombstone</name>.<name><name>class</name>.<name>getConstructor</name></name></name><argument_list>(<argument><expr><name><name>ByteBuffer</name>.<name>class</name></name></expr></argument>, <argument><expr><name><name>ByteBuffer</name>.<name>class</name></name></expr></argument>, <argument><expr><name><name>DeletionTime</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>itSerializer</name> = <call><name><name>IntervalTree</name>.<name>serializer</name></name><argument_list>(<argument><expr><name>bbSerializer</name></expr></argument>, <argument><expr><name><name>DeletionTime</name>.<name>serializer</name></name></expr></argument>, <argument><expr><name>constructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/></block></try>}</block></expr></expr_stmt>
            <catch>catch <parameter_list>(<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch>
        }</block></class>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>DeletionInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>DeletionTime</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>info</name>.<name>topLevel</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Pre-1.2 version don't know about range tombstones and thus users should upgrade all</comment>
            <comment type="line">// nodes before using them. If they didn't, better fail early that propagating bad info</comment>
            <if>if <condition>(<expr><name>version</name> &lt; <name><name>MessagingService</name>.<name>VERSION_12</name></name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr>!<call><name><name>info</name>.<name>ranges</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Cannot send range tombstone to pre-1.2 node. You should upgrade all node to Cassandra 1.2+ before using range tombstone."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <comment type="line">// Otherwise we're done</comment>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><call><name><name>itSerializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>info</name>.<name>ranges</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serializeForSSTable</name><parameter_list>(<param><decl><type><name>DeletionInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>DeletionTime</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>info</name>.<name>topLevel</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="block">/*
         * Range tombstones internally depend on the column family serializer, but it is not serialized.
         * Thus deserialize(DataInput, int, Comparator&lt;ByteBuffer&gt;) should be used instead of this method.
         */</comment>
        <function><type><specifier>public</specifier> <name>DeletionInfo</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier>public</specifier> <name>DeletionInfo</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>, <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <assert>assert <expr><name>comparator</name> != null</expr>;</assert>
            <decl_stmt><decl><type><name>DeletionTime</name></type> <name>topLevel</name> <init>= <expr><call><name><name>DeletionTime</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>version</name> &lt; <name><name>MessagingService</name>.<name>VERSION_12</name></name></expr>)</condition><then>
                <return>return <expr>new <call><name>DeletionInfo</name><argument_list>(<argument><expr><name>topLevel</name></expr></argument>, <argument><expr><name><name>IntervalTree</name>.</name>&lt;<name>ByteBuffer</name></expr></argument>, <argument><expr><name>DeletionTime</name></expr></argument>, <argument><expr><name>RangeTombstone</name>&gt;<call><name>emptyTree</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

            <decl_stmt><decl><type><name><name>IntervalTree</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DeletionTime</name></argument>, <argument><name>RangeTombstone</name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><call><name><name>itSerializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>DeletionInfo</name><argument_list>(<argument><expr><name>topLevel</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>DeletionInfo</name></type> <name>deserializeFromSSTable</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>, <param><decl><type><name><name>Descriptor</name>.<name>Version</name></name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>DeletionTime</name></type> <name>topLevel</name> <init>= <expr><call><name><name>DeletionTime</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>DeletionInfo</name><argument_list>(<argument><expr><name>topLevel</name></expr></argument>, <argument><expr><name><name>IntervalTree</name>.</name>&lt;<name>ByteBuffer</name></expr></argument>, <argument><expr><name>DeletionTime</name></expr></argument>, <argument><expr><name>RangeTombstone</name>&gt;<call><name>emptyTree</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>DeletionInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>TypeSizes</name></type> <name>typeSizes</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>DeletionTime</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name><name>info</name>.<name>topLevel</name></name></expr></argument>, <argument><expr><name>typeSizes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>version</name> &lt; <name><name>MessagingService</name>.<name>VERSION_12</name></name></expr>)</condition><then>
                <return>return <expr><name>size</name></expr>;</return></then></if>

            <return>return <expr><name>size</name> + <call><name><name>itSerializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name><name>info</name>.<name>ranges</name></name></expr></argument>, <argument><expr><name>typeSizes</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>DeletionInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name>serializedSize</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>TypeSizes</name>.<name>NATIVE</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}
</unit>
