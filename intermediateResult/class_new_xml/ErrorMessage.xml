<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\messages\ErrorMessage.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffers</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>WriteType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>CBUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>Message</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>ProtocolException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>ServerError</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>MD5Digest</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Message to indicate an error to the client.
 */</comment>
<class><specifier>public</specifier> class <name>ErrorMessage</name> <super><extends>extends <name><name>Message</name>.<name>Response</name></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>ErrorMessage</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ErrorMessage</name></argument>&gt;</argument_list></name></name></type> <name>codec</name> <init>= <expr>new <class><super><name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ErrorMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>ErrorMessage</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>ExceptionCode</name></type> <name>code</name> <init>= <expr><call><name><name>ExceptionCode</name>.<name>fromValue</name></name><argument_list>(<argument><expr><call><name><name>body</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>TransportException</name></type> <name>te</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>code</name></expr>)</condition>
            <block>{
                <case>case <expr><name>SERVER_ERROR</name></expr>:
                    <expr_stmt><expr><name>te</name> = new <call><name>ServerError</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>PROTOCOL_ERROR</name></expr>:
                    <expr_stmt><expr><name>te</name> = new <call><name>ProtocolException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>BAD_CREDENTIALS</name></expr>:
                    <expr_stmt><expr><name>te</name> = new <call><name>AuthenticationException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>UNAVAILABLE</name></expr>:
                    <block>{
                        <decl_stmt><decl><type><name>ConsistencyLevel</name></type> <name>cl</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readConsistencyLevel</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>required</name> <init>= <expr><call><name><name>body</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>alive</name> <init>= <expr><call><name><name>body</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>te</name> = new <call><name>UnavailableException</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>required</name></expr></argument>, <argument><expr><name>alive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block>
                    <break>break;</break>
                </case><case>case <expr><name>OVERLOADED</name></expr>:
                    <expr_stmt><expr><name>te</name> = new <call><name>OverloadedException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>IS_BOOTSTRAPPING</name></expr>:
                    <expr_stmt><expr><name>te</name> = new <call><name>IsBootstrappingException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>TRUNCATE_ERROR</name></expr>:
                    <expr_stmt><expr><name>te</name> = new <call><name>TruncateException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>WRITE_TIMEOUT</name></expr>:
                </case><case>case <expr><name>READ_TIMEOUT</name></expr>:
                    <decl_stmt><decl><type><name>ConsistencyLevel</name></type> <name>cl</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readConsistencyLevel</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>received</name> <init>= <expr><call><name><name>body</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>blockFor</name> <init>= <expr><call><name><name>body</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>code</name> == <name><name>ExceptionCode</name>.<name>WRITE_TIMEOUT</name></name></expr>)</condition><then>
                    <block>{
                        <decl_stmt><decl><type><name>WriteType</name></type> <name>writeType</name> <init>= <expr><call><name><name>Enum</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name><name>WriteType</name>.<name>class</name></name></expr></argument>, <argument><expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>te</name> = new <call><name>WriteTimeoutException</name><argument_list>(<argument><expr><name>writeType</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>received</name></expr></argument>, <argument><expr><name>blockFor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else
                    <block>{
                        <decl_stmt><decl><type><name>byte</name></type> <name>dataPresent</name> <init>= <expr><call><name><name>body</name>.<name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>te</name> = new <call><name>ReadTimeoutException</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>received</name></expr></argument>, <argument><expr><name>blockFor</name></expr></argument>, <argument><expr><name>dataPresent</name> != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break>break;</break>
                </case><case>case <expr><name>UNPREPARED</name></expr>:
                    <block>{
                        <decl_stmt><decl><type><name>MD5Digest</name></type> <name>id</name> <init>= <expr><call><name><name>MD5Digest</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>readBytes</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>te</name> = new <call><name>PreparedQueryNotFoundException</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block>
                    <break>break;</break>
                </case><case>case <expr><name>SYNTAX_ERROR</name></expr>:
                    <expr_stmt><expr><name>te</name> = new <call><name>SyntaxException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>UNAUTHORIZED</name></expr>:
                    <expr_stmt><expr><name>te</name> = new <call><name>UnauthorizedException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>INVALID</name></expr>:
                    <expr_stmt><expr><name>te</name> = new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>CONFIG_ERROR</name></expr>:
                    <expr_stmt><expr><name>te</name> = new <call><name>ConfigurationException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>ALREADY_EXISTS</name></expr>:
                    <decl_stmt><decl><type><name>String</name></type> <name>ksName</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>cfName</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>cfName</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <expr_stmt><expr><name>te</name> = new <call><name>AlreadyExistsException</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else>else
                        <expr_stmt><expr><name>te</name> = new <call><name>AlreadyExistsException</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                    <break>break;</break>
            </case>}</block></switch>
            <return>return <expr>new <call><name>ErrorMessage</name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>ErrorMessage</name></type> <name>msg</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>ccb</name> <init>= <expr><call><name><name>CBUtil</name>.<name>intToCB</name></name><argument_list>(<argument><expr><call><name><name>msg</name>.<name>error</name>.<name>code</name></name><argument_list>()</argument_list></call>.<name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>mcb</name> <init>= <expr><call><name><name>CBUtil</name>.<name>stringToCB</name></name><argument_list>(<argument><expr><call><name><name>msg</name>.<name>error</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>acb</name> <init>= <expr><name><name>ChannelBuffers</name>.<name>EMPTY_BUFFER</name></name></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><call><name><name>msg</name>.<name>error</name>.<name>code</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{
                <case>case <expr><name>UNAVAILABLE</name></expr>:
                    <decl_stmt><decl><type><name>UnavailableException</name></type> <name>ue</name> <init>= <expr>(<name>UnavailableException</name>)<name><name>msg</name>.<name>error</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>ueCl</name> <init>= <expr><call><name><name>CBUtil</name>.<name>consistencyLevelToCB</name></name><argument_list>(<argument><expr><name><name>ue</name>.<name>consistency</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>acb</name> = <call><name><name>ChannelBuffers</name>.<name>buffer</name></name><argument_list>(<argument><expr><call><name><name>ueCl</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call> + 8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>acb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><name>ueCl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>acb</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>ue</name>.<name>required</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>acb</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>ue</name>.<name>alive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>WRITE_TIMEOUT</name></expr>:
                </case><case>case <expr><name>READ_TIMEOUT</name></expr>:
                    <decl_stmt><decl><type><name>RequestTimeoutException</name></type> <name>rte</name> <init>= <expr>(<name>RequestTimeoutException</name>)<name><name>msg</name>.<name>error</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>isWrite</name> <init>= <expr><call><name><name>msg</name>.<name>error</name>.<name>code</name></name><argument_list>()</argument_list></call> == <name><name>ExceptionCode</name>.<name>WRITE_TIMEOUT</name></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>rteCl</name> <init>= <expr><call><name><name>CBUtil</name>.<name>consistencyLevelToCB</name></name><argument_list>(<argument><expr><name><name>rte</name>.<name>consistency</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>writeType</name> <init>= <expr><name>isWrite</name>
                                         ? <call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>((<name>WriteTimeoutException</name>)<name>rte</name>).<call><name><name>writeType</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                         : null</expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>extraSize</name> <init>= <expr><name>isWrite</name>  ? 2 + <call><name><name>writeType</name>.<name>remaining</name></name><argument_list>()</argument_list></call> : 1</expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>acb</name> = <call><name><name>ChannelBuffers</name>.<name>buffer</name></name><argument_list>(<argument><expr><call><name><name>rteCl</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call> + 8 + <name>extraSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>acb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><name>rteCl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>acb</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>rte</name>.<name>received</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>acb</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>rte</name>.<name>blockFor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>isWrite</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>acb</name>.<name>writeShort</name></name><argument_list>(<argument><expr>(<name>short</name>)<call><name><name>writeType</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>acb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><name>writeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else
                    <block>{
                        <expr_stmt><expr><call><name><name>acb</name>.<name>writeByte</name></name><argument_list>(<argument><expr><call>(<name>byte</name>)<argument_list>(<argument><expr>((<name>ReadTimeoutException</name>)<name>rte</name>).<name>dataPresent</name> ? 1 : 0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break>break;</break>
                </case><case>case <expr><name>UNPREPARED</name></expr>:
                    <decl_stmt><decl><type><name>PreparedQueryNotFoundException</name></type> <name>pqnfe</name> <init>= <expr>(<name>PreparedQueryNotFoundException</name>)<name><name>msg</name>.<name>error</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>acb</name> = <call><name><name>CBUtil</name>.<name>bytesToCB</name></name><argument_list>(<argument><expr><name><name>pqnfe</name>.<name>id</name>.<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>ALREADY_EXISTS</name></expr>:
                    <decl_stmt><decl><type><name>AlreadyExistsException</name></type> <name>aee</name> <init>= <expr>(<name>AlreadyExistsException</name>)<name><name>msg</name>.<name>error</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>acb</name> = <call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>stringToCB</name></name><argument_list>(<argument><expr><name><name>aee</name>.<name>ksName</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                       <argument><expr><call><name><name>CBUtil</name>.<name>stringToCB</name></name><argument_list>(<argument><expr><name><name>aee</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </case>}</block></switch>
            <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><name>ccb</name></expr></argument>, <argument><expr><name>mcb</name></expr></argument>, <argument><expr><name>acb</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="line">// We need to figure error codes out (#3979)</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TransportException</name></type> <name>error</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ErrorMessage</name><parameter_list>(<param><decl><type><name>TransportException</name></type> <name>error</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Message</name>.<name>Type</name>.<name>ERROR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>error</name></name> = <name>error</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ErrorMessage</name></type> <name>fromException</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>e</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>e</name> instanceof <name>TransportException</name></expr>)</condition><then>
            <return>return <expr>new <call><name>ErrorMessage</name><argument_list>(<argument><expr>(<name>TransportException</name>)<name>e</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

        <comment type="line">// Unexpected exception</comment>
        <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Unexpected exception during request"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <call><name>ErrorMessage</name><argument_list>(<argument><expr>new <call><name>ServerError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>codec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"ERROR " + <call><name><name>error</name>.<name>code</name></name><argument_list>()</argument_list></call> + ": " + <call><name><name>error</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
