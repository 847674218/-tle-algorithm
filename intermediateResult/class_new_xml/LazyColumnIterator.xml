<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\columniterator\LazyColumnIterator.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name></name>;</package>
<comment type="block">/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */</comment>


<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>AbstractIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamily</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>OnDiskAtom</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>


<comment type="block">/*
 * The goal of this encapsulating OnDiskAtomIterator is to delay the use of
 * the filter until columns are actually queried.
 * The reason for that is get_paged_slice because it change the start of
 * the filter after having seen the first row, and so we must not use the
 * filter before the row data is actually queried. However, mergeIterator
 * needs to "fetch" a row in advance. But all it needs is the key and so
 * this IColumnIterator make sure getKey() can be called without triggering
 * the use of the filter itself.
 */</comment>
<class><specifier>public</specifier> class <name>LazyColumnIterator</name> <super><extends>extends <name><name>AbstractIterator</name><argument_list>&lt;<argument><name>OnDiskAtom</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>OnDiskAtomIterator</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DecoratedKey</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IColumnIteratorFactory</name></type> <name>subIteratorFactory</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>OnDiskAtomIterator</name></type> <name>subIterator</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LazyColumnIterator</name><parameter_list>(<param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>, <param><decl><type><name>IColumnIteratorFactory</name></type> <name>subIteratorFactory</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>subIteratorFactory</name></name> = <name>subIteratorFactory</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>OnDiskAtomIterator</name></type> <name>getSubIterator</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>subIterator</name> == null</expr>)</condition><then>
            <expr_stmt><expr><name>subIterator</name> = <call><name><name>subIteratorFactory</name>.<name>create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>subIterator</name></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>OnDiskAtom</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>getSubIterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>subIterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>subIterator</name>.<name>next</name></name><argument_list>()</argument_list></call> : <call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnFamily</name></type> <name>getColumnFamily</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getSubIterator</name><argument_list>()</argument_list></call>.<call><name>getColumnFamily</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>getKey</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>key</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>subIterator</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>subIterator</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>
}</block></class>
</unit>
