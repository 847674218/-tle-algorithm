<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\IntervalTree.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Constructor</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Joiner</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>AbstractIterator</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Iterators</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Ordering</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>

<class><specifier>public</specifier> class <name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name> <extends>extends <name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name> <super><implements>implements <name><name>Iterable</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>IntervalTree</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr>"unchecked"</expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IntervalTree</name></type> <name>EMPTY_TREE</name> <init>= <expr>new <call><name>IntervalTree</name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IntervalNode</name></type> <name>head</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Ordering</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>minOrdering</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Ordering</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>maxOrdering</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>IntervalTree</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>intervals</name></decl></param>, <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>comparator</name></name> = <name>comparator</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>IntervalTree</name></type> <name>it</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minOrdering</name></name> = new <class><super><name><name>Ordering</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>I</name></type> <name>interval1</name></decl></param>, <param><decl><type><name>I</name></type> <name>interval2</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr><call><name><name>it</name>.<name>comparePoints</name></name><argument_list>(<argument><expr><name><name>interval1</name>.<name>min</name></name></expr></argument>, <argument><expr><name><name>interval2</name>.<name>min</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxOrdering</name></name> = new <class><super><name><name>Ordering</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>I</name></type> <name>interval1</name></decl></param>, <param><decl><type><name>I</name></type> <name>interval2</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr><call><name><name>it</name>.<name>comparePoints</name></name><argument_list>(<argument><expr><name><name>interval1</name>.<name>max</name></name></expr></argument>, <argument><expr><name><name>interval2</name>.<name>max</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>head</name></name> = <name>intervals</name> == null || <call><name><name>intervals</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? null : new <call><name>IntervalNode</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>count</name></name> = <name>intervals</name> == null ? 0 : <call><name><name>intervals</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name> <extends>extends <name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list> <name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name></type> <name>build</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>intervals</name></decl></param>, <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>intervals</name> == null || <call><name><name>intervals</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>emptyTree</name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <return>return <expr>new <call><name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>intervals</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>C</name> <extends>extends <name><name>Comparable</name><argument_list>&lt;<argument><name>C</name></argument>&gt;</argument_list></name></extends></argument>, <argument><name>D</name></argument>, <argument><name>I</name> <extends>extends <name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list> <name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name></type> <name>build</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>intervals</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>intervals</name> == null || <call><name><name>intervals</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>emptyTree</name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <return>return <expr>new <call><name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>intervals</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name> <extends>extends <name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list> <name><name>Serializer</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name></type> <name>serializer</name><parameter_list>(<param><decl><type><name><name>ISerializer</name><argument_list>&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>pointSerializer</name></decl></param>, <param><decl><type><name><name>ISerializer</name><argument_list>&lt;<argument><name>D</name></argument>&gt;</argument_list></name></type> <name>dataSerializer</name></decl></param>, <param><decl><type><name><name>Constructor</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>constructor</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>Serializer</name><argument_list>(<argument><expr><name>pointSerializer</name></expr></argument>, <argument><expr><name>dataSerializer</name></expr></argument>, <argument><expr><name>constructor</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr>"unchecked"</expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name> <extends>extends <name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list> <name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name></type> <name>emptyTree</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>(<name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name>)<name>EMPTY_TREE</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>comparator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>comparator</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>intervalCount</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>count</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>head</name> == null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>C</name></type> <name>max</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>head</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

        <return>return <expr><name><name>head</name>.<name>high</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>C</name></type> <name>min</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>head</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

        <return>return <expr><name><name>head</name>.<name>low</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>D</name></argument>&gt;</argument_list></name></type> <name>search</name><parameter_list>(<param><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>searchInterval</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>head</name> == null</expr>)</condition><then>
            <return>return <expr><name><name>Collections</name>.</name>&lt;<name>D</name>&gt;<call><name>emptyList</name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>D</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>D</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>head</name>.<name>searchInternal</name></name><argument_list>(<argument><expr><name>searchInterval</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>results</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>D</name></argument>&gt;</argument_list></name></type> <name>search</name><parameter_list>(<param><decl><type><name>C</name></type> <name>point</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>search</name><argument_list>(<argument><expr><name><name>Interval</name>.</name>&lt;<name>C</name></expr></argument>, <argument><expr><name>D</name>&gt;<call><name>create</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>head</name> == null</expr>)</condition><then>
            <return>return <expr><name><name>Iterators</name>.</name>&lt;<name>I</name>&gt;<call><name>emptyIterator</name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <return>return <expr>new <call><name>TreeIterator</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"&lt;" + <call><name><name>Joiner</name>.<name>on</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call>.<call><name>join</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> + "&gt;"</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if<condition>(<expr>!(<name>o</name> instanceof <name>IntervalTree</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <decl_stmt><decl><type><name>IntervalTree</name></type> <name>that</name> <init>= <expr>(<name>IntervalTree</name>)<name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Iterators</name>.<name>elementsEqual</name></name><argument_list>(<argument><expr><call><name>iterator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>that</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>comparator</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>interval</name> <range>: <expr><name>this</name></expr></range></decl></init>)
            <expr_stmt><expr><name>result</name> = 31 * <name>result</name> + <call><name><name>interval</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>comparePoints</name><parameter_list>(<param><decl><type><name>C</name></type> <name>point1</name></decl></param>, <param><decl><type><name>C</name></type> <name>point2</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>comparator</name> != null</expr>)</condition><then>
        <block>{
            <return>return <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name>point1</name></expr></argument>, <argument><expr><name>point2</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <assert>assert <expr><name>point1</name> instanceof <name>Comparable</name></expr>;</assert>
            <assert>assert <expr><name>point2</name> instanceof <name>Comparable</name></expr>;</assert>
            <return>return <expr>((<name><name>Comparable</name><argument_list>&lt;<argument><name>C</name></argument>&gt;</argument_list></name>)<name>point1</name>).<call><name>compareTo</name><argument_list>(<argument><expr><name>point2</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>encloses</name><parameter_list>(<param><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>enclosing</name></decl></param>, <param><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>enclosed</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>comparePoints</name><argument_list>(<argument><expr><name><name>enclosing</name>.<name>min</name></name></expr></argument>, <argument><expr><name><name>enclosed</name>.<name>min</name></name></expr></argument>)</argument_list></call> &lt;= 0
            &amp;&amp; <call><name>comparePoints</name><argument_list>(<argument><expr><name><name>enclosing</name>.<name>max</name></name></expr></argument>, <argument><expr><name><name>enclosed</name>.<name>max</name></name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>interval</name></decl></param>, <param><decl><type><name>C</name></type> <name>point</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>comparePoints</name><argument_list>(<argument><expr><name><name>interval</name>.<name>min</name></name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call> &lt;= 0
            &amp;&amp; <call><name>comparePoints</name><argument_list>(<argument><expr><name><name>interval</name>.<name>max</name></name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>intersects</name><parameter_list>(<param><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>interval1</name></decl></param>, <param><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>interval2</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>contains</name><argument_list>(<argument><expr><name>interval1</name></expr></argument>, <argument><expr><name><name>interval2</name>.<name>min</name></name></expr></argument>)</argument_list></call> || <call><name>contains</name><argument_list>(<argument><expr><name>interval1</name></expr></argument>, <argument><expr><name><name>interval2</name>.<name>max</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> class <name>IntervalNode</name>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>C</name></type> <name>center</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>C</name></type> <name>low</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>C</name></type> <name>high</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>intersectsLeft</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>intersectsRight</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>IntervalNode</name></type> <name>left</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>IntervalNode</name></type> <name>right</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>IntervalNode</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>toBisect</name></decl></param>)</parameter_list>
        <block>{
            <assert>assert <expr>!<call><name><name>toBisect</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</assert>
            <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr>"Creating IntervalNode from {}"</expr></argument>, <argument><expr><name>toBisect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Building IntervalTree with one interval will be a reasonably</comment>
            <comment type="line">// common case for range tombstones, so it's worth optimizing</comment>
            <if>if <condition>(<expr><call><name><name>toBisect</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1</expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>I</name></type> <name>interval</name> <init>= <expr><call><name><name>toBisect</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>low</name> = <name><name>interval</name>.<name>min</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>center</name> = <name><name>interval</name>.<name>max</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>high</name> = <name><name>interval</name>.<name>max</name></name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>l</name> <init>= <expr><call><name><name>Collections</name>.<name>singletonList</name></name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>intersectsLeft</name> = <name>l</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>intersectsRight</name> = <name>l</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>left</name> = null</expr>;</expr_stmt>
                <expr_stmt><expr><name>right</name> = null</expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <comment type="line">// Find min, median and max</comment>
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>allEndpoints</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>C</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>toBisect</name>.<name>size</name></name><argument_list>()</argument_list></call> * 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>I</name></type> <name>interval</name> <range>: <expr><name>toBisect</name></expr></range></decl></init>)
                <block>{
                    <assert>assert <expr>(<name>comparator</name> == null ? ((<name>Comparable</name>)<name><name>interval</name>.<name>min</name></name>).<call><name>compareTo</name><argument_list>(<argument><expr><name><name>interval</name>.<name>max</name></name></expr></argument>)</argument_list></call>
                                               : <call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>min</name></name></expr></argument>, <argument><expr><name><name>interval</name>.<name>max</name></name></expr></argument>)</argument_list></call>) &lt;= 0 : "Interval min &gt; max"</expr>;</assert>
                    <expr_stmt><expr><call><name><name>allEndpoints</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>allEndpoints</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <if>if <condition>(<expr><name>comparator</name> != null</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>allEndpoints</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else>else
                    <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr>(<name><name>List</name><argument_list>&lt;<argument><name>Comparable</name></argument>&gt;</argument_list></name>)<name>allEndpoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

                <expr_stmt><expr><name>low</name> = <call><name><name>allEndpoints</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>center</name> = <call><name><name>allEndpoints</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>toBisect</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>high</name> = <call><name><name>allEndpoints</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>allEndpoints</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Separate interval in intersecting center, left of center and right of center</comment>
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>intersects</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>leftSegment</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>rightSegment</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for (<init><decl><type><name>I</name></type> <name>candidate</name> <range>: <expr><name>toBisect</name></expr></range></decl></init>)
                <block>{
                    <if>if <condition>(<expr><call><name>comparePoints</name><argument_list>(<argument><expr><name><name>candidate</name>.<name>max</name></name></expr></argument>, <argument><expr><name>center</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>leftSegment</name>.<name>add</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else>else <if>if <condition>(<expr><call><name>comparePoints</name><argument_list>(<argument><expr><name><name>candidate</name>.<name>min</name></name></expr></argument>, <argument><expr><name>center</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>rightSegment</name>.<name>add</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else>else
                        <expr_stmt><expr><call><name><name>intersects</name>.<name>add</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
                }</block></for>

                <expr_stmt><expr><name>intersectsLeft</name> = <call><name><name>minOrdering</name>.<name>sortedCopy</name></name><argument_list>(<argument><expr><name>intersects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>intersectsRight</name> = <call><name><name>maxOrdering</name>.<name>reverse</name></name><argument_list>()</argument_list></call>.<call><name>sortedCopy</name><argument_list>(<argument><expr><name>intersects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>left</name> = <call><name><name>leftSegment</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? null : new <call><name>IntervalNode</name><argument_list>(<argument><expr><name>leftSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>right</name> = <call><name><name>rightSegment</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? null : new <call><name>IntervalNode</name><argument_list>(<argument><expr><name>rightSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <assert>assert <expr>(<call><name><name>intersects</name>.<name>size</name></name><argument_list>()</argument_list></call> + <call><name><name>leftSegment</name>.<name>size</name></name><argument_list>()</argument_list></call> + <call><name><name>rightSegment</name>.<name>size</name></name><argument_list>()</argument_list></call>) == <call><name><name>toBisect</name>.<name>size</name></name><argument_list>()</argument_list></call> :
                        "intersects (" + <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>intersects</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> +
                        ") + leftSegment (" + <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>leftSegment</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> +
                        ") + rightSegment (" + <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>rightSegment</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> +
                        ") != toBisect (" + <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>toBisect</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + ")"</expr>;</assert>
            }</block></else></if>
        }</block></constructor>

        <function><type><name>void</name></type> <name>searchInternal</name><parameter_list>(<param><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>searchInterval</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>D</name></argument>&gt;</argument_list></name></type> <name>results</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><call><name>comparePoints</name><argument_list>(<argument><expr><name><name>searchInterval</name>.<name>max</name></name></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call> &lt; 0 || <call><name>comparePoints</name><argument_list>(<argument><expr><name><name>searchInterval</name>.<name>min</name></name></expr></argument>, <argument><expr><name>high</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
                <return>return;</return></then></if>

            <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>searchInterval</name></expr></argument>, <argument><expr><name>center</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <comment type="line">// Adds every interval contained in this node to the result set then search left and right for further</comment>
                <comment type="line">// overlapping intervals</comment>
                <for>for (<init><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>interval</name> <range>: <expr><name>intersectsLeft</name></expr></range></decl></init>)
                    <expr_stmt><expr><call><name><name>results</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

                <if>if <condition>(<expr><name>left</name> != null</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>left</name>.<name>searchInternal</name></name><argument_list>(<argument><expr><name>searchInterval</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <if>if <condition>(<expr><name>right</name> != null</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>right</name>.<name>searchInternal</name></name><argument_list>(<argument><expr><name>searchInterval</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name>comparePoints</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name><name>searchInterval</name>.<name>min</name></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <block>{
                <comment type="line">// Adds intervals i in intersects right as long as i.max &gt;= searchInterval.min</comment>
                <comment type="line">// then search right</comment>
                <for>for (<init><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>interval</name> <range>: <expr><name>intersectsRight</name></expr></range></decl></init>)
                <block>{
                    <if>if <condition>(<expr><call><name>comparePoints</name><argument_list>(<argument><expr><name><name>interval</name>.<name>max</name></name></expr></argument>, <argument><expr><name><name>searchInterval</name>.<name>min</name></name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>results</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else>else
                        <break>break;</break></else></if>
                }</block></for>
                <if>if <condition>(<expr><name>right</name> != null</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>right</name>.<name>searchInternal</name></name><argument_list>(<argument><expr><name>searchInterval</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then>
            <else>else
            <block>{
                <assert>assert <expr><call><name>comparePoints</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name><name>searchInterval</name>.<name>max</name></name></expr></argument>)</argument_list></call> &gt; 0</expr>;</assert>
                <comment type="line">// Adds intervals i in intersects left as long as i.min &gt;= searchInterval.max</comment>
                <comment type="line">// then search left</comment>
                <for>for (<init><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>interval</name> <range>: <expr><name>intersectsLeft</name></expr></range></decl></init>)
                <block>{
                    <if>if <condition>(<expr><call><name>comparePoints</name><argument_list>(<argument><expr><name><name>interval</name>.<name>min</name></name></expr></argument>, <argument><expr><name><name>searchInterval</name>.<name>max</name></name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>results</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else>else
                        <break>break;</break></else></if>
                }</block></for>
                <if>if <condition>(<expr><name>left</name> != null</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>left</name>.<name>searchInternal</name></name><argument_list>(<argument><expr><name>searchInterval</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></else></if></else></if>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>TreeIterator</name> <super><extends>extends <name><name>AbstractIterator</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Deque</name><argument_list>&lt;<argument><name>IntervalNode</name></argument>&gt;</argument_list></name></type> <name>stack</name> <init>= <expr>new <call><name><name>ArrayDeque</name><argument_list>&lt;<argument><name>IntervalNode</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>current</name></decl>;</decl_stmt>

        <constructor><name>TreeIterator</name><parameter_list>(<param><decl><type><name>IntervalNode</name></type> <name>node</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>gotoMinOf</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>protected</specifier> <name>I</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>current</name> != null &amp;&amp; <call><name><name>current</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr><call><name><name>current</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>

            <decl_stmt><decl><type><name>IntervalNode</name></type> <name>node</name> <init>= <expr><call><name><name>stack</name>.<name>pollFirst</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>node</name> == null</expr>)</condition><then>
                <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></then></if>

            <expr_stmt><expr><name>current</name> = <call><name><name>node</name>.<name>intersectsLeft</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// We know this is the smaller not returned yet, but before doing</comment>
            <comment type="line">// its parent, we must do everyone on it's right.</comment>
            <expr_stmt><expr><call><name>gotoMinOf</name><argument_list>(<argument><expr><name><name>node</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><call><name>computeNext</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>gotoMinOf</name><parameter_list>(<param><decl><type><name>IntervalNode</name></type> <name>node</name></decl></param>)</parameter_list>
        <block>{
            <while>while <condition>(<expr><name>node</name> != null</expr>)</condition>
            <block>{
                <expr_stmt><expr><call><name><name>stack</name>.<name>offerFirst</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>node</name> = <name><name>node</name>.<name>left</name></name></expr>;</expr_stmt>
            }</block></while>

        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name><name>Serializer</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name> <extends>extends <name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ISerializer</name><argument_list>&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>pointSerializer</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ISerializer</name><argument_list>&lt;<argument><name>D</name></argument>&gt;</argument_list></name></type> <name>dataSerializer</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Constructor</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>constructor</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Serializer</name><parameter_list>(<param><decl><type><name><name>ISerializer</name><argument_list>&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>pointSerializer</name></decl></param>, <param><decl><type><name><name>ISerializer</name><argument_list>&lt;<argument><name>D</name></argument>&gt;</argument_list></name></type> <name>dataSerializer</name></decl></param>, <param><decl><type><name><name>Constructor</name><argument_list>&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>constructor</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>pointSerializer</name></name> = <name>pointSerializer</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>dataSerializer</name></name> = <name>dataSerializer</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>constructor</name></name> = <name>constructor</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name></type> <name>it</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>it</name>.<name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>interval</name> <range>: <expr><name>it</name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>pointSerializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>min</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pointSerializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>max</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dataSerializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>data</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Deserialize an IntervalTree whose keys use the natural ordering.
         * Use deserialize(DataInput, int, Comparator) instead if the interval
         * tree is to use a custom comparator, as the comparator is *not*
         * serialized.
         */</comment>
        <function><type><specifier>public</specifier> <name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <return>return <expr><call><name>deserialize</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>, <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <try>try
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>intervals</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <block>{
                    <decl_stmt><decl><type><name>C</name></type> <name>min</name> <init>= <expr><call><name><name>pointSerializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>C</name></type> <name>max</name> <init>= <expr><call><name><name>pointSerializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>D</name></type> <name>data</name> <init>= <expr><call><name><name>dataSerializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>intervals</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>constructor</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <return>return <expr>new <call><name>IntervalTree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>InstantiationException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name></type> <name>it</name></decl></param>, <param><decl><type><name>TypeSizes</name></type> <name>typeSizes</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>&gt;</argument_list></name></type> <name>interval</name> <range>: <expr><name>it</name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><name>size</name> += <call><name><name>pointSerializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>min</name></name></expr></argument>, <argument><expr><name>typeSizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name> += <call><name><name>pointSerializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>max</name></name></expr></argument>, <argument><expr><name>typeSizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name> += <call><name><name>dataSerializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>data</name></name></expr></argument>, <argument><expr><name>typeSizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr><name>size</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name><name>IntervalTree</name><argument_list>&lt;<argument><name>C</name></argument>, <argument><name>D</name></argument>, <argument><name>I</name></argument>&gt;</argument_list></name></type> <name>it</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name>serializedSize</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>TypeSizes</name>.<name>NATIVE</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
