<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\concurrent\StageManager.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>EnumMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name></name>.*;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>.*;</import>


<comment type="block" format="javadoc">/**
 * This class manages executor services for Messages recieved: each Message requests
 * running on a specific "stage" for concurrency control; hence the Map approach,
 * even though stages (executors) are not created dynamically.
 */</comment>
<class><specifier>public</specifier> class <name>StageManager</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>StageManager</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>EnumMap</name><argument_list>&lt;<argument><name>Stage</name></argument>, <argument><name>ThreadPoolExecutor</name></argument>&gt;</argument_list></name></type> <name>stages</name> <init>= <expr>new <call><name><name>EnumMap</name><argument_list>&lt;<argument><name>Stage</name></argument>, <argument><name>ThreadPoolExecutor</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>KEEPALIVE</name> <init>= <expr>60</expr></init></decl>;</decl_stmt> <comment type="line">// seconds to keep "extra" threads alive for when idle</comment>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_REPLICATE_ON_WRITE_TASKS</name> <init>= <expr>1024 * <call><name><name>FBUtilities</name>.<name>getAvailableProcessors</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr>static
    <block>{
        <expr><call><name><name>stages</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>MUTATION</name></name></expr></argument>, <argument><expr><call><name>multiThreadedConfigurableStage</name><argument_list>(<argument><expr><name><name>Stage</name>.<name>MUTATION</name></name></expr></argument>, <argument><expr><call><name>getConcurrentWriters</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>stages</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>READ</name></name></expr></argument>, <argument><expr><call><name>multiThreadedConfigurableStage</name><argument_list>(<argument><expr><name><name>Stage</name>.<name>READ</name></name></expr></argument>, <argument><expr><call><name>getConcurrentReaders</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>stages</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>REQUEST_RESPONSE</name></name></expr></argument>, <argument><expr><call><name>multiThreadedStage</name><argument_list>(<argument><expr><name><name>Stage</name>.<name>REQUEST_RESPONSE</name></name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>getAvailableProcessors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>stages</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>INTERNAL_RESPONSE</name></name></expr></argument>, <argument><expr><call><name>multiThreadedStage</name><argument_list>(<argument><expr><name><name>Stage</name>.<name>INTERNAL_RESPONSE</name></name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>getAvailableProcessors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>stages</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>REPLICATE_ON_WRITE</name></name></expr></argument>, <argument><expr><call><name>multiThreadedConfigurableStage</name><argument_list>(<argument><expr><name><name>Stage</name>.<name>REPLICATE_ON_WRITE</name></name></expr></argument>, <argument><expr><call><name>getConcurrentReplicators</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MAX_REPLICATE_ON_WRITE_TASKS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <comment type="line">// the rest are all single-threaded</comment>
        <expr><call><name><name>stages</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>GOSSIP</name></name></expr></argument>, <argument><expr>new <call><name>JMXEnabledThreadPoolExecutor</name><argument_list>(<argument><expr><name><name>Stage</name>.<name>GOSSIP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>stages</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>ANTI_ENTROPY</name></name></expr></argument>, <argument><expr>new <call><name>JMXEnabledThreadPoolExecutor</name><argument_list>(<argument><expr><name><name>Stage</name>.<name>ANTI_ENTROPY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>stages</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>MIGRATION</name></name></expr></argument>, <argument><expr>new <call><name>JMXEnabledThreadPoolExecutor</name><argument_list>(<argument><expr><name><name>Stage</name>.<name>MIGRATION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>stages</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>MISC</name></name></expr></argument>, <argument><expr>new <call><name>JMXEnabledThreadPoolExecutor</name><argument_list>(<argument><expr><name><name>Stage</name>.<name>MISC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>stages</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>READ_REPAIR</name></name></expr></argument>, <argument><expr><call><name>multiThreadedStage</name><argument_list>(<argument><expr><name><name>Stage</name>.<name>READ_REPAIR</name></name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>getAvailableProcessors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>stages</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>TRACING</name></name></expr></argument>, <argument><expr><call><name>tracingExecutor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    private static <name>ThreadPoolExecutor</name> <call><name>tracingExecutor</name><argument_list>()</argument_list></call>
    <block>{
        <expr><name>RejectedExecutionHandler</name> <name>reh</name> = new <class><super><name>RejectedExecutionHandler</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>rejectedExecution</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>r</name></decl></param>, <param><decl><type><name>ThreadPoolExecutor</name></type> <name>executor</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>incrementDroppedMessages</name><argument_list>(<argument><expr><name><name>MessagingService</name>.<name>Verb</name>.<name>_TRACE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/></block></function></block></class></expr>}</block></expr></expr_stmt>
        }</block></class><empty_stmt>;</empty_stmt>
        <return>return <expr>new <call><name>ExecuteOnlyExecutor</name><argument_list>(<argument><expr>1</expr></argument>,
                                       <argument><expr>1</expr></argument>,
                                       <argument><expr><name>KEEPALIVE</name></expr></argument>,
                                       <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>,
                                       <argument><expr>new <call><name><name>ArrayBlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr>new <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><call><name><name>Stage</name>.<name>TRACING</name>.<name>getJmxName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>reh</name></expr></argument>)</argument_list></call></expr>;</return>
    }

    private <function><type><specifier>static</specifier> <name>ThreadPoolExecutor</name></type> <name>multiThreadedStage</name><parameter_list>(<param><decl><type><name>Stage</name></type> <name>stage</name></decl></param>, <param><decl><type><name>int</name></type> <name>numThreads</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>JMXEnabledThreadPoolExecutor</name><argument_list>(<argument><expr><name>numThreads</name></expr></argument>,
                                                <argument><expr><name>KEEPALIVE</name></expr></argument>,
                                                <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>,
                                                <argument><expr>new <call><name><name>LinkedBlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr>new <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><call><name><name>stage</name>.<name>getJmxName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>stage</name>.<name>getJmxType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ThreadPoolExecutor</name></type> <name>multiThreadedConfigurableStage</name><parameter_list>(<param><decl><type><name>Stage</name></type> <name>stage</name></decl></param>, <param><decl><type><name>int</name></type> <name>numThreads</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>JMXConfigurableThreadPoolExecutor</name><argument_list>(<argument><expr><name>numThreads</name></expr></argument>,
                                                     <argument><expr><name>KEEPALIVE</name></expr></argument>,
                                                     <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>,
                                                     <argument><expr>new <call><name><name>LinkedBlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                                                     <argument><expr>new <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><call><name><name>stage</name>.<name>getJmxName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                     <argument><expr><call><name><name>stage</name>.<name>getJmxType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ThreadPoolExecutor</name></type> <name>multiThreadedConfigurableStage</name><parameter_list>(<param><decl><type><name>Stage</name></type> <name>stage</name></decl></param>, <param><decl><type><name>int</name></type> <name>numThreads</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxTasksBeforeBlock</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>JMXConfigurableThreadPoolExecutor</name><argument_list>(<argument><expr><name>numThreads</name></expr></argument>,
                                                     <argument><expr><name>KEEPALIVE</name></expr></argument>,
                                                     <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>,
                                                     <argument><expr>new <call><name><name>LinkedBlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>maxTasksBeforeBlock</name></expr></argument>)</argument_list></call></expr></argument>,
                                                     <argument><expr>new <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><call><name><name>stage</name>.<name>getJmxName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                     <argument><expr><call><name><name>stage</name>.<name>getJmxType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Retrieve a stage from the StageManager
     * @param stage name of the stage to be retrieved.
    */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ThreadPoolExecutor</name></type> <name>getStage</name><parameter_list>(<param><decl><type><name>Stage</name></type> <name>stage</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>stages</name>.<name>get</name></name><argument_list>(<argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * This method shuts down all registered stages.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>shutdownNow</name><parameter_list>()</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>Stage</name></type> <name>stage</name> <range>: <expr><call><name><name>Stage</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>StageManager</name>.<name>stages</name>.<name>get</name></name><argument_list>(<argument><expr><name>stage</name></expr></argument>)</argument_list></call>.<call><name>shutdownNow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * A TPE that disallows submit so that we don't need to worry about unwrapping exceptions on the
     * tracing stage.  See CASSANDRA-1123 for background.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ExecuteOnlyExecutor</name> <super><extends>extends <name>ThreadPoolExecutor</name></extends></super>
    <block>{
        <constructor><specifier>public</specifier> <name>ExecuteOnlyExecutor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>corePoolSize</name></decl></param>, <param><decl><type><name>int</name></type> <name>maximumPoolSize</name></decl></param>, <param><decl><type><name>long</name></type> <name>keepAliveTime</name></decl></param>, <param><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></param>, <param><decl><type><name><name>BlockingQueue</name><argument_list>&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>workQueue</name></decl></param>, <param><decl><type><name>ThreadFactory</name></type> <name>threadFactory</name></decl></param>, <param><decl><type><name>RejectedExecutionHandler</name></type> <name>handler</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>corePoolSize</name></expr></argument>, <argument><expr><name>maximumPoolSize</name></expr></argument>, <argument><expr><name>keepAliveTime</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>workQueue</name></expr></argument>, <argument><expr><name>threadFactory</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name><name>Future</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>submit</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>task</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>super</name>.<name>submit</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name><name>Future</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>submit</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>task</name></decl></param>, <param><decl><type><name>T</name></type> <name>result</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>super</name>.<name>submit</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name><name>Future</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>submit</name><parameter_list>(<param><decl><type><name><name>Callable</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>task</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>super</name>.<name>submit</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}
</unit>
