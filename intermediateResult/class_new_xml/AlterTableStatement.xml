<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\statements\AlterTableStatement.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>statements</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>Permission</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ColumnDefinition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>ClientState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>MigrationManager</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>ResultMessage</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ThriftValidation</name>.<name>validateColumnFamily</name></name>;</import>

<class><specifier>public</specifier> class <name>AlterTableStatement</name> <super><extends>extends <name>SchemaAlteringStatement</name></extends></super>
<block>{
    <enum><specifier>public</specifier> <specifier>static</specifier> enum <name>Type</name>
    <block>{
        <decl><name>ADD</name></decl>, <decl><name>ALTER</name></decl>, <decl><name>DROP</name></decl>, <decl><name>OPTS</name></decl>, <decl><name>RENAME</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Type</name></type> <name>oType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ParsedType</name></type> <name>validator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ColumnIdentifier</name></type> <name>columnName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CFPropDefs</name></type> <name>cfProps</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>renames</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AlterTableStatement</name><parameter_list>(<param><decl><type><name>CFName</name></type> <name>name</name></decl></param>, <param><decl><type><name>Type</name></type> <name>type</name></decl></param>, <param><decl><type><name>ColumnIdentifier</name></type> <name>columnName</name></decl></param>, <param><decl><type><name>ParsedType</name></type> <name>validator</name></decl></param>, <param><decl><type><name>CFPropDefs</name></type> <name>cfProps</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>renames</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>oType</name></name> = <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columnName</name></name> = <name>columnName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>validator</name></name> = <name>validator</name></expr>;</expr_stmt> <comment type="line">// used only for ADD/ALTER commands</comment>
        <expr_stmt><expr><name><name>this</name>.<name>cfProps</name></name> = <name>cfProps</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>renames</name></name> = <name>renames</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkAccess</name><parameter_list>(<param><decl><type><name>ClientState</name></type> <name>state</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnauthorizedException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>state</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><call><name>keyspace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>columnFamily</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Permission</name>.<name>ALTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>announceMigration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>meta</name> <init>= <expr><call><name>validateColumnFamily</name><argument_list>(<argument><expr><call><name>keyspace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>columnFamily</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfm</name> <init>= <expr><call><name><name>meta</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>CFDefinition</name></type> <name>cfDef</name> <init>= <expr><call><name><name>meta</name>.<name>getCfDef</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>name</name> <init>= <expr><name>columnName</name> == null ? null : <call><name><name>cfDef</name>.<name>get</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>oType</name></expr>)</condition>
        <block>{
            <case>case <expr><name>ADD</name></expr>:
                <if>if <condition>(<expr><name><name>cfDef</name>.<name>isCompact</name></name></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Cannot add new column to a compact CF"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <if>if <condition>(<expr><name>name</name> != null</expr>)</condition><then>
                <block>{
                    <switch>switch <condition>(<expr><name><name>name</name>.<name>kind</name></name></expr>)</condition>
                    <block>{
                        <case>case <expr><name>KEY_ALIAS</name></expr>:
                        </case><case>case <expr><name>COLUMN_ALIAS</name></expr>:
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid column name %s because it conflicts with a PRIMARY KEY part"</expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                        </case><case>case <expr><name>COLUMN_METADATA</name></expr>:
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid column name %s because it conflicts with an existing column"</expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </case>}</block></switch>
                }</block></then></if>

                <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <init>= <expr><call><name><name>validator</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>type</name> instanceof <name>CollectionType</name></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr>!<name><name>cfDef</name>.<name>isComposite</name></name></expr>)</condition><then>
                        <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Cannot use collection types with non-composite PRIMARY KEY"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

                    <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>CollectionType</name></argument>&gt;</argument_list></name></type> <name>collections</name> <init>= <expr><name><name>cfDef</name>.<name>hasCollections</name></name>
                                                                ? new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>CollectionType</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>cfDef</name>.<name>getCollectionType</name></name><argument_list>()</argument_list></call>.<name>defined</name></expr></argument>)</argument_list></call>
                                                                : new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>CollectionType</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>collections</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>columnName</name>.<name>key</name></name></expr></argument>, <argument><expr>(<name>CollectionType</name>)<name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ColumnToCollectionType</name></type> <name>newColType</name> <init>= <expr><call><name><name>ColumnToCollectionType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>collections</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ctypes</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>((<name>CompositeType</name>)<name><name>cfm</name>.<name>comparator</name></name>).<name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>cfDef</name>.<name>hasCollections</name></name></expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>ctypes</name>.<name>set</name></name><argument_list>(<argument><expr><call><name><name>ctypes</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>, <argument><expr><name>newColType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else>else
                        <expr_stmt><expr><call><name><name>ctypes</name>.<name>add</name></name><argument_list>(<argument><expr><name>newColType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                    <expr_stmt><expr><name><name>cfm</name>.<name>comparator</name></name> = <call><name><name>CompositeType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>ctypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name>Integer</name></type> <name>componentIndex</name> <init>= <expr><name><name>cfDef</name>.<name>isComposite</name></name>
                                       ? ((<name>CompositeType</name>)<name><name>meta</name>.<name>comparator</name></name>).<call><name><name>types</name>.<name>size</name></name><argument_list>()</argument_list></call> - (<name><name>cfDef</name>.<name>hasCollections</name></name> ? 2 : 1)
                                       : null</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cfm</name>.<name>addColumnDefinition</name></name><argument_list>(<argument><expr>new <call><name>ColumnDefinition</name><argument_list>(<argument><expr><name><name>columnName</name>.<name>key</name></name></expr></argument>,
                                                             <argument><expr><name>type</name></expr></argument>,
                                                             <argument><expr>null</expr></argument>,
                                                             <argument><expr>null</expr></argument>,
                                                             <argument><expr>null</expr></argument>,
                                                             <argument><expr><name>componentIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            </case><case>case <expr><name>ALTER</name></expr>:
                <if>if <condition>(<expr><name>name</name> == null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Column %s was not found in table %s"</expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><call><name>columnFamily</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <switch>switch <condition>(<expr><name><name>name</name>.<name>kind</name></name></expr>)</condition>
                <block>{
                    <case>case <expr><name>KEY_ALIAS</name></expr>:
                        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>newType</name> <init>= <expr><call><name><name>validator</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>newType</name> instanceof <name>CounterColumnType</name></expr>)</condition><then>
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"counter type is not supported for PRIMARY KEY part %s"</expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                        <if>if <condition>(<expr><name><name>cfDef</name>.<name>hasCompositeKey</name></name></expr>)</condition><then>
                        <block>{
                            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>newTypes</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>((<name>CompositeType</name>) <call><name><name>cfm</name>.<name>getKeyValidator</name></name><argument_list>()</argument_list></call>).<name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>newTypes</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>position</name></name></expr></argument>, <argument><expr><name>newType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>cfm</name>.<name>keyValidator</name></name><argument_list>(<argument><expr><call><name><name>CompositeType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>newTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else>else
                        <block>{
                            <expr_stmt><expr><call><name><name>cfm</name>.<name>keyValidator</name></name><argument_list>(<argument><expr><name>newType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                        <break>break;</break>
                    </case><case>case <expr><name>COLUMN_ALIAS</name></expr>:
                        <assert>assert <expr><name><name>cfDef</name>.<name>isComposite</name></name></expr>;</assert>
                        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>newTypes</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>((<name>CompositeType</name>) <name><name>cfm</name>.<name>comparator</name></name>).<name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>newTypes</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>position</name></name></expr></argument>, <argument><expr><call><name><name>validator</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>cfm</name>.<name>comparator</name></name> = <call><name><name>CompositeType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>newTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr><name>VALUE_ALIAS</name></expr>:
                        <expr_stmt><expr><call><name><name>cfm</name>.<name>defaultValidator</name></name><argument_list>(<argument><expr><call><name><name>validator</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr><name>COLUMN_METADATA</name></expr>:
                        <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>column</name> <init>= <expr><call><name><name>cfm</name>.<name>getColumnDefinition</name></name><argument_list>(<argument><expr><name><name>columnName</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>column</name>.<name>setValidator</name></name><argument_list>(<argument><expr><call><name><name>validator</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>cfm</name>.<name>addColumnDefinition</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                </case>}</block></switch>
                <break>break;</break>

            </case><case>case <expr><name>DROP</name></expr>:
                <if>if <condition>(<expr><name><name>cfDef</name>.<name>isCompact</name></name></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Cannot drop columns from a compact CF"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <if>if <condition>(<expr><name>name</name> == null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Column %s was not found in table %s"</expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><call><name>columnFamily</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <switch>switch <condition>(<expr><name><name>name</name>.<name>kind</name></name></expr>)</condition>
                <block>{
                    <case>case <expr><name>KEY_ALIAS</name></expr>:
                    </case><case>case <expr><name>COLUMN_ALIAS</name></expr>:
                        <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Cannot drop PRIMARY KEY part %s"</expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </case><case>case <expr><name>COLUMN_METADATA</name></expr>:
                        <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>toDelete</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
                        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>columnDef</name> <range>: <expr><call><name><name>cfm</name>.<name>getColumn_metadata</name></name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
                        <block>{
                            <if>if <condition>(<expr><call><name><name>columnDef</name>.<name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>columnName</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                                <expr_stmt><expr><name>toDelete</name> = <name>columnDef</name></expr>;</expr_stmt></then></if>
                        }</block></for>
                        <assert>assert <expr><name>toDelete</name> != null</expr>;</assert>
                        <expr_stmt><expr><call><name><name>cfm</name>.<name>removeColumnDefinition</name></name><argument_list>(<argument><expr><name>toDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                </case>}</block></switch>
                <break>break;</break>
            </case><case>case <expr><name>OPTS</name></expr>:
                <if>if <condition>(<expr><name>cfProps</name> == null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"ALTER COLUMNFAMILY WITH invoked, but no parameters found"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <expr_stmt><expr><call><name><name>cfProps</name>.<name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cfProps</name>.<name>applyToCFMetadata</name></name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>RENAME</name></expr>:
                <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>renames</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>from</name> <init>= <expr><call><name><name>cfDef</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ColumnIdentifier</name></type> <name>to</name> <init>= <expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>from</name> == null</expr>)</condition><then>
                        <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Column %s was not found in table %s"</expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>columnFamily</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

                    <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name></type> <name>exists</name> <init>= <expr><call><name><name>cfDef</name>.<name>get</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>exists</name> != null</expr>)</condition><then>
                        <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Cannot rename column %s in table %s to %s; another column of that name already exist"</expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><call><name>columnFamily</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

                    <switch>switch <condition>(<expr><name><name>from</name>.<name>kind</name></name></expr>)</condition>
                    <block>{
                        <case>case <expr><name>KEY_ALIAS</name></expr>:
                            <expr_stmt><expr><call><name><name>cfm</name>.<name>keyAliases</name></name><argument_list>(<argument><expr><call><name>rename</name><argument_list>(<argument><expr><name><name>from</name>.<name>position</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getKeyAliases</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </case><case>case <expr><name>COLUMN_ALIAS</name></expr>:
                            <expr_stmt><expr><call><name><name>cfm</name>.<name>columnAliases</name></name><argument_list>(<argument><expr><call><name>rename</name><argument_list>(<argument><expr><name><name>from</name>.<name>position</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getColumnAliases</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </case><case>case <expr><name>VALUE_ALIAS</name></expr>:
                            <expr_stmt><expr><call><name><name>cfm</name>.<name>valueAlias</name></name><argument_list>(<argument><expr><name><name>to</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </case><case>case <expr><name>COLUMN_METADATA</name></expr>:
                            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Cannot rename non PRIMARY KEY part %s"</expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </case>}</block></switch>
                }</block></for>
                <break>break;</break>
        </case>}</block></switch>

        <expr_stmt><expr><call><name><name>MigrationManager</name>.<name>announceColumnFamilyUpdate</name></name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>rename</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pos</name></decl></param>, <param><decl><type><name>ColumnIdentifier</name></type> <name>newName</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>aliases</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>pos</name> &lt; <call><name><name>aliases</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>newList</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aliases</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>newList</name>.<name>set</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>newName</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>newList</name></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>newList</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pos</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>pos</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
                <expr_stmt><expr><call><name><name>newList</name>.<name>add</name></name><argument_list>(<argument><expr><name>i</name> &lt; <call><name><name>aliases</name>.<name>size</name></name><argument_list>()</argument_list></call> ? <call><name><name>aliases</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> : null</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            <expr_stmt><expr><call><name><name>newList</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>newName</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>newList</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"AlterTableStatement(name=%s, type=%s, column=%s, validator=%s)"</expr></argument>,
                             <argument><expr><name>cfName</name></expr></argument>,
                             <argument><expr><name>oType</name></expr></argument>,
                             <argument><expr><name>columnName</name></expr></argument>,
                             <argument><expr><name>validator</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>ResultMessage</name>.<name>SchemaChange</name>.<name>Change</name></name></type> <name>changeType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>ResultMessage</name>.<name>SchemaChange</name>.<name>Change</name>.<name>UPDATED</name></name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
