<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\DataType.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Charsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>RequestValidationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<enum><specifier>public</specifier> enum <name>DataType</name> <super><implements>implements <name><name>OptionCodec</name>.<name><name>Codecable</name><argument_list>&lt;<argument><name>DataType</name></argument>&gt;</argument_list></name></name></implements></super>
<block>{
    <decl><name>CUSTOM</name>   <argument_list>(<argument><expr>0</expr></argument>,  <argument><expr>null</expr></argument>)</argument_list></decl>,
    <decl><name>ASCII</name>    <argument_list>(<argument><expr>1</expr></argument>,  <argument><expr><name><name>AsciiType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>BIGINT</name>   <argument_list>(<argument><expr>2</expr></argument>,  <argument><expr><name><name>LongType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>BLOB</name>     <argument_list>(<argument><expr>3</expr></argument>,  <argument><expr><name><name>BytesType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>BOOLEAN</name>  <argument_list>(<argument><expr>4</expr></argument>,  <argument><expr><name><name>BooleanType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>COUNTER</name>  <argument_list>(<argument><expr>5</expr></argument>,  <argument><expr><name><name>CounterColumnType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>DECIMAL</name>  <argument_list>(<argument><expr>6</expr></argument>,  <argument><expr><name><name>DecimalType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>DOUBLE</name>   <argument_list>(<argument><expr>7</expr></argument>,  <argument><expr><name><name>DoubleType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>FLOAT</name>    <argument_list>(<argument><expr>8</expr></argument>,  <argument><expr><name><name>FloatType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>INT</name>      <argument_list>(<argument><expr>9</expr></argument>,  <argument><expr><name><name>Int32Type</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>TEXT</name>     <argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name><name>UTF8Type</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>TIMESTAMP</name><argument_list>(<argument><expr>11</expr></argument>, <argument><expr><name><name>DateType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>UUID</name>     <argument_list>(<argument><expr>12</expr></argument>, <argument><expr><name><name>UUIDType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>VARCHAR</name>  <argument_list>(<argument><expr>13</expr></argument>, <argument><expr><name><name>UTF8Type</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>VARINT</name>   <argument_list>(<argument><expr>14</expr></argument>, <argument><expr><name><name>IntegerType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>TIMEUUID</name> <argument_list>(<argument><expr>15</expr></argument>, <argument><expr><name><name>TimeUUIDType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>INET</name>     <argument_list>(<argument><expr>16</expr></argument>, <argument><expr><name><name>InetAddressType</name>.<name>instance</name></name></expr></argument>)</argument_list></decl>,
    <decl><name>LIST</name>     <argument_list>(<argument><expr>32</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></decl>,
    <decl><name>MAP</name>      <argument_list>(<argument><expr>33</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></decl>,
    <decl><name>SET</name>      <argument_list>(<argument><expr>34</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>OptionCodec</name><argument_list>&lt;<argument><name>DataType</name></argument>&gt;</argument_list></name></type> <name>codec</name> <init>= <expr>new <call><name><name>OptionCodec</name><argument_list>&lt;<argument><name>DataType</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>DataType</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AbstractType</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>AbstractType</name></argument>, <argument><name>DataType</name></argument>&gt;</argument_list></name></type> <name>dataTypeMap</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>AbstractType</name></argument>, <argument><name>DataType</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr>static
    <block>{
        <for>for (<init><decl><type><name>DataType</name></type> <name>type</name> <range>: <expr><call><name><name>DataType</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><name><name>type</name>.<name>type</name></name> != null</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>dataTypeMap</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>type</name>.<name>type</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt/></block></for>}</block></expr>
    }</block></enum>

    <constructor><specifier>private</specifier> <name>DataType</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>AbstractType</name></type> <name>type</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>id</name></name> = <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getId</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>id</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>readValue</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>this</name></expr>)</condition>
        <block>{
            <case>case <expr><name>CUSTOM</name></expr>:
                <return>return <expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>LIST</name></expr>:
                <return>return <expr><call><name><name>DataType</name>.<name>toType</name></name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>decodeOne</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>SET</name></expr>:
                <return>return <expr><call><name><name>DataType</name>.<name>toType</name></name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>decodeOne</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>MAP</name></expr>:
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>AbstractType</name></argument>&gt;</argument_list></name></type> <name>l</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>AbstractType</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>l</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>DataType</name>.<name>toType</name></name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>decodeOne</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>DataType</name>.<name>toType</name></name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>decodeOne</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>l</name></expr>;</return>
            </case><default>default:
                <return>return <expr>null</expr>;</return>
        </default>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeValue</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>value</name></decl></param>, <param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>this</name></expr>)</condition>
        <block>{
            <case>case <expr><name>CUSTOM</name></expr>:
                <assert>assert <expr><name>value</name> instanceof <name>String</name></expr>;</assert>
                <expr_stmt><expr><call><name><name>cb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>stringToCB</name></name><argument_list>(<argument><expr>(<name>String</name>)<name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>LIST</name></expr>:
                <expr_stmt><expr><call><name><name>cb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>encodeOne</name></name><argument_list>(<argument><expr><call><name><name>DataType</name>.<name>fromType</name></name><argument_list>(<argument><expr>(<name>AbstractType</name>)<name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>SET</name></expr>:
                <expr_stmt><expr><call><name><name>cb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>encodeOne</name></name><argument_list>(<argument><expr><call><name><name>DataType</name>.<name>fromType</name></name><argument_list>(<argument><expr>(<name>AbstractType</name>)<name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>MAP</name></expr>:
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>AbstractType</name></argument>&gt;</argument_list></name></type> <name>l</name> <init>= <expr>(<name><name>List</name><argument_list>&lt;<argument><name>AbstractType</name></argument>&gt;</argument_list></name>)<name>value</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>encodeOne</name></name><argument_list>(<argument><expr><call><name><name>DataType</name>.<name>fromType</name></name><argument_list>(<argument><expr><call><name><name>l</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>encodeOne</name></name><argument_list>(<argument><expr><call><name><name>DataType</name>.<name>fromType</name></name><argument_list>(<argument><expr><call><name><name>l</name>.<name>get</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </case>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>serializedValueSize</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>this</name></expr>)</condition>
        <block>{
            <case>case <expr><name>CUSTOM</name></expr>:
                <return>return <expr>2 + ((<name>String</name>)<name>value</name>).<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call>.<name>length</name></expr>;</return>
            </case><case>case <expr><name>LIST</name></expr>:
            </case><case>case <expr><name>SET</name></expr>:
                <return>return <expr><call><name><name>codec</name>.<name>oneSerializedSize</name></name><argument_list>(<argument><expr><call><name><name>DataType</name>.<name>fromType</name></name><argument_list>(<argument><expr>(<name>AbstractType</name>)<name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </case><case>case <expr><name>MAP</name></expr>:
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>AbstractType</name></argument>&gt;</argument_list></name></type> <name>l</name> <init>= <expr>(<name><name>List</name><argument_list>&lt;<argument><name>AbstractType</name></argument>&gt;</argument_list></name>)<name>value</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>s</name> += <call><name><name>codec</name>.<name>oneSerializedSize</name></name><argument_list>(<argument><expr><call><name><name>DataType</name>.<name>fromType</name></name><argument_list>(<argument><expr><call><name><name>l</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>s</name> += <call><name><name>codec</name>.<name>oneSerializedSize</name></name><argument_list>(<argument><expr><call><name><name>DataType</name>.<name>fromType</name></name><argument_list>(<argument><expr><call><name><name>l</name>.<name>get</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>s</name></expr>;</return>
            </case><default>default:
                <return>return <expr>0</expr>;</return>
        </default>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Pair</name><argument_list>&lt;<argument><name>DataType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>fromType</name><parameter_list>(<param><decl><type><name>AbstractType</name></type> <name>type</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// For CQL3 clients, ReversedType is an implementation detail and they</comment>
        <comment type="line">// shouldn't have to care about it.</comment>
        <if>if <condition>(<expr><name>type</name> instanceof <name>ReversedType</name></expr>)</condition><then>
            <expr_stmt><expr><name>type</name> = ((<name>ReversedType</name>)<name>type</name>).<name>baseType</name></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>DataType</name></type> <name>dt</name> <init>= <expr><call><name><name>dataTypeMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dt</name> == null</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><call><name><name>type</name>.<name>isCollection</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>type</name> instanceof <name>ListType</name></expr>)</condition><then>
                <block>{
                    <return>return <expr><name><name>Pair</name>.</name>&lt;<name>DataType</name></expr>, <expr><name>Object</name>&gt;<call><name>create</name><argument_list>(<argument><expr><name>LIST</name></expr></argument>, <argument><expr>((<name>ListType</name>)<name>type</name>).<name>elements</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>type</name> instanceof <name>MapType</name></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>MapType</name></type> <name>mt</name> <init>= <expr>(<name>MapType</name>)<name>type</name></expr></init></decl>;</decl_stmt>
                    <return>return <expr><name><name>Pair</name>.</name>&lt;<name>DataType</name></expr>, <expr><name>Object</name>&gt;<call><name>create</name><argument_list>(<argument><expr><name>MAP</name></expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name><name>mt</name>.<name>keys</name></name></expr></argument>, <argument><expr><name><name>mt</name>.<name>values</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then>
                <else>else
                <block>{
                    <assert>assert <expr><name>type</name> instanceof <name>SetType</name></expr>;</assert>
                    <return>return <expr><name><name>Pair</name>.</name>&lt;<name>DataType</name></expr>, <expr><name>Object</name>&gt;<call><name>create</name><argument_list>(<argument><expr><name>SET</name></expr></argument>, <argument><expr>((<name>SetType</name>)<name>type</name>).<name>elements</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></else></if></else></if>
            }</block></then></if>
            <return>return <expr><name><name>Pair</name>.</name>&lt;<name>DataType</name></expr>, <expr><name>Object</name>&gt;<call><name>create</name><argument_list>(<argument><expr><name>CUSTOM</name></expr></argument>, <argument><expr><call><name><name>type</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <return>return <expr><call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><name>dt</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AbstractType</name></type> <name>toType</name><parameter_list>(<param><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>DataType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>entry</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <switch>switch <condition>(<expr><name><name>entry</name>.<name>left</name></name></expr>)</condition>
            <block>{
                <case>case <expr><name>CUSTOM</name></expr>:
                    <return>return <expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr>(<name>String</name>)<name><name>entry</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
                </case><case>case <expr><name>LIST</name></expr>:
                    <return>return <expr><call><name><name>ListType</name>.<name>getInstance</name></name><argument_list>(<argument><expr>(<name>AbstractType</name>)<name><name>entry</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
                </case><case>case <expr><name>SET</name></expr>:
                    <return>return <expr><call><name><name>SetType</name>.<name>getInstance</name></name><argument_list>(<argument><expr>(<name>AbstractType</name>)<name><name>entry</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
                </case><case>case <expr><name>MAP</name></expr>:
                    <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>AbstractType</name></argument>&gt;</argument_list></name></type> <name>l</name> <init>= <expr>(<name><name>List</name><argument_list>&lt;<argument><name>AbstractType</name></argument>&gt;</argument_list></name>)<name><name>entry</name>.<name>right</name></name></expr></init></decl>;</decl_stmt>
                    <return>return <expr><call><name><name>MapType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>l</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>l</name>.<name>get</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </case><default>default:
                    <return>return <expr><name><name>entry</name>.<name>left</name>.<name>type</name></name></expr>;</return>
            </default>}</block></switch>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>RequestValidationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}
</unit>
