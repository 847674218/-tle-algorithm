<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\MD5Digest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The result of the computation of an MD5 digest.
 *
 * A MD5 is really just a byte[] but arrays are a no go as map keys. We could
 * wrap it in a ByteBuffer but:
 *   1. MD5Digest is a more explicit name than ByteBuffer to represent a md5.
 *   2. Using our own class allows to use our FastByteComparison for equals.
 */</comment>
<class><specifier>public</specifier> class <name>MD5Digest</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>bytes</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>MD5Digest</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>bytes</name></name> = <name>bytes</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MD5Digest</name></type> <name>wrap</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>digest</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>MD5Digest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MD5Digest</name></type> <name>compute</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>toHash</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>MD5Digest</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>threadLocalMD5Digest</name></name><argument_list>()</argument_list></call>.<call><name>digest</name><argument_list>(<argument><expr><name>toHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MD5Digest</name></type> <name>compute</name><parameter_list>(<param><decl><type><name>String</name></type> <name>toHash</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>compute</name><argument_list>(<argument><expr><call><name><name>toHash</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Arrays</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if<condition>(<expr>!(<name>o</name> instanceof <name>MD5Digest</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <decl_stmt><decl><type><name>MD5Digest</name></type> <name>that</name> <init>= <expr>(<name>MD5Digest</name>)<name>o</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// handles nulls properly</comment>
        <return>return <expr><call><name><name>FBUtilities</name>.<name>compareUnsigned</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>bytes</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>bytes</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>this</name>.<name>bytes</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>bytes</name>.<name>length</name></name></expr></argument>)</argument_list></call> == 0</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
