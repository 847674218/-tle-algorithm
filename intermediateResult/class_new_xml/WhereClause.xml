<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql\WhereClause.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>CharacterCodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<comment type="block" format="javadoc">/**
 * WhereClauses encapsulate all of the predicates of a SELECT query.
 *
 */</comment>
<class><specifier>public</specifier> class <name>WhereClause</name>
<block>{
    <comment type="line">// all relations (except for `&lt;key&gt; IN (.., .., ..)` which can be directly interpreted) from parser</comment>
    <comment type="line">// are stored into this array and are filtered to the keys/columns by extractKeysFromColumns(...)</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Relation</name></argument>&gt;</argument_list></name></type> <name>clauseRelations</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Relation</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Relation</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Relation</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// added to either by the parser from an IN clause or by extractKeysFromColumns</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr>new <call><name><name>LinkedHashSet</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Term</name></type> <name>startKey</name></decl>, <decl><type ref="prev"/><name>finishKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>includeStartKey</name> <init>= <expr>false</expr></init>, <name>includeFinishKey</name> <init>= <expr>false</expr></init>, <name>multiKey</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="line">// set by extractKeysFromColumns</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>keyAlias</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create a new WhereClause with the first parsed relation.
     *
     * @param firstRelation key or column relation
     */</comment>
    <constructor><specifier>public</specifier> <name>WhereClause</name><parameter_list>(<param><decl><type><name>Relation</name></type> <name>firstRelation</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>and</name><argument_list>(<argument><expr><name>firstRelation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>WhereClause</name><parameter_list>()</parameter_list>
    <block>{}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Add an additional relation to this WHERE clause.
     *
     * @param relation the relation to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>and</name><parameter_list>(<param><decl><type><name>Relation</name></type> <name>relation</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>clauseRelations</name>.<name>add</name></name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * The same as KEY = &lt;key&gt; to avoid using Relation object
     * @param key key to include into clause
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>andKeyEquals</name><parameter_list>(<param><decl><type><name>Term</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>keys</name>.<name>add</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Relation</name></argument>&gt;</argument_list></name></type> <name>getColumnRelations</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>columns</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isKeyRange</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>startKey</name> != null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Term</name></type> <name>getStartKey</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>startKey</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Term</name></type> <name>getFinishKey</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>finishKey</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>getKeys</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>keys</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>includeStartKey</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>includeStartKey</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>includeFinishKey</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>includeFinishKey</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeyAlias</name><parameter_list>(<param><decl><type><name>String</name></type> <name>alias</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>keyAlias</name> = <call><name><name>alias</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMultiKey</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>multiKey</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMultiKey</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>multiKey</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>multiKey</name></name> = <name>multiKey</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeyAlias</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// TODO fix special casing here, key alias should always be set post-extract</comment>
        <comment type="line">// key alias as not related to keys in here, it can be unset when we have a query like</comment>
        <comment type="line">// SELECT * FROM &lt;CF&gt; WHERE key = 1 and col &gt; 2 and col &lt; 3;</comment>
        <comment type="line">// it will be always set when statement looks like this</comment>
        <comment type="line">// SELECT * FROM &lt;CF&gt; WHERE &lt;key&gt; IN (.., .., ..);</comment>
        <comment type="line">// key is NULL when KEY keyword is used or when key alias given by user was not recognized</comment>
        <comment type="line">// validateKeyAlias will throw an exception for us in that case</comment>
        <return>return <expr><name>keyAlias</name> == null ? <name><name>QueryProcessor</name>.<name>DEFAULT_KEY_NAME</name></name> : <name>keyAlias</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>extractKeysFromColumns</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>realKeyAlias</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <comment type="line">// ThriftValidation ensures that key_alias is ascii</comment>
            <expr_stmt><expr><name>realKeyAlias</name> = <call><name><name>ByteBufferUtil</name>.<name>string</name></name><argument_list>(<argument><expr><call><name><name>cfm</name>.<name>getKeyName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>CharacterCodingException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <if>if <condition>(<expr>!<call><name><name>keys</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if> <comment type="line">// we already have key(s) set (&lt;key&gt; IN (.., ...) construction used)</comment>

        <for>for (<init><decl><type><name>Relation</name></type> <name>relation</name> <range>: <expr><name>clauseRelations</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>relation</name>.<name>getEntity</name></name><argument_list>()</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name>realKeyAlias</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>keyAlias</name> == null</expr>)</condition><then> <comment type="line">// setting found key as an alias</comment>
                    <expr_stmt><expr><name>keyAlias</name> = <name>name</name></expr>;</expr_stmt></then></if>

                <if>if <condition>(<expr><call><name><name>relation</name>.<name>operator</name></name><argument_list>()</argument_list></call> == <name><name>RelationType</name>.<name>EQ</name></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>keys</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>relation</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr>(<call><name><name>relation</name>.<name>operator</name></name><argument_list>()</argument_list></call> == <name><name>RelationType</name>.<name>GT</name></name>) || (<call><name><name>relation</name>.<name>operator</name></name><argument_list>()</argument_list></call> == <name><name>RelationType</name>.<name>GTE</name></name>)</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>startKey</name> = <call><name><name>relation</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>includeStartKey</name> = <call><name><name>relation</name>.<name>operator</name></name><argument_list>()</argument_list></call> == <name><name>RelationType</name>.<name>GTE</name></name></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr>(<call><name><name>relation</name>.<name>operator</name></name><argument_list>()</argument_list></call> == <name><name>RelationType</name>.<name>LT</name></name>) || (<call><name><name>relation</name>.<name>operator</name></name><argument_list>()</argument_list></call> == <name><name>RelationType</name>.<name>LTE</name></name>)</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>finishKey</name> = <call><name><name>relation</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>includeFinishKey</name> = <call><name><name>relation</name>.<name>operator</name></name><argument_list>()</argument_list></call> == <name><name>RelationType</name>.<name>LTE</name></name></expr>;</expr_stmt>
                }</block></then></if></else></if></else></if>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><call><name><name>columns</name>.<name>add</name></name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"WhereClause [keys=%s, startKey=%s, finishKey=%s, columns=%s, includeStartKey=%s, includeFinishKey=%s, multiKey=%s, keyAlias=%s]"</expr></argument>,
                             <argument><expr><name>keys</name></expr></argument>,
                             <argument><expr><name>startKey</name></expr></argument>,
                             <argument><expr><name>finishKey</name></expr></argument>,
                             <argument><expr><name>columns</name></expr></argument>,
                             <argument><expr><name>includeStartKey</name></expr></argument>,
                             <argument><expr><name>includeFinishKey</name></expr></argument>,
                             <argument><expr><name>multiKey</name></expr></argument>,
                             <argument><expr><name>keyAlias</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
