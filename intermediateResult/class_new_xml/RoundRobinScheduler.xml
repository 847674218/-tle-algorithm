<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\scheduler\RoundRobinScheduler.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>scheduler</name></name>;</package>


<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>Semaphore</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeoutException</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>RequestSchedulerOptions</name></name>;</import>
<import>import <name><name>org</name>.<name>cliffc</name>.<name>high_scale_lib</name>.<name>NonBlockingHashMap</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A very basic Round Robin implementation of the RequestScheduler. It handles
 * request groups identified on user/keyspace by placing them in separate
 * queues and servicing a request from each queue in a RoundRobin fashion.
 * It optionally adds weights for each round.
 */</comment>
<class><specifier>public</specifier> class <name>RoundRobinScheduler</name> <super><implements>implements <name>IRequestScheduler</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>RoundRobinScheduler</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">//Map of queue id to weighted queue</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>NonBlockingHashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>WeightedQueue</name></argument>&gt;</argument_list></name></type> <name>queues</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Semaphore</name></type> <name>taskCount</name></decl>;</decl_stmt>

    <comment type="line">// Tracks the count of threads available in all queues</comment>
    <comment type="line">// Used by the the scheduler thread so we don't need to busy-wait until there is a request to process</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Semaphore</name></type> <name>queueSize</name> <init>= <expr>new <call><name>Semaphore</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>defaultWeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>weights</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RoundRobinScheduler</name><parameter_list>(<param><decl><type><name>RequestSchedulerOptions</name></type> <name>options</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>defaultWeight</name> = <name><name>options</name>.<name>default_weight</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>weights</name> = <name><name>options</name>.<name>weights</name></name></expr>;</expr_stmt>

        <comment type="line">// the task count is acquired for the first time _after_ releasing a thread, so we pre-decrement</comment>
        <expr_stmt><expr><name>taskCount</name> = new <call><name>Semaphore</name><argument_list>(<argument><expr><name><name>options</name>.<name>throttle_limit</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>queues</name> = new <call><name><name>NonBlockingHashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>WeightedQueue</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Runnable</name></type> <name>runnable</name> <init>= <expr>new <class><super><name>Runnable</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
            <block>{
                <while>while <condition>(<expr>true</expr>)</condition>
                <block>{
                    <expr_stmt><expr><call><name>schedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Thread</name></type> <name>scheduler</name> <init>= <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>runnable</name></expr></argument>, <argument><expr>"REQUEST-SCHEDULER"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scheduler</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Started the RoundRobin Request Scheduler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>queue</name><parameter_list>(<param><decl><type><name>Thread</name></type> <name>t</name></decl></param>, <param><decl><type><name>String</name></type> <name>id</name></decl></param>, <param><decl><type><name>long</name></type> <name>timeoutMS</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TimeoutException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>WeightedQueue</name></type> <name>weightedQueue</name> <init>= <expr><call><name>getWeightedQueue</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>queueSize</name>.<name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>weightedQueue</name>.<name>put</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>timeoutMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// the scheduler will release us when a slot is available</comment>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>TimeoutException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>queueSize</name>.<name>acquireUninterruptibly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>e</name></expr>;</throw>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>queueSize</name>.<name>acquireUninterruptibly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>e</name></expr>;</throw>
            }</block></catch></try>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Interrupted while queueing requests"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>release</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>taskCount</name>.<name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>schedule</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>queueSize</name>.<name>acquireUninterruptibly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>WeightedQueue</name></argument>&gt;</argument_list></name></name></type> <name>request</name> <range>: <expr><call><name><name>queues</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>WeightedQueue</name></type> <name>queue</name> <init>= <expr><call><name><name>request</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//Using the weight, process that many requests at a time (for that scheduler id)</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name><init>=<expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>queue</name>.<name>weight</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <decl_stmt><decl><type><name>Thread</name></type> <name>t</name> <init>= <expr><call><name><name>queue</name>.<name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>t</name> == null</expr>)</condition><then>
                    <break>break;</break></then>
                <else>else
                <block>{
                    <expr_stmt><expr><call><name><name>taskCount</name>.<name>acquireUninterruptibly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>queueSize</name>.<name>acquireUninterruptibly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><call><name><name>queueSize</name>.<name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/*
     * Get the Queue for the respective id, if one is not available
     * create a new queue for that corresponding id and return it
     */</comment>
    <function><type><specifier>private</specifier> <name>WeightedQueue</name></type> <name>getWeightedQueue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>id</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>WeightedQueue</name></type> <name>weightedQueue</name> <init>= <expr><call><name><name>queues</name>.<name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>weightedQueue</name> != null</expr>)</condition><then>
            <comment type="line">// queue existed</comment>
            <return>return <expr><name>weightedQueue</name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>WeightedQueue</name></type> <name>maybenew</name> <init>= <expr>new <call><name>WeightedQueue</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>getWeight</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>weightedQueue</name> = <call><name><name>queues</name>.<name>putIfAbsent</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>maybenew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>weightedQueue</name> == null</expr>)</condition><then>
        <block>{
            <comment type="line">// created new queue: register for monitoring</comment>
            <expr_stmt><expr><call><name><name>maybenew</name>.<name>register</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>maybenew</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// another thread created the queue</comment>
        <return>return <expr><name>weightedQueue</name></expr>;</return>
    }</block></function>

    <function><type><name>Semaphore</name></type> <name>getTaskCount</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>taskCount</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>getWeight</name><parameter_list>(<param><decl><type><name>String</name></type> <name>weightingVar</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>(<name>weights</name> != null &amp;&amp; <call><name><name>weights</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>weightingVar</name></expr></argument>)</argument_list></call>)
                ? <call><name><name>weights</name>.<name>get</name></name><argument_list>(<argument><expr><name>weightingVar</name></expr></argument>)</argument_list></call>
                : <name>defaultWeight</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
