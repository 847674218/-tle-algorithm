<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\index\AbstractSimplePerColumnSecondaryIndex.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>index</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ExecutionException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ColumnDefinition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>IndexExpression</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Implements a secondary index for a column family using a second column family
 * in which the row keys are indexed values, and column names are base row keys.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractSimplePerColumnSecondaryIndex</name> <super><extends>extends <name>PerColumnSecondaryIndex</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>ColumnFamilyStore</name></type> <name>indexCfs</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list>
    <block>{
        <assert>assert <expr><name>baseCfs</name> != null &amp;&amp; <name>columnDefs</name> != null &amp;&amp; <call><name><name>columnDefs</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1</expr>;</assert>

        <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>columnDef</name> <init>= <expr><call><name><name>columnDefs</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>columnDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>AbstractType</name></type> <name>indexComparator</name> <init>= <expr><call><name><name>SecondaryIndex</name>.<name>getIndexComparator</name></name><argument_list>(<argument><expr><name><name>baseCfs</name>.<name>metadata</name></name></expr></argument>, <argument><expr><name>columnDef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>indexedCfMetadata</name> <init>= <expr><call><name><name>CFMetaData</name>.<name>newIndexMetadata</name></name><argument_list>(<argument><expr><name><name>baseCfs</name>.<name>metadata</name></name></expr></argument>, <argument><expr><name>columnDef</name></expr></argument>, <argument><expr><name>indexComparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>indexCfs</name> = <call><name><name>ColumnFamilyStore</name>.<name>createColumnFamilyStore</name></name><argument_list>(<argument><expr><name><name>baseCfs</name>.<name>table</name></name></expr></argument>,
                                                             <argument><expr><name><name>indexedCfMetadata</name>.<name>cfName</name></name></expr></argument>,
                                                             <argument><expr>new <call><name>LocalPartitioner</name><argument_list>(<argument><expr><call><name><name>columnDef</name>.<name>getValidator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                             <argument><expr><name>indexedCfMetadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// enable and initialize row cache based on parent's setting and indexed column's cardinality</comment>
        <decl_stmt><decl><type><name><name>CFMetaData</name>.<name>Caching</name></name></type> <name>baseCaching</name> <init>= <expr><call><name><name>baseCfs</name>.<name>metadata</name>.<name>getCaching</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>baseCaching</name> == <name><name>CFMetaData</name>.<name>Caching</name>.<name>ALL</name></name> || <name>baseCaching</name> == <name><name>CFMetaData</name>.<name>Caching</name>.<name>ROWS_ONLY</name></name></expr>)</condition><then>
        <block>{
            <comment type="block">/*
             * # of index CF's key = cardinality of indexed column.
             * if # of keys stored in index CF is more than average column counts (means tall table),
             * then consider it as high cardinality.
             */</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>estimatedKeys</name> <init>= <expr><call><name><name>indexCfs</name>.<name>estimateKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>averageColumnCount</name> <init>= <expr><call><name><name>indexCfs</name>.<name>getMeanColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>averageColumnCount</name> &gt; 0 &amp;&amp; <name>estimatedKeys</name> / <name>averageColumnCount</name> &gt; 1</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"turning row cache on for " + <call><name><name>indexCfs</name>.<name>getColumnFamilyName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>indexCfs</name>.<name>metadata</name>.<name>caching</name></name><argument_list>(<argument><expr><name>baseCaching</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>indexCfs</name>.<name>initRowCache</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>init</name><parameter_list>(<param><decl><type><name>ColumnDefinition</name></type> <name>columnDef</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>ByteBuffer</name></type> <name>makeIndexColumnName</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>AbstractType</name></type> <name>getExpressionComparator</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>expressionString</name><parameter_list>(<param><decl><type><name>IndexExpression</name></type> <name>expr</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"'%s.%s %s %s'"</expr></argument>,
                             <argument><expr><name><name>baseCfs</name>.<name>columnFamily</name></name></expr></argument>,
                             <argument><expr><call><name>getExpressionComparator</name><argument_list>()</argument_list></call>.<call><name>getString</name><argument_list>(<argument><expr><name><name>expr</name>.<name>column_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name><name>expr</name>.<name>op</name></name></expr></argument>,
                             <argument><expr><call><name><name>baseCfs</name>.<name>metadata</name>.<name>getColumn_metadata</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name><name>expr</name>.<name>column_name</name></name></expr></argument>)</argument_list></call>.<call><name>getValidator</name><argument_list>()</argument_list></call>.<call><name>getString</name><argument_list>(<argument><expr><name><name>expr</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>column</name>.<name>isMarkedForDelete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>valueKey</name> <init>= <expr><call><name>getIndexKeyFor</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>localDeletionTime</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> / 1000</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cfi</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>indexCfs</name>.<name>metadata</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cfi</name>.<name>addTombstone</name></name><argument_list>(<argument><expr><call><name>makeIndexColumnName</name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>localDeletionTime</name></expr></argument>, <argument><expr><call><name><name>column</name>.<name>timestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>indexCfs</name>.<name>apply</name></name><argument_list>(<argument><expr><name>valueKey</name></expr></argument>, <argument><expr><name>cfi</name></expr></argument>, <argument><expr><name><name>SecondaryIndexManager</name>.<name>nullUpdater</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"removed index entry for cleaned-up value {}:{}"</expr></argument>, <argument><expr><name>valueKey</name></expr></argument>, <argument><expr><name>cfi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>insert</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>valueKey</name> <init>= <expr><call><name>getIndexKeyFor</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cfi</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>indexCfs</name>.<name>metadata</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>name</name> <init>= <expr><call><name>makeIndexColumnName</name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>column</name> instanceof <name>ExpiringColumn</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ExpiringColumn</name></type> <name>ec</name> <init>= <expr>(<name>ExpiringColumn</name>)<name>column</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cfi</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>ExpiringColumn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>, <argument><expr><call><name><name>ec</name>.<name>timestamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ec</name>.<name>getTimeToLive</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ec</name>.<name>getLocalDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>cfi</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>Column</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>, <argument><expr><call><name><name>column</name>.<name>timestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"applying index row {} in {}"</expr></argument>, <argument><expr><call><name><name>indexCfs</name>.<name>metadata</name>.<name>getKeyValidator</name></name><argument_list>()</argument_list></call>.<call><name>getString</name><argument_list>(<argument><expr><name><name>valueKey</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name><name>indexCfs</name>.<name>apply</name></name><argument_list>(<argument><expr><name>valueKey</name></expr></argument>, <argument><expr><name>cfi</name></expr></argument>, <argument><expr><name><name>SecondaryIndexManager</name>.<name>nullUpdater</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>col</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeIndex</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>indexCfs</name>.<name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>forceBlockingFlush</name><parameter_list>()</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>indexCfs</name>.<name>forceBlockingFlush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ExecutionException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>invalidate</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>indexCfs</name>.<name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>truncate</name><parameter_list>(<param><decl><type><name>long</name></type> <name>truncatedAt</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>indexCfs</name>.<name>discardSSTables</name></name><argument_list>(<argument><expr><name>truncatedAt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnFamilyStore</name></type> <name>getIndexCfs</name><parameter_list>()</parameter_list>
    <block>{
       <return>return <expr><name>indexCfs</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getIndexName</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>indexCfs</name>.<name>columnFamily</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLiveSize</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>indexCfs</name>.<name>getMemtableDataSize</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reload</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>indexCfs</name>.<name>metadata</name>.<name>reloadSecondaryIndexMetadata</name></name><argument_list>(<argument><expr><name><name>baseCfs</name>.<name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>indexCfs</name>.<name>reload</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
