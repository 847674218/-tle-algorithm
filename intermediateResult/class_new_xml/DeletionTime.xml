<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\DeletionTime.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Objects</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISerializer</name></name>;</import>

<class><specifier>public</specifier> class <name>DeletionTime</name> <super><implements>implements <name><name>Comparable</name><argument_list>&lt;<argument><name>DeletionTime</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DeletionTime</name></type> <name>LIVE</name> <init>= <expr>new <call><name>DeletionTime</name><argument_list>(<argument><expr><name><name>Long</name>.<name>MIN_VALUE</name></name></expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>markedForDeleteAt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>localDeletionTime</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ISerializer</name><argument_list>&lt;<argument><name>DeletionTime</name></argument>&gt;</argument_list></name></type> <name>serializer</name> <init>= <expr>new <call><name>Serializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><name>DeletionTime</name><parameter_list>(<param><decl><type><name>long</name></type> <name>markedForDeleteAt</name></decl></param>, <param><decl><type><name>int</name></type> <name>localDeletionTime</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>markedForDeleteAt</name></name> = <name>markedForDeleteAt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>localDeletionTime</name></name> = <name>localDeletionTime</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if<condition>(<expr>!(<name>o</name> instanceof <name>DeletionTime</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <decl_stmt><decl><type><name>DeletionTime</name></type> <name>that</name> <init>= <expr>(<name>DeletionTime</name>)<name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>markedForDeleteAt</name> == <name><name>that</name>.<name>markedForDeleteAt</name></name> &amp;&amp; <name>localDeletionTime</name> == <name><name>that</name>.<name>localDeletionTime</name></name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Objects</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>markedForDeleteAt</name></expr></argument>, <argument><expr><name>localDeletionTime</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"deletedAt=%d, localDeletion=%d"</expr></argument>, <argument><expr><name>markedForDeleteAt</name></expr></argument>, <argument><expr><name>localDeletionTime</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>DeletionTime</name></type> <name>dt</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>markedForDeleteAt</name> &lt; <name><name>dt</name>.<name>markedForDeleteAt</name></name></expr>)</condition><then>
            <return>return <expr>-1</expr>;</return></then>
        <else>else <if>if <condition>(<expr><name>markedForDeleteAt</name> &gt; <name><name>dt</name>.<name>markedForDeleteAt</name></name></expr>)</condition><then>
            <return>return <expr>1</expr>;</return></then>
        <else>else <if>if <condition>(<expr><name>localDeletionTime</name> &lt; <name><name>dt</name>.<name>localDeletionTime</name></name></expr>)</condition><then>
            <return>return <expr>-1</expr>;</return></then>
        <else>else <if>if <condition>(<expr><name>localDeletionTime</name> &gt; <name><name>dt</name>.<name>localDeletionTime</name></name></expr>)</condition><then>
            <return>return <expr>-1</expr>;</return></then>
        <else>else
            <return>return <expr>0</expr>;</return></else></if></else></if></else></if></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGcAble</name><parameter_list>(<param><decl><type><name>int</name></type> <name>gcBefore</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>localDeletionTime</name> &lt; <name>gcBefore</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDeleted</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>column</name>.<name>isMarkedForDelete</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>column</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call> &lt;= <name>markedForDeleteAt</name></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>Serializer</name> <super><implements>implements <name><name>ISerializer</name><argument_list>&lt;<argument><name>DeletionTime</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>DeletionTime</name></type> <name>delTime</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>delTime</name>.<name>localDeletionTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>writeLong</name></name><argument_list>(<argument><expr><name><name>delTime</name>.<name>markedForDeleteAt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>DeletionTime</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>ldt</name> <init>= <expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>mfda</name> <init>= <expr><call><name><name>in</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>mfda</name> == <name><name>Long</name>.<name>MIN_VALUE</name></name> &amp;&amp; <name>ldt</name> == <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>)</condition><then>
                <return>return <expr><name>LIVE</name></expr>;</return></then>
            <else>else
                <return>return <expr>new <call><name>DeletionTime</name><argument_list>(<argument><expr><name>mfda</name></expr></argument>, <argument><expr><name>ldt</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>DeletionTime</name></type> <name>delTime</name></decl></param>, <param><decl><type><name>TypeSizes</name></type> <name>typeSizes</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr><name><name>delTime</name>.<name>localDeletionTime</name></name></expr></argument>)</argument_list></call>
                 + <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr><name><name>delTime</name>.<name>markedForDeleteAt</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
