<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\LatencyTracker.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicLong</name></name>;</import>

<class><specifier>public</specifier> class <name>LatencyTracker</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>opCount</name> <init>= <expr>new <call><name>AtomicLong</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>totalLatency</name> <init>= <expr>new <call><name>AtomicLong</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lastLatency</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lastOpCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>EstimatedHistogram</name></type> <name>totalHistogram</name> <init>= <expr>new <call><name>EstimatedHistogram</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>EstimatedHistogram</name></type> <name>recentHistogram</name> <init>= <expr>new <call><name>EstimatedHistogram</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** takes nanoseconds **/</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNano</name><parameter_list>(<param><decl><type><name>long</name></type> <name>nanos</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// convert to microseconds.  1 millionth</comment>
        <expr_stmt><expr><call><name>addMicro</name><argument_list>(<argument><expr><name>nanos</name> / 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMicro</name><parameter_list>(<param><decl><type><name>long</name></type> <name>micros</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>opCount</name>.<name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>totalLatency</name>.<name>addAndGet</name></name><argument_list>(<argument><expr><name>micros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>totalHistogram</name>.<name>add</name></name><argument_list>(<argument><expr><name>micros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recentHistogram</name>.<name>add</name></name><argument_list>(<argument><expr><name>micros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getOpCount</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>opCount</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** returns  microseconds */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTotalLatencyMicros</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>totalLatency</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** returns microseconds */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRecentLatencyMicros</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>ops</name> <init>= <expr><call><name><name>opCount</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><call><name><name>totalLatency</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <return>return <expr>((<name>double</name>)<name>n</name> - <name>lastLatency</name>) / (<name>ops</name> - <name>lastOpCount</name>)</expr>;</return>
        }</block>
        <finally>finally
        <block>{
            <expr_stmt><expr><name>lastLatency</name> = <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lastOpCount</name> = <name>ops</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getTotalLatencyHistogramMicros</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>totalHistogram</name>.<name>getBuckets</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getRecentLatencyHistogramMicros</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>recentHistogram</name>.<name>getBuckets</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
