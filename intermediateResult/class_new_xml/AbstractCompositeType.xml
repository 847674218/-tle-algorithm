<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\marshal\AbstractCompositeType.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A class avoiding class duplication between CompositeType and
 * DynamicCompositeType.
 * Those two differs only in that for DynamicCompositeType, the comparators
 * are in the encoded column name at the front of each component.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractCompositeType</name> <super><extends>extends <name><name>AbstractType</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <comment type="line">// changes bb position</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>int</name></type> <name>getShortLength</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr>(<call><name><name>bb</name>.<name>get</name></name><argument_list>()</argument_list></call> &amp; 0xFF) &lt;&lt; 8</expr></init></decl>;</decl_stmt>
        <return>return <expr><name>length</name> | (<call><name><name>bb</name>.<name>get</name></name><argument_list>()</argument_list></call> &amp; 0xFF)</expr>;</return>
    }</block></function>

    <comment type="line">// changes bb position</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>putShortLength</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>bb</name>.<name>put</name></name><argument_list>(<argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>length</name> &gt;&gt; 8) &amp; 0xFF</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bb</name>.<name>put</name></name><argument_list>(<argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr><name>length</name> &amp; 0xFF</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// changes bb position</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>getBytes</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>copy</name> <init>= <expr><call><name><name>bb</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>copy</name>.<name>limit</name></name><argument_list>(<argument><expr><call><name><name>copy</name>.<name>position</name></name><argument_list>()</argument_list></call> + <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bb</name>.<name>position</name></name><argument_list>(<argument><expr><call><name><name>bb</name>.<name>position</name></name><argument_list>()</argument_list></call> + <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>copy</name></expr>;</return>
    }</block></function>

    <comment type="line">// changes bb position</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>getWithShortLength</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>getShortLength</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getBytes</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>o1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>o2</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>o1</name> == null</expr>)</condition><then>
            <return>return <expr><name>o2</name> == null ? 0 : -1</expr>;</return></then></if>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bb1</name> <init>= <expr><call><name><name>o1</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bb2</name> <init>= <expr><call><name><name>o2</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>previous</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>bb1</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; <call><name><name>bb2</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr><call><name>getComparator</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>bb1</name></expr></argument>, <argument><expr><name>bb2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>value1</name> <init>= <expr><call><name>getWithShortLength</name><argument_list>(<argument><expr><name>bb1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>value2</name> <init>= <expr><call><name>getWithShortLength</name><argument_list>(<argument><expr><name>bb2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>comparator</name>.<name>compareCollectionMembers</name></name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>cmp</name> != 0</expr>)</condition><then>
                <return>return <expr><name>cmp</name></expr>;</return></then></if>

            <expr_stmt><expr><name>previous</name> = <name>value1</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><call><name><name>bb1</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name></type> <name>b2</name> <init>= <expr><call><name><name>bb2</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>b1</name> &lt; 0</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>b2</name> &gt;= 0</expr>)</condition><then>
                    <return>return <expr>-1</expr>;</return></then></if>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>b1</name> &gt; 0</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>b2</name> &lt;= 0</expr>)</condition><then>
                    <return>return <expr>1</expr>;</return></then></if>
            }</block></then>
            <else>else
            <block>{
                <comment type="line">// b1 == 0</comment>
                <if>if <condition>(<expr><name>b2</name> != 0</expr>)</condition><then>
                    <return>return <expr>-<name>b2</name></expr>;</return></then></if>
            }</block></else></if></else></if>
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
        }</block></while>

        <if>if <condition>(<expr><call><name><name>bb1</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
            <return>return <expr><call><name><name>bb2</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 ? 0 : -1</expr>;</return></then></if>

        <comment type="line">// bb1.remaining() &gt; 0 &amp;&amp; bb2.remaining() == 0</comment>
        <return>return <expr>1</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Split a composite column names into it's components.
     */</comment>
    <function><type><specifier>public</specifier> <name>ByteBuffer</name><index>[]</index></type> <name>split</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>l</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bb</name> <init>= <expr><call><name><name>name</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>bb</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name>getComparator</name><argument_list>(<argument><expr><name>i</name>++</expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>l</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>getWithShortLength</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bb</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// skip end-of-component</comment>
        }</block></while>
        <return>return <expr><call><name><name>l</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>ByteBuffer</name><index>[<expr><call><name><name>l</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>CompositeComponent</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <name>AbstractType</name></type> <name>comparator</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>ByteBuffer</name></type>   <name>value</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>CompositeComponent</name><parameter_list>( <param><decl><type><name>AbstractType</name></type> <name>comparator</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></param> )</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>comparator</name></name> = <name>comparator</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name>      = <name>value</name></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>CompositeComponent</name></argument>&gt;</argument_list></name></type> <name>deconstruct</name><parameter_list>( <param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param> )</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>CompositeComponent</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>CompositeComponent</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bb</name> <init>= <expr><call><name><name>bytes</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>bb</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>AbstractType</name></type> <name>comparator</name> <init>= <expr><call><name>getComparator</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>value</name> <init>= <expr><call><name>getWithShortLength</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>list</name>.<name>add</name></name><argument_list>( <argument><expr>new <call><name>CompositeComponent</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><call><name><name>bb</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Ignore; not relevant here</comment>
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>list</name></expr>;</return>
    }</block></function>

    <comment type="block">/*
     * Escapes all occurences of the ':' character from the input, replacing them by "\:".
     * Furthermore, if the last character is '\' or '!', a '!' is appended.
     */</comment>
    <function><type><specifier>static</specifier> <name>String</name></type> <name>escape</name><parameter_list>(<param><decl><type><name>String</name></type> <name>input</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>input</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>input</name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>input</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>":"</expr></argument>, <argument><expr>"\\\\:"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>last</name> <init>= <expr><call><name><name>res</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>res</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>last</name> == '\\' || <name>last</name> == '!' ? <name>res</name> + '!' : <name>res</name></expr>;</return>
    }</block></function>

    <comment type="block">/*
     * Reverses the effect of espace().
     * Replaces all occurences of "\:" by ":" and remove last character if it is '!'.
     */</comment>
    <function><type><specifier>static</specifier> <name>String</name></type> <name>unescape</name><parameter_list>(<param><decl><type><name>String</name></type> <name>input</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>input</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>input</name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>input</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"\\\\:"</expr></argument>, <argument><expr>":"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>last</name> <init>= <expr><call><name><name>res</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>res</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>last</name> == '!' ? <call><name><name>res</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>res</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call> : <name>res</name></expr>;</return>
    }</block></function>

    <comment type="block">/*
     * Split the input on character ':', unless the previous character is '\'.
     */</comment>
    <function><type><specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>split</name><parameter_list>(<param><decl><type><name>String</name></type> <name>input</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>input</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name><name>Collections</name>.</name>&lt;<name>String</name>&gt;<call><name>emptyList</name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>res</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>input</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <if>if <condition>(<expr><call><name><name>input</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> != ':' || (<name>i</name> &gt; 0 &amp;&amp; <call><name><name>input</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name>-1</expr></argument>)</argument_list></call> == '\\')</expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <expr_stmt><expr><call><name><name>res</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>input</name>.<name>substring</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>prev</name> = <name>i</name> + 1</expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>res</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>input</name>.<name>substring</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><call><name><name>input</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bb</name> <init>= <expr><call><name><name>bytes</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>bb</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition>
        <block>{
            <if>if <condition>(<expr><call><name><name>bb</name>.<name>remaining</name></name><argument_list>()</argument_list></call> != <call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr><call><name>getAndAppendComparator</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>value</name> <init>= <expr><call><name>getWithShortLength</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>escape</name><argument_list>(<argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><call><name><name>bb</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>b</name> != 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>":!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>fromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parts</name> <init>= <expr><call><name>split</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>components</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>parts</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ParsedComparator</name></argument>&gt;</argument_list></name></type> <name>comparators</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ParsedComparator</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>parts</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>totalLength</name> <init>= <expr>0</expr></init>, <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>lastByteIsOne</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>String</name></type> <name>part</name> <range>: <expr><name>parts</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>part</name>.<name>equals</name></name><argument_list>(<argument><expr>"!"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>lastByteIsOne</name> = true</expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>

            <decl_stmt><decl><type><name>ParsedComparator</name></type> <name>p</name> <init>= <expr><call><name>parseComparator</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <init>= <expr><call><name><name>p</name>.<name>getAbstractType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>part</name> = <call><name><name>p</name>.<name>getRemainingPart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>component</name> <init>= <expr><call><name><name>type</name>.<name>fromString</name></name><argument_list>(<argument><expr><call><name>unescape</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>totalLength</name> += <call><name><name>p</name>.<name>getComparatorSerializedSize</name></name><argument_list>()</argument_list></call> + 2 + <call><name><name>component</name>.<name>remaining</name></name><argument_list>()</argument_list></call> + 1</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>components</name>.<name>add</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>comparators</name>.<name>add</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bb</name> <init>= <expr><call><name><name>ByteBuffer</name>.<name>allocate</name></name><argument_list>(<argument><expr><name>totalLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>component</name> <range>: <expr><name>components</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>comparators</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>serializeComparator</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>putShortLength</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><call><name><name>component</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bb</name>.<name>put</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// it's ok to consume component as we won't use it anymore</comment>
            <expr_stmt><expr><call><name><name>bb</name>.<name>put</name></name><argument_list>(<argument><expr>(<name>byte</name>)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><name>lastByteIsOne</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>bb</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>bb</name>.<name>limit</name></name><argument_list>()</argument_list></call> - 1</expr></argument>, <argument><expr>(<name>byte</name>)1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name><name>bb</name>.<name>rewind</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>bb</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bb</name> <init>= <expr><call><name><name>bytes</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>previous</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>bb</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr><call><name>validateComparator</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>bb</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &lt; 2</expr>)</condition><then>
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr>"Not enough bytes to read value size of component " + <name>i</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>getShortLength</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>bb</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &lt; <name>length</name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr>"Not enough bytes to read value of component " + <name>i</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>value</name> <init>= <expr><call><name>getBytes</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>comparator</name>.<name>validateCollectionMember</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>bb</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr>"Not enough bytes to read the end-of-component byte of component" + <name>i</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><call><name><name>bb</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>b</name> != 0 &amp;&amp; <call><name><name>bb</name>.<name>remaining</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then>
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr>"Invalid bytes remaining after an end-of-component at component" + <name>i</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><name>previous</name> = <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ByteBuffer</name></type> <name>decompose</name><parameter_list>(<param><decl><type><name>Object</name>...</type> <name>objects</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>compose</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>bytes</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>decompose</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return the comparator for the given component. static CompositeType will consult
     * @param i DynamicCompositeType will read the type information from @param bb
     * @param bb name of type definition
     */</comment>
    <function_decl><type><specifier>abstract</specifier> <specifier>protected</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Adds DynamicCompositeType type information from @param bb1 to @param bb2.
     * @param i is ignored.
     */</comment>
    <function_decl><type><specifier>abstract</specifier> <specifier>protected</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>bb1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>bb2</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Adds type information from @param bb to @param sb.  @param i is ignored.
     */</comment>
    <function_decl><type><specifier>abstract</specifier> <specifier>protected</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getAndAppendComparator</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>, <param><decl><type><name>StringBuilder</name></type> <name>sb</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Like getComparator, but validates that @param i does not exceed the defined range
     */</comment>
    <function_decl><type><specifier>abstract</specifier> <specifier>protected</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validateComparator</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Used by fromString
     */</comment>
    <function_decl><type><specifier>abstract</specifier> <specifier>protected</specifier> <name>ParsedComparator</name></type> <name>parseComparator</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>String</name></type> <name>part</name></decl></param>)</parameter_list>;</function_decl>

    <class type="interface"><specifier>protected</specifier> <specifier>static</specifier> interface <name>ParsedComparator</name>
    <block>{
        <function_decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getAbstractType</name><parameter_list>()</parameter_list>;</function_decl>
        <function_decl><type><name>String</name></type> <name>getRemainingPart</name><parameter_list>()</parameter_list>;</function_decl>
        <function_decl><type><name>int</name></type> <name>getComparatorSerializedSize</name><parameter_list>()</parameter_list>;</function_decl>
        <function_decl><type><name>void</name></type> <name>serializeComparator</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>
}</block></class>
</unit>
