<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\CounterMutation.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>LinkedList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>UUID</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryPath</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessageOut</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>HeapAllocator</name></name>;</import>

<class><specifier>public</specifier> class <name>CounterMutation</name> <super><implements>implements <name>IMutation</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CounterMutationSerializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>CounterMutationSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RowMutation</name></type> <name>rowMutation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ConsistencyLevel</name></type> <name>consistency</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CounterMutation</name><parameter_list>(<param><decl><type><name>RowMutation</name></type> <name>rowMutation</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rowMutation</name></name> = <name>rowMutation</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>consistency</name></name> = <name>consistency</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTable</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>rowMutation</name>.<name>getTable</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>getColumnFamilyIds</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>rowMutation</name>.<name>getColumnFamilyIds</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>key</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>rowMutation</name>.<name>key</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>RowMutation</name></type> <name>rowMutation</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>rowMutation</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ConsistencyLevel</name></type> <name>consistency</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>consistency</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>RowMutation</name></type> <name>makeReplicationMutation</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></type> <name>readCommands</name> <init>= <expr>new <call><name><name>LinkedList</name><argument_list>&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ColumnFamily</name></type> <name>columnFamily</name> <range>: <expr><call><name><name>rowMutation</name>.<name>getColumnFamilies</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr>!<call><name><name>columnFamily</name>.<name>metadata</name></name><argument_list>()</argument_list></call>.<call><name>getReplicateOnWrite</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <continue>continue;</continue></then></if>
            <expr_stmt><expr><call><name>addReadCommandFromColumnFamily</name><argument_list>(<argument><expr><call><name><name>rowMutation</name>.<name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rowMutation</name>.<name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>readCommands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// create a replication RowMutation</comment>
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>replicationMutation</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><call><name><name>rowMutation</name>.<name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rowMutation</name>.<name>key</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ReadCommand</name></type> <name>readCommand</name> <range>: <expr><name>readCommands</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>readCommand</name>.<name>table</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Row</name></type> <name>row</name> <init>= <expr><call><name><name>readCommand</name>.<name>getRow</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>row</name> == null || <name><name>row</name>.<name>cf</name></name> == null</expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><name><name>row</name>.<name>cf</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>cf</name>.<name>isSuper</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>cf</name>.<name>retainAll</name></name><argument_list>(<argument><expr><call><name><name>rowMutation</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>metadata</name></name><argument_list>()</argument_list></call>.<name>cfId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name>replicationMutation</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>replicationMutation</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addReadCommandFromColumnFamily</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnFamily</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></type> <name>commands</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>QueryPath</name></type> <name>queryPath</name> <init>= <expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><call><name><name>columnFamily</name>.<name>metadata</name></name><argument_list>()</argument_list></call>.<name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>commands</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>SliceByNamesReadCommand</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>queryPath</name></expr></argument>, <argument><expr><call><name><name>columnFamily</name>.<name>getColumnNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>MessageOut</name><argument_list>&lt;<argument><name>CounterMutation</name></argument>&gt;</argument_list></name></type> <name>makeMutationMessage</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr>new <call><name><name>MessageOut</name><argument_list>&lt;<argument><name>CounterMutation</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>MessagingService</name>.<name>Verb</name>.<name>COUNTER_MUTATION</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>serializer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>shouldReplicateOnWrite</name><parameter_list>()</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>ColumnFamily</name></type> <name>cf</name> <range>: <expr><call><name><name>rowMutation</name>.<name>getColumnFamilies</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <if>if <condition>(<expr><call><name><name>cf</name>.<name>metadata</name></name><argument_list>()</argument_list></call>.<call><name>getReplicateOnWrite</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr>true</expr>;</return></then></if></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// transform all CounterUpdateColumn to CounterColumn: accomplished by localCopy</comment>
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><call><name><name>rowMutation</name>.<name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>clone</name></name><argument_list>(<argument><expr><call><name><name>rowMutation</name>.<name>key</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><call><name><name>rm</name>.<name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>ColumnFamily</name></type> <name>cf_</name> <range>: <expr><call><name><name>rowMutation</name>.<name>getColumnFamilies</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>cf_</name>.<name>cloneMeShallow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>table</name>.<name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>cf_</name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>localCopy</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>HeapAllocator</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAll</name><parameter_list>(<param><decl><type><name>IMutation</name></type> <name>m</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!(<name>m</name> instanceof <name>CounterMutation</name>)</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>CounterMutation</name></type> <name>cm</name> <init>= <expr>(<name>CounterMutation</name>)<name>m</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rowMutation</name>.<name>addAll</name></name><argument_list>(<argument><expr><name><name>cm</name>.<name>rowMutation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>toString</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>shallow</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buff</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"CounterMutation("</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>rowMutation</name>.<name>toString</name></name><argument_list>(<argument><expr><name>shallow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>consistency</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<class>class <name>CounterMutationSerializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>CounterMutation</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>CounterMutation</name></type> <name>cm</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>RowMutation</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><call><name><name>cm</name>.<name>rowMutation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dos</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>cm</name>.<name>consistency</name></name><argument_list>()</argument_list></call>.<call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CounterMutation</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr><call><name><name>RowMutation</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ConsistencyLevel</name></type> <name>consistency</name> <init>= <expr><call><name><name>Enum</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name><name>ConsistencyLevel</name>.<name>class</name></name></expr></argument>, <argument><expr><call><name><name>dis</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>CounterMutation</name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>consistency</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>CounterMutation</name></type> <name>cm</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>RowMutation</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><call><name><name>cm</name>.<name>rowMutation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call>
             + <call><name><name>TypeSizes</name>.<name>NATIVE</name>.<name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>cm</name>.<name>consistency</name></name><argument_list>()</argument_list></call>.<call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
