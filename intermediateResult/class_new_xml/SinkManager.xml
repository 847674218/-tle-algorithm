<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\net\sink\SinkManager.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>sink</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessageIn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessageOut</name></name>;</import>

<class><specifier>public</specifier> class <name>SinkManager</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>IMessageSink</name></argument>&gt;</argument_list></name></type> <name>sinks</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>IMessageSink</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>IMessageSink</name></type> <name>ms</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>sinks</name>.<name>add</name></name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>sinks</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageOut</name></type> <name>processOutboundMessage</name><parameter_list>(<param><decl><type><name>MessageOut</name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>id</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>to</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>sinks</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>message</name></expr>;</return></then></if>

        <for>for (<init><decl><type><name>IMessageSink</name></type> <name>ms</name> <range>: <expr><name>sinks</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><name>message</name> = <call><name><name>ms</name>.<name>handleMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>message</name> == null</expr>)</condition><then>
                <return>return <expr>null</expr>;</return></then></if>
        }</block></for>
        <return>return <expr><name>message</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageIn</name></type> <name>processInboundMessage</name><parameter_list>(<param><decl><type><name>MessageIn</name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>id</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>sinks</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>message</name></expr>;</return></then></if>

        <for>for (<init><decl><type><name>IMessageSink</name></type> <name>ms</name> <range>: <expr><name>sinks</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><name>message</name> = <call><name><name>ms</name>.<name>handleMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>message</name> == null</expr>)</condition><then>
                <return>return <expr>null</expr>;</return></then></if>
        }</block></for>
        <return>return <expr><name>message</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
