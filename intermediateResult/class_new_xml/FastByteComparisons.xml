<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\FastByteComparisons.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Field</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteOrder</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>AccessController</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>PrivilegedAction</name></name>;</import>

<import>import <name><name>sun</name>.<name>misc</name>.<name>Unsafe</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.<name>Longs</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.<name>UnsignedBytes</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Utility code to do optimized byte-array comparison.
 * This is borrowed and slightly modified from Guava's {@link UnsignedBytes}
 * class to be able to compare arrays that start at non-zero offsets.
 */</comment>
<class><specifier>abstract</specifier> class <name>FastByteComparisons</name> <block>{

  <comment type="block" format="javadoc">/**
   * Lexicographically compare two byte arrays.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b1</name></decl></param>, <param><decl><type><name>int</name></type> <name>s1</name></decl></param>, <param><decl><type><name>int</name></type> <name>l1</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b2</name></decl></param>, <param><decl><type><name>int</name></type> <name>s2</name></decl></param>, <param><decl><type><name>int</name></type> <name>l2</name></decl></param>)</parameter_list> <block>{
    <return>return <expr><call><name><name>LexicographicalComparerHolder</name>.<name>BEST_COMPARER</name>.<name>compareTo</name></name><argument_list>(
        <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class type="interface"><specifier>private</specifier> interface <name><name>Comparer</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <block>{
    <function_decl><type><specifier>abstract</specifier> <specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>T</name></type> <name>buffer1</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset1</name></decl></param>, <param><decl><type><name>int</name></type> <name>length1</name></decl></param>,
        <param><decl><type><name>T</name></type> <name>buffer2</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset2</name></decl></param>, <param><decl><type><name>int</name></type> <name>length2</name></decl></param>)</parameter_list>;</function_decl>
  }</block></class>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Comparer</name><argument_list>&lt;<argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>lexicographicalComparerJavaImpl</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>LexicographicalComparerHolder</name>.<name>PureJavaComparer</name>.<name>INSTANCE</name></name></expr>;</return>
  }</block></function>


  <comment type="block" format="javadoc">/**
   * Provides a lexicographical comparer implementation; either a Java
   * implementation or a faster implementation based on {@link Unsafe}.
   *
   * &lt;p&gt;Uses reflection to gracefully fall back to the Java implementation if
   * {@code Unsafe} isn't available.
   */</comment>
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>LexicographicalComparerHolder</name> <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNSAFE_COMPARER_NAME</name> <init>=
        <expr><call><name><name>LexicographicalComparerHolder</name>.<name><name>class</name>.<name>getName</name></name></name><argument_list>()</argument_list></call> + "$UnsafeComparer"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>Comparer</name><argument_list>&lt;<argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>BEST_COMPARER</name> <init>= <expr><call><name>getBestComparer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Returns the Unsafe-using Comparer, or falls back to the pure-Java
     * implementation if unable to do so.
     */</comment>
    <function><type><specifier>static</specifier> <name><name>Comparer</name><argument_list>&lt;<argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>getBestComparer</name><parameter_list>()</parameter_list> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>theClass</name> <init>= <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>UNSAFE_COMPARER_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// yes, UnsafeComparer does implement Comparer&lt;byte[]&gt;</comment>
        <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr>"unchecked"</expr></argument>)</argument_list></annotation>
        <name><name>Comparer</name><argument_list>&lt;<argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>comparer</name> <init>=
          <expr>(<name><name>Comparer</name><argument_list>&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name>) <call><name><name>theClass</name>.<name>getEnumConstants</name></name><argument_list>()</argument_list></call><index>[<expr>0</expr>]</index></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>comparer</name></expr>;</return>
      }</block> <catch>catch <parameter_list>(<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{ <comment type="line">// ensure we really catch *everything*</comment>
        <return>return <expr><call><name>lexicographicalComparerJavaImpl</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></catch></try>
    }</block></function>

    <enum><specifier>private</specifier> enum <name>PureJavaComparer</name> <super><implements>implements <name><name>Comparer</name><argument_list>&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></implements></super> <block>{
      <decl><name>INSTANCE</name></decl>;

      <function><type><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer1</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset1</name></decl></param>, <param><decl><type><name>int</name></type> <name>length1</name></decl></param>,
          <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer2</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset2</name></decl></param>, <param><decl><type><name>int</name></type> <name>length2</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Short circuit equal case</comment>
        <if>if <condition>(<expr><name>buffer1</name> == <name>buffer2</name> &amp;&amp;
            <name>offset1</name> == <name>offset2</name> &amp;&amp;
            <name>length1</name> == <name>length2</name></expr>)</condition><then> <block>{
          <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>end1</name> <init>= <expr><name>offset1</name> + <name>length1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end2</name> <init>= <expr><name>offset2</name> + <name>length2</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>offset1</name></expr></init></decl></init>, <condition><expr><name>j</name> = <name>offset2</name></expr>;</condition> <incr><expr><name>i</name> &lt; <name>end1</name> &amp;&amp; <name>j</name> &lt; <name>end2</name></expr>;</incr> i++, j++) <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr>(<name><name>buffer1</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0xff)</expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr>(<name><name>buffer2</name><index>[<expr><name>j</name></expr>]</index></name> &amp; 0xff)</expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>a</name> != <name>b</name></expr>)</condition><then> <block>{
            <return>return <expr><name>a</name> - <name>b</name></expr>;</return>
          }</block></then></if>
        }</block></for>
        <return>return <expr><name>length1</name> - <name>length2</name></expr>;</return>
      }</block></function>
    }</block></enum>

    <enum><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr>"unused"</expr></argument>)</argument_list></annotation> <comment type="line">// used via reflection</comment>
    <specifier>private</specifier> enum <name>UnsafeComparer</name> <super><implements>implements <name><name>Comparer</name><argument_list>&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></implements></super> <block>{
      <decl><name>INSTANCE</name></decl>;

      <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Unsafe</name></type> <name>theUnsafe</name></decl>;</decl_stmt>

      <comment type="block" format="javadoc">/** The offset to the first element in a byte array. */</comment>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_ARRAY_BASE_OFFSET</name></decl>;</decl_stmt>

      <expr>static <block>{
        <expr><name>theUnsafe</name> = (<name>Unsafe</name>) <call><name><name>AccessController</name>.<name>doPrivileged</name></name><argument_list>(
            <argument><expr>new <class><super><name><name>PrivilegedAction</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
              <function><type><annotation>@<name>Override</name></annotation>
              <specifier>public</specifier> <name>Object</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <try>try <block>{
                  <decl_stmt><decl><type><name>Field</name></type> <name>f</name> <init>= <expr><call><name><name>Unsafe</name>.<name><name>class</name>.<name>getDeclaredField</name></name></name><argument_list>(<argument><expr>"theUnsafe"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name><name>f</name>.<name>setAccessible</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <return>return <expr><call><name><name>f</name>.<name>get</name></name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</return>
                <expr_stmt/></block></try></block></function></block></class></expr></argument></argument_list></call></expr>}</block></expr> <catch>catch <parameter_list>(<param><decl><type><name>NoSuchFieldException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
                  <comment type="line">// It doesn't matter what we throw;</comment>
                  <comment type="line">// it's swallowed in getBestComparer().</comment>
                  <throw>throw <expr>new <call><name>Error</name><argument_list>()</argument_list></call></expr>;</throw>
                }</block></catch> <catch>catch <parameter_list>(<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
                  <throw>throw <expr>new <call><name>Error</name><argument_list>()</argument_list></call></expr>;</throw>
                }</block></catch>
              }</block></enum>
            }</block></class>)</block>;</class>

        <expr_stmt><expr><name>BYTE_ARRAY_BASE_OFFSET</name> = <call><name><name>theUnsafe</name>.<name>arrayBaseOffset</name></name><argument_list>(<argument><expr><name><name>byte</name><index>[]</index></name>.class</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// sanity check - this should never fail</comment>
        <if>if <condition>(<expr><call><name><name>theUnsafe</name>.<name>arrayIndexScale</name></name><argument_list>(<argument><expr><name><name>byte</name><index>[]</index></name>.class</expr></argument>)</argument_list></call> != 1</expr>)</condition><then> <block>{
          <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
      }

      static <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>littleEndian</name> <init>=
        <expr><call><name><name>ByteOrder</name>.<name>nativeOrder</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name><name>ByteOrder</name>.<name>LITTLE_ENDIAN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="block" format="javadoc">/**
       * Returns true if x1 is less than x2, when both values are treated as
       * unsigned.
       */</comment>
      <function><type><specifier>static</specifier> <name>boolean</name></type> <name>lessThanUnsigned</name><parameter_list>(<param><decl><type><name>long</name></type> <name>x1</name></decl></param>, <param><decl><type><name>long</name></type> <name>x2</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>x1</name> + <name><name>Long</name>.<name>MIN_VALUE</name></name>) &lt; (<name>x2</name> + <name><name>Long</name>.<name>MIN_VALUE</name></name>)</expr>;</return>
      }</block></function>

      <comment type="block" format="javadoc">/**
       * Lexicographically compare two arrays.
       *
       * @param buffer1 left operand
       * @param buffer2 right operand
       * @param offset1 Where to start comparing in the left buffer
       * @param offset2 Where to start comparing in the right buffer
       * @param length1 How much to compare from the left buffer
       * @param length2 How much to compare from the right buffer
       * @return 0 if equal, &lt; 0 if left is less than right, etc.
       */</comment>
      <function><type><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer1</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset1</name></decl></param>, <param><decl><type><name>int</name></type> <name>length1</name></decl></param>,
          <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer2</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset2</name></decl></param>, <param><decl><type><name>int</name></type> <name>length2</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Short circuit equal case</comment>
        <if>if <condition>(<expr><name>buffer1</name> == <name>buffer2</name> &amp;&amp;
            <name>offset1</name> == <name>offset2</name> &amp;&amp;
            <name>length1</name> == <name>length2</name></expr>)</condition><then> <block>{
          <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>minLength</name> <init>= <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>length1</name></expr></argument>, <argument><expr><name>length2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>minWords</name> <init>= <expr><name>minLength</name> / <name><name>Longs</name>.<name>BYTES</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>offset1Adj</name> <init>= <expr><name>offset1</name> + <name>BYTE_ARRAY_BASE_OFFSET</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>offset2Adj</name> <init>= <expr><name>offset2</name> + <name>BYTE_ARRAY_BASE_OFFSET</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * Compare 8 bytes at a time. Benchmarking shows comparing 8 bytes at a
         * time is no slower than comparing 4 bytes at a time even on 32-bit.
         * On the other hand, it is substantially faster on 64-bit.
         */</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>minWords</name> * <name><name>Longs</name>.<name>BYTES</name></name></expr>;</condition> <incr><expr><name>i</name> += <name><name>Longs</name>.<name>BYTES</name></name></expr></incr>) <block>{
          <decl_stmt><decl><type><name>long</name></type> <name>lw</name> <init>= <expr><call><name><name>theUnsafe</name>.<name>getLong</name></name><argument_list>(<argument><expr><name>buffer1</name></expr></argument>, <argument><expr><name>offset1Adj</name> + (<name>long</name>) <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>long</name></type> <name>rw</name> <init>= <expr><call><name><name>theUnsafe</name>.<name>getLong</name></name><argument_list>(<argument><expr><name>buffer2</name></expr></argument>, <argument><expr><name>offset2Adj</name> + (<name>long</name>) <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>long</name></type> <name>diff</name> <init>= <expr><name>lw</name> ^ <name>rw</name></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>diff</name> != 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>littleEndian</name></expr>)</condition><then> <block>{
              <return>return <expr><call><name>lessThanUnsigned</name><argument_list>(<argument><expr><name>lw</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call> ? -1 : 1</expr>;</return>
            }</block></then></if>

            <comment type="line">// Use binary search</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr>(<name>int</name>) <name>diff</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>x</name> == 0</expr>)</condition><then> <block>{
              <expr_stmt><expr><name>x</name> = <call>(<name>int</name>) <argument_list>(<argument><expr><name>diff</name> &gt;&gt;&gt; 32</expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>n</name> = 32</expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name>y</name> = <name>x</name> &lt;&lt; 16</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>y</name> == 0</expr>)</condition><then> <block>{
              <expr_stmt><expr><name>n</name> += 16</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
              <expr_stmt><expr><name>x</name> = <name>y</name></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>y</name> = <name>x</name> &lt;&lt; 8</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>y</name> == 0</expr>)</condition><then> <block>{
              <expr_stmt><expr><name>n</name> += 8</expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><call>(<name>int</name>) <argument_list>(<argument><expr>((<name>lw</name> &gt;&gt;&gt; <name>n</name>) &amp; 0xFFL) - ((<name>rw</name> &gt;&gt;&gt; <name>n</name>) &amp; 0xFFL)</expr></argument>)</argument_list></call></expr>;</return>
          }</block></then></if>
        }</block></for>

        <comment type="line">// The epilogue to cover the last (minLength % 8) elements.</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>minWords</name> * <name><name>Longs</name>.<name>BYTES</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>minLength</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>UnsignedBytes</name>.<name>compare</name></name><argument_list>(
              <argument><expr><name><name>buffer1</name><index>[<expr><name>offset1</name> + <name>i</name></expr>]</index></name></expr></argument>,
              <argument><expr><name><name>buffer2</name><index>[<expr><name>offset2</name> + <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>result</name> != 0</expr>)</condition><then> <block>{
            <return>return <expr><name>result</name></expr>;</return>
          }</block></then></if>
        }</block></for>
        <return>return <expr><name>length1</name> - <name>length2</name></expr>;</return>
      }</block></function>
    }
  }
}
</unit>
