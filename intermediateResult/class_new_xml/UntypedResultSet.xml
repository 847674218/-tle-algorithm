<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\UntypedResultSet.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>UUID</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>AbstractIterator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>ResultSet</name></name>;</import>

<comment type="block" format="javadoc">/** a utility for doing internal cql-based queries */</comment>
<class><specifier>public</specifier> class <name>UntypedResultSet</name> <super><implements>implements <name><name>Iterable</name><argument_list>&lt;<argument><name><name>UntypedResultSet</name>.<name>Row</name></name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ResultSet</name></type> <name>cqlRows</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>UntypedResultSet</name><parameter_list>(<param><decl><type><name>ResultSet</name></type> <name>cqlRows</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>cqlRows</name></name> = <name>cqlRows</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>cqlRows</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>cqlRows</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Row</name></type> <name>one</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>cqlRows</name>.<name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call> != 1</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"One row required, " + <call><name><name>cqlRows</name>.<name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call> + " found"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <return>return <expr>new <call><name>Row</name><argument_list>(<argument><expr><name><name>cqlRows</name>.<name>metadata</name>.<name>names</name></name></expr></argument>, <argument><expr><call><name><name>cqlRows</name>.<name>rows</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <class><super><name><name>AbstractIterator</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>cqlRows</name>.<name>rows</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <function><type><specifier>protected</specifier> <name>Row</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
            <block>{
                <if>if <condition>(<expr>!<call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></then></if>
                <return>return <expr>new <call><name>Row</name><argument_list>(<argument><expr><name><name>cqlRows</name>.<name>metadata</name>.<name>names</name></name></expr></argument>, <argument><expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Row</name>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Row</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>)</parameter_list>
        <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <expr_stmt><expr><call><name><name>data</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>names</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>columns</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>has</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// Note that containsKey won't work because we may have null values</comment>
            <return>return <expr><call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call> != null</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>UTF8Type</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>BooleanType</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>Int32Type</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>double</name></type> <name>getDouble</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>DoubleType</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>getBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>InetAddress</name></type> <name>getInetAddress</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>InetAddressType</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getUUID</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>UUIDType</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Date</name></type> <name>getTimestamp</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>DateType</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name><name>Set</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getSet</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>raw</name> <init>= <expr><call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>raw</name> == null ? null : <call><name><name>SetType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call>.<call><name>compose</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list> <name><name>Map</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>getMap</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>K</name></argument>&gt;</argument_list></name></type> <name>keyType</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>valueType</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>raw</name> <init>= <expr><call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>raw</name> == null ? null : <call><name><name>MapType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>valueType</name></expr></argument>)</argument_list></call>.<call><name>compose</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>data</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
