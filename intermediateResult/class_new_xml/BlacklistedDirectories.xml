<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\BlacklistedDirectories.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>management</name>.<name>ManagementFactory</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>CopyOnWriteArraySet</name></name>;</import>

<import>import <name><name>javax</name>.<name>management</name>.<name>MBeanServer</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>ObjectName</name></name>;</import>

<class><specifier>public</specifier> class <name>BlacklistedDirectories</name> <super><implements>implements <name>BlacklistedDirectoriesMBean</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MBEAN_NAME</name> <init>= <expr>"org.apache.cassandra.db:type=BlacklistedDirectories"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>BlacklistedDirectories</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BlacklistedDirectories</name></type> <name>instance</name> <init>= <expr>new <call><name>BlacklistedDirectories</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>unreadableDirectories</name> <init>= <expr>new <call><name><name>CopyOnWriteArraySet</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>unwritableDirectories</name> <init>= <expr>new <call><name><name>CopyOnWriteArraySet</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>BlacklistedDirectories</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// Register this instance with JMX</comment>
        <try>try
        <block>{
            <decl_stmt><decl><type><name>MBeanServer</name></type> <name>mbs</name> <init>= <expr><call><name><name>ManagementFactory</name>.<name>getPlatformMBeanServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mbs</name>.<name>registerMBean</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>new <call><name>ObjectName</name><argument_list>(<argument><expr><name>MBEAN_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"error registering MBean " + <name>MBEAN_NAME</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//Allow the server to start even if the bean can't be registered</comment>
        }</block></catch></try>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>getUnreadableDirectories</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableSet</name></name><argument_list>(<argument><expr><name>unreadableDirectories</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>getUnwritableDirectories</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableSet</name></name><argument_list>(<argument><expr><name>unwritableDirectories</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Adds parent directory of the file (or the file itself, if it is a directory)
     * to the set of unreadable directories.
     *
     * @return the blacklisted directory or null if nothing has been added to the list.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>maybeMarkUnreadable</name><parameter_list>(<param><decl><type><name>File</name></type> <name>path</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>directory</name> <init>= <expr><call><name>getDirectory</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>instance</name>.<name>unreadableDirectories</name>.<name>add</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Blacklisting {} for reads"</expr></argument>, <argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>directory</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>null</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Adds parent directory of the file (or the file itself, if it is a directory)
     * to the set of unwritable directories.
     *
     * @return the blacklisted directory or null if nothing has been added to the list.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>maybeMarkUnwritable</name><parameter_list>(<param><decl><type><name>File</name></type> <name>path</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>directory</name> <init>= <expr><call><name>getDirectory</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>instance</name>.<name>unwritableDirectories</name>.<name>add</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Blacklisting {} for writes"</expr></argument>, <argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>directory</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>null</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Tells whether or not the directory is blacklisted for reads.
     * @return whether or not the directory is blacklisted for reads.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isUnreadable</name><parameter_list>(<param><decl><type><name>File</name></type> <name>directory</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>instance</name>.<name>unreadableDirectories</name>.<name>contains</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Tells whether or not the directory is blacklisted for writes.
     * @return whether or not the directory is blacklisted for reads.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isUnwritable</name><parameter_list>(<param><decl><type><name>File</name></type> <name>directory</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>instance</name>.<name>unwritableDirectories</name>.<name>contains</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>getDirectory</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>file</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>file</name></expr>;</return></then></if>

        <if>if <condition>(<expr><call><name><name>file</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name><name>file</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <comment type="line">// the file with path cannot be read - try determining the directory manually.</comment>
        <if>if <condition>(<expr><call><name><name>file</name>.<name>getPath</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".db"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name><name>file</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <comment type="line">// We may not be able to determine if it's a file or a directory if</comment>
        <comment type="line">// we were called because we couldn't create the file/directory.</comment>
        <return>return <expr><name>file</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
