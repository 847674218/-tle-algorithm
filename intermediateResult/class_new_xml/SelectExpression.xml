<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql\SelectExpression.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Select expressions are analogous to the projection in a SQL query. They
 * determine which columns will appear in the result set.  SelectExpression
 * instances encapsulate a parsed expression from a &lt;code&gt;SELECT&lt;/code&gt;
 * statement.
 *
 * See: doc/cql/CQL.html#SpecifyingColumns
 */</comment>
<class><specifier>public</specifier> class <name>SelectExpression</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_COLUMNS_DEFAULT</name> <init>= <expr>10000</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numColumns</name> <init>= <expr><name>MAX_COLUMNS_DEFAULT</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>reverseColumns</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>hasFirstSet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>wildcard</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Term</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>finish</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create a new SelectExpression for a range (slice) of columns.
     *
     * @param start the starting column name
     * @param finish the finishing column name
     * @param count the number of columns to limit the results to
     * @param reverse true to reverse column order
     * @param wildcard determines weather this statement is wildcard
     * @param firstSet determines weather "FIRST" keyword was set
     */</comment>
    <constructor><specifier>public</specifier> <name>SelectExpression</name><parameter_list>(<param><decl><type><name>Term</name></type> <name>start</name></decl></param>, <param><decl><type><name>Term</name></type> <name>finish</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reverse</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>wildcard</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>firstSet</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>start</name></name> = <name>start</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>finish</name></name> = <name>finish</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>numColumns</name> = <name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>reverseColumns</name> = <name>reverse</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>wildcard</name></name> = <name>wildcard</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hasFirstSet</name> = <name>firstSet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columns</name></name> = null</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Create a new SelectExpression for a list of columns.
     *
     * @param first the first (possibly only) column name to select on.
     * @param count the number of columns to limit the results on
     * @param reverse true to reverse column order
     * @param firstSet determines weather "FIRST" keyword was set
     */</comment>
    <constructor><specifier>public</specifier> <name>SelectExpression</name><parameter_list>(<param><decl><type><name>Term</name></type> <name>first</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reverse</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>firstSet</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>wildcard</name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name>columns</name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>columns</name>.<name>add</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numColumns</name> = <name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>reverseColumns</name> = <name>reverse</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hasFirstSet</name> = <name>firstSet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>start</name> = null</expr>;</expr_stmt>
        <expr_stmt><expr><name>finish</name> = null</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Add an additional column name to a SelectExpression.
     *
     * @param addTerm
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>and</name><parameter_list>(<param><decl><type><name>Term</name></type> <name>addTerm</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr>!<call><name>isColumnRange</name><argument_list>()</argument_list></call></expr>;</assert>    <comment type="line">// Not possible when invoked by parser</comment>
        <expr_stmt><expr><call><name><name>columns</name>.<name>add</name></name><argument_list>(<argument><expr><name>addTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isColumnRange</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>(<name>start</name> != null)</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isColumnList</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>!<call><name>isColumnRange</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnsLimit</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>numColumns</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isColumnsReversed</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>reverseColumns</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setColumnsReversed</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>reverseColumns</name> = <name>reversed</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setColumnsLimit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>limit</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>numColumns</name> = <name>limit</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return weather expression includes "FIRST" keyword
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasFirstSet</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>hasFirstSet</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Term</name></type> <name>getStart</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>start</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Term</name></type> <name>getFinish</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>finish</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>getColumns</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>columns</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isWildcard</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>wildcard</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"SelectExpression [numColumns=%s, reverseColumns=%s, hasFirstSet=%s, wildcard=%s, start=%s, finish=%s, columns=%s]"</expr></argument>,
                             <argument><expr><name>numColumns</name></expr></argument>,
                             <argument><expr><name>reverseColumns</name></expr></argument>,
                             <argument><expr><name>hasFirstSet</name></expr></argument>,
                             <argument><expr><name>wildcard</name></expr></argument>,
                             <argument><expr><name>start</name></expr></argument>,
                             <argument><expr><name>finish</name></expr></argument>,
                             <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


}</block></class>
</unit>
