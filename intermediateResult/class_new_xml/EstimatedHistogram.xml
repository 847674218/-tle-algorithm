<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\EstimatedHistogram.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicLongArray</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Objects</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISerializer</name></name>;</import>

<class><specifier>public</specifier> class <name>EstimatedHistogram</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>EstimatedHistogramSerializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>EstimatedHistogramSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The series of values to which the counts in `buckets` correspond:
     * 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, etc.
     * Thus, a `buckets` of [0, 0, 1, 10] would mean we had seen one value of 3 and 10 values of 4.
     *
     * The series starts at 1 and grows by 1.2 each time (rounding and removing duplicates). It goes from 1
     * to around 36M by default (creating 90+1 buckets), which will give us timing resolution from microseconds to
     * 36 seconds, with less precision as the numbers get larger.
     *
     * Each bucket represents values from (previous bucket offset, current offset].
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name><index>[]</index></type> <name>bucketOffsets</name></decl>;</decl_stmt>

    <comment type="line">// buckets is one element longer than bucketOffsets -- the last element is values greater than the last offset</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>AtomicLongArray</name></type> <name>buckets</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>EstimatedHistogram</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>90</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>EstimatedHistogram</name><parameter_list>(<param><decl><type><name>int</name></type> <name>bucketCount</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>makeOffsets</name><argument_list>(<argument><expr><name>bucketCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>buckets</name> = new <call><name>AtomicLongArray</name><argument_list>(<argument><expr><name><name>bucketOffsets</name>.<name>length</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>EstimatedHistogram</name><parameter_list>(<param><decl><type><name><name>long</name><index>[]</index></name></type> <name>offsets</name></decl></param>, <param><decl><type><name><name>long</name><index>[]</index></name></type> <name>bucketData</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name><name>bucketData</name>.<name>length</name></name> == <name><name>offsets</name>.<name>length</name></name> +1</expr>;</assert>
        <expr_stmt><expr><name>bucketOffsets</name> = <name>offsets</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buckets</name> = new <call><name>AtomicLongArray</name><argument_list>(<argument><expr><name>bucketData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>makeOffsets</name><parameter_list>(<param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>bucketOffsets</name> = new <name><name>long</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>last</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>bucketOffsets</name><index>[<expr>0</expr>]</index></name> = <name>last</name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>next</name> <init>= <expr><call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>last</name> * 1.2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>next</name> == <name>last</name></expr>)</condition><then>
                <expr_stmt><expr><name>next</name>++</expr>;</expr_stmt></then></if>
            <expr_stmt><expr><name><name>bucketOffsets</name><index>[<expr><name>i</name></expr>]</index></name> = <name>next</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>last</name> = <name>next</name></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return the histogram values corresponding to each bucket index
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getBucketOffsets</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>bucketOffsets</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Increments the count of the bucket closest to n, rounding UP.
     * @param n
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>long</name></type> <name>n</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>Arrays</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name>bucketOffsets</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then>
        <block>{
            <comment type="line">// inexact match, take the first bucket higher than n</comment>
            <expr_stmt><expr><name>index</name> = -<name>index</name> - 1</expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// else exact match; we're good</comment>
        <expr_stmt><expr><call><name><name>buckets</name>.<name>incrementAndGet</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return the count in the given bucket
     */</comment>
    <function><type><name>long</name></type> <name>get</name><parameter_list>(<param><decl><type><name>int</name></type> <name>bucket</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>buckets</name>.<name>get</name></name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param reset zero out buckets afterwards if true
     * @return a long[] containing the current histogram buckets
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name><index>[]</index></type> <name>getBuckets</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>reset</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>rv</name> <init>= <expr>new <name><name>long</name><index>[<expr><call><name><name>buckets</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>buckets</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <expr_stmt><expr><name><name>rv</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>buckets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <if>if <condition>(<expr><name>reset</name></expr>)</condition><then>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>buckets</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <expr_stmt><expr><call><name><name>buckets</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>0L</expr></argument>)</argument_list></call></expr>;</expr_stmt></for></then></if>

        <return>return <expr><name>rv</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return the smallest value that could have been added to this histogram
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>min</name><parameter_list>()</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>buckets</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <if>if <condition>(<expr><call><name><name>buckets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
                <return>return <expr><name>i</name> == 0 ? 0 : 1 + <name><name>bucketOffsets</name><index>[<expr><name>i</name> - 1</expr>]</index></name></expr>;</return></then></if>
        }</block></for>
        <return>return <expr>0</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return the largest value that could have been added to this histogram.  If the histogram
     * overflowed, returns Long.MAX_VALUE.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>max</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>lastBucket</name> <init>= <expr><call><name><name>buckets</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>buckets</name>.<name>get</name></name><argument_list>(<argument><expr><name>lastBucket</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
            <return>return <expr><name><name>Long</name>.<name>MAX_VALUE</name></name></expr>;</return></then></if>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>lastBucket</name> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)
        <block>{
            <if>if <condition>(<expr><call><name><name>buckets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
                <return>return <expr><name><name>bucketOffsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></then></if>
        }</block></for>
        <return>return <expr>0</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param percentile
     * @return estimated value at given percentile
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>percentile</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percentile</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>percentile</name> &gt;= 0 &amp;&amp; <name>percentile</name> &lt;= 1.0</expr>;</assert>
        <decl_stmt><decl><type><name>int</name></type> <name>lastBucket</name> <init>= <expr><call><name><name>buckets</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>buckets</name>.<name>get</name></name><argument_list>(<argument><expr><name>lastBucket</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Unable to compute when histogram overflowed"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>pcount</name> <init>= <expr>(<name>long</name>) <call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr><call><name>count</name><argument_list>()</argument_list></call> * <name>percentile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pcount</name> == 0</expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>elements</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>lastBucket</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <expr_stmt><expr><name>elements</name> += <call><name><name>buckets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>elements</name> &gt;= <name>pcount</name></expr>)</condition><then>
                <return>return <expr><name><name>bucketOffsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></then></if>
        }</block></for>
        <return>return <expr>0</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return the mean histogram value (average of bucket offsets, weighted by count)
     * @throws IllegalStateException if any values were greater than the largest bucket threshold
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>mean</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>lastBucket</name> <init>= <expr><call><name><name>buckets</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>buckets</name>.<name>get</name></name><argument_list>(<argument><expr><name>lastBucket</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Unable to compute ceiling for max when histogram overflowed"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>elements</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>sum</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>lastBucket</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <expr_stmt><expr><name>elements</name> += <call><name><name>buckets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum</name> += <call><name><name>buckets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> * <name><name>bucketOffsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr>(<name>long</name>) <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr>(<name>double</name>) <name>sum</name> / <name>elements</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return the total number of non-zero values
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>count</name><parameter_list>()</parameter_list>
    <block>{
       <decl_stmt><decl><type><name>long</name></type> <name>sum</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>
       <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>buckets</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
           <expr_stmt><expr><name>sum</name> += <call><name><name>buckets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
       <return>return <expr><name>sum</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if this histogram has overflowed -- that is, a value larger than our largest bucket could bound was added
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isOverflowed</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>buckets</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>buckets</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call> &gt; 0</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>o</name></expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then></if>

        <if>if <condition>(<expr>!(<name>o</name> instanceof <name>EstimatedHistogram</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>

        <decl_stmt><decl><type><name>EstimatedHistogram</name></type> <name>that</name> <init>= <expr>(<name>EstimatedHistogram</name>) <name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name>getBucketOffsets</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>that</name>.<name>getBucketOffsets</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp;
               <call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name>getBuckets</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>that</name>.<name>getBuckets</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Objects</name>.<name>hashCode</name></name><argument_list>(<argument><expr><call><name>getBucketOffsets</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getBuckets</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>EstimatedHistogramSerializer</name> <super><implements>implements <name><name>ISerializer</name><argument_list>&lt;<argument><name>EstimatedHistogram</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>EstimatedHistogram</name></type> <name>eh</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>offsets</name> <init>= <expr><call><name><name>eh</name>.<name>getBucketOffsets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>buckets</name> <init>= <expr><call><name><name>eh</name>.<name>getBuckets</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>buckets</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>buckets</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeLong</name></name><argument_list>(<argument><expr><name><name>offsets</name><index>[<expr><name>i</name> == 0 ? 0 : <name>i</name> - 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeLong</name></name><argument_list>(<argument><expr><name><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <function><type><specifier>public</specifier> <name>EstimatedHistogram</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>offsets</name> <init>= <expr>new <name><name>long</name><index>[<expr><name>size</name> - 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>buckets</name> <init>= <expr>new <name><name>long</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name><name>offsets</name><index>[<expr><name>i</name> == 0 ? 0 : <name>i</name> - 1</expr>]</index></name> = <call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr>new <call><name>EstimatedHistogram</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>, <argument><expr><name>buckets</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>EstimatedHistogram</name></type> <name>object</name></decl></param>, <param><decl><type><name>TypeSizes</name></type> <name>typeSizes</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
