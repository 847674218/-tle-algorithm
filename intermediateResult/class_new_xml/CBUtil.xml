<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\CBUtil.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>CharacterCodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>UUID</name></name>;</import>

<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffers</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>util</name>.<name>CharsetUtil</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>UUIDGen</name></name>;</import>

<comment type="block" format="javadoc">/**
 * ChannelBuffer utility methods.
 * Note that contrarily to ByteBufferUtil, these method do "read" the
 * ChannelBuffer advancing it's (read) position. They also write by
 * advancing the write position. Functions are also provided to create
 * ChannelBuffer while avoiding copies.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>CBUtil</name>
<block>{
    <constructor><specifier>private</specifier> <name>CBUtil</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>readString</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>cb</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>readString</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IndexOutOfBoundsException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr>"Not enough bytes to read an UTF8 serialized string preceded by it's 2 bytes length"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>readLongString</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>cb</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>readString</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IndexOutOfBoundsException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr>"Not enough bytes to read an UTF8 serialized string preceded by it's 4 bytes length"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>readString</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>cb</name>.<name>toString</name></name><argument_list>(<argument><expr><call><name><name>cb</name>.<name>readerIndex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>CharsetUtil</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cb</name>.<name>readerIndex</name></name><argument_list>(<argument><expr><call><name><name>cb</name>.<name>readerIndex</name></name><argument_list>()</argument_list></call> + <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>str</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IllegalStateException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// That's the way netty encapsulate a CCE</comment>
            <if>if <condition>(<expr><call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call> instanceof <name>CharacterCodingException</name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr>"Cannot decode string as UTF8"</expr></argument>)</argument_list></call></expr>;</throw></then>
            <else>else
                <throw>throw <expr><name>e</name></expr>;</throw></else></if>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ChannelBuffer</name></type> <name>bytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><call><name><name>str</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>CharsetUtil</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ChannelBuffer</name></type> <name>shortToCB</name><parameter_list>(<param><decl><type><name>int</name></type> <name>s</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>cb</name> <init>= <expr><call><name><name>ChannelBuffers</name>.<name>buffer</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cb</name>.<name>writeShort</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cb</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ChannelBuffer</name></type> <name>intToCB</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>cb</name> <init>= <expr><call><name><name>ChannelBuffers</name>.<name>buffer</name></name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cb</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cb</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ChannelBuffer</name></type> <name>stringToCB</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>bytes</name> <init>= <expr><call><name>bytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><call><name>shortToCB</name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ChannelBuffer</name></type> <name>bytesToCB</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><call><name>shortToCB</name><argument_list>(<argument><expr><name><name>bytes</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>readBytes</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>cb</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cb</name>.<name>readBytes</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>bytes</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IndexOutOfBoundsException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr>"Not enough bytes to read a byte array preceded by it's 2 bytes length"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ChannelBuffer</name></type> <name>consistencyLevelToCB</name><parameter_list>(<param><decl><type><name>ConsistencyLevel</name></type> <name>consistency</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>shortToCB</name><argument_list>(<argument><expr><name><name>consistency</name>.<name>code</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ConsistencyLevel</name></type> <name>readConsistencyLevel</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ConsistencyLevel</name>.<name>fromCode</name></name><argument_list>(<argument><expr><call><name><name>cb</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>T</name> <extends>extends <name><name>Enum</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list> <name>T</name></type> <name>readEnumValue</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>enumType</name></decl></param>, <param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <return>return <expr><call><name><name>Enum</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>enumType</name></expr></argument>, <argument><expr><call><name><name>value</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid value '%s' for %s"</expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>enumType</name>.<name>getSimpleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>T</name> <extends>extends <name><name>Enum</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list> <name>ChannelBuffer</name></type> <name>enumValueToCB</name><parameter_list>(<param><decl><type><name>T</name></type> <name>enumValue</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>stringToCB</name><argument_list>(<argument><expr><call><name><name>enumValue</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ChannelBuffer</name></type> <name>uuidToCB</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>uuid</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>decompose</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>readUuid</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr>new <name><name>byte</name><index>[<expr>16</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cb</name>.<name>readBytes</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>UUIDGen</name>.<name>getUUID</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ChannelBuffer</name></type> <name>longStringToCB</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>bytes</name> <init>= <expr><call><name>bytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><call><name>intToCB</name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>readStringList</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>cb</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>l</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <expr_stmt><expr><call><name><name>l</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><name>l</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeStringList</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>l</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>cb</name>.<name>writeShort</name></name><argument_list>(<argument><expr><call><name><name>l</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>String</name></type> <name>str</name> <range>: <expr><name>l</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>cb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><call><name>stringToCB</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>readStringMap</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>cb</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>k</name> <init>= <expr><call><name>readString</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>v</name> <init>= <expr><call><name>readString</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>put</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>m</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeStringMap</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>m</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>cb</name>.<name>writeShort</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>m</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>cb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><call><name>stringToCB</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><call><name>stringToCB</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>readStringToStringListMap</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>cb</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>k</name> <init>= <expr><call><name>readString</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>v</name> <init>= <expr><call><name>readStringList</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>put</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>m</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeStringToStringListMap</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>m</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>cb</name>.<name>writeShort</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>m</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>cb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><call><name>stringToCB</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeStringList</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>readValue</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>cb</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>length</name> &lt; 0 ? null : <call><name><name>cb</name>.<name>readSlice</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call>.<call><name>toByteBuffer</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetSocketAddress</name></type> <name>readInet</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>addrSize</name> <init>= <expr><call><name><name>cb</name>.<name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>address</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>addrSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cb</name>.<name>readBytes</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name><name>cb</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <return>return <expr>new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><call><name><name>InetAddress</name>.<name>getByAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid IP address (%d.%d.%d.%d) while deserializing inet address"</expr></argument>, <argument><expr><name><name>address</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>address</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>address</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>address</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ChannelBuffer</name></type> <name>inetToCB</name><parameter_list>(<param><decl><type><name>InetSocketAddress</name></type> <name>inet</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>address</name> <init>= <expr><call><name><name>inet</name>.<name>getAddress</name></name><argument_list>()</argument_list></call>.<call><name>getAddress</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>cb</name> <init>= <expr><call><name><name>ChannelBuffers</name>.<name>buffer</name></name><argument_list>(<argument><expr>1 + <name><name>address</name>.<name>length</name></name> + 4</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cb</name>.<name>writeByte</name></name><argument_list>(<argument><expr><name><name>address</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cb</name>.<name>writeBytes</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cb</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>inet</name>.<name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cb</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>BufferBuilder</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ChannelBuffer</name><index>[]</index></type> <name>buffers</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>BufferBuilder</name><parameter_list>(<param><decl><type><name>int</name></type> <name>simpleBuffers</name></decl></param>, <param><decl><type><name>int</name></type> <name>stringBuffers</name></decl></param>, <param><decl><type><name>int</name></type> <name>valueBuffers</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>size</name></name> = <name>simpleBuffers</name> + 2 * <name>stringBuffers</name> + 2 * <name>valueBuffers</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>buffers</name></name> = new <name><name>ChannelBuffer</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>BufferBuilder</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>buffers</name><index>[<expr><name>i</name>++</expr>]</index></name> = <name>cb</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>BufferBuilder</name></type> <name>addString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>bytes</name> <init>= <expr><call><name>bytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name>shortToCB</name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>readableBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>add</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>BufferBuilder</name></type> <name>addValue</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name>intToCB</name><argument_list>(<argument><expr><name>bb</name> == null ? -1 : <call><name><name>bb</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>add</name><argument_list>(<argument><expr><name>bb</name> == null ? <name><name>ChannelBuffers</name>.<name>EMPTY_BUFFER</name></name> : <call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><name>buffers</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
