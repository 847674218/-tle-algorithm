<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\messages\ResultMessage.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffers</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>ColumnSpecification</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>ResultSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>TypeParser</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CqlPreparedResult</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CqlResult</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CqlResultType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>MD5Digest</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ResultMessage</name> <super><extends>extends <name><name>Message</name>.<name>Response</name></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>codec</name> <init>= <expr>new <class><super><name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Kind</name></type> <name>kind</name> <init>= <expr><call><name><name>Kind</name>.<name>fromId</name></name><argument_list>(<argument><expr><call><name><name>body</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>kind</name>.<name>subcodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>kcb</name> <init>= <expr><call><name><name>ChannelBuffers</name>.<name>buffer</name></name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>kcb</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>msg</name>.<name>kind</name>.<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>body</name> <init>= <expr><call><name><name>msg</name>.<name>encodeBody</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><name>kcb</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>Kind</name>
    <block>{
        <decl><name>VOID</name>         <argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>Void</name>.<name>subcodec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>ROWS</name>         <argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name><name>Rows</name>.<name>subcodec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>SET_KEYSPACE</name> <argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name><name>SetKeyspace</name>.<name>subcodec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>PREPARED</name>     <argument_list>(<argument><expr>4</expr></argument>, <argument><expr><name><name>Prepared</name>.<name>subcodec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>SCHEMA_CHANGE</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr><name><name>SchemaChange</name>.<name>subcodec</name></name></expr></argument>)</argument_list></decl>;

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Kind</name><index>[]</index></type> <name>ids</name></decl>;</decl_stmt>
        <expr>static
        <block>{
            <expr><name>int</name> <name>maxId</name> = -1</expr>;
            <for>for (<init><decl><type><name>Kind</name></type> <name>k</name> <range>: <expr><call><name><name>Kind</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><name>maxId</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxId</name></expr></argument>, <argument><expr><name><name>k</name>.<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            <name>ids</name> = new <name><name>Kind</name><index>[<expr><name>maxId</name> + 1</expr>]</index></name></block></expr>;
            <for>for (<init><decl><type><name>Kind</name></type> <name>k</name> <range>: <expr><call><name><name>Kind</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr><name><name>ids</name><index>[<expr><name><name>k</name>.<name>id</name></name></expr>]</index></name> != null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Duplicate kind id"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <expr_stmt><expr><name><name>ids</name><index>[<expr><name><name>k</name>.<name>id</name></name></expr>]</index></name> = <name>k</name></expr>;</expr_stmt>
            }</block></for>
        }</block></enum>

        <constructor><specifier>private</specifier> <name>Kind</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>id</name></name> = <name>id</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>subcodec</name></name> = <name>subcodec</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Kind</name></type> <name>fromId</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Kind</name></type> <name>k</name> <init>= <expr><name><name>ids</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unknown kind id %d in RESULT message"</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <return>return <expr><name>k</name></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>ResultMessage</name><parameter_list>(<param><decl><type><name>Kind</name></type> <name>kind</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Message</name>.<name>Type</name>.<name>RESULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>kind</name></name> = <name>kind</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>codec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>ChannelBuffer</name></type> <name>encodeBody</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>CqlResult</name></type> <name>toThriftResult</name><parameter_list>()</parameter_list>;</function_decl>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Void</name> <super><extends>extends <name>ResultMessage</name></extends></super>
    <block>{
        <comment type="line">// Even though we have no specific information here, don't make a</comment>
        <comment type="line">// singleton since as each message it has in fact a streamid and connection.</comment>
        <constructor><specifier>public</specifier> <name>Void</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Kind</name>.<name>VOID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name> <init>= <expr>new <class><super><name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr>new <call><name>Void</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></param>)</parameter_list>
            <block>{
                <assert>assert <expr><name>msg</name> instanceof <name>Void</name></expr>;</assert>
                <return>return <expr><name><name>ChannelBuffers</name>.<name>EMPTY_BUFFER</name></name></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <function><type><specifier>protected</specifier> <name>ChannelBuffer</name></type> <name>encodeBody</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>subcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>CqlResult</name></type> <name>toThriftResult</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>new <call><name>CqlResult</name><argument_list>(<argument><expr><name><name>CqlResultType</name>.<name>VOID</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>"EMPTY RESULT"</expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SetKeyspace</name> <super><extends>extends <name>ResultMessage</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SetKeyspace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Kind</name>.<name>SET_KEYSPACE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>keyspace</name></name> = <name>keyspace</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name> <init>= <expr>new <class><super><name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr>new <call><name>SetKeyspace</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></param>)</parameter_list>
            <block>{
                <assert>assert <expr><name>msg</name> instanceof <name>SetKeyspace</name></expr>;</assert>
                <return>return <expr><call><name><name>CBUtil</name>.<name>stringToCB</name></name><argument_list>(<argument><expr>((<name>SetKeyspace</name>)<name>msg</name>).<name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <function><type><specifier>protected</specifier> <name>ChannelBuffer</name></type> <name>encodeBody</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>subcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>CqlResult</name></type> <name>toThriftResult</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>new <call><name>CqlResult</name><argument_list>(<argument><expr><name><name>CqlResultType</name>.<name>VOID</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>"RESULT set keyspace " + <name>keyspace</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Rows</name> <super><extends>extends <name>ResultMessage</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name> <init>= <expr>new <class><super><name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr>new <call><name>Rows</name><argument_list>(<argument><expr><call><name><name>ResultSet</name>.<name>codec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></param>)</parameter_list>
            <block>{
                <assert>assert <expr><name>msg</name> instanceof <name>Rows</name></expr>;</assert>
                <decl_stmt><decl><type><name>Rows</name></type> <name>rowMsg</name> <init>= <expr>(<name>Rows</name>)<name>msg</name></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>ResultSet</name>.<name>codec</name>.<name>encode</name></name><argument_list>(<argument><expr><name><name>rowMsg</name>.<name>result</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ResultSet</name></type> <name>result</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Rows</name><parameter_list>(<param><decl><type><name>ResultSet</name></type> <name>result</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Kind</name>.<name>ROWS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>result</name></name> = <name>result</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>protected</specifier> <name>ChannelBuffer</name></type> <name>encodeBody</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>subcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>CqlResult</name></type> <name>toThriftResult</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>result</name>.<name>toThriftResult</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>"ROWS " + <name>result</name></expr>;</return>
        }</block></function>

    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Prepared</name> <super><extends>extends <name>ResultMessage</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name> <init>= <expr>new <class><super><name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>MD5Digest</name></type> <name>id</name> <init>= <expr><call><name><name>MD5Digest</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>readBytes</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr>new <call><name>Prepared</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><call><name><name>ResultSet</name>.<name>Metadata</name>.<name>codec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></param>)</parameter_list>
            <block>{
                <assert>assert <expr><name>msg</name> instanceof <name>Prepared</name></expr>;</assert>
                <decl_stmt><decl><type><name>Prepared</name></type> <name>prepared</name> <init>= <expr>(<name>Prepared</name>)<name>msg</name></expr></init></decl>;</decl_stmt>
                <assert>assert <expr><name><name>prepared</name>.<name>statementId</name></name> != null</expr>;</assert>
                <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>bytesToCB</name></name><argument_list>(<argument><expr><name><name>prepared</name>.<name>statementId</name>.<name>bytes</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ResultSet</name>.<name>Metadata</name>.<name>codec</name>.<name>encode</name></name><argument_list>(<argument><expr><name><name>prepared</name>.<name>metadata</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>MD5Digest</name></type> <name>statementId</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>ResultSet</name>.<name>Metadata</name></name></type> <name>metadata</name></decl>;</decl_stmt>

        <comment type="line">// statement id for CQL-over-thrift compatibility. The binary protocol ignore that.</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>thriftStatementId</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Prepared</name><parameter_list>(<param><decl><type><name>MD5Digest</name></type> <name>statementId</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>statementId</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>new <call><name><name>ResultSet</name>.<name>Metadata</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Prepared</name></type> <name>forThrift</name><parameter_list>(<param><decl><type><name>int</name></type> <name>statementId</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>Prepared</name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr><name>statementId</name></expr></argument>, <argument><expr>new <call><name><name>ResultSet</name>.<name>Metadata</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <constructor><specifier>private</specifier> <name>Prepared</name><parameter_list>(<param><decl><type><name>MD5Digest</name></type> <name>statementId</name></decl></param>, <param><decl><type><name>int</name></type> <name>thriftStatementId</name></decl></param>, <param><decl><type><name><name>ResultSet</name>.<name>Metadata</name></name></type> <name>metadata</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Kind</name>.<name>PREPARED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>statementId</name></name> = <name>statementId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>thriftStatementId</name></name> = <name>thriftStatementId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>metadata</name></name> = <name>metadata</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>protected</specifier> <name>ChannelBuffer</name></type> <name>encodeBody</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>subcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>CqlResult</name></type> <name>toThriftResult</name><parameter_list>()</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier>public</specifier> <name>CqlPreparedResult</name></type> <name>toThriftPreparedResult</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>namesString</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>typesString</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>ColumnSpecification</name></type> <name>name</name> <range>: <expr><name><name>metadata</name>.<name>names</name></name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>namesString</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>name</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>typesString</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>TypeParser</name>.<name>getShortName</name></name><argument_list>(<argument><expr><name><name>name</name>.<name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr>new <call><name>CqlPreparedResult</name><argument_list>(<argument><expr><name>thriftStatementId</name></expr></argument>, <argument><expr><call><name><name>metadata</name>.<name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>setVariable_types</name><argument_list>(<argument><expr><name>typesString</name></expr></argument>)</argument_list></call>.<call><name>setVariable_names</name><argument_list>(<argument><expr><name>namesString</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>"RESULT PREPARED " + <name>statementId</name> + " " + <name>metadata</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SchemaChange</name> <super><extends>extends <name>ResultMessage</name></extends></super>
    <block>{
        <enum><specifier>public</specifier> enum <name>Change</name> <block>{ <decl><name>CREATED</name></decl>, <decl><name>UPDATED</name></decl>, <decl><name>DROPPED</name></decl> }</block></enum>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Change</name></type> <name>change</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>columnFamily</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SchemaChange</name><parameter_list>(<param><decl><type><name>Change</name></type> <name>change</name></decl></param>, <param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>change</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>public</specifier> <name>SchemaChange</name><parameter_list>(<param><decl><type><name>Change</name></type> <name>change</name></decl></param>, <param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Kind</name>.<name>SCHEMA_CHANGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>change</name></name> = <name>change</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>keyspace</name></name> = <name>keyspace</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>columnFamily</name></name> = <name>columnFamily</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name> <init>= <expr>new <class><super><name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>cStr</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Change</name></type> <name>change</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
                <try>try
                <block>{
                    <expr_stmt><expr><name>change</name> = <call><name><name>Enum</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name><name>Change</name>.<name>class</name></name></expr></argument>, <argument><expr><call><name><name>cStr</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>IllegalStateException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr>"Unknown Schema change action: " + <name>cStr</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>

                <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>CBUtil</name>.<name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr>new <call><name>SchemaChange</name><argument_list>(<argument><expr><name>change</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</return>

            }</block></function>

            <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></param>)</parameter_list>
            <block>{
                <assert>assert <expr><name>msg</name> instanceof <name>SchemaChange</name></expr>;</assert>
                <decl_stmt><decl><type><name>SchemaChange</name></type> <name>scm</name> <init>= <expr>(<name>SchemaChange</name>)<name>msg</name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>a</name> <init>= <expr><call><name><name>CBUtil</name>.<name>stringToCB</name></name><argument_list>(<argument><expr><call><name><name>scm</name>.<name>change</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>k</name> <init>= <expr><call><name><name>CBUtil</name>.<name>stringToCB</name></name><argument_list>(<argument><expr><name><name>scm</name>.<name>keyspace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>c</name> <init>= <expr><call><name><name>CBUtil</name>.<name>stringToCB</name></name><argument_list>(<argument><expr><name><name>scm</name>.<name>columnFamily</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <function><type><specifier>protected</specifier> <name>ChannelBuffer</name></type> <name>encodeBody</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>subcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>CqlResult</name></type> <name>toThriftResult</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>new <call><name>CqlResult</name><argument_list>(<argument><expr><name><name>CqlResultType</name>.<name>VOID</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>"RESULT schema change " + <name>change</name> + " on " + <name>keyspace</name> + (<call><name><name>columnFamily</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? "" : "." + <name>columnFamily</name>)</expr>;</return>
        }</block></function>
    }</block></class>
}
</unit>
