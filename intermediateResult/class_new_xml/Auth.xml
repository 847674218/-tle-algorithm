<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\auth\Auth.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>UntypedResultSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>RequestExecutionException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>MigrationManager</name></name>;</import>

<class><specifier>public</specifier> class <name>Auth</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>Auth</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_SUPERUSER_NAME</name> <init>= <expr>"cassandra"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AUTH_KS</name> <init>= <expr>"system_auth"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USERS_CF</name> <init>= <expr>"users"</expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Checks if the username is stored in AUTH_KS.USERS_CF.
     *
     * @param username Username to query.
     * @return whether or not Cassandra knows about the user.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isExistingUser</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"SELECT * FROM %s.%s WHERE name = '%s'"</expr></argument>, <argument><expr><name>AUTH_KS</name></expr></argument>, <argument><expr><name>USERS_CF</name></expr></argument>, <argument><expr><call><name>escape</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <return>return <expr>!<call><name><name>QueryProcessor</name>.<name>process</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call>.<call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>RequestExecutionException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the user is a known superuser.
     *
     * @param username Username to query.
     * @return true is the user is a superuser, false if they aren't or don't exist at all.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSuperuser</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"SELECT super FROM %s.%s WHERE name = '%s'"</expr></argument>, <argument><expr><name>AUTH_KS</name></expr></argument>, <argument><expr><name>USERS_CF</name></expr></argument>, <argument><expr><call><name>escape</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name><name>QueryProcessor</name>.<name>process</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>!<call><name><name>result</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>result</name>.<name>one</name></name><argument_list>()</argument_list></call>.<call><name>getBoolean</name><argument_list>(<argument><expr>"super"</expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>RequestExecutionException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Inserts the user into AUTH_KS.USERS_CF (or overwrites their superuser status as a result of an ALTER USER query).
     *
     * @param username Username to insert.
     * @param isSuper User's new status.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>insertUser</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isSuper</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>QueryProcessor</name>.<name>process</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"INSERT INTO %s.%s (name, super) VALUES ('%s', %s)"</expr></argument>,
                                             <argument><expr><name>AUTH_KS</name></expr></argument>,
                                             <argument><expr><name>USERS_CF</name></expr></argument>,
                                             <argument><expr><call><name>escape</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>isSuper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Deletes the user from AUTH_KS.USERS_CF.
     *
     * @param username Username to delete.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>deleteUser</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>QueryProcessor</name>.<name>process</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"DELETE FROM %s.%s WHERE name = '%s'"</expr></argument>,
                                             <argument><expr><name>AUTH_KS</name></expr></argument>,
                                             <argument><expr><name>USERS_CF</name></expr></argument>,
                                             <argument><expr><call><name>escape</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Sets up Authenticator and Authorizer.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>authenticator</name><argument_list>()</argument_list></call>.<call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>authorizer</name><argument_list>()</argument_list></call>.<call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// register a custom MigrationListener for permissions cleanup after dropped keyspaces/cfs.</comment>
        <expr_stmt><expr><call><name><name>MigrationManager</name>.<name>instance</name>.<name>register</name></name><argument_list>(<argument><expr>new <call><name>MigrationListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Sets up default superuser.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setupSuperuser</name><parameter_list>()</parameter_list>
    <block>{
        <try>try
        <block>{
            <comment type="line">// insert a default superuser if AUTH_KS.USERS_CF is empty.</comment>
            <if>if <condition>(<expr><call><name><name>QueryProcessor</name>.<name>process</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"SELECT * FROM %s.%s"</expr></argument>, <argument><expr><name>AUTH_KS</name></expr></argument>, <argument><expr><name>USERS_CF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name>insertUser</name><argument_list>(<argument><expr><name>DEFAULT_SUPERUSER_NAME</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>RequestExecutionException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Skipping default superuser setup: some nodes are not ready"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="line">// we only worry about one character ('). Make sure it's properly escaped.</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>escape</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>StringUtils</name>.<name>replace</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr>"''"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>IAuthenticator</name></type> <name>authenticator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>DatabaseDescriptor</name>.<name>getAuthenticator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>IAuthorizer</name></type> <name>authorizer</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>DatabaseDescriptor</name>.<name>getAuthorizer</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
