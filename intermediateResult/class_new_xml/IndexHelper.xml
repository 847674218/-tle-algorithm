<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\io\sstable\IndexHelper.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileDataInput</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileMark</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>.*;</import>

<comment type="block" format="javadoc">/**
 * Provides helper to serialize, deserialize and use column indexes.
 */</comment>
<class><specifier>public</specifier> class <name>IndexHelper</name>
<block>{

    <comment type="block" format="javadoc">/**
     * Skip the bloom filter
     * @param in the data input from which the bloom filter should be skipped
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>skipBloomFilter</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <comment type="block">/* size of the bloom filter */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/* skip the serialized bloom filter */</comment>
        <if>if <condition>(<expr><name>in</name> instanceof <name>FileDataInput</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>skipBytesFully</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <comment type="line">// skip bytes</comment>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>skip</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>in</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Skip the index
     * @param in the data input from which the index should be skipped
     * @throws IOException if an I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>skipIndex</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <comment type="block">/* read only the column index list */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>columnIndexSize</name> <init>= <expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/* skip the column index data */</comment>
        <if>if <condition>(<expr><name>in</name> instanceof <name>FileDataInput</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>skipBytesFully</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>columnIndexSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <comment type="line">// skip bytes</comment>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>skip</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>columnIndexSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>in</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Deserialize the index into a structure and return it
     *
     * @param in - input source
     *
     * @return ArrayList&lt;IndexInfo&gt; - list of de-serialized indexes
     * @throws IOException if an I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>IndexInfo</name></argument>&gt;</argument_list></name></type> <name>deserializeIndex</name><parameter_list>(<param><decl><type><name>FileDataInput</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>columnIndexSize</name> <init>= <expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>columnIndexSize</name> == 0</expr>)</condition><then>
            <return>return <expr><name><name>Collections</name>.</name>&lt;<name>IndexInfo</name>&gt;<call><name>emptyList</name><argument_list>()</argument_list></call></expr>;</return></then></if>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list>&lt;<argument><name>IndexInfo</name></argument>&gt;</argument_list></name></type> <name>indexList</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>IndexInfo</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileMark</name></type> <name>mark</name> <init>= <expr><call><name><name>in</name>.<name>mark</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>in</name>.<name>bytesPastMark</name></name><argument_list>(<argument><expr><name>mark</name></expr></argument>)</argument_list></call> &lt; <name>columnIndexSize</name></expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name><name>indexList</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>IndexInfo</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <assert>assert <expr><call><name><name>in</name>.<name>bytesPastMark</name></name><argument_list>(<argument><expr><name>mark</name></expr></argument>)</argument_list></call> == <name>columnIndexSize</name></expr>;</assert>

        <return>return <expr><name>indexList</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IFilter</name></type> <name>defreezeBloomFilter</name><parameter_list>(<param><decl><type><name>FileDataInput</name></type> <name>file</name></decl></param>, <param><decl><type><name><name>FilterFactory</name>.<name>Type</name></name></type> <name>type</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name>defreezeBloomFilter</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * De-freeze the bloom filter.
     *
     * @param file - source file
     * @param maxSize - sanity check: if filter claimes to be larger than this it is bogus
     * @param type - Bloom Filter type.
     *
     * @return bloom filter summarizing the column information
     * @throws java.io.IOException if an I/O error occurs.
     * Guarantees that file's current position will be just after the bloom filter, even if
     * the filter cannot be deserialized, UNLESS EOFException is thrown.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IFilter</name></type> <name>defreezeBloomFilter</name><parameter_list>(<param><decl><type><name>FileDataInput</name></type> <name>file</name></decl></param>, <param><decl><type><name>long</name></type> <name>maxSize</name></decl></param>, <param><decl><type><name><name>FilterFactory</name>.<name>Type</name></name></type> <name>type</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>file</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>size</name> &gt; <name>maxSize</name> || <name>size</name> &lt;= 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>EOFException</name><argument_list>(<argument><expr>"bloom filter claims to be " + <name>size</name> + " bytes, longer than entire row size " + <name>maxSize</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bytes</name> <init>= <expr><call><name><name>file</name>.<name>readBytes</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DataInputStream</name></type> <name>stream</name> <init>= <expr>new <call><name>DataInputStream</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>inputStream</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>FilterFactory</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * The index of the IndexInfo in which a scan starting with @name should begin.
     *
     * @param name
     *         name of the index
     *
     * @param indexList
     *          list of the indexInfo objects
     *
     * @param comparator
     *          comparator type
     *
     * @param reversed
     *          is name reversed
     *
     * @return int index
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>indexFor</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>IndexInfo</name></argument>&gt;</argument_list></name></type> <name>indexList</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>, <param><decl><type><name>int</name></type> <name>lastIndex</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>name</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; <name>reversed</name></expr>)</condition><then>
            <return>return <expr><call><name><name>indexList</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr>;</return></then></if>

        <if>if <condition>(<expr><name>lastIndex</name> &gt;= <call><name><name>indexList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>-1</expr>;</return></then></if>

        <decl_stmt><decl><type><name>IndexInfo</name></type> <name>target</name> <init>= <expr>new <call><name>IndexInfo</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/*
        Take the example from the unit test, and say your index looks like this:
        [0..5][10..15][20..25]
        and you look for the slice [13..17].

        When doing forward slice, we we doing a binary search comparing 13 (the start of the query)
        to the lastName part of the index slot. You'll end up with the "first" slot, going from left to right,
        that may contain the start.

        When doing a reverse slice, we do the same thing, only using as a start column the end of the query,
        i.e. 17 in this example, compared to the firstName part of the index slots.  bsearch will give us the
        first slot where firstName &gt; start ([20..25] here), so we subtract an extra one to get the slot just before.
        */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>startIdx</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>IndexInfo</name></argument>&gt;</argument_list></name></type> <name>toSearch</name> <init>= <expr><name>indexList</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>lastIndex</name> &gt;= 0</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>reversed</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>startIdx</name> = <name>lastIndex</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>toSearch</name> = <call><name><name>indexList</name>.<name>subList</name></name><argument_list>(<argument><expr><name>lastIndex</name></expr></argument>, <argument><expr><call><name><name>indexList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>toSearch</name> = <call><name><name>indexList</name>.<name>subList</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>lastIndex</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>Collections</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name>toSearch</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><call><name>getComparator</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>, <argument><expr><name>reversed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>startIdx</name> + (<name>index</name> &lt; 0 ? -<name>index</name> - (<name>reversed</name> ? 2 : 1) : <name>index</name>)</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>IndexInfo</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>nameComparator</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>reversed</name> ? <name><name>nameComparator</name>.<name>indexReverseComparator</name></name> : <name><name>nameComparator</name>.<name>indexComparator</name></name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>IndexInfo</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>width</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>lastName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>firstName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>IndexInfo</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>firstName</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>lastName</name></decl></param>, <param><decl><type><name>long</name></type> <name>offset</name></decl></param>, <param><decl><type><name>long</name></type> <name>width</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>firstName</name></name> = <name>firstName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>lastName</name></name> = <name>lastName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>offset</name></name> = <name>offset</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>width</name></name> = <name>width</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name>firstName</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name>lastName</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeLong</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeLong</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>TypeSizes</name></type> <name>typeSizes</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>firstNameSize</name> <init>= <expr><call><name><name>firstName</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lastNameSize</name> <init>= <expr><call><name><name>lastName</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>) <name>firstNameSize</name></expr></argument>)</argument_list></call> + <name>firstNameSize</name> +
                   <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>) <name>lastNameSize</name></expr></argument>)</argument_list></call> + <name>lastNameSize</name> +
                   <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call> + <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IndexInfo</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <return>return <expr>new <call><name>IndexInfo</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
