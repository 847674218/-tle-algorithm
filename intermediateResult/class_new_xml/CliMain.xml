<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cli\CliMain.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cli</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>CharacterCodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>jline</name>.<name>ConsoleReader</name></name>;</import>
<import>import <name><name>jline</name>.<name>History</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>IAuthenticator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>protocol</name>.<name>TBinaryProtocol</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TSocket</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TTransport</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Cassandra Command Line Interface (CLI) Main
 */</comment>
<class><specifier>public</specifier> class <name>CliMain</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>HISTORYFILE</name> <init>= <expr>".cassandra.history"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>TTransport</name></type> <name>transport</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Cassandra</name>.<name>Client</name></name></type> <name>thriftClient</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier>  <specifier>static</specifier> <specifier>final</specifier> <name>CliSessionState</name></type> <name>sessionState</name> <init>= <expr>new <call><name>CliSessionState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>CliClient</name></type> <name>cliClient</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CliCompleter</name></type> <name>completer</name> <init>= <expr>new <call><name>CliCompleter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>lineNumber</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Establish a thrift connection to cassandra instance
     *
     * @param server - hostname or IP of the server
     * @param port   - Thrift port number
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>connect</name><parameter_list>(<param><decl><type><name>String</name></type> <name>server</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>TSocket</name></type> <name>socket</name> <init>= <expr>new <call><name>TSocket</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>transport</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>transport</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><name>transport</name> = <call><name><name>sessionState</name>.<name>transportFactory</name>.<name>getTransport</name></name><argument_list>(<argument><expr><name>socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TBinaryProtocol</name></type> <name>binaryProtocol</name> <init>= <expr>new <call><name>TBinaryProtocol</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Cassandra</name>.<name>Client</name></name></type> <name>cassandraClient</name> <init>= <expr>new <call><name><name>Cassandra</name>.<name>Client</name></name><argument_list>(<argument><expr><name>binaryProtocol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <if>if <condition>(<expr>!<call><name><name>transport</name>.<name>isOpen</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>transport</name>.<name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>error</name> <init>= <expr>(<call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call> == null) ? <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> : <call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call>.<call><name>getMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Exception connecting to " + <name>server</name> + "/" + <name>port</name> + ". Reason: " + <name>error</name> + "."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <expr_stmt><expr><name>thriftClient</name> = <name>cassandraClient</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cliClient</name> = new <call><name>CliClient</name><argument_list>(<argument><expr><name>sessionState</name></expr></argument>, <argument><expr><name>thriftClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>(<name><name>sessionState</name>.<name>username</name></name> != null) &amp;&amp; (<name><name>sessionState</name>.<name>password</name></name> != null)</expr>)</condition><then>
        <block>{
            <comment type="line">// Authenticate</comment>
            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>credentials</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>credentials</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>IAuthenticator</name>.<name>USERNAME_KEY</name></name></expr></argument>, <argument><expr><name><name>sessionState</name>.<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>credentials</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>IAuthenticator</name>.<name>PASSWORD_KEY</name></name></expr></argument>, <argument><expr><name><name>sessionState</name>.<name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AuthenticationRequest</name></type> <name>authRequest</name> <init>= <expr>new <call><name>AuthenticationRequest</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>thriftClient</name>.<name>login</name></name><argument_list>(<argument><expr><name>authRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cliClient</name>.<name>setUsername</name></name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>AuthenticationException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><name>thriftClient</name> = null</expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Exception during authentication to the cassandra node, " +
                                         "Verify the keyspace exists, and that you are using the correct credentials."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>AuthorizationException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><name>thriftClient</name> = null</expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"You are not authorized to use keyspace: " + <name><name>sessionState</name>.<name>keyspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>TException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><name>thriftClient</name> = null</expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Login failure. Did you specify 'keyspace', 'username' and 'password'?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></catch></try>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>sessionState</name>.<name>keyspace</name></name> != null</expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><name><name>sessionState</name>.<name>keyspace</name></name> = <call><name><name>CliCompiler</name>.<name>getKeySpace</name></name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>keyspace</name></name></expr></argument>, <argument><expr><call><name><name>thriftClient</name>.<name>describe_keyspaces</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
                <expr_stmt><expr><call><name><name>thriftClient</name>.<name>set_keyspace</name></name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>keyspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cliClient</name>.<name>setKeySpace</name></name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>keyspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateCompletor</name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>getCfNamesByKeySpace</name></name><argument_list>(<argument><expr><call><name><name>cliClient</name>.<name>getKSMetaData</name></name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>keyspace</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Keyspace " + <name><name>sessionState</name>.<name>keyspace</name></name> + " not found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>TException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Did you specify 'keyspace'?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>NotFoundException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Keyspace " + <name><name>sessionState</name>.<name>keyspace</name></name> + " not found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></catch></try>
        }</block></then></if>

        <comment type="line">// Lookup the cluster name, this is to make it clear which cluster the user is connected to</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>clusterName</name></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>clusterName</name> = <call><name><name>thriftClient</name>.<name>describe_cluster_name</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Exception retrieving information about the cassandra node, check you have connected to the thrift port."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return;</return>
        }</block></catch></try>

        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"Connected to: \"%s\" on %s/%d%n"</expr></argument>, <argument><expr><name>clusterName</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Disconnect thrift connection to cassandra instance
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>disconnect</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>transport</name> != null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>transport</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transport</name> = null</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether the thrift client is connected.
     * @return boolean - true when connected, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isConnected</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>thriftClient</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Not connected to a cassandra instance."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateCompletor</name><parameter_list>(<param><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>actions</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>String</name></type> <name>cf</name> <range>: <expr><name>candidates</name></expr></range></decl></init>)
        <block>{
            <for>for (<init><decl><type><name>String</name></type> <name>cmd</name> <range>: <expr><call><name><name>completer</name>.<name>getKeyspaceCommands</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name>actions</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s %s"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></for>

        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>strs</name> <init>= <expr><call><name><name>Arrays</name>.<name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>actions</name>.<name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>actions</name>.<name>toArray</name></name><argument_list>()</argument_list></call>.<name>length</name></expr></argument>, <argument><expr><name><name>String</name><index>[]</index></name>.class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>completer</name>.<name>setCandidateStrings</name></name><argument_list>(<argument><expr><name>strs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>processStatement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>query</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>CharacterCodingException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>NoSuchFieldException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>cliClient</name>.<name>executeCLIStatement</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>processStatementInteractive</name><parameter_list>(<param><decl><type><name>String</name></type> <name>query</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>cliClient</name>.<name>executeCLIStatement</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>errorTemplate</name> <init>= <expr><call><name><name>sessionState</name>.<name>inFileMode</name></name><argument_list>()</argument_list></call> ? "Line " + <name>lineNumber</name> + " =&gt; " : ""</expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Throwable</name></type> <name>exception</name> <init>= <expr>(<call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call> == null) ? <name>e</name> : <call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr>(<name>exception</name> instanceof <name>InvalidRequestException</name>) ? ((<name>InvalidRequestException</name>) <name>exception</name>).<call><name>getWhy</name><argument_list>()</argument_list></call> : <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>errorTemplate</name> + <name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>sessionState</name>.<name>debug</name></name> || !(<name>e</name> instanceof <name>RuntimeException</name>)</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <if>if <condition>(<expr><name><name>sessionState</name>.<name>batch</name></name> || <call><name><name>sessionState</name>.<name>inFileMode</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></catch>
        <finally>finally
        <block>{
            <expr_stmt><expr><name>lineNumber</name>++</expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name>String</name></type> <name><name>args</name><index>[]</index></name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <comment type="line">// process command line arguments</comment>
        <decl_stmt><decl><type><name>CliOptions</name></type> <name>cliOptions</name> <init>= <expr>new <call><name>CliOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cliOptions</name>.<name>processArgs</name></name><argument_list>(<argument><expr><name>sessionState</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// connect to cassandra server if host argument specified.</comment>
        <if>if <condition>(<expr><name><name>sessionState</name>.<name>hostName</name></name> != null</expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>hostName</name></name></expr></argument>, <argument><expr><name><name>sessionState</name>.<name>thriftPort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>RuntimeException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>

        <if>if <condition>( <expr><name>cliClient</name> == null</expr> )</condition><then>
        <block>{
            <comment type="line">// Connection parameter was either invalid or not present.</comment>
            <comment type="line">// User must connect explicitly using the "connect" CLI statement.</comment>
            <expr_stmt><expr><name>cliClient</name> = new <call><name>CliClient</name><argument_list>(<argument><expr><name>sessionState</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// load statements from file and process them</comment>
        <if>if <condition>(<expr><call><name><name>sessionState</name>.<name>inFileMode</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>FileReader</name></type> <name>fileReader</name></decl>;</decl_stmt>

            <try>try
            <block>{
                <expr_stmt><expr><name>fileReader</name> = new <call><name>FileReader</name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></catch></try>

            <expr_stmt><expr><call><name>evaluateFileStatements</name><argument_list>(<argument><expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr><name>fileReader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>ConsoleReader</name></type> <name>reader</name> <init>= <expr>new <call><name>ConsoleReader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<name><name>sessionState</name>.<name>batch</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>reader</name>.<name>addCompletor</name></name><argument_list>(<argument><expr><name>completer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>reader</name>.<name>setBellEnabled</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>historyFile</name> <init>= <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.home"</expr></argument>)</argument_list></call> + <name><name>File</name>.<name>separator</name></name> + <name>HISTORYFILE</name></expr></init></decl>;</decl_stmt>

            <try>try
            <block>{
                <decl_stmt><decl><type><name>History</name></type> <name>history</name> <init>= <expr>new <call><name>History</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>historyFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>reader</name>.<name>setHistory</name></name><argument_list>(<argument><expr><name>history</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>exp</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>printf</name></name><argument_list>(<argument><expr>"Unable to open %s for writing %n"</expr></argument>, <argument><expr><name>historyFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<name><name>sessionState</name>.<name>verbose</name></name></expr>)</condition><then> <comment type="line">// if in batch mode but no verbose flag</comment>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <expr_stmt><expr><call><name><name>cliClient</name>.<name>printBanner</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>prompt</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>currentStatement</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>inCompoundStatement</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>line</name> != null</expr>)</condition>
        <block>{
            <expr_stmt><expr><name>prompt</name> = (<name>inCompoundStatement</name>) ? "...\t" : <call><name>getPrompt</name><argument_list>(<argument><expr><name>cliClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <try>try
            <block>{
                <expr_stmt><expr><name>line</name> = <call><name><name>reader</name>.<name>readLine</name></name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <comment type="line">// retry on I/O Exception</comment>
            }</block></catch></try>

            <if>if <condition>(<expr><name>line</name> == null</expr>)</condition><then>
                <return>return;</return></then></if>

            <expr_stmt><expr><name>line</name> = <call><name><name>line</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// skipping empty and comment lines</comment>
            <if>if <condition>(<expr><call><name><name>line</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> || <call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"--"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <expr_stmt><expr><name>currentStatement</name> += <name>line</name></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>line</name>.<name>endsWith</name></name><argument_list>(<argument><expr>";"</expr></argument>)</argument_list></call> || <call><name><name>line</name>.<name>equals</name></name><argument_list>(<argument><expr>"?"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>processStatementInteractive</name><argument_list>(<argument><expr><name>currentStatement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>currentStatement</name> = ""</expr>;</expr_stmt>
                <expr_stmt><expr><name>inCompoundStatement</name> = false</expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>currentStatement</name> += " "</expr>;</expr_stmt> <comment type="line">// ready for new line</comment>
                <expr_stmt><expr><name>inCompoundStatement</name> = true</expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>evaluateFileStatements</name><parameter_list>(<param><decl><type><name>BufferedReader</name></type> <name>reader</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>currentStatement</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>commentedBlock</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr>(<name>line</name> = <call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != null</expr>)</condition>
        <block>{
            <expr_stmt><expr><name>line</name> = <call><name><name>line</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// skipping empty and comment lines</comment>
            <if>if <condition>(<expr><call><name><name>line</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> || <call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"--"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <if>if <condition>(<expr><call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"/*"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>commentedBlock</name> = true</expr>;</expr_stmt></then></if>

            <if>if <condition>(<expr><call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"*/"</expr></argument>)</argument_list></call> || <call><name><name>line</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"*/"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>commentedBlock</name> = false</expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <if>if <condition>(<expr><name>commentedBlock</name></expr>)</condition><then> <comment type="line">// skip commented lines</comment>
                <continue>continue;</continue></then></if>

            <expr_stmt><expr><name>currentStatement</name> += <name>line</name></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>line</name>.<name>endsWith</name></name><argument_list>(<argument><expr>";"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>processStatementInteractive</name><argument_list>(<argument><expr><name>currentStatement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>currentStatement</name> = ""</expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>currentStatement</name> += " "</expr>;</expr_stmt> <comment type="line">// ready for new line</comment>
            }</block></else></if>
        }</block></while>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns prompt for current connection
     * @param client - currently connected client
     * @return String - prompt with username and keyspace (if any)
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getPrompt</name><parameter_list>(<param><decl><type><name>CliClient</name></type> <name>client</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>"[" + <call><name><name>client</name>.<name>getUsername</name></name><argument_list>()</argument_list></call> + "@" + <call><name><name>client</name>.<name>getKeySpace</name></name><argument_list>()</argument_list></call> + "] "</expr>;</return>
    }</block></function>

}</block></class>
</unit>
