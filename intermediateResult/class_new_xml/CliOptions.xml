<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cli\CliOptions.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cli</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>cli</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TTransportFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 *
 * Used to process, and act upon the arguments passed to the CLI.
 *
 */</comment>
<class><specifier>public</specifier> class <name>CliOptions</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CLIOptions</name></type> <name>options</name></decl>;</decl_stmt> <comment type="line">// Info about command line options</comment>

    <comment type="line">// Name of the command line tool (used for error messages)</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TOOL_NAME</name> <init>= <expr>"cassandra-cli"</expr></init></decl>;</decl_stmt>

    <comment type="line">// Command line options</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HOST_OPTION</name> <init>= <expr>"host"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PORT_OPTION</name> <init>= <expr>"port"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRANSPORT_FACTORY</name> <init>= <expr>"transport-factory"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEBUG_OPTION</name> <init>= <expr>"debug"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USERNAME_OPTION</name> <init>= <expr>"username"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PASSWORD_OPTION</name> <init>= <expr>"password"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEYSPACE_OPTION</name> <init>= <expr>"keyspace"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BATCH_OPTION</name> <init>= <expr>"batch"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HELP_OPTION</name> <init>= <expr>"help"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FILE_OPTION</name> <init>= <expr>"file"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JMX_PORT_OPTION</name> <init>= <expr>"jmxport"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VERBOSE_OPTION</name>  <init>= <expr>"verbose"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SCHEMA_MIGRATION_WAIT_TIME</name> <init>= <expr>"schema-mwt"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SSL_TRUSTSTORE</name> <init>= <expr>"truststore"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SSL_TRUSTSTORE_PW</name> <init>= <expr>"truststore-password"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SSL_PROTOCOL</name> <init>= <expr>"ssl-protocol"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SSL_ALGORITHM</name> <init>= <expr>"ssl-alg"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SSL_STORE_TYPE</name> <init>= <expr>"store-type"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SSL_CIPHER_SUITES</name> <init>= <expr>"ssl-ciphers"</expr></init></decl>;</decl_stmt>

    <comment type="line">// Default values for optional command line arguments</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_HOST</name>        <init>= <expr>"127.0.0.1"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>    <name>DEFAULT_THRIFT_PORT</name> <init>= <expr>9160</expr></init></decl>;</decl_stmt>

    <comment type="line">// Register the command line options and their properties (such as</comment>
    <comment type="line">// whether they take an extra argument, etc.</comment>
    <expr_stmt><expr>static
    <block>{
        <expr><name>options</name> = new <call><name>CLIOptions</name><argument_list>()</argument_list></call></expr>;

        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"h"</expr></argument>,  <argument><expr><name>HOST_OPTION</name></expr></argument>,     <argument><expr>"HOSTNAME"</expr></argument>, <argument><expr>"cassandra server's host name"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"p"</expr></argument>,  <argument><expr><name>PORT_OPTION</name></expr></argument>,     <argument><expr>"PORT"</expr></argument>,     <argument><expr>"cassandra server's thrift port"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"u"</expr></argument>,  <argument><expr><name>USERNAME_OPTION</name></expr></argument>, <argument><expr>"USERNAME"</expr></argument>, <argument><expr>"user name for cassandra authentication"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"pw"</expr></argument>, <argument><expr><name>PASSWORD_OPTION</name></expr></argument>, <argument><expr>"PASSWORD"</expr></argument>, <argument><expr>"password for cassandra authentication"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"k"</expr></argument>,  <argument><expr><name>KEYSPACE_OPTION</name></expr></argument>, <argument><expr>"KEYSPACE"</expr></argument>, <argument><expr>"cassandra keyspace user is authenticated against"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"f"</expr></argument>,  <argument><expr><name>FILE_OPTION</name></expr></argument>,     <argument><expr>"FILENAME"</expr></argument>, <argument><expr>"load statements from the specific file"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr><name>JMX_PORT_OPTION</name></expr></argument>, <argument><expr>"JMX-PORT"</expr></argument>, <argument><expr>"JMX service port"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr><name>SCHEMA_MIGRATION_WAIT_TIME</name></expr></argument>,  <argument><expr>"TIME"</expr></argument>, <argument><expr>"Schema migration wait time (secs.), default is 10 secs"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"tf"</expr></argument>, <argument><expr><name>TRANSPORT_FACTORY</name></expr></argument>, <argument><expr>"TRANSPORT-FACTORY"</expr></argument>, <argument><expr>"Fully-qualified TTransportFactory class name for creating a connection to cassandra"</expr></argument>)</argument_list></call></expr>;

        <comment type="line">// ssl connection-related options</comment>
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"ts"</expr></argument>, <argument><expr><name>SSL_TRUSTSTORE</name></expr></argument>, <argument><expr>"TRUSTSTORE"</expr></argument>, <argument><expr>"SSL: full path to truststore"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"tspw"</expr></argument>, <argument><expr><name>SSL_TRUSTSTORE_PW</name></expr></argument>, <argument><expr>"TRUSTSTORE-PASSWORD"</expr></argument>, <argument><expr>"SSL: full path to truststore"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"prtcl"</expr></argument>, <argument><expr><name>SSL_PROTOCOL</name></expr></argument>, <argument><expr>"PROTOCOL"</expr></argument>, <argument><expr>"SSL: connections protocol to use (default: TLS)"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"alg"</expr></argument>, <argument><expr><name>SSL_ALGORITHM</name></expr></argument>, <argument><expr>"ALGORITHM"</expr></argument>, <argument><expr>"SSL: algorithm (default: SunX509)"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"st"</expr></argument>, <argument><expr><name>SSL_STORE_TYPE</name></expr></argument>, <argument><expr>"STORE-TYPE"</expr></argument>, <argument><expr>"SSL: type of store"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"ciphers"</expr></argument>, <argument><expr><name>SSL_CIPHER_SUITES</name></expr></argument>, <argument><expr>"CIPHER-SUITES"</expr></argument>, <argument><expr>"SSL: comma-separated list of encryption suites to use"</expr></argument>)</argument_list></call></expr>;

        <comment type="line">// options without argument</comment>
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"B"</expr></argument>,  <argument><expr><name>BATCH_OPTION</name></expr></argument>,   <argument><expr>"enabled batch mode (suppress output; errors are fatal)"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr><name>DEBUG_OPTION</name></expr></argument>,   <argument><expr>"display stack-traces (NOTE: We print strack-traces in the places where it makes sense even without --debug)"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"?"</expr></argument>,  <argument><expr><name>HELP_OPTION</name></expr></argument>,    <argument><expr>"usage help"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"v"</expr></argument>,  <argument><expr><name>VERBOSE_OPTION</name></expr></argument>, <argument><expr>"verbose output when using batch mode"</expr></argument>)</argument_list></call></expr>;
    }</block>

    private static <name>void</name> <call><name>printUsage</name><argument_list>()</argument_list></call>
    <block>{
        <expr>new <call><name>HelpFormatter</name><argument_list>()</argument_list></call>.<call><name>printHelp</name><argument_list>(<argument><expr><name>TOOL_NAME</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;
    }</block>

    public <name>void</name> <call><name>processArgs</name><argument_list>(<argument><expr><name>CliSessionState</name> <name>css</name></expr></argument>, <argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call>
    <block>{
        <expr><name>CommandLineParser</name> <name>parser</name> = new <call><name>GnuParser</name><argument_list>()</argument_list></call></expr>;

        <try>try
        <block>{
            <decl_stmt><decl><type><name>CommandLine</name></type> <name>cmd</name> <init>= <expr><call><name><name>parser</name>.<name>parse</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>HOST_OPTION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>hostName</name></name> = <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>HOST_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/></block></then></if></block></try>}</block></expr></expr_stmt>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>hostName</name></name> = <name>DEFAULT_HOST</name></expr>;</expr_stmt>
            }</block></else>

            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>TRANSPORT_FACTORY</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>transportFactory</name></name> = <call><name>validateAndSetTransportFactory</name><argument_list>(<argument><expr><call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>TRANSPORT_FACTORY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>DEBUG_OPTION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>debug</name></name> = true</expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// Look for optional args.</comment>
            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>PORT_OPTION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>thriftPort</name></name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>PORT_OPTION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>thriftPort</name></name> = <name>DEFAULT_THRIFT_PORT</name></expr>;</expr_stmt>
            }</block></else></if>

            <comment type="line">// Look for authentication credentials (username and password)</comment>
            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>USERNAME_OPTION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>username</name></name> = <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>USERNAME_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>username</name></name> = "default"</expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>PASSWORD_OPTION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>password</name></name> = <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>PASSWORD_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>password</name></name> = ""</expr>;</expr_stmt>
            }</block></else></if>

            <comment type="line">// Look for keyspace</comment>
            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>KEYSPACE_OPTION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>keyspace</name></name> = <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>KEYSPACE_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>BATCH_OPTION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>batch</name></name> = true</expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>FILE_OPTION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>filename</name></name> = <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>FILE_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>JMX_PORT_OPTION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>jmxPort</name></name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>JMX_PORT_OPTION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>HELP_OPTION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>printUsage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>VERBOSE_OPTION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>verbose</name></name> = true</expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>SCHEMA_MIGRATION_WAIT_TIME</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>schema_mwt</name></name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>SCHEMA_MIGRATION_WAIT_TIME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> * 1000</expr>;</expr_stmt>
            }</block></then></if>

            <if>if<condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>SSL_TRUSTSTORE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>encOptions</name>.<name>truststore</name></name> = <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>SSL_TRUSTSTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if<condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>SSL_TRUSTSTORE_PW</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>encOptions</name>.<name>truststore_password</name></name> = <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>SSL_TRUSTSTORE_PW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if<condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>SSL_PROTOCOL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>encOptions</name>.<name>protocol</name></name> = <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>SSL_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if<condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>SSL_ALGORITHM</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>encOptions</name>.<name>algorithm</name></name> = <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>SSL_ALGORITHM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if<condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>SSL_STORE_TYPE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>encOptions</name>.<name>store_type</name></name> = <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>SSL_STORE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if<condition>(<expr><call><name><name>cmd</name>.<name>hasOption</name></name><argument_list>(<argument><expr><name>SSL_CIPHER_SUITES</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>css</name>.<name>encOptions</name>.<name>cipher_suites</name></name> = <call><name><name>cmd</name>.<name>getOptionValue</name></name><argument_list>(<argument><expr><name>SSL_CIPHER_SUITES</name></expr></argument>)</argument_list></call>.<call><name>split</name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// Abort if there are any unrecognized arguments left</comment>
            <if>if <condition>(<expr><call><name><name>cmd</name>.<name>getArgs</name></name><argument_list>()</argument_list></call>.<name>length</name> &gt; 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>printf</name></name><argument_list>(<argument><expr>"Unknown argument: %s%n"</expr></argument>, <argument><expr><call><name><name>cmd</name>.<name>getArgs</name></name><argument_list>()</argument_list></call><index>[<expr>0</expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printUsage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></class>
        <catch>catch <parameter_list>(<param><decl><type><name>ParseException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printUsage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
    }

    private <class><specifier>static</specifier> class <name>CLIOptions</name> <super><extends>extends <name>Options</name></extends></super>
    <block>{
        <comment type="block" format="javadoc">/**
         * Add option with argument and argument name
         * @param opt shortcut for option name
         * @param longOpt complete option name
         * @param argName argument name
         * @param description description of the option
         * @return updated Options object
         */</comment>
        <function><type><specifier>public</specifier> <name>Options</name></type> <name>addOption</name><parameter_list>(<param><decl><type><name>String</name></type> <name>opt</name></decl></param>, <param><decl><type><name>String</name></type> <name>longOpt</name></decl></param>, <param><decl><type><name>String</name></type> <name>argName</name></decl></param>, <param><decl><type><name>String</name></type> <name>description</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Option</name></type> <name>option</name> <init>= <expr>new <call><name>Option</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>longOpt</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>option</name>.<name>setArgName</name></name><argument_list>(<argument><expr><name>argName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><call><name>addOption</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Add option without argument
         * @param opt shortcut for option name
         * @param longOpt complete option name
         * @param description description of the option
         * @return updated Options object
         */</comment>
        <function><type><specifier>public</specifier> <name>Options</name></type> <name>addOption</name><parameter_list>(<param><decl><type><name>String</name></type> <name>opt</name></decl></param>, <param><decl><type><name>String</name></type> <name>longOpt</name></decl></param>, <param><decl><type><name>String</name></type> <name>description</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name>addOption</name><argument_list>(<argument><expr>new <call><name>Option</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>longOpt</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>TTransportFactory</name></type> <name>validateAndSetTransportFactory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>transportFactory</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>Class</name></type> <name>factory</name> <init>= <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>transportFactory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if<condition>(<expr>!<call><name><name>TTransportFactory</name>.<name><name>class</name>.<name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"transport factory '%s' " +
                                                                 "not derived from TTransportFactory"</expr></argument>, <argument><expr><name>transportFactory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return>return <expr>(<name>TTransportFactory</name>) <call><name><name>factory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Cannot create a transport factory '%s'."</expr></argument>, <argument><expr><name>transportFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}
</unit>
