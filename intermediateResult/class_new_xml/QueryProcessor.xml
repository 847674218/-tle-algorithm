<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\QueryProcessor.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>com</name>.<name>googlecode</name>.<name>concurrentlinkedhashmap</name>.<name>ConcurrentLinkedHashMap</name></name>;</import>
<import>import <name><name>org</name>.<name>antlr</name>.<name>runtime</name></name>.*;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>statements</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>ResultMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>ClientState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>QueryState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name>.<name>Tracing</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>MD5Digest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>SemanticVersion</name></name>;</import>

<class><specifier>public</specifier> class <name>QueryProcessor</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SemanticVersion</name></type> <name>CQL_VERSION</name> <init>= <expr>new <call><name>SemanticVersion</name><argument_list>(<argument><expr>"3.0.1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>QueryProcessor</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_CACHE_PREPARED</name> <init>= <expr>100000</expr></init></decl>;</decl_stmt> <comment type="line">// Enough to keep buggy clients from OOM'ing us</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>MD5Digest</name></argument>, <argument><name>CQLStatement</name></argument>&gt;</argument_list></name></type> <name>preparedStatements</name> <init>= <expr>new <call><name><name>ConcurrentLinkedHashMap</name>.<name><name>Builder</name><argument_list>&lt;<argument><name>MD5Digest</name></argument>, <argument><name>CQLStatement</name></argument>&gt;</argument_list></name></name><argument_list>()</argument_list></call>
                                                                               .<call><name>maximumWeightedCapacity</name><argument_list>(<argument><expr><name>MAX_CACHE_PREPARED</name></expr></argument>)</argument_list></call>
                                                                               .<call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>CQLStatement</name></argument>&gt;</argument_list></name></type> <name>thriftPreparedStatements</name> <init>= <expr>new <call><name><name>ConcurrentLinkedHashMap</name>.<name><name>Builder</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>CQLStatement</name></argument>&gt;</argument_list></name></name><argument_list>()</argument_list></call>
                                                                                   .<call><name>maximumWeightedCapacity</name><argument_list>(<argument><expr><name>MAX_CACHE_PREPARED</name></expr></argument>)</argument_list></call>
                                                                                   .<call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CQLStatement</name></type> <name>getPrepared</name><parameter_list>(<param><decl><type><name>MD5Digest</name></type> <name>id</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>preparedStatements</name>.<name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CQLStatement</name></type> <name>getPrepared</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>id</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>thriftPreparedStatements</name>.<name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateKey</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>key</name> == null || <call><name><name>key</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Key may not be empty"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// check that key can be handled by FBUtilities.writeShortByteArray</comment>
        <if>if <condition>(<expr><call><name><name>key</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; <name><name>FBUtilities</name>.<name>MAX_UNSIGNED_SHORT</name></name></expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Key length of " + <call><name><name>key</name>.<name>remaining</name></name><argument_list>()</argument_list></call> +
                                              " is longer than maximum of " + <name><name>FBUtilities</name>.<name>MAX_UNSIGNED_SHORT</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateColumnNames</name><parameter_list>(<param><decl><type><name><name>Iterable</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>name</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>name</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; <name><name>IColumn</name>.<name>MAX_NAME_LENGTH</name></name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"column name is too long (%s &gt; %s)"</expr></argument>,
                                                                <argument><expr><call><name><name>name</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                <argument><expr><name><name>IColumn</name>.<name>MAX_NAME_LENGTH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if>if <condition>(<expr><call><name><name>name</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"zero-length column name"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateColumnName</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>column</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>validateColumnNames</name><argument_list>(<argument><expr><call><name><name>Collections</name>.<name>singletonList</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateFilter</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>metadata</name></decl></param>, <param><decl><type><name>IDiskAtomFilter</name></type> <name>filter</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>filter</name> instanceof <name>SliceQueryFilter</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>validateSliceFilter</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr>(<name>SliceQueryFilter</name>)<name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>validateColumnNames</name><argument_list>(<argument><expr>((<name>NamesQueryFilter</name>)<name>filter</name>).<name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateSliceFilter</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>metadata</name></decl></param>, <param><decl><type><name>SliceQueryFilter</name></type> <name>range</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr><call><name><name>metadata</name>.<name>getComparatorFor</name></name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ColumnSlice</name>.<name>validate</name></name><argument_list>(<argument><expr><name><name>range</name>.<name>slices</name></name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr><name><name>range</name>.<name>reversed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ResultMessage</name></type> <name>processStatement</name><parameter_list>(<param><decl><type><name>CQLStatement</name></type> <name>statement</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>, <param><decl><type><name>QueryState</name></type> <name>queryState</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument>, <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ClientState</name></type> <name>clientState</name> <init>= <expr><call><name><name>queryState</name>.<name>getClientState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>statement</name>.<name>validate</name></name><argument_list>(<argument><expr><name>clientState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>statement</name>.<name>checkAccess</name></name><argument_list>(<argument><expr><name>clientState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ResultMessage</name></type> <name>result</name> <init>= <expr><call><name><name>statement</name>.<name>execute</name></name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>queryState</name></expr></argument>, <argument><expr><name>variables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>result</name> == null ? new <call><name><name>ResultMessage</name>.<name>Void</name></name><argument_list>()</argument_list></call> : <name>result</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ResultMessage</name></type> <name>process</name><parameter_list>(<param><decl><type><name>String</name></type> <name>queryString</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>, <param><decl><type><name>QueryState</name></type> <name>queryState</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument>, <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr>"CQL QUERY: {}"</expr></argument>, <argument><expr><name>queryString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>processStatement</name><argument_list>(<argument><expr><call><name>getStatement</name><argument_list>(<argument><expr><name>queryString</name></expr></argument>, <argument><expr><call><name><name>queryState</name>.<name>getClientState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<name>statement</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>queryState</name></expr></argument>, <argument><expr><name><name>Collections</name>.</name>&lt;<name>ByteBuffer</name>&gt;<call><name>emptyList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UntypedResultSet</name></type> <name>process</name><parameter_list>(<param><decl><type><name>String</name></type> <name>query</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>QueryState</name></type> <name>state</name> <init>= <expr>new <call><name>QueryState</name><argument_list>(<argument><expr>new <call><name>ClientState</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ResultMessage</name></type> <name>result</name> <init>= <expr><call><name>process</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>ConsistencyLevel</name>.<name>ONE</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>result</name> instanceof <name><name>ResultMessage</name>.<name>Rows</name></name></expr>)</condition><then>
                <return>return <expr>new <call><name>UntypedResultSet</name><argument_list>(<argument><expr>((<name><name>ResultMessage</name>.<name>Rows</name></name>)<name>result</name>).<name>result</name></expr></argument>)</argument_list></call></expr>;</return></then>
            <else>else
                <return>return <expr>null</expr>;</return></else></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>RequestValidationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UntypedResultSet</name></type> <name>processInternal</name><parameter_list>(<param><decl><type><name>String</name></type> <name>query</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>ClientState</name></type> <name>state</name> <init>= <expr>new <call><name>ClientState</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QueryState</name></type> <name>qState</name> <init>= <expr>new <call><name>QueryState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>state</name>.<name>setKeyspace</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_KS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CQLStatement</name></type> <name>statement</name> <init>= <expr><call><name>getStatement</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call>.<name>statement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>statement</name>.<name>validate</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ResultMessage</name></type> <name>result</name> <init>= <expr><call><name><name>statement</name>.<name>executeInternal</name></name><argument_list>(<argument><expr><name>qState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>result</name> instanceof <name><name>ResultMessage</name>.<name>Rows</name></name></expr>)</condition><then>
                <return>return <expr>new <call><name>UntypedResultSet</name><argument_list>(<argument><expr>((<name><name>ResultMessage</name>.<name>Rows</name></name>)<name>result</name>).<name>result</name></expr></argument>)</argument_list></call></expr>;</return></then>
            <else>else
                <return>return <expr>null</expr>;</return></else></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>RequestExecutionException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>RequestValidationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UntypedResultSet</name></type> <name>resultify</name><parameter_list>(<param><decl><type><name>String</name></type> <name>query</name></decl></param>, <param><decl><type><name>Row</name></type> <name>row</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>SelectStatement</name></type> <name>ss</name> <init>= <expr>(<name>SelectStatement</name>) <call><name>getStatement</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call>.<name>statement</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ResultSet</name></type> <name>cqlRows</name> <init>= <expr><call><name><name>ss</name>.<name>process</name></name><argument_list>(<argument><expr><call><name><name>Collections</name>.<name>singletonList</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>UntypedResultSet</name><argument_list>(<argument><expr><name>cqlRows</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>RequestValidationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ResultMessage</name>.<name>Prepared</name></name></type> <name>prepare</name><parameter_list>(<param><decl><type><name>String</name></type> <name>queryString</name></decl></param>, <param><decl><type><name>ClientState</name></type> <name>clientState</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>forThrift</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr>"CQL QUERY: {}"</expr></argument>, <argument><expr><name>queryString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>ParsedStatement</name>.<name>Prepared</name></name></type> <name>prepared</name> <init>= <expr><call><name>getStatement</name><argument_list>(<argument><expr><name>queryString</name></expr></argument>, <argument><expr><name>clientState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ResultMessage</name>.<name>Prepared</name></name></type> <name>msg</name> <init>= <expr><call><name>storePreparedStatement</name><argument_list>(<argument><expr><name>queryString</name></expr></argument>, <argument><expr><name>prepared</name></expr></argument>, <argument><expr><name>forThrift</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <assert>assert <expr><call><name><name>prepared</name>.<name>statement</name>.<name>getBoundsTerms</name></name><argument_list>()</argument_list></call> == <call><name><name>prepared</name>.<name>boundNames</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <return>return <expr><name>msg</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>ResultMessage</name>.<name>Prepared</name></name></type> <name>storePreparedStatement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>queryString</name></decl></param>, <param><decl><type><name><name>ParsedStatement</name>.<name>Prepared</name></name></type> <name>prepared</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>forThrift</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>forThrift</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>statementId</name> <init>= <expr><call><name><name>queryString</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>thriftPreparedStatements</name>.<name>put</name></name><argument_list>(<argument><expr><name>statementId</name></expr></argument>, <argument><expr><name><name>prepared</name>.<name>statement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Stored prepared statement #%d with %d bind markers"</expr></argument>,
                                       <argument><expr><name>statementId</name></expr></argument>,
                                       <argument><expr><call><name><name>prepared</name>.<name>statement</name>.<name>getBoundsTerms</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>ResultMessage</name>.<name>Prepared</name>.<name>forThrift</name></name><argument_list>(<argument><expr><name>statementId</name></expr></argument>, <argument><expr><name><name>prepared</name>.<name>boundNames</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>MD5Digest</name></type> <name>statementId</name> <init>= <expr><call><name><name>MD5Digest</name>.<name>compute</name></name><argument_list>(<argument><expr><name>queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Stored prepared statement %s with %d bind markers"</expr></argument>,
                                       <argument><expr><name>statementId</name></expr></argument>,
                                       <argument><expr><call><name><name>prepared</name>.<name>statement</name>.<name>getBoundsTerms</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>preparedStatements</name>.<name>put</name></name><argument_list>(<argument><expr><name>statementId</name></expr></argument>, <argument><expr><name><name>prepared</name>.<name>statement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>new <call><name><name>ResultMessage</name>.<name>Prepared</name></name><argument_list>(<argument><expr><name>statementId</name></expr></argument>, <argument><expr><name><name>prepared</name>.<name>boundNames</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ResultMessage</name></type> <name>processPrepared</name><parameter_list>(<param><decl><type><name>CQLStatement</name></type> <name>statement</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>, <param><decl><type><name>QueryState</name></type> <name>queryState</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument>, <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{
        <comment type="line">// Check to see if there are any bound variables to verify</comment>
        <if>if <condition>(<expr>!(<call><name><name>variables</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; (<call><name><name>statement</name>.<name>getBoundsTerms</name></name><argument_list>()</argument_list></call> == 0))</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><call><name><name>variables</name>.<name>size</name></name><argument_list>()</argument_list></call> != <call><name><name>statement</name>.<name>getBoundsTerms</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"there were %d markers(?) in CQL but %d bound variables"</expr></argument>,
                                                                <argument><expr><call><name><name>statement</name>.<name>getBoundsTerms</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                <argument><expr><call><name><name>variables</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <comment type="line">// at this point there is a match in count between markers and variables that is non-zero</comment>

            <if>if <condition>(<expr><call><name><name>logger</name>.<name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>variables</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                    <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr>"[{}] '{}'"</expr></argument>, <argument><expr><name>i</name>+1</expr></argument>, <argument><expr><call><name><name>variables</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for></then></if>
        }</block></then></if>

        <return>return <expr><call><name>processStatement</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>queryState</name></expr></argument>, <argument><expr><name>variables</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>ParsedStatement</name>.<name>Prepared</name></name></type> <name>getStatement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>queryStr</name></decl></param>, <param><decl><type><name>ClientState</name></type> <name>clientState</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>Tracing</name>.<name>trace</name></name><argument_list>(<argument><expr>"Parsing statement"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ParsedStatement</name></type> <name>statement</name> <init>= <expr><call><name>parseStatement</name><argument_list>(<argument><expr><name>queryStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set keyspace for statement that require login</comment>
        <if>if <condition>(<expr><name>statement</name> instanceof <name>CFStatement</name></expr>)</condition><then>
            <expr_stmt><expr>((<name>CFStatement</name>)<name>statement</name>).<call><name>prepareKeyspace</name><argument_list>(<argument><expr><name>clientState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name><name>Tracing</name>.<name>trace</name></name><argument_list>(<argument><expr>"Peparing statement"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>statement</name>.<name>prepare</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ParsedStatement</name></type> <name>parseStatement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>queryStr</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <comment type="line">// Lexer and parser</comment>
            <decl_stmt><decl><type><name>CharStream</name></type> <name>stream</name> <init>= <expr>new <call><name>ANTLRStringStream</name><argument_list>(<argument><expr><name>queryStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CqlLexer</name></type> <name>lexer</name> <init>= <expr>new <call><name>CqlLexer</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TokenStream</name></type> <name>tokenStream</name> <init>= <expr>new <call><name>CommonTokenStream</name><argument_list>(<argument><expr><name>lexer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CqlParser</name></type> <name>parser</name> <init>= <expr>new <call><name>CqlParser</name><argument_list>(<argument><expr><name>tokenStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Parse the query string to a statement instance</comment>
            <decl_stmt><decl><type><name>ParsedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>parser</name>.<name>query</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// The lexer and parser queue up any errors they may have encountered</comment>
            <comment type="line">// along the way, if necessary, we turn them into exceptions here.</comment>
            <expr_stmt><expr><call><name><name>lexer</name>.<name>throwLastRecognitionError</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parser</name>.<name>throwLastRecognitionError</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>statement</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>RuntimeException</name></type> <name>re</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>SyntaxException</name></type> <name>ire</name> <init>= <expr>new <call><name>SyntaxException</name><argument_list>(<argument><expr>"Failed parsing statement: [" + <name>queryStr</name> + "] reason: " + <call><name><name>re</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getSimpleName</name><argument_list>()</argument_list></call> + " " + <call><name><name>re</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr><name>ire</name></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>RecognitionException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>SyntaxException</name></type> <name>ire</name> <init>= <expr>new <call><name>SyntaxException</name><argument_list>(<argument><expr>"Invalid or malformed CQL query string: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr><name>ire</name></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
