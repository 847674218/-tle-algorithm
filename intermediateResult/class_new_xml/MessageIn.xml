<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\net\MessageIn.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>ImmutableMap</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name>.<name>Stage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<class><specifier>public</specifier> class <name><name>MessageIn</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>InetAddress</name></type> <name>from</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T</name></type> <name>payload</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>parameters</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>MessagingService</name>.<name>Verb</name></name></type> <name>verb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>version</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>MessageIn</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>from</name></decl></param>, <param><decl><type><name>T</name></type> <name>payload</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></param>, <param><decl><type><name><name>MessagingService</name>.<name>Verb</name></name></type> <name>verb</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>from</name></name> = <name>from</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>payload</name></name> = <name>payload</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>parameters</name></name> = <name>parameters</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>verb</name></name> = <name>verb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>version</name></name> = <name>version</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name><name>MessageIn</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>from</name></decl></param>, <param><decl><type><name>T</name></type> <name>payload</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></param>, <param><decl><type><name><name>MessagingService</name>.<name>Verb</name></name></type> <name>verb</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name><name>MessageIn</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>T2</name></argument>&gt;</argument_list> <name><name>MessageIn</name><argument_list>&lt;<argument><name>T2</name></argument>&gt;</argument_list></name></type> <name>read</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>, <param><decl><type><name>String</name></type> <name>id</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>InetAddress</name></type> <name>from</name> <init>= <expr><call><name><name>CompactEndpointSerializationHelper</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>MessagingService</name>.<name>Verb</name></name></type> <name>verb</name> <init>= <expr><call><name><name>MessagingService</name>.<name>Verb</name>.<name>values</name></name><argument_list>()</argument_list></call><index>[<expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr>]</index></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>parameterCount</name> <init>= <expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>parameters</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>parameterCount</name> == 0</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>parameters</name> = <call><name><name>Collections</name>.<name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name><name>ImmutableMap</name>.<name><name>Builder</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></name></type> <name>builder</name> <init>= <expr><call><name><name>ImmutableMap</name>.<name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>parameterCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>in</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>value</name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>in</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>parameters</name> = <call><name><name>builder</name>.<name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>int</name></type> <name>payloadSize</name> <init>= <expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>T2</name></argument>&gt;</argument_list></name></type> <name>serializer</name> <init>= <expr>(<name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>T2</name></argument>&gt;</argument_list></name>) <call><name><name>MessagingService</name>.<name>verbSerializers</name>.<name>get</name></name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>serializer</name> instanceof <name><name>MessagingService</name>.<name>CallbackDeterminedSerializer</name></name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>CallbackInfo</name></type> <name>callback</name> <init>= <expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>getRegisteredCallback</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>callback</name> == null</expr>)</condition><then>
            <block>{
                <comment type="line">// reply for expired callback.  we'll have to skip it.</comment>
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>skipBytesFully</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>null</expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>serializer</name> = (<name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>T2</name></argument>&gt;</argument_list></name>) <name><name>callback</name>.<name>serializer</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>payloadSize</name> == 0 || <name>serializer</name> == null</expr>)</condition><then>
            <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <decl_stmt><decl><type><name>T2</name></type> <name>payload</name> <init>= <expr><call><name><name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>MessageIn</name>.<name>create</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Stage</name></type> <name>getMessageType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>MessagingService</name>.<name>verbStages</name>.<name>get</name></name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTimeout</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>DatabaseDescriptor</name>.<name>getTimeout</name></name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sbuf</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sbuf</name>.<name>append</name></name><argument_list>(<argument><expr>"FROM:"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" TYPE:"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name>getMessageType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" VERB:"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sbuf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
