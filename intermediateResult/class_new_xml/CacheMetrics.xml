<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\metrics\CacheMetrics.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>metrics</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicLong</name></name>;</import>

<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>Metrics</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>Gauge</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>Meter</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>MetricName</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>util</name>.<name>RatioGauge</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name>.<name>ICache</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Metrics for {@code ICache}.
 */</comment>
<class><specifier>public</specifier> class <name>CacheMetrics</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GROUP_NAME</name> <init>= <expr>"org.apache.cassandra.metrics"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TYPE_NAME</name> <init>= <expr>"Cache"</expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Cache capacity in bytes */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>capacity</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total number of cache hits */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Meter</name></type> <name>hits</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total number of cache requests */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Meter</name></type> <name>requests</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** cache hit rate */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>hitRate</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total size of cache, in bytes */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>size</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total number of cache entries */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>entries</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>lastRequests</name> <init>= <expr>new <call><name>AtomicLong</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>lastHits</name> <init>= <expr>new <call><name>AtomicLong</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create metrics for given cache.
     *
     * @param type Type of Cache to identify metrics.
     * @param cache Cache to measure metrics
     */</comment>
    <constructor><specifier>public</specifier> <name>CacheMetrics</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>ICache</name></type> <name>cache</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>capacity</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"Capacity"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>cache</name>.<name>capacity</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>hits</name> = <call><name><name>Metrics</name>.<name>newMeter</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"Hits"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"hits"</expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>requests</name> = <call><name><name>Metrics</name>.<name>newMeter</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"Requests"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"requests"</expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>hitRate</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"HitRate"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name>RatioGauge</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>protected</specifier> <name>double</name></type> <name>getNumerator</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>hits</name>.<name>count</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier>protected</specifier> <name>double</name></type> <name>getDenominator</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>requests</name>.<name>count</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"Size"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>cache</name>.<name>weightedSize</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>entries</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>GROUP_NAME</name></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>, <argument><expr>"Entries"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Integer</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>cache</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">// for backward compatibility</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>double</name></type> <name>getRecentHitRate</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>r</name> <init>= <expr><call><name><name>requests</name>.<name>count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>h</name> <init>= <expr><call><name><name>hits</name>.<name>count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <return>return <expr>(<call>(<name>double</name>)<argument_list>(<argument><expr><name>h</name> - <call><name><name>lastHits</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>) / (<name>r</name> - <call><name><name>lastRequests</name>.<name>get</name></name><argument_list>()</argument_list></call>)</expr>;</return>
        }</block>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>lastRequests</name>.<name>set</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>lastHits</name>.<name>set</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>
}</block></class>
</unit>
