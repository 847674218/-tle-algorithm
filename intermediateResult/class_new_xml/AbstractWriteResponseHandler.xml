<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\service\AbstractWriteResponseHandler.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Predicate</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Iterables</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>Table</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>WriteType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>gms</name>.<name>FailureDetector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>IAsyncCallback</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessageIn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>SimpleCondition</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractWriteResponseHandler</name> <super><implements>implements <name>IAsyncCallback</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Predicate</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>isAlive</name> <init>= <expr>new <class><super><name><name>Predicate</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>apply</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>FailureDetector</name>.<name>instance</name>.<name>isAlive</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SimpleCondition</name></type> <name>condition</name> <init>= <expr>new <call><name>SimpleCondition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Table</name></type> <name>table</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>long</name></type> <name>startTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>naturalEndpoints</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Runnable</name></type> <name>callback</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>pendingEndpoints</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>WriteType</name></type> <name>writeType</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @param pendingEndpoints
     * @param callback A callback to be called when the write is successful.
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractWriteResponseHandler</name><parameter_list>(<param><decl><type><name>Table</name></type> <name>table</name></decl></param>,
                                           <param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>naturalEndpoints</name></decl></param>,
                                           <param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>pendingEndpoints</name></decl></param>,
                                           <param><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></param>,
                                           <param><decl><type><name>Runnable</name></type> <name>callback</name></decl></param>,
                                           <param><decl><type><name>WriteType</name></type> <name>writeType</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>table</name></name> = <name>table</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>pendingEndpoints</name></name> = <name>pendingEndpoints</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>startTime</name></name> = <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>consistencyLevel</name></name> = <name>consistencyLevel</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>naturalEndpoints</name></name> = <name>naturalEndpoints</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>callback</name></name> = <name>callback</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>writeType</name></name> = <name>writeType</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>get</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>WriteTimeoutException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getWriteRpcTimeout</name></name><argument_list>()</argument_list></call> - (<call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> - <name>startTime</name>)</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>success</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>success</name> = <call><name><name>condition</name>.<name>await</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>ex</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <if>if <condition>(<expr>!<name>success</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>WriteTimeoutException</name><argument_list>(<argument><expr><name>writeType</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><call><name>ackCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>consistencyLevel</name>.<name>blockFor</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> + <call><name><name>pendingEndpoints</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>ackCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** null message means "response from local write" */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>response</name><parameter_list>(<param><decl><type><name>MessageIn</name></type> <name>msg</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>assureSufficientLiveNodes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnavailableException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>consistencyLevel</name>.<name>assureSufficientLiveNodes</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>Iterables</name>.<name>filter</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name>.<name>concat</name></name><argument_list>(<argument><expr><name>naturalEndpoints</name></expr></argument>, <argument><expr><name>pendingEndpoints</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>isAlive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>signal</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>condition</name>.<name>signal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>callback</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>callback</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>
}</block></class>
</unit>
