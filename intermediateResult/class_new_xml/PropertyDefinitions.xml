<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\PropertyDefinitions.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>SyntaxException</name></name>;</import>

<class><specifier>public</specifier> class <name>PropertyDefinitions</name>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>PropertyDefinitions</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name><name>properties</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> != null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Multiple definition for property '%s'"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>value</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <comment type="line">// Lowercase the map keys to be nice to users</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lowerCased</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>value</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>value</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>lowerCased</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <if>if <condition>(<expr><call><name><name>properties</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>lowerCased</name></expr></argument>)</argument_list></call> != null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Multiple definition for property '%s'"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keywords</name></decl></param>, <param><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>obsolete</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <for>for (<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><call><name><name>properties</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>keywords</name>.<name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <if>if <condition>(<expr><call><name><name>obsolete</name>.<name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Ignoring obsolete property {}"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <throw>throw <expr>new <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unknown property '%s'"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></else></if>
        }</block></for>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getSimple</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>val</name> <init>= <expr><call><name><name>properties</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>val</name> == null</expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>
        <if>if <condition>(<expr>!(<name>val</name> instanceof <name>String</name>)</expr>)</condition><then>
            <throw>throw <expr>new <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid value for property '%s'"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <return>return <expr>(<name>String</name>)<name>val</name></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getMap</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>val</name> <init>= <expr><call><name><name>properties</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>val</name> == null</expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>
        <if>if <condition>(<expr>!(<name>val</name> instanceof <name>Map</name>)</expr>)</condition><then>
            <throw>throw <expr>new <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid value for property '%s'"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <return>return <expr>(<name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name>)<name>val</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>hasProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>properties</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>, <param><decl><type><name>String</name></type> <name>defaultValue</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name>getSimple</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>value</name> != null ? <name>value</name> : <name>defaultValue</name></expr>;</return>
    }</block></function>

    <comment type="line">// Return a property value, typed as a Boolean</comment>
    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>getBoolean</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>, <param><decl><type><name>Boolean</name></type> <name>defaultValue</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name>getSimple</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name>value</name> == null) ? <name>defaultValue</name> : <call><name><name>value</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call>.<call><name>matches</name><argument_list>(<argument><expr>"(1|true|yes)"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// Return a property value, typed as a Double</comment>
    <function><type><specifier>public</specifier> <name>Double</name></type> <name>getDouble</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>, <param><decl><type><name>Double</name></type> <name>defaultValue</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name>getSimple</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value</name> == null</expr>)</condition><then>
        <block>{
            <return>return <expr><name>defaultValue</name></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <try>try
            <block>{
                <return>return <expr><call><name><name>Double</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid double value %s for '%s'"</expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></else></if>
    }</block></function>

    <comment type="line">// Return a property value, typed as an Integer</comment>
    <function><type><specifier>public</specifier> <name>Integer</name></type> <name>getInt</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>defaultValue</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name>getSimple</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>toInt</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>toInt</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>defaultValue</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>value</name> == null</expr>)</condition><then>
        <block>{
            <return>return <expr><name>defaultValue</name></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <try>try
            <block>{
                <return>return <expr><call><name><name>Integer</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid integer value %s for '%s'"</expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
