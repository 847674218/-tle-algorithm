<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\tracing\Tracing.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tracing</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>UUID</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ConcurrentHashMap</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name>.<name>Stage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name>.<name>StageManager</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>ColumnNameBuilder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamily</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ExpiringColumn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>RowMutation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>TimeUUIDType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessageIn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageProxy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>UUIDGen</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>WrappedRunnable</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name>.<name>bytes</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A trace session context. Able to track and store trace sessions. A session is usually a user initiated query, and may
 * have multiple local and remote events before it is completed. All events and sessions are stored at table.
 */</comment>
<class><specifier>public</specifier> class <name>Tracing</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRACE_KS</name> <init>= <expr>"system_traces"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EVENTS_CF</name> <init>= <expr>"events"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SESSIONS_CF</name> <init>= <expr>"sessions"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRACE_HEADER</name> <init>= <expr>"TraceSession"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TTL</name> <init>= <expr>24 * 3600</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Tracing</name></type> <name>instance</name> <init>= <expr>new <call><name>Tracing</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>Tracing</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Fetches and lazy initializes the trace context.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Tracing</name></type> <name>instance</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>instance</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>InetAddress</name></type> <name>localAddress</name> <init>= <expr><call><name><name>FBUtilities</name>.<name>getLocalAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list>&lt;<argument><name>TraceState</name></argument>&gt;</argument_list></name></type> <name>state</name> <init>= <expr>new <call><name><name>ThreadLocal</name><argument_list>&lt;<argument><name>TraceState</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>UUID</name></argument>, <argument><name>TraceState</name></argument>&gt;</argument_list></name></type> <name>sessions</name> <init>= <expr>new <call><name><name>ConcurrentHashMap</name><argument_list>&lt;<argument><name>UUID</name></argument>, <argument><name>TraceState</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>address</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name>long</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>ExpiringColumn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TTL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addParameterColumns</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawPayload</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>rawPayload</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>ExpiringColumn</name><argument_list>(<argument><expr><call><name>buildName</name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>bytes</name><argument_list>(<argument><expr>"parameters"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TTL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>buildName</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>meta</name></decl></param>, <param><decl><type><name>ByteBuffer</name>...</type> <name>args</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name> <init>= <expr><call><name><name>meta</name>.<name>getCfDef</name></name><argument_list>()</argument_list></call>.<call><name>getColumnNameBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>arg</name> <range>: <expr><name>args</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>builder</name>.<name>add</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><call><name><name>builder</name>.<name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getSessionId</name><parameter_list>()</parameter_list>
    <block>{
        <assert>assert <expr><call><name>isTracing</name><argument_list>()</argument_list></call></expr>;</assert>
        <return>return <expr><call><name><name>state</name>.<name>get</name></name><argument_list>()</argument_list></call>.<name>sessionId</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Indicates if the current thread's execution is being traced.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isTracing</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>instance</name> != null &amp;&amp; <call><name><name>instance</name>.<name>state</name>.<name>get</name></name><argument_list>()</argument_list></call> != null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>newSession</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>newSession</name><argument_list>(<argument><expr><call><name><name>TimeUUIDType</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>getTimeUUIDBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>newSession</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>sessionId</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><call><name><name>state</name>.<name>get</name></name><argument_list>()</argument_list></call> == null</expr>;</assert>

        <decl_stmt><decl><type><name>TraceState</name></type> <name>ts</name> <init>= <expr>new <call><name>TraceState</name><argument_list>(<argument><expr><name>localAddress</name></expr></argument>, <argument><expr><name>sessionId</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>set</name></name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessions</name>.<name>put</name></name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>sessionId</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>stopIfNonLocal</name><parameter_list>(<param><decl><type><name>TraceState</name></type> <name>state</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<name><name>state</name>.<name>isLocallyOwned</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>sessions</name>.<name>remove</name></name><argument_list>(<argument><expr><name><name>state</name>.<name>sessionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Stop the session and record its complete.  Called by coodinator when request is complete.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>stopSession</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>TraceState</name></type> <name>state</name> <init>= <expr><call><name><name>this</name>.<name>state</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>state</name> == null</expr>)</condition><then> <comment type="line">// inline isTracing to avoid implicit two calls to state.get()</comment>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"request complete"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>elapsed</name> <init>= <expr><call><name><name>state</name>.<name>elapsed</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>ByteBuffer</name></type> <name>sessionIdBytes</name> <init>= <expr><name><name>state</name>.<name>sessionIdBytes</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>StageManager</name>.<name>getStage</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>TRACING</name></name></expr></argument>)</argument_list></call>.<call><name>execute</name><argument_list>(<argument><expr>new <class><super><name>WrappedRunnable</name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
                <block>{
                    <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfMeta</name> <init>= <expr><name><name>CFMetaData</name>.<name>TraceSessionsCf</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name>cfMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><call><name>buildName</name><argument_list>(<argument><expr><name>cfMeta</name></expr></argument>, <argument><expr><call><name>bytes</name><argument_list>(<argument><expr>"duration"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>elapsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>RowMutation</name></type> <name>mutation</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name>TRACE_KS</name></expr></argument>, <argument><expr><name>sessionIdBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mutation</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>StorageProxy</name>.<name>mutate</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>mutation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ConsistencyLevel</name>.<name>ANY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>sessions</name>.<name>remove</name></name><argument_list>(<argument><expr><name><name>state</name>.<name>sessionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>state</name>.<name>set</name></name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>TraceState</name></type> <name>get</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>state</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>TraceState</name></type> <name>get</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>sessionId</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>sessions</name>.<name>get</name></name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>TraceState</name></type> <name>tls</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>state</name>.<name>set</name></name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>begin</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>request</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><call><name>isTracing</name><argument_list>()</argument_list></call></expr>;</assert>

        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>started_at</name> <init>= <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ByteBuffer</name></type> <name>sessionIdBytes</name> <init>= <expr><call><name><name>state</name>.<name>get</name></name><argument_list>()</argument_list></call>.<name>sessionIdBytes</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>StageManager</name>.<name>getStage</name></name><argument_list>(<argument><expr><name><name>Stage</name>.<name>TRACING</name></name></expr></argument>)</argument_list></call>.<call><name>execute</name><argument_list>(<argument><expr>new <class><super><name>WrappedRunnable</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
            <block>{
                <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfMeta</name> <init>= <expr><name><name>CFMetaData</name>.<name>TraceSessionsCf</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name>cfMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><call><name>buildName</name><argument_list>(<argument><expr><name>cfMeta</name></expr></argument>, <argument><expr><call><name>bytes</name><argument_list>(<argument><expr>"coordinator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><call><name>buildName</name><argument_list>(<argument><expr><name>cfMeta</name></expr></argument>, <argument><expr><call><name>bytes</name><argument_list>(<argument><expr>"request"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><call><name>buildName</name><argument_list>(<argument><expr><name>cfMeta</name></expr></argument>, <argument><expr><call><name>bytes</name><argument_list>(<argument><expr>"started_at"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>started_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addParameterColumns</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>RowMutation</name></type> <name>mutation</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name>TRACE_KS</name></expr></argument>, <argument><expr><name>sessionIdBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>mutation</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>StorageProxy</name>.<name>mutate</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>mutation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ConsistencyLevel</name>.<name>ANY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Updates the threads query context from a message
     * 
     * @param message
     *            The internode message
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>initializeFromMessage</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>MessageIn</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>sessionBytes</name> <init>= <expr><call><name><name>message</name>.<name>parameters</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Tracing</name>.<name>TRACE_HEADER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// if the message has no session context header don't do tracing</comment>
        <if>if <condition>(<expr><name>sessionBytes</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>state</name>.<name>set</name></name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <assert>assert <expr><name><name>sessionBytes</name>.<name>length</name></name> == 16</expr>;</assert>
        <decl_stmt><decl><type><name>UUID</name></type> <name>sessionId</name> <init>= <expr><call><name><name>UUIDGen</name>.<name>getUUID</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>sessionBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TraceState</name></type> <name>ts</name> <init>= <expr><call><name><name>sessions</name>.<name>get</name></name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ts</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ts</name> = new <call><name>TraceState</name><argument_list>(<argument><expr><name><name>message</name>.<name>from</name></name></expr></argument>, <argument><expr><name>sessionId</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sessions</name>.<name>put</name></name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>state</name>.<name>set</name></name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call> == null</expr>)</condition><then> <comment type="line">// instance might not be built at the time this is called</comment>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>TraceState</name></type> <name>state</name> <init>= <expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>state</name> == null</expr>)</condition><then> <comment type="line">// inline isTracing to avoid implicit two calls to state.get()</comment>
            <return>return;</return></then></if>

        <expr_stmt><expr><call><name><name>state</name>.<name>trace</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>format</name></decl></param>, <param><decl><type><name>Object</name></type> <name>arg</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call> == null</expr>)</condition><then> <comment type="line">// instance might not be built at the time this is called</comment>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>TraceState</name></type> <name>state</name> <init>= <expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>state</name> == null</expr>)</condition><then> <comment type="line">// inline isTracing to avoid implicit two calls to state.get()</comment>
            <return>return;</return></then></if>

        <expr_stmt><expr><call><name><name>state</name>.<name>trace</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>format</name></decl></param>, <param><decl><type><name>Object</name></type> <name>arg1</name></decl></param>, <param><decl><type><name>Object</name></type> <name>arg2</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call> == null</expr>)</condition><then> <comment type="line">// instance might not be built at the time this is called</comment>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>TraceState</name></type> <name>state</name> <init>= <expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>state</name> == null</expr>)</condition><then> <comment type="line">// inline isTracing to avoid implicit two calls to state.get()</comment>
            <return>return;</return></then></if>

        <expr_stmt><expr><call><name><name>state</name>.<name>trace</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>format</name></decl></param>, <param><decl><type><name><name>Object</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call> == null</expr>)</condition><then> <comment type="line">// instance might not be built at the time this is called</comment>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>TraceState</name></type> <name>state</name> <init>= <expr><call><name><name>Tracing</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>state</name> == null</expr>)</condition><then> <comment type="line">// inline isTracing to avoid implicit two calls to state.get()</comment>
            <return>return;</return></then></if>

        <expr_stmt><expr><call><name><name>state</name>.<name>trace</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
