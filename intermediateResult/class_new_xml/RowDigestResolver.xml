<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\service\RowDigestResolver.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamily</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ReadResponse</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>Row</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessageIn</name></name>;</import>

<class><specifier>public</specifier> class <name>RowDigestResolver</name> <super><extends>extends <name>AbstractRowResolver</name></extends></super>
<block>{
    <constructor><specifier>public</specifier> <name>RowDigestResolver</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Special case of resolve() so that CL.ONE reads never throw DigestMismatchException in the foreground
     */</comment>
    <function><type><specifier>public</specifier> <name>Row</name></type> <name>getData</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <for>for (<init><decl><type><name><name>MessageIn</name><argument_list>&lt;<argument><name>ReadResponse</name></argument>&gt;</argument_list></name></type> <name>message</name> <range>: <expr><name>replies</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ReadResponse</name></type> <name>result</name> <init>= <expr><name><name>message</name>.<name>payload</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>result</name>.<name>isDigestQuery</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr><call><name><name>result</name>.<name>row</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>
        }</block></for>

        <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr>"getData should not be invoked when no data is present"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block">/*
     * This method handles two different scenarios:
     *
     * a) we're handling the initial read, of data from the closest replica + digests
     *    from the rest.  In this case we check the digests against each other,
     *    throw an exception if there is a mismatch, otherwise return the data row.
     *
     * b) we're checking additional digests that arrived after the minimum to handle
     *    the requested ConsistencyLevel, i.e. asynchronous read repair check
     */</comment>
    <function><type><specifier>public</specifier> <name>Row</name></type> <name>resolve</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>DigestMismatchException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"resolving " + <call><name><name>replies</name>.<name>size</name></name><argument_list>()</argument_list></call> + " responses"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// validate digests against each other; throw immediately on mismatch.</comment>
        <comment type="line">// also extract the data reply, if any.</comment>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>data</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>digest</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name><name>MessageIn</name><argument_list>&lt;<argument><name>ReadResponse</name></argument>&gt;</argument_list></name></type> <name>message</name> <range>: <expr><name>replies</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ReadResponse</name></type> <name>response</name> <init>= <expr><name><name>message</name>.<name>payload</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>response</name>.<name>isDigestQuery</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>digest</name> == null</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>digest</name> = <call><name><name>response</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>digest2</name> <init>= <expr><call><name><name>response</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>!<call><name><name>digest</name>.<name>equals</name></name><argument_list>(<argument><expr><name>digest2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <throw>throw <expr>new <call><name>DigestMismatchException</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>digest2</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                }</block></else></if>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>data</name> = <call><name><name>response</name>.<name>row</name></name><argument_list>()</argument_list></call>.<name>cf</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>

        <comment type="line">// Compare digest (only one, since we threw earlier if there were different replies)</comment>
        <comment type="line">// with the data response. If there is a mismatch then throw an exception so that read repair can happen.</comment>
        <comment type="line">//</comment>
        <comment type="line">// It's important to note that we do not consider the possibility of multiple data responses --</comment>
        <comment type="line">// that can only happen when we're doing the repair post-mismatch, and will be handled by RowDataResolver.</comment>
        <if>if <condition>(<expr><name>digest</name> != null</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>digest2</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>digest</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>digest</name>.<name>equals</name></name><argument_list>(<argument><expr><name>digest2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>DigestMismatchException</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>digest2</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"digests verified"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"resolve: " + (<call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> - <name>startTime</name>) + " ms."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr>new <call><name>Row</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDataPresent</name><parameter_list>()</parameter_list>
    <block>{
        <for>for (<init><decl><type><name><name>MessageIn</name><argument_list>&lt;<argument><name>ReadResponse</name></argument>&gt;</argument_list></name></type> <name>message</name> <range>: <expr><name>replies</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr>!<call><name><name>message</name>.<name>payload</name>.<name>isDigestQuery</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr>true</expr>;</return></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>
}</block></class>
</unit>
