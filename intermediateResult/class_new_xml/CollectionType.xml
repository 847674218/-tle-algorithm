<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\marshal\CollectionType.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>IColumn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The abstract validator that is the base for maps, sets and lists.
 *
 * Please note that this comparator shouldn't be used "manually" (through thrift for instance).
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>CollectionType</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>AbstractType</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <enum><specifier>public</specifier> enum <name>Kind</name>
    <block>{
        <decl><name>MAP</name></decl>, <decl><name>SET</name></decl>, <decl><name>LIST</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>CollectionType</name><parameter_list>(<param><decl><type><name>Kind</name></type> <name>kind</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>kind</name></name> = <name>kind</name></expr>;</expr_stmt>
    }</block></constructor>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>nameComparator</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>valueComparator</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>appendToStringBuilder</name><parameter_list>(<param><decl><type><name>StringBuilder</name></type> <name>sb</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ByteBuffer</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>appendToStringBuilder</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>o1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>o2</name></decl></param>)</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"CollectionType should not be use directly as a comparator"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>BytesType</name>.<name>instance</name>.<name>getString</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>fromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>ByteBufferUtil</name>.<name>hexToBytes</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"cannot parse '%s' as hex bytes"</expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>valueComparator</name><argument_list>()</argument_list></call>.<call><name>validate</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCollection</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="line">// Utilitary method</comment>
    <function><type><specifier>protected</specifier> <name>ByteBuffer</name></type> <name>pack</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>buffers</name></decl></param>, <param><decl><type><name>int</name></type> <name>elements</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>result</name> <init>= <expr><call><name><name>ByteBuffer</name>.<name>allocate</name></name><argument_list>(<argument><expr>2 + <name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>putShort</name></name><argument_list>(<argument><expr>(<name>short</name>)<name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>bb</name> <range>: <expr><name>buffers</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>putShort</name></name><argument_list>(<argument><expr>(<name>short</name>)<call><name><name>bb</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>bb</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr>(<name>ByteBuffer</name>)<call><name><name>result</name>.<name>flip</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
