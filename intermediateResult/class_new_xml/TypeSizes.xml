<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\TypeSizes.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>UUID</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>TypeSizes</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeSizes</name></type> <name>NATIVE</name> <init>= <expr>new <call><name>NativeDBTypeSizes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeSizes</name></type> <name>VINT</name> <init>= <expr>new <call><name>VIntEncodedTypeSizes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BOOL_SIZE</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SHORT_SIZE</name> <init>= <expr>2</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INT_SIZE</name> <init>= <expr>4</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LONG_SIZE</name> <init>= <expr>8</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>UUID_SIZE</name> <init>= <expr>16</expr></init></decl>;</decl_stmt>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>short</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>long</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** assumes UTF8 */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>encodedUTF8Length</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>length</name> &lt;= <name><name>Short</name>.<name>MAX_VALUE</name></name></expr>;</assert>
        <return>return <expr><call><name>sizeof</name><argument_list>(<argument><expr>(<name>short</name>) <name>length</name></expr></argument>)</argument_list></call> + <name>length</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>encodedUTF8Length</name><parameter_list>(<param><decl><type><name>String</name></type> <name>st</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>strlen</name> <init>= <expr><call><name><name>st</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>utflen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>strlen</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>st</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>(<name>c</name> &gt;= 0x0001) &amp;&amp; (<name>c</name> &lt;= 0x007F)</expr>)</condition><then>
                <expr_stmt><expr><name>utflen</name>++</expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>c</name> &gt; 0x07FF</expr>)</condition><then>
                <expr_stmt><expr><name>utflen</name> += 3</expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>utflen</name> += 2</expr>;</expr_stmt></else></if></else></if>
        }</block></for>
        <return>return <expr><name>utflen</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeofWithShortLength</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>sizeof</name><argument_list>(<argument><expr>(<name>short</name>) <call><name><name>value</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + <call><name><name>value</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeofWithLength</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>sizeof</name><argument_list>(<argument><expr><call><name><name>value</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + <call><name><name>value</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>NativeDBTypeSizes</name> <super><extends>extends <name>TypeSizes</name></extends></super>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><name>BOOL_SIZE</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>short</name></type> <name>value</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><name>SHORT_SIZE</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><name>INT_SIZE</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>long</name></type> <name>value</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><name>LONG_SIZE</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>value</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><name>UUID_SIZE</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>VIntEncodedTypeSizes</name> <super><extends>extends <name>TypeSizes</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BOOL_SIZE</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeofVInt</name><parameter_list>(<param><decl><type><name>long</name></type> <name>i</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>i</name> &gt;= -112 &amp;&amp; <name>i</name> &lt;= 127</expr>)</condition><then>
                <return>return <expr>1</expr>;</return></then></if>

            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr>-112</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>i</name> ^= -1L</expr>;</expr_stmt> <comment type="line">// take one's complement'</comment>
                <expr_stmt><expr><name>len</name> = -120</expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>long</name></type> <name>tmp</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>tmp</name> != 0</expr>)</condition>
            <block>{
                <expr_stmt><expr><name>tmp</name> = <name>tmp</name> &gt;&gt; 8</expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name>--</expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>size</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> = (<name>len</name> &lt; -120) ? -(<name>len</name> + 120) : -(<name>len</name> + 112)</expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> += <name>len</name></expr>;</expr_stmt>
            <return>return <expr><name>size</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>long</name></type> <name>i</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name>sizeofVInt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>i</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><name>BOOL_SIZE</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>short</name></type> <name>i</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name>sizeofVInt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name>sizeofVInt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>sizeof</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>value</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name>sizeofVInt</name><argument_list>(<argument><expr><call><name><name>value</name>.<name>getMostSignificantBits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + <call><name>sizeofVInt</name><argument_list>(<argument><expr><call><name><name>value</name>.<name>getLeastSignificantBits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
