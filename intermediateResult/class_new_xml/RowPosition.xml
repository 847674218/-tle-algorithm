<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\RowPosition.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>RowPosition</name> <super><implements>implements <name><name>RingPosition</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <enum><specifier>public</specifier> <specifier>static</specifier> enum <name>Kind</name>
    <block>{
        <comment type="line">// Only add new values to the end of the enum, the ordinal is used</comment>
        <comment type="line">// during serialization</comment>
        <decl><name>ROW_KEY</name></decl>, <decl><name>MIN_BOUND</name></decl>, <decl><name>MAX_BOUND</name></decl>;

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Kind</name><index>[]</index></type> <name>allKinds</name> <init>= <expr><call><name><name>Kind</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>static</specifier> <name>Kind</name></type> <name>fromOrdinal</name><parameter_list>(<param><decl><type><name>int</name></type> <name>ordinal</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><name><name>allKinds</name><index>[<expr><name>ordinal</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RowPositionSerializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>RowPositionSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RowPosition</name></type> <name>forKey</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>IPartitioner</name></type> <name>p</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>key</name> == null || <call><name><name>key</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 ? <call><name><name>p</name>.<name>getMinimumToken</name></name><argument_list>()</argument_list></call>.<call><name>minKeyBound</name><argument_list>()</argument_list></call> : <call><name><name>p</name>.<name>decorateKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Token</name></type> <name>getToken</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Kind</name></type> <name>kind</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMinimum</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>isMinimum</name><argument_list>(<argument><expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>RowPositionSerializer</name> <super><implements>implements <name><name>ISerializer</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <comment type="block">/*
         * We need to be able to serialize both Token.KeyBound and
         * DecoratedKey. To make this compact, we first write a byte whose
         * meaning is:
         *   - 0: DecoratedKey
         *   - 1: a 'minimum' Token.KeyBound
         *   - 2: a 'maximum' Token.KeyBound
         * In the case of the DecoratedKey, we then serialize the key (the
         * token is recreated on the other side). In the other cases, we then
         * serialize the token.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>RowPosition</name></type> <name>pos</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>Kind</name></type> <name>kind</name> <init>= <expr><call><name><name>pos</name>.<name>kind</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeByte</name></name><argument_list>(<argument><expr><call><name><name>kind</name>.<name>ordinal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kind</name> == <name><name>Kind</name>.<name>ROW_KEY</name></name></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr>((<name>DecoratedKey</name>)<name>pos</name>).<name>key</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><call><name><name>Token</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><call><name><name>pos</name>.<name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>RowPosition</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>Kind</name></type> <name>kind</name> <init>= <expr><call><name><name>Kind</name>.<name>fromOrdinal</name></name><argument_list>(<argument><expr><call><name><name>dis</name>.<name>readByte</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>kind</name> == <name><name>Kind</name>.<name>ROW_KEY</name></name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>k</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>decorateKey</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name>Token</name></type> <name>t</name> <init>= <expr><call><name><name>Token</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><name>kind</name> == <name><name>Kind</name>.<name>MIN_BOUND</name></name> ? <call><name><name>t</name>.<name>minKeyBound</name></name><argument_list>()</argument_list></call> : <call><name><name>t</name>.<name>maxKeyBound</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>RowPosition</name></type> <name>pos</name></decl></param>, <param><decl><type><name>TypeSizes</name></type> <name>typeSizes</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Kind</name></type> <name>kind</name> <init>= <expr><call><name><name>pos</name>.<name>kind</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr>1</expr></init></decl>;</decl_stmt> <comment type="line">// 1 byte for enum</comment>
            <if>if <condition>(<expr><name>kind</name> == <name><name>Kind</name>.<name>ROW_KEY</name></name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>keySize</name> <init>= <expr>((<name>DecoratedKey</name>)<name>pos</name>).<call><name><name>key</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>size</name> += <call><name><name>typeSizes</name>.<name>sizeof</name></name><argument_list>(<argument><expr>(<name>short</name>) <name>keySize</name></expr></argument>)</argument_list></call> + <name>keySize</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>size</name> += <call><name><name>Token</name>.<name>serializer</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><call><name><name>pos</name>.<name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>typeSizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <return>return <expr><name>size</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
