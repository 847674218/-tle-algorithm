<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\thrift\ThriftConversion.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>WriteType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>RequestExecutionException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>RequestTimeoutException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>RequestValidationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>WriteTimeoutException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Static utility methods to convert internal structure to and from thrift ones.
 */</comment>
<class><specifier>public</specifier> class <name>ThriftConversion</name>
<block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ConsistencyLevel</name></type> <name>toThrift</name><parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name></type> <name>cl</name></decl></param>)</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>cl</name></expr>)</condition>
        <block>{
            <case>case <expr><name>ANY</name></expr>: <return>return <expr><name><name>ConsistencyLevel</name>.<name>ANY</name></name></expr>;</return>
            </case><case>case <expr><name>ONE</name></expr>: <return>return <expr><name><name>ConsistencyLevel</name>.<name>ONE</name></name></expr>;</return>
            </case><case>case <expr><name>TWO</name></expr>: <return>return <expr><name><name>ConsistencyLevel</name>.<name>TWO</name></name></expr>;</return>
            </case><case>case <expr><name>THREE</name></expr>: <return>return <expr><name><name>ConsistencyLevel</name>.<name>THREE</name></name></expr>;</return>
            </case><case>case <expr><name>QUORUM</name></expr>: <return>return <expr><name><name>ConsistencyLevel</name>.<name>QUORUM</name></name></expr>;</return>
            </case><case>case <expr><name>ALL</name></expr>: <return>return <expr><name><name>ConsistencyLevel</name>.<name>ALL</name></name></expr>;</return>
            </case><case>case <expr><name>LOCAL_QUORUM</name></expr>: <return>return <expr><name><name>ConsistencyLevel</name>.<name>LOCAL_QUORUM</name></name></expr>;</return>
            </case><case>case <expr><name>EACH_QUORUM</name></expr>: <return>return <expr><name><name>ConsistencyLevel</name>.<name>EACH_QUORUM</name></name></expr>;</return>
        </case>}</block></switch>
        <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name></type> <name>fromThrift</name><parameter_list>(<param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>)</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>cl</name></expr>)</condition>
        <block>{
            <case>case <expr><name>ANY</name></expr>: <return>return <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name>.<name>ANY</name></name></expr>;</return>
            </case><case>case <expr><name>ONE</name></expr>: <return>return <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name>.<name>ONE</name></name></expr>;</return>
            </case><case>case <expr><name>TWO</name></expr>: <return>return <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name>.<name>TWO</name></name></expr>;</return>
            </case><case>case <expr><name>THREE</name></expr>: <return>return <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name>.<name>THREE</name></name></expr>;</return>
            </case><case>case <expr><name>QUORUM</name></expr>: <return>return <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name>.<name>QUORUM</name></name></expr>;</return>
            </case><case>case <expr><name>ALL</name></expr>: <return>return <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name>.<name>ALL</name></name></expr>;</return>
            </case><case>case <expr><name>LOCAL_QUORUM</name></expr>: <return>return <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name>.<name>LOCAL_QUORUM</name></name></expr>;</return>
            </case><case>case <expr><name>EACH_QUORUM</name></expr>: <return>return <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name>.<name>EACH_QUORUM</name></name></expr>;</return>
        </case>}</block></switch>
        <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>rethrow</name><parameter_list>(<param><decl><type><name>RequestExecutionException</name></type> <name>e</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>e</name> instanceof <name>RequestTimeoutException</name></expr>)</condition><then>
            <throw>throw <expr><call><name>toThrift</name><argument_list>(<argument><expr>(<name>RequestTimeoutException</name>)<name>e</name></expr></argument>)</argument_list></call></expr>;</throw></then>
        <else>else
            <throw>throw <expr>new <call><name>UnavailableException</name><argument_list>()</argument_list></call></expr>;</throw></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InvalidRequestException</name></type> <name>toThrift</name><parameter_list>(<param><decl><type><name>RequestValidationException</name></type> <name>e</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InvalidRequestException</name></type> <name>toThrift</name><parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>InvalidRequestException</name></name></type> <name>e</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UnavailableException</name></type> <name>toThrift</name><parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>UnavailableException</name></name></type> <name>e</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>UnavailableException</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AuthenticationException</name></type> <name>toThrift</name><parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>AuthenticationException</name></name></type> <name>e</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>AuthenticationException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TimedOutException</name></type> <name>toThrift</name><parameter_list>(<param><decl><type><name>RequestTimeoutException</name></type> <name>e</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>TimedOutException</name></type> <name>toe</name> <init>= <expr>new <call><name>TimedOutException</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>e</name> instanceof <name>WriteTimeoutException</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>WriteTimeoutException</name></type> <name>wte</name> <init>= <expr>(<name>WriteTimeoutException</name>)<name>e</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>toe</name>.<name>setAcknowledged_by</name></name><argument_list>(<argument><expr><name><name>wte</name>.<name>received</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>wte</name>.<name>writeType</name></name> == <name><name>WriteType</name>.<name>BATCH_LOG</name></name></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>toe</name>.<name>setAcknowledged_by_batchlog</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name><name>wte</name>.<name>writeType</name></name> == <name><name>WriteType</name>.<name>BATCH</name></name></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>toe</name>.<name>setAcknowledged_by_batchlog</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
        }</block></then></if>
        <return>return <expr><name>toe</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
