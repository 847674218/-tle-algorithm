<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\thrift\TServerCustomFactory.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>;</package>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>server</name>.<name>TServer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Helper implementation to create a thrift TServer based on one of the common types we support (sync, async, hsha),
 * or a custom type by setting the fully qualified java class name in the rpc_server_type setting.
 */</comment>
<class><specifier>public</specifier> class <name>TServerCustomFactory</name> <super><implements>implements <name>TServerFactory</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>TServerCustomFactory</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>serverType</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>TServerCustomFactory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>serverType</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>serverType</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>serverType</name></name> = <name>serverType</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>TServer</name></type> <name>buildTServer</name><parameter_list>(<param><decl><type><name><name>TServerFactory</name>.<name>Args</name></name></type> <name>args</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>TServer</name></type> <name>server</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>ThriftServer</name>.<name>SYNC</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>serverType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>server</name> = new <call><name><name>CustomTThreadPoolServer</name>.<name>Factory</name></name><argument_list>()</argument_list></call>.<call><name>buildTServer</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Using synchronous/threadpool thrift server on %s : %s"</expr></argument>, <argument><expr><call><name><name>args</name>.<name>addr</name>.<name>getHostName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>args</name>.<name>addr</name>.<name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if<condition>(<expr><call><name><name>ThriftServer</name>.<name>ASYNC</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>serverType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>server</name> = new <call><name><name>CustomTNonBlockingServer</name>.<name>Factory</name></name><argument_list>()</argument_list></call>.<call><name>buildTServer</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Using non-blocking/asynchronous thrift server on %s : %s"</expr></argument>, <argument><expr><call><name><name>args</name>.<name>addr</name>.<name>getHostName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>args</name>.<name>addr</name>.<name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if<condition>(<expr><call><name><name>ThriftServer</name>.<name>HSHA</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>serverType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>server</name> = new <call><name><name>CustomTHsHaServer</name>.<name>Factory</name></name><argument_list>()</argument_list></call>.<call><name>buildTServer</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Using custom half-sync/half-async thrift server on %s : %s"</expr></argument>, <argument><expr><call><name><name>args</name>.<name>addr</name>.<name>getHostName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>args</name>.<name>addr</name>.<name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>TServerFactory</name></type> <name>serverFactory</name></decl>;</decl_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name>serverFactory</name> = (<name>TServerFactory</name>) <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>serverType</name></expr></argument>)</argument_list></call>.<call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Failed to instantiate server factory:" + <name>serverType</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><name>server</name> = <call><name><name>serverFactory</name>.<name>buildTServer</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Using custom thrift server %s on %s : %s"</expr></argument>, <argument><expr><call><name><name>server</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>args</name>.<name>addr</name>.<name>getHostName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>args</name>.<name>addr</name>.<name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if>
        <return>return <expr><name>server</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
