<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\statements\Selector.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>statements</name></name>;</package>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Objects</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>ColumnIdentifier</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>Term</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>.*;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Selector</name>
<block>{
    <enum><specifier>public</specifier> enum <name>Function</name>
    <block>{
        <constructor><name>WRITE_TIME</name>      <parameter_list>(<param><decl><type><name><name>LongType</name>.<name>instance</name></name></type></decl></param>)</parameter_list>,
        TTL             (Int32Type.instance</constructor>)</block>,
        <constructor><name>DATE_OF</name>         <parameter_list>(<param><decl><type><name><name>DateType</name>.<name>instance</name></name></type></decl></param>)</parameter_list>,
        UNIXTIMESTAMP_OF(LongType.instance</constructor></enum>)</block>;</class>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>resultType</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Function</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>resultType</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>resultType</name></name> = <name>resultType</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <switch>switch <condition>(<expr><name>this</name></expr>)</condition>
            <block>{
                <case>case <expr><name>WRITE_TIME</name></expr>:
                    <return>return <expr>"writetime"</expr>;</return>
                </case><case>case <expr><name>TTL</name></expr>:
                    <return>return <expr>"ttl"</expr>;</return>
                </case><case>case <expr><name>DATE_OF</name></expr>:
                    <return>return <expr>"dateof"</expr>;</return>
                </case><case>case <expr><name>UNIXTIMESTAMP_OF</name></expr>:
                    <return>return <expr>"unixtimestampof"</expr>;</return>
            </case>}</block></switch>
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>
    }

    public <function_decl><type><specifier>abstract</specifier> <name>ColumnIdentifier</name></type> <name>id</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasFunction</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Function</name></type> <name>function</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasKey</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Term</name></type> <name>key</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>null</expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WithFunction</name> <super><extends>extends <name>Selector</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Function</name></type> <name>function</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ColumnIdentifier</name></type> <name>id</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>WithFunction</name><parameter_list>(<param><decl><type><name>ColumnIdentifier</name></type> <name>id</name></decl></param>, <param><decl><type><name>Function</name></type> <name>function</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>id</name></name> = <name>id</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>function</name></name> = <name>function</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>ColumnIdentifier</name></type> <name>id</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>id</name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>hasFunction</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>Function</name></type> <name>function</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>function</name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>Objects</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
        <block>{
            <if>if<condition>(<expr>!(<name>o</name> instanceof <name>WithFunction</name>)</expr>)</condition><then>
                <return>return <expr>false</expr>;</return></then></if>
            <decl_stmt><decl><type><name>Selector</name></type> <name>that</name> <init>= <expr>(<name>WithFunction</name>)<name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>id</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>that</name>.<name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <call><name>function</name><argument_list>()</argument_list></call> == <call><name><name>that</name>.<name>function</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>function</name> + "(" + <name>id</name> + ")"</expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WithKey</name> <super><extends>extends <name>Selector</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ColumnIdentifier</name></type> <name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Term</name></type> <name>key</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>WithKey</name><parameter_list>(<param><decl><type><name>ColumnIdentifier</name></type> <name>id</name></decl></param>, <param><decl><type><name>Term</name></type> <name>key</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>id</name></name> = <name>id</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>ColumnIdentifier</name></type> <name>id</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>id</name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>hasKey</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Term</name></type> <name>key</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>key</name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>Objects</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
        <block>{
            <if>if<condition>(<expr>!(<name>o</name> instanceof <name>WithKey</name>)</expr>)</condition><then>
                <return>return <expr>false</expr>;</return></then></if>
            <decl_stmt><decl><type><name>WithKey</name></type> <name>that</name> <init>= <expr>(<name>WithKey</name>)<name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>id</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>that</name>.<name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>key</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>id</name> + "[" + <name>key</name> + "]"</expr>;</return>
        }</block></function>
    }</block></class>
}
</unit>
