<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\SortedBiMultiValMap.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>SortedMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TreeMap</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>SortedSetMultimap</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>TreeMultimap</name></name>;</import>

<class><specifier>public</specifier> class <name><name>SortedBiMultiValMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>BiMultiValMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <constructor><specifier>protected</specifier> <name>SortedBiMultiValMap</name><parameter_list>(<param><decl><type><name><name>SortedMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>forwardMap</name></decl></param>, <param><decl><type><name><name>SortedSetMultimap</name><argument_list>&lt;<argument><name>V</name></argument>, <argument><name>K</name></argument>&gt;</argument_list></name></type> <name>reverseMap</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>forwardMap</name></expr></argument>, <argument><expr><name>reverseMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>K</name> <extends>extends <name><name>Comparable</name><argument_list>&lt;<argument><name>K</name></argument>&gt;</argument_list></name></extends></argument>, <argument><name>V</name> <extends>extends <name><name>Comparable</name><argument_list>&lt;<argument><name>V</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list> <name><name>SortedBiMultiValMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name><name>SortedBiMultiValMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>TreeMultimap</name>.</name>&lt;<name>V</name></expr></argument>, <argument><expr><name>K</name>&gt;<call><name>create</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list> <name><name>SortedBiMultiValMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>K</name></argument>&gt;</argument_list></name></type> <name>keyComparator</name></decl></param>, <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>valueComparator</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>keyComparator</name> == null</expr>)</condition><then>
            <expr_stmt><expr><name>keyComparator</name> = <call><name>defaultComparator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name>valueComparator</name> == null</expr>)</condition><then>
            <expr_stmt><expr><name>valueComparator</name> = <call><name>defaultComparator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr>new <call><name><name>SortedBiMultiValMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>keyComparator</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>TreeMultimap</name>.</name>&lt;<name>V</name></expr></argument>, <argument><expr><name>K</name>&gt;<call><name>create</name><argument_list>(<argument><expr><name>valueComparator</name></expr></argument>, <argument><expr><name>keyComparator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>K</name> <extends>extends <name><name>Comparable</name><argument_list>&lt;<argument><name>K</name></argument>&gt;</argument_list></name></extends></argument>, <argument><name>V</name> <extends>extends <name><name>Comparable</name><argument_list>&lt;<argument><name>V</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list> <name><name>SortedBiMultiValMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>BiMultiValMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>SortedBiMultiValMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>newMap</name> <init>= <expr><name><name>SortedBiMultiValMap</name>.</name>&lt;<name>K</name></expr></init>,<name>V</name>&gt;<name>create</name><argument_list>()</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newMap</name>.<name>forwardMap</name>.<name>putAll</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newMap</name>.<name>reverseMap</name>.<name>putAll</name></name><argument_list>(<argument><expr><call><name><name>map</name>.<name>inverse</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newMap</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list> <name><name>SortedBiMultiValMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>BiMultiValMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></param>, <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>K</name></argument>&gt;</argument_list></name></type> <name>keyComparator</name></decl></param>, <param><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>valueComparator</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>SortedBiMultiValMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>newMap</name> <init>= <expr><call><name>create</name><argument_list>(<argument><expr><name>keyComparator</name></expr></argument>, <argument><expr><name>valueComparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newMap</name>.<name>forwardMap</name>.<name>putAll</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newMap</name>.<name>reverseMap</name>.<name>putAll</name></name><argument_list>(<argument><expr><call><name><name>map</name>.<name>inverse</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newMap</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name><name>Comparator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>defaultComparator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr>"unchecked"</expr></argument>)</argument_list></annotation>
            <specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>T</name></type> <name>o1</name></decl></param>, <param><decl><type><name>T</name></type> <name>o2</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr>((<name><name>Comparable</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>) <name>o1</name>).<call><name>compareTo</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>
}</block></class>
</unit>
