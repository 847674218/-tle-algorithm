<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\Server.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>EnumMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>Executors</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicBoolean</name></name>;</import>
<import>import <name><name>javax</name>.<name>net</name>.<name>ssl</name>.<name>SSLContext</name></name>;</import>
<import>import <name><name>javax</name>.<name>net</name>.<name>ssl</name>.<name>SSLEngine</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>EncryptionOptions</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>security</name>.<name>SSLFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>CassandraDaemon</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>IEndpointLifecycleSubscriber</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>IMigrationListener</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>MigrationManager</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>EventMessage</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>bootstrap</name>.<name>ServerBootstrap</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>Channel</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>ChannelFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>ChannelPipeline</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>ChannelPipelineFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>Channels</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>group</name>.<name>ChannelGroup</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>group</name>.<name>DefaultChannelGroup</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name>.<name>socket</name>.<name>nio</name>.<name>NioServerSocketChannelFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>handler</name>.<name>execution</name>.<name>ExecutionHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>handler</name>.<name>ssl</name>.<name>SslHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>logging</name>.<name>InternalLoggerFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>logging</name>.<name>Slf4JLoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>Server</name> <super><implements>implements <name><name>CassandraDaemon</name>.<name>Server</name></name></implements></super>
<block>{
    <expr_stmt><expr>static
    <block>{
        <expr><call><name><name>InternalLoggerFactory</name>.<name>setDefaultFactory</name></name><argument_list>(<argument><expr>new <call><name>Slf4JLoggerFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    private static <name>final</name> <name>Logger</name> <name>logger</name> = <call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>Server</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ConnectionTracker</name></type> <name>connectionTracker</name> <init>= <expr>new <call><name>ConnectionTracker</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>InetSocketAddress</name></type> <name>socket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicBoolean</name></type> <name>isRunning</name> <init>= <expr>new <call><name>AtomicBoolean</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ChannelFactory</name></type> <name>factory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ExecutionHandler</name></type> <name>executionHandler</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Server</name><parameter_list>(<param><decl><type><name>InetSocketAddress</name></type> <name>socket</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>socket</name></name> = <name>socket</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>EventNotifier</name></type> <name>notifier</name> <init>= <expr>new <call><name>EventNotifier</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>StorageService</name>.<name>instance</name>.<name>register</name></name><argument_list>(<argument><expr><name>notifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MigrationManager</name>.<name>instance</name>.<name>register</name></name><argument_list>(<argument><expr><name>notifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Server</name><parameter_list>(<param><decl><type><name>String</name></type> <name>hostname</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Server</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Server</name><parameter_list>(<param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>isRunning</name>.<name>compareAndSet</name></name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>isRunning</name>.<name>compareAndSet</name></name><argument_list>(<argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRunning</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>isRunning</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// Configure the server.</comment>
        <expr_stmt><expr><name>executionHandler</name> = new <call><name>ExecutionHandler</name><argument_list>(<argument><expr>new <call><name>RequestThreadPoolExecutor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>factory</name> = new <call><name>NioServerSocketChannelFactory</name><argument_list>(<argument><expr><call><name><name>Executors</name>.<name>newCachedThreadPool</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Executors</name>.<name>newCachedThreadPool</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ServerBootstrap</name></type> <name>bootstrap</name> <init>= <expr>new <call><name>ServerBootstrap</name><argument_list>(<argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>bootstrap</name>.<name>setOption</name></name><argument_list>(<argument><expr>"child.tcpNoDelay"</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set up the event pipeline factory.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>EncryptionOptions</name>.<name>ClientEncryptionOptions</name></name></type> <name>clientEnc</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getClientEncryptionOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>clientEnc</name>.<name>enabled</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"enabling encrypted CQL connections between client and server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bootstrap</name>.<name>setPipelineFactory</name></name><argument_list>(<argument><expr>new <call><name>SecurePipelineFactory</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clientEnc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>bootstrap</name>.<name>setPipelineFactory</name></name><argument_list>(<argument><expr>new <call><name>PipelineFactory</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Bind and start to accept incoming connections.</comment>
        <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Starting listening for CQL clients on " + <name>socket</name> + "..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Channel</name></type> <name>channel</name> <init>= <expr><call><name><name>bootstrap</name>.<name>bind</name></name><argument_list>(<argument><expr><name>socket</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>connectionTracker</name>.<name>allChannels</name>.<name>add</name></name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// Close opened connections</comment>
        <expr_stmt><expr><call><name><name>connectionTracker</name>.<name>closeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>factory</name>.<name>releaseExternalResources</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>factory</name> = null</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>executionHandler</name>.<name>releaseExternalResources</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>executionHandler</name> = null</expr>;</expr_stmt>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ConnectionTracker</name> <super><implements>implements <name><name>Connection</name>.<name>Tracker</name></name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ChannelGroup</name></type> <name>allChannels</name> <init>= <expr>new <call><name>DefaultChannelGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>EnumMap</name><argument_list>&lt;<argument><name><name>Event</name>.<name>Type</name></name></argument>, <argument><name>ChannelGroup</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr>new <call><name><name>EnumMap</name><argument_list>&lt;<argument><name><name>Event</name>.<name>Type</name></name></argument>, <argument><name>ChannelGroup</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Event</name>.<name>Type</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ConnectionTracker</name><parameter_list>()</parameter_list>
        <block>{
            <for>for (<init><decl><type><name><name>Event</name>.<name>Type</name></name></type> <name>type</name> <range>: <expr><call><name><name>Event</name>.<name>Type</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name>groups</name>.<name>put</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>new <call><name>DefaultChannelGroup</name><argument_list>(<argument><expr><call><name><name>type</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>addConnection</name><parameter_list>(<param><decl><type><name>Channel</name></type> <name>ch</name></decl></param>, <param><decl><type><name>Connection</name></type> <name>connection</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>allChannels</name>.<name>add</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>register</name><parameter_list>(<param><decl><type><name><name>Event</name>.<name>Type</name></name></type> <name>type</name></decl></param>, <param><decl><type><name>Channel</name></type> <name>ch</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>groups</name>.<name>get</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>unregister</name><parameter_list>(<param><decl><type><name>Channel</name></type> <name>ch</name></decl></param>)</parameter_list>
        <block>{
            <for>for (<init><decl><type><name>ChannelGroup</name></type> <name>group</name> <range>: <expr><call><name><name>groups</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name>group</name>.<name>remove</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>send</name><parameter_list>(<param><decl><type><name>Event</name></type> <name>event</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>groups</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>event</name>.<name>type</name></name></expr></argument>)</argument_list></call>.<call><name>write</name><argument_list>(<argument><expr>new <call><name>EventMessage</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>closeAll</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>allChannels</name>.<name>close</name></name><argument_list>()</argument_list></call>.<call><name>awaitUninterruptibly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>PipelineFactory</name> <super><implements>implements <name>ChannelPipelineFactory</name></implements></super>
    <block>{
        <comment type="line">// Stateless handlers</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name>ProtocolDecoder</name></name></type> <name>messageDecoder</name> <init>= <expr>new <call><name><name>Message</name>.<name>ProtocolDecoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name>ProtocolEncoder</name></name></type> <name>messageEncoder</name> <init>= <expr>new <call><name><name>Message</name>.<name>ProtocolEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Frame</name>.<name>Decompressor</name></name></type> <name>frameDecompressor</name> <init>= <expr>new <call><name><name>Frame</name>.<name>Decompressor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Frame</name>.<name>Compressor</name></name></type> <name>frameCompressor</name> <init>= <expr>new <call><name><name>Frame</name>.<name>Compressor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Frame</name>.<name>Encoder</name></name></type> <name>frameEncoder</name> <init>= <expr>new <call><name><name>Frame</name>.<name>Encoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name>Dispatcher</name></name></type> <name>dispatcher</name> <init>= <expr>new <call><name><name>Message</name>.<name>Dispatcher</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Server</name></type> <name>server</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>PipelineFactory</name><parameter_list>(<param><decl><type><name>Server</name></type> <name>server</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>server</name></name> = <name>server</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>ChannelPipeline</name></type> <name>getPipeline</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>ChannelPipeline</name></type> <name>pipeline</name> <init>= <expr><call><name><name>Channels</name>.<name>pipeline</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">//pipeline.addLast("debug", new LoggingHandler());</comment>

            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"frameDecoder"</expr></argument>, <argument><expr>new <call><name><name>Frame</name>.<name>Decoder</name></name><argument_list>(<argument><expr><name><name>server</name>.<name>connectionTracker</name></name></expr></argument>, <argument><expr><name><name>ServerConnection</name>.<name>FACTORY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"frameEncoder"</expr></argument>, <argument><expr><name>frameEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"frameDecompressor"</expr></argument>, <argument><expr><name>frameDecompressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"frameCompressor"</expr></argument>, <argument><expr><name>frameCompressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"messageDecoder"</expr></argument>, <argument><expr><name>messageDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"messageEncoder"</expr></argument>, <argument><expr><name>messageEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"executor"</expr></argument>, <argument><expr><name><name>server</name>.<name>executionHandler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addLast</name></name><argument_list>(<argument><expr>"dispatcher"</expr></argument>, <argument><expr><name>dispatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>pipeline</name></expr>;</return>
      }</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>SecurePipelineFactory</name> <super><extends>extends <name>PipelineFactory</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SSLContext</name></type> <name>sslContext</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>EncryptionOptions</name></type> <name>encryptionOptions</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SecurePipelineFactory</name><parameter_list>(<param><decl><type><name>Server</name></type> <name>server</name></decl></param>, <param><decl><type><name>EncryptionOptions</name></type> <name>encryptionOptions</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>encryptionOptions</name></name> = <name>encryptionOptions</name></expr>;</expr_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name><name>this</name>.<name>sslContext</name></name> = <call><name><name>SSLFactory</name>.<name>createSSLContext</name></name><argument_list>(<argument><expr><name>encryptionOptions</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Failed to setup secure pipeline"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>ChannelPipeline</name></type> <name>getPipeline</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>SSLEngine</name></type> <name>sslEngine</name> <init>= <expr><call><name><name>sslContext</name>.<name>createSSLEngine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sslEngine</name>.<name>setUseClientMode</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sslEngine</name>.<name>setEnabledCipherSuites</name></name><argument_list>(<argument><expr><name><name>encryptionOptions</name>.<name>cipher_suites</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sslEngine</name>.<name>setNeedClientAuth</name></name><argument_list>(<argument><expr><name><name>encryptionOptions</name>.<name>require_client_auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name>SslHandler</name></type> <name>sslHandler</name> <init>= <expr>new <call><name>SslHandler</name><argument_list>(<argument><expr><name>sslEngine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sslHandler</name>.<name>setIssueHandshake</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ChannelPipeline</name></type> <name>pipeline</name> <init>= <expr><call><name><name>super</name>.<name>getPipeline</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>pipeline</name>.<name>addFirst</name></name><argument_list>(<argument><expr>"ssl"</expr></argument>, <argument><expr><name>sslHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>pipeline</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>EventNotifier</name> <super><implements>implements <name>IEndpointLifecycleSubscriber</name>, <name>IMigrationListener</name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Server</name></type> <name>server</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>EventNotifier</name><parameter_list>(<param><decl><type><name>Server</name></type> <name>server</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>server</name></name> = <name>server</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>private</specifier> <name>InetAddress</name></type> <name>getRpcAddress</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
        <block>{
            <try>try
            <block>{
                <return>return <expr><call><name><name>InetAddress</name>.<name>getByName</name></name><argument_list>(<argument><expr><call><name><name>StorageService</name>.<name>instance</name>.<name>getRpcaddress</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <comment type="line">// That should not happen, so log an error, but return the</comment>
                <comment type="line">// endpoint address since there's a good change this is right</comment>
                <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Problem retrieving RPC address for " + <name>endpoint</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>endpoint</name></expr>;</return>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onJoinCluster</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>connectionTracker</name>.<name>send</name></name><argument_list>(<argument><expr><call><name><name>Event</name>.<name>TopologyChange</name>.<name>newNode</name></name><argument_list>(<argument><expr><call><name>getRpcAddress</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>server</name>.<name>socket</name>.<name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onLeaveCluster</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>connectionTracker</name>.<name>send</name></name><argument_list>(<argument><expr><call><name><name>Event</name>.<name>TopologyChange</name>.<name>removedNode</name></name><argument_list>(<argument><expr><call><name>getRpcAddress</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>server</name>.<name>socket</name>.<name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onMove</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>connectionTracker</name>.<name>send</name></name><argument_list>(<argument><expr><call><name><name>Event</name>.<name>TopologyChange</name>.<name>movedNode</name></name><argument_list>(<argument><expr><call><name>getRpcAddress</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>server</name>.<name>socket</name>.<name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onUp</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>connectionTracker</name>.<name>send</name></name><argument_list>(<argument><expr><call><name><name>Event</name>.<name>StatusChange</name>.<name>nodeUp</name></name><argument_list>(<argument><expr><call><name>getRpcAddress</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>server</name>.<name>socket</name>.<name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onDown</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>connectionTracker</name>.<name>send</name></name><argument_list>(<argument><expr><call><name><name>Event</name>.<name>StatusChange</name>.<name>nodeDown</name></name><argument_list>(<argument><expr><call><name>getRpcAddress</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>server</name>.<name>socket</name>.<name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onCreateKeyspace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>connectionTracker</name>.<name>send</name></name><argument_list>(<argument><expr>new <call><name><name>Event</name>.<name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name>.<name>SchemaChange</name>.<name>Change</name>.<name>CREATED</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onCreateColumnFamly</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>connectionTracker</name>.<name>send</name></name><argument_list>(<argument><expr>new <call><name><name>Event</name>.<name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name>.<name>SchemaChange</name>.<name>Change</name>.<name>CREATED</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onUpdateKeyspace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>connectionTracker</name>.<name>send</name></name><argument_list>(<argument><expr>new <call><name><name>Event</name>.<name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name>.<name>SchemaChange</name>.<name>Change</name>.<name>UPDATED</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onUpdateColumnFamly</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>connectionTracker</name>.<name>send</name></name><argument_list>(<argument><expr>new <call><name><name>Event</name>.<name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name>.<name>SchemaChange</name>.<name>Change</name>.<name>UPDATED</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onDropKeyspace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>connectionTracker</name>.<name>send</name></name><argument_list>(<argument><expr>new <call><name><name>Event</name>.<name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name>.<name>SchemaChange</name>.<name>Change</name>.<name>DROPPED</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onDropColumnFamly</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>connectionTracker</name>.<name>send</name></name><argument_list>(<argument><expr>new <call><name><name>Event</name>.<name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name>.<name>SchemaChange</name>.<name>Change</name>.<name>DROPPED</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
