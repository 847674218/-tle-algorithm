<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\statements\BatchStatement.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>statements</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>Permission</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>CounterMutation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>IMutation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>RowMutation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>ClientState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A &lt;code&gt;BATCH&lt;/code&gt; statement parsed from a CQL query.
 *
 */</comment>
<class><specifier>public</specifier> class <name>BatchStatement</name> <super><extends>extends <name>ModificationStatement</name></extends></super>
<block>{
    <comment type="line">// statements to execute</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ModificationStatement</name></argument>&gt;</argument_list></name></type> <name>statements</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new BatchStatement from a list of statements and a
     * Thrift consistency level.
     *
     * @param type type of the batch
     * @param statements a list of UpdateStatements
     * @param attrs additional attributes for statement (CL, timestamp, timeToLive)
     */</comment>
    <constructor><specifier>public</specifier> <name>BatchStatement</name><parameter_list>(<param><decl><type><name>Type</name></type> <name>type</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ModificationStatement</name></argument>&gt;</argument_list></name></type> <name>statements</name></decl></param>, <param><decl><type><name>Attributes</name></type> <name>attrs</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>statements</name></name> = <name>statements</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>prepareKeyspace</name><parameter_list>(<param><decl><type><name>ClientState</name></type> <name>state</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <for>for (<init><decl><type><name>ModificationStatement</name></type> <name>statement</name> <range>: <expr><name>statements</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>statement</name>.<name>prepareKeyspace</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>checkAccess</name><parameter_list>(<param><decl><type><name>ClientState</name></type> <name>state</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnauthorizedException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cfamsSeen</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ModificationStatement</name></type> <name>statement</name> <range>: <expr><name>statements</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>ks</name> <init>= <expr><call><name><name>statement</name>.<name>keyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>cf</name> <init>= <expr><call><name><name>statement</name>.<name>columnFamily</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr>!<call><name><name>cfamsSeen</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>cfamsSeen</name>.<name>put</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <comment type="line">// Avoid unnecessary authorization.</comment>
            <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cfs</name> <init>= <expr><call><name><name>cfamsSeen</name>.<name>get</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!(<call><name><name>cfs</name>.<name>contains</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>state</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><name>cf</name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>MODIFY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cfs</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>ClientState</name></type> <name>state</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name>getTimeToLive</name><argument_list>()</argument_list></call> != 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Global TTL on the BATCH statement is not supported."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <for>for (<init><decl><type><name>ModificationStatement</name></type> <name>statement</name> <range>: <expr><name>statements</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name>isSetTimestamp</name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>statement</name>.<name>isSetTimestamp</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Timestamp must be set either on BATCH or individual statements"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if>if <condition>(<expr><call><name><name>statement</name>.<name>getTimeToLive</name></name><argument_list>()</argument_list></call> &lt; 0</expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"A TTL must be greater or equal to 0"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></for>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>validateConsistency</name><parameter_list>(<param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <for>for (<init><decl><type><name>ModificationStatement</name></type> <name>statement</name> <range>: <expr><name>statements</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>statement</name>.<name>validateConsistency</name></name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>IMutation</name></extends></argument>&gt;</argument_list></name></type> <name>getMutations</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>local</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>, <param><decl><type><name>long</name></type> <name>now</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument>, <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>, <argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>, <argument><name>IMutation</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ModificationStatement</name></type> <name>statement</name> <range>: <expr><name>statements</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name>isSetTimestamp</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>statement</name>.<name>setTimestamp</name></name><argument_list>(<argument><expr><call><name>getTimestamp</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <comment type="line">// Group mutation together, otherwise they won't get applied atomically</comment>
            <for>for (<init><decl><type><name>IMutation</name></type> <name>m</name> <range>: <expr><call><name><name>statement</name>.<name>getMutations</name></name><argument_list>(<argument><expr><name>variables</name></expr></argument>, <argument><expr><name>local</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr><name>m</name> instanceof <name>CounterMutation</name> &amp;&amp; <name>type</name> != <name><name>Type</name>.<name>COUNTER</name></name></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Counter mutations are only allowed in COUNTER batches"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <if>if <condition>(<expr><name>m</name> instanceof <name>RowMutation</name> &amp;&amp; <name>type</name> == <name><name>Type</name>.<name>COUNTER</name></name></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Only counter mutations are allowed in COUNTER batches"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <decl_stmt><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>key</name> <init>= <expr><call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>m</name>.<name>key</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>IMutation</name></type> <name>existing</name> <init>= <expr><call><name><name>mutations</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>existing</name> == null</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>mutations</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else>else
                    <expr_stmt><expr><call><name><name>existing</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></for>
        }</block></for>

        <return>return <expr><call><name><name>mutations</name>.<name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>ParsedStatement</name>.<name>Prepared</name></name></type> <name>prepare</name><parameter_list>(<param><decl><type><name><name>ColumnSpecification</name><index>[]</index></name></type> <name>boundNames</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <comment type="line">// XXX: we use our knowledge that Modification don't create new statement upon call to prepare()</comment>
        <for>for (<init><decl><type><name>ModificationStatement</name></type> <name>statement</name> <range>: <expr><name>statements</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>statement</name>.<name>prepare</name></name><argument_list>(<argument><expr><name>boundNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr>new <call><name><name>ParsedStatement</name>.<name>Prepared</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Arrays</name>.</name>&lt;<name>ColumnSpecification</name>&gt;<call><name>asList</name><argument_list>(<argument><expr><name>boundNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>ParsedStatement</name>.<name>Prepared</name></name></type> <name>prepare</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>CFDefinition</name>.<name>Name</name></name><index>[]</index></type> <name>boundNames</name> <init>= <expr>new <name><name>CFDefinition</name>.<name>Name</name><index>[<expr><call><name>getBoundsTerms</name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>prepare</name><argument_list>(<argument><expr><name>boundNames</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"BatchStatement(type=%s, statements=%s)"</expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>statements</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
