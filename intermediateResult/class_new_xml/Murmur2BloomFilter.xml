<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\Murmur2BloomFilter.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>obs</name>.<name>IBitSet</name></name>;</import>

<class><specifier>public</specifier> class <name>Murmur2BloomFilter</name> <super><extends>extends <name>BloomFilter</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Murmur2BloomFilterSerializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>Murmur2BloomFilterSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Murmur2BloomFilter</name><parameter_list>(<param><decl><type><name>int</name></type> <name>hashes</name></decl></param>, <param><decl><type><name>IBitSet</name></type> <name>bs</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>hashes</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>long</name><index>[]</index></type> <name>hash</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>b</name></decl></param>, <param><decl><type><name>int</name></type> <name>position</name></decl></param>, <param><decl><type><name>int</name></type> <name>remaining</name></decl></param>, <param><decl><type><name>long</name></type> <name>seed</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>hash1</name> <init>= <expr><call><name><name>MurmurHash</name>.<name>hash2_64</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name><name>b</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>hash2</name> <init>= <expr><call><name><name>MurmurHash</name>.<name>hash2_64</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name><name>b</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hash1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(new <name><name>long</name><index>[]</index></name> <block>{ <expr><name>hash1</name></expr>, <expr><name>hash2</name></expr> }</block>)</expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Murmur2BloomFilterSerializer</name> <super><extends>extends <name>BloomFilterSerializer</name></extends></super>
    <block>{
        <function><type><specifier>protected</specifier> <name>BloomFilter</name></type> <name>createFilter</name><parameter_list>(<param><decl><type><name>int</name></type> <name>hashes</name></decl></param>, <param><decl><type><name>IBitSet</name></type> <name>bs</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>Murmur2BloomFilter</name><argument_list>(<argument><expr><name>hashes</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class></unit>
