<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\marshal\TimeUUIDType.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>UUID</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>regex</name>.<name>Matcher</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>regex</name>.<name>Pattern</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>jdbc</name>.<name>JdbcTimeUUID</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>UUIDGen</name></name>;</import>

<class><specifier>public</specifier> class <name>TimeUUIDType</name> <super><extends>extends <name><name>AbstractType</name><argument_list>&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TimeUUIDType</name></type> <name>instance</name> <init>= <expr>new <call><name>TimeUUIDType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>regexPattern</name> <init>= <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr>"[A-Fa-f0-9]{8}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{12}"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>functionPattern</name> <init>= <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr>"(\\w+)\\((.*)\\)"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><name>TimeUUIDType</name><parameter_list>()</parameter_list> <block>{}</block></constructor> <comment type="line">// singleton</comment>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>compose</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>JdbcTimeUUID</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>decompose</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>JdbcTimeUUID</name>.<name>instance</name>.<name>decompose</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>o1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>o2</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>o1</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
        <block>{
            <return>return <expr><call><name><name>o2</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 ? 0 : -1</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>o2</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
        <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>compareTimestampBytes</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then>
            <return>return <expr><name>res</name></expr>;</return></then></if>
        <return>return <expr><call><name><name>o1</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>compareTimestampBytes</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>o1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>o2</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>o1Pos</name> <init>= <expr><call><name><name>o1</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>o2Pos</name> <init>= <expr><call><name><name>o2</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr>(<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name>+6</expr></argument>)</argument_list></call> &amp; 0xF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name>+6</expr></argument>)</argument_list></call> &amp; 0xF)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then> <return>return <expr><name>d</name></expr>;</return></then></if>

        <expr_stmt><expr><name>d</name> = (<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name>+7</expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name>+7</expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then> <return>return <expr><name>d</name></expr>;</return></then></if>

        <expr_stmt><expr><name>d</name> = (<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name>+4</expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name>+4</expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then> <return>return <expr><name>d</name></expr>;</return></then></if>

        <expr_stmt><expr><name>d</name> = (<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name>+5</expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name>+5</expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then> <return>return <expr><name>d</name></expr>;</return></then></if>

        <expr_stmt><expr><name>d</name> = (<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name></expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name></expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then> <return>return <expr><name>d</name></expr>;</return></then></if>

        <expr_stmt><expr><name>d</name> = (<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name>+1</expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name>+1</expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then> <return>return <expr><name>d</name></expr>;</return></then></if>

        <expr_stmt><expr><name>d</name> = (<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name>+2</expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name>+2</expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> != 0</expr>)</condition><then> <return>return <expr><name>d</name></expr>;</return></then></if>

        <return>return <expr>(<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>o1Pos</name>+3</expr></argument>)</argument_list></call> &amp; 0xFF) - (<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>o2Pos</name>+3</expr></argument>)</argument_list></call> &amp; 0xFF)</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>JdbcTimeUUID</name>.<name>instance</name>.<name>getString</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>jdbc</name>.<name>MarshalException</name></name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="line">// This accepts dates are valid TimeUUID represensation, which is bogus</comment>
    <comment type="line">// (see #4936) but kept for CQL2 for compatibility sake.</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>ByteBuffer</name></type> <name>fromStringCQL2</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{
        <comment type="line">// Return an empty ByteBuffer for an empty string.</comment>
        <if>if <condition>(<expr><call><name><name>source</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>idBytes</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

        <comment type="line">// ffffffff-ffff-ffff-ffff-ffffffffff</comment>
        <if>if <condition>(<expr><call><name><name>regexPattern</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call>.<call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>UUID</name></type> <name>uuid</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name>uuid</name> = <call><name><name>UUID</name>.<name>fromString</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>idBytes</name> = <call><name>decompose</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"unable to make UUID from '%s'"</expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <if>if <condition>(<expr><call><name><name>uuid</name>.<name>version</name></name><argument_list>()</argument_list></call> != 1</expr>)</condition><then>
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr>"TimeUUID supports only version 1 UUIDs"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>idBytes</name> = <call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>getTimeUUIDBytes</name></name><argument_list>(<argument><expr><call><name><name>DateType</name>.<name>dateStringToTimestamp</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>idBytes</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>fromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{
        <comment type="line">// Return an empty ByteBuffer for an empty string.</comment>
        <if>if <condition>(<expr><call><name><name>source</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>idBytes</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

        <comment type="line">// ffffffff-ffff-ffff-ffff-ffffffffff</comment>
        <if>if <condition>(<expr><call><name><name>regexPattern</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call>.<call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>UUID</name></type> <name>uuid</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name>uuid</name> = <call><name><name>UUID</name>.<name>fromString</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>idBytes</name> = <call><name>decompose</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unable to make UUID from '%s'"</expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <if>if <condition>(<expr><call><name><name>uuid</name>.<name>version</name></name><argument_list>()</argument_list></call> != 1</expr>)</condition><then>
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr>"TimeUUID supports only version 1 UUIDs"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>Matcher</name></type> <name>m</name> <init>= <expr><call><name><name>functionPattern</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>m</name>.<name>matches</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unable to make a time-based UUID from '%s'"</expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>String</name></type> <name>fct</name> <init>= <expr><call><name><name>m</name>.<name>group</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>arg</name> <init>= <expr><call><name><name>m</name>.<name>group</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>fct</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"minTimeUUID"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>idBytes</name> = <call><name>decompose</name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>minTimeUUID</name></name><argument_list>(<argument><expr><call><name><name>DateType</name>.<name>dateStringToTimestamp</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>fct</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"maxTimeUUID"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>idBytes</name> = <call><name>decompose</name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>maxTimeUUID</name></name><argument_list>(<argument><expr><call><name><name>DateType</name>.<name>dateStringToTimestamp</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>fct</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"now"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr>!<call><name><name>arg</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"The 'now' timeuuid method takes no argument ('%s' provided)"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <expr_stmt><expr><name>idBytes</name> = <call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>getTimeUUIDBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unknown timeuuid method '%s'"</expr></argument>, <argument><expr><name>fct</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if></else></if></else></if>
        }</block></else></if>

        <return>return <expr><name>idBytes</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call> != 16 &amp;&amp; <call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"TimeUUID should be 16 or 0 bytes (%d)"</expr></argument>, <argument><expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>slice</name> <init>= <expr><call><name><name>bytes</name>.<name>slice</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// version is bits 4-7 of byte 6.</comment>
        <if>if <condition>(<expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>slice</name>.<name>position</name></name><argument_list>(<argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>(<call><name><name>slice</name>.<name>get</name></name><argument_list>()</argument_list></call> &amp; 0xf0) != 0x10</expr>)</condition><then>
                <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr>"Invalid version for TimeUUID type."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
