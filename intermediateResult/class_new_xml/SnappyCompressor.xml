<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\io\compress\SnappyCompressor.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>xerial</name>.<name>snappy</name>.<name>Snappy</name></name>;</import>
<import>import <name><name>org</name>.<name>xerial</name>.<name>snappy</name>.<name>SnappyError</name></name>;</import>

<class><specifier>public</specifier> class <name>SnappyCompressor</name> <super><implements>implements <name>ICompressor</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SnappyCompressor</name></type> <name>instance</name> <init>= <expr>new <call><name>SnappyCompressor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>SnappyCompressor</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>static
    <block>{
        <if>if <condition>(<expr>!<call><name>isAvailable</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Cannot initialize native Snappy library. Compression on new tables will be disabled."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></expr></expr_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SnappyCompressor</name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compressionOptions</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// this would throw java.lang.NoClassDefFoundError if Snappy class</comment>
        <comment type="line">// wasn't found at runtime which should be processed by calling method</comment>
        <expr_stmt><expr><call><name><name>Snappy</name>.<name>getNativeLibraryVersion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// no specific options supported so far</comment>
        <return>return <expr><name>instance</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAvailable</name><parameter_list>()</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name>create</name><argument_list>(<argument><expr><name><name>Collections</name>.</name>&lt;<name>String</name></expr></argument>, <argument><expr><name>String</name>&gt;<call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>NoClassDefFoundError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>SnappyError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>supportedOptions</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>initialCompressedBufferLength</name><parameter_list>(<param><decl><type><name>int</name></type> <name>chunkLength</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Snappy</name>.<name>maxCompressedLength</name></name><argument_list>(<argument><expr><name>chunkLength</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compress</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></param>, <param><decl><type><name>int</name></type> <name>inputOffset</name></decl></param>, <param><decl><type><name>int</name></type> <name>inputLength</name></decl></param>, <param><decl><type><name><name>ICompressor</name>.<name>WrappedArray</name></name></type> <name>output</name></decl></param>, <param><decl><type><name>int</name></type> <name>outputOffset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>Snappy</name>.<name>rawCompress</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputOffset</name></expr></argument>, <argument><expr><name>inputLength</name></expr></argument>, <argument><expr><name><name>output</name>.<name>buffer</name></name></expr></argument>, <argument><expr><name>outputOffset</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>uncompress</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></param>, <param><decl><type><name>int</name></type> <name>inputOffset</name></decl></param>, <param><decl><type><name>int</name></type> <name>inputLength</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl></param>, <param><decl><type><name>int</name></type> <name>outputOffset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>Snappy</name>.<name>rawUncompress</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputOffset</name></expr></argument>, <argument><expr><name>inputLength</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>outputOffset</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
