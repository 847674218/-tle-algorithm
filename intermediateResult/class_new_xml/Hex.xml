<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\Hex.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Constructor</name></name>;</import>

<class><specifier>public</specifier> class <name>Hex</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Constructor</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stringConstructor</name> <init>= <expr><call><name>getProtectedConstructor</name><argument_list>(<argument><expr><name><name>String</name>.<name>class</name></name></expr></argument>, <argument><expr><name><name>int</name>.<name>class</name></name></expr></argument>, <argument><expr><name><name>int</name>.<name>class</name></name></expr></argument>, <argument><expr><name><name>char</name><index>[]</index></name>.class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>charToByte</name> <init>= <expr>new <name><name>byte</name><index>[<expr>256</expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// package protected for use by ByteBufferUtil. Do not modify this array !!</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>byteToChar</name> <init>= <expr>new <name><name>char</name><index>[<expr>16</expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>static
    <block>{
        <for>for (<init><decl><type><name>char</name></type> <name>c</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>c</name> &lt; <name><name>charToByte</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>c</name></expr></incr>)
        <block>{
            <if>if <condition>(<expr><name>c</name> &gt;= '0' &amp;&amp; <name>c</name> &lt;= '9'</expr>)</condition><then>
                <expr_stmt><expr><name><name>charToByte</name><index>[<expr><name>c</name></expr>]</index></name> = <call>(<name>byte</name>)<argument_list>(<argument><expr><name>c</name> - '0'</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>c</name> &gt;= 'A' &amp;&amp; <name>c</name> &lt;= 'F'</expr>)</condition><then>
                <expr_stmt><expr><name><name>charToByte</name><index>[<expr><name>c</name></expr>]</index></name> = <call>(<name>byte</name>)<argument_list>(<argument><expr><name>c</name> - 'A' + 10</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>c</name> &gt;= 'a' &amp;&amp; <name>c</name> &lt;= 'f'</expr>)</condition><then>
                <expr_stmt><expr><name><name>charToByte</name><index>[<expr><name>c</name></expr>]</index></name> = <call>(<name>byte</name>)<argument_list>(<argument><expr><name>c</name> - 'a' + 10</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name><name>charToByte</name><index>[<expr><name>c</name></expr>]</index></name> = (<name>byte</name>)-1</expr>;</expr_stmt></else></if></else></if></else></if>
        <expr_stmt/></block></for>}</block></expr></expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 16</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
        <block>{
            <expr_stmt><expr><name><name>byteToChar</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>Integer</name>.<name>toHexString</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>hexToBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call> % 2 == 1</expr>)</condition><then>
            <throw>throw <expr>new <call><name>NumberFormatException</name><argument_list>(<argument><expr>"An hex string representing bytes must have an even length"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call> / 2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>bytes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>byte</name></type> <name>halfByte1</name> <init>= <expr><name><name>charToByte</name><index>[<expr><call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name> * 2</expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name></type> <name>halfByte2</name> <init>= <expr><name><name>charToByte</name><index>[<expr><call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name> * 2 + 1</expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>halfByte1</name> == -1 || <name>halfByte2</name> == -1</expr>)</condition><then>
                <throw>throw <expr>new <call><name>NumberFormatException</name><argument_list>(<argument><expr>"Non-hex characters in " + <name>str</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>byte</name>)<argument_list>(<argument><expr>(<name>halfByte1</name> &lt;&lt; 4) | <name>halfByte2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>bytes</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>bytesToHex</name><parameter_list>(<param><decl><type><name>byte</name>...</type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>c</name> <init>= <expr>new <name><name>char</name><index>[<expr><name><name>bytes</name>.<name>length</name></name> * 2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>bytes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>bint</name> <init>= <expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name> * 2</expr>]</index></name> = <name><name>byteToChar</name><index>[<expr>(<name>bint</name> &amp; 0xf0) &gt;&gt; 4</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><index>[<expr>1 + <name>i</name> * 2</expr>]</index></name> = <name><name>byteToChar</name><index>[<expr><name>bint</name> &amp; 0x0f</expr>]</index></name></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><call><name>wrapCharArray</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Create a String from a char array with zero-copy (if available), using reflection to access a package-protected constructor of String.
     * */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>wrapCharArray</name><parameter_list>(<param><decl><type><name><name>char</name><index>[]</index></name></type> <name>c</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>c</name> == null</expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>stringConstructor</name> != null</expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><name>s</name> = <call><name><name>stringConstructor</name>.<name>newInstance</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name><name>c</name>.<name>length</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <comment type="line">// Swallowing as we'll just use a copying constructor</comment>
            }</block></catch></try>
        }</block></then></if>
        <return>return <expr><name>s</name> == null ? new <call><name>String</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> : <name>s</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Used to get access to protected/private constructor of the specified class
     * @param klass - name of the class
     * @param paramTypes - types of the constructor parameters
     * @return Constructor if successful, null if the constructor cannot be
     * accessed
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Constructor</name></type> <name>getProtectedConstructor</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>klass</name></decl></param>, <param><decl><type><name>Class</name>...</type> <name>paramTypes</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Constructor</name></type> <name>c</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>c</name> = <call><name><name>klass</name>.<name>getDeclaredConstructor</name></name><argument_list>(<argument><expr><name>paramTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>c</name>.<name>setAccessible</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>c</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>null</expr>;</return>
        }</block></catch></try>
    }</block></function>
}
</unit>
