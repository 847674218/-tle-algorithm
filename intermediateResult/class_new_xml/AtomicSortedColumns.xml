<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\AtomicSortedColumns.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicReference</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Function</name></name>;</import>
<import>import <name><name>edu</name>.<name>stanford</name>.<name>ppl</name>.<name>concurrent</name>.<name>SnapTreeMap</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>ColumnSlice</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>index</name>.<name>SecondaryIndexManager</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Allocator</name></name>;</import>


<comment type="block" format="javadoc">/**
 * A thread-safe and atomic ISortedColumns implementation.
 * Operations (in particular addAll) on this implemenation are atomic and
 * isolated (in the sense of ACID). Typically a addAll is guaranteed that no
 * other thread can see the state where only parts but not all columns have
 * been added.
 *
 * The implementation uses snaptree (https://github.com/nbronson/snaptree),
 * and in particular it's copy-on-write clone operation to achieve its
 * atomicity guarantee.
 *
 * WARNING: removing element through getSortedColumns().iterator() is *not*
 * isolated of other operations and could actually be fully ignored in the
 * face of a concurrent. Don't use it unless in a non-concurrent context.
 *
 * TODO: check the snaptree license make it ok to use
 */</comment>
<class><specifier>public</specifier> class <name>AtomicSortedColumns</name> <super><implements>implements <name>ISortedColumns</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AtomicReference</name><argument_list>&lt;<argument><name>Holder</name></argument>&gt;</argument_list></name></type> <name>ref</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>factory</name> <init>= <expr>new <class><super><name>Factory</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>ISortedColumns</name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>insertReversed</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>AtomicSortedColumns</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ISortedColumns</name></type> <name>fromSorted</name><parameter_list>(<param><decl><type><name><name>SortedMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>sortedMap</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>insertReversed</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>AtomicSortedColumns</name><argument_list>(<argument><expr><name>sortedMap</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>factory</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>factory</name></expr>;</return>
    }</block></function>

    <constructor><specifier>private</specifier> <name>AtomicSortedColumns</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Holder</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>AtomicSortedColumns</name><parameter_list>(<param><decl><type><name><name>SortedMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Holder</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>AtomicSortedColumns</name><parameter_list>(<param><decl><type><name>Holder</name></type> <name>holder</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ref</name></name> = new <call><name><name>AtomicReference</name><argument_list>&lt;<argument><name>Holder</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>(<name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name>)<call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name><name>map</name>.<name>comparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>getFactory</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>factory</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ISortedColumns</name></type> <name>cloneMe</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>AtomicSortedColumns</name><argument_list>(<argument><expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name>cloneMe</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>DeletionInfo</name></type> <name>getDeletionInfo</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call>.<name>deletionInfo</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<param><decl><type><name>DeletionInfo</name></type> <name>info</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Keeping deletion info for max markedForDeleteAt value</comment>
        <while>while <condition>(<expr>true</expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>Holder</name></type> <name>current</name> <init>= <expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DeletionInfo</name></type> <name>newDelInfo</name> <init>= <expr><call><name><name>current</name>.<name>deletionInfo</name>.<name>add</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>newDelInfo</name> == <name><name>current</name>.<name>deletionInfo</name></name> || <call><name><name>ref</name>.<name>compareAndSet</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><call><name><name>current</name>.<name>with</name></name><argument_list>(<argument><expr><name>newDelInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <break>break;</break></then></if>
        }</block></while>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDeletionInfo</name><parameter_list>(<param><decl><type><name>DeletionInfo</name></type> <name>newInfo</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>ref</name>.<name>set</name></name><argument_list>(<argument><expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name>with</name><argument_list>(<argument><expr><name>newInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>maybeResetDeletionTimes</name><parameter_list>(<param><decl><type><name>int</name></type> <name>gcBefore</name></decl></param>)</parameter_list>
    <block>{
        <while>while <condition>(<expr>true</expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>Holder</name></type> <name>current</name> <init>= <expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DeletionInfo</name></type> <name>purgedInfo</name> <init>= <expr><call><name><name>current</name>.<name>deletionInfo</name>.<name>purge</name></name><argument_list>(<argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>purgedInfo</name> == <name><name>current</name>.<name>deletionInfo</name></name> || <call><name><name>ref</name>.<name>compareAndSet</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><call><name><name>current</name>.<name>with</name></name><argument_list>(<argument><expr><name><name>DeletionInfo</name>.<name>LIVE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <break>break;</break></then></if>
        }</block></while>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>retainAll</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>columns</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Holder</name></type> <name>current</name></decl>, <decl><type ref="prev"/><name>modified</name></decl>;</decl_stmt>
        <do>do
        <block>{
            <expr_stmt><expr><name>current</name> = <call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>modified</name> = <call><name><name>current</name>.<name>cloneMe</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>modified</name>.<name>retainAll</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        while <condition>(<expr>!<call><name><name>ref</name>.<name>compareAndSet</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Holder</name></type> <name>current</name></decl>, <decl><type ref="prev"/><name>modified</name></decl>;</decl_stmt>
        <do>do
        <block>{
            <expr_stmt><expr><name>current</name> = <call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>modified</name> = <call><name><name>current</name>.<name>cloneMe</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>modified</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name><name>SecondaryIndexManager</name>.<name>nullUpdater</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        while <condition>(<expr>!<call><name><name>ref</name>.<name>compareAndSet</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAll</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>cm</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>, <param><decl><type><name><name>Function</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>transformation</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addAllWithSizeDelta</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>transformation</name></expr></argument>, <argument><expr><name><name>SecondaryIndexManager</name>.<name>nullUpdater</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>addAllWithSizeDelta</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>cm</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>, <param><decl><type><name><name>Function</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>transformation</name></decl></param>, <param><decl><type><name><name>SecondaryIndexManager</name>.<name>Updater</name></name></type> <name>indexer</name></decl></param>)</parameter_list>
    <block>{
        <comment type="block">/*
         * This operation needs to atomicity and isolation. To that end, we
         * add the new column to a copy of the map (a cheap O(1) snapTree
         * clone) and atomically compare and swap when everything has been
         * added. Of course, we must not forget to update the deletion times
         * too.
         * In case we are adding a lot of columns, failing the final compare
         * and swap could be expensive. To mitigate, we check we haven't been
         * beaten by another thread after every column addition. If we have,
         * we bail early, avoiding unnecessary work if possible.
         */</comment>
        <decl_stmt><decl><type><name>Holder</name></type> <name>current</name></decl>, <decl><type ref="prev"/><name>modified</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>sizeDelta</name></decl>;</decl_stmt>

        <label><name>main_loop</name>:</label>
        <do>do
        <block>{
            <expr_stmt><expr><name>sizeDelta</name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name>current</name> = <call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>DeletionInfo</name></type> <name>newDelInfo</name> <init>= <expr><call><name><name>current</name>.<name>deletionInfo</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>cm</name>.<name>getDeletionInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>modified</name> = new <call><name>Holder</name><argument_list>(<argument><expr><call><name><name>current</name>.<name>map</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newDelInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><call><name><name>cm</name>.<name>getSortedColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><name>sizeDelta</name> += <call><name><name>modified</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>transformation</name>.<name>apply</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>indexer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// bail early if we know we've been beaten</comment>
                <if>if <condition>(<expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call> != <name>current</name></expr>)</condition><then>
                    <continue>continue main_loop;</continue></then></if>
            }</block></for>
        }</block>
        while <condition>(<expr>!<call><name><name>ref</name>.<name>compareAndSet</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

        <return>return <expr><name>sizeDelta</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>replace</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>oldColumn</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>newColumn</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>oldColumn</name>.<name>name</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>newColumn</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>Holder</name></type> <name>current</name></decl>, <decl><type ref="prev"/><name>modified</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>replaced</name></decl>;</decl_stmt>
        <do>do
        <block>{
            <expr_stmt><expr><name>current</name> = <call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>modified</name> = <call><name><name>current</name>.<name>cloneMe</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>replaced</name> = <call><name><name>modified</name>.<name>map</name>.<name>replace</name></name><argument_list>(<argument><expr><call><name><name>oldColumn</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oldColumn</name></expr></argument>, <argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        while <condition>(<expr>!<call><name><name>ref</name>.<name>compareAndSet</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><name>replaced</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Holder</name></type> <name>current</name></decl>, <decl><type ref="prev"/><name>modified</name></decl>;</decl_stmt>
        <do>do
        <block>{
            <expr_stmt><expr><name>current</name> = <call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>modified</name> = <call><name><name>current</name>.<name>cloneMe</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>modified</name>.<name>map</name>.<name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        while <condition>(<expr>!<call><name><name>ref</name>.<name>compareAndSet</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Holder</name></type> <name>current</name></decl>, <decl><type ref="prev"/><name>modified</name></decl>;</decl_stmt>
        <do>do
        <block>{
            <expr_stmt><expr><name>current</name> = <call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>modified</name> = <call><name><name>current</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        while <condition>(<expr>!<call><name><name>ref</name>.<name>compareAndSet</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>getColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>getColumnNames</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name><name>map</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>getSortedColumns</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name><name>map</name>.<name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>getReverseSortedColumns</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name><name>map</name>.<name>descendingMap</name></name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name><name>map</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getEstimatedColumnCount</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name><name>map</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getSortedColumns</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>(<param><decl><type><name><name>ColumnSlice</name><index>[]</index></name></type> <name>slices</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name><name>ColumnSlice</name>.<name>NavigableMapIterator</name></name><argument_list>(<argument><expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call>.<name>map</name></expr></argument>, <argument><expr><name>slices</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>reverseIterator</name><parameter_list>(<param><decl><type><name><name>ColumnSlice</name><index>[]</index></name></type> <name>slices</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name><name>ColumnSlice</name>.<name>NavigableMapIterator</name></name><argument_list>(<argument><expr><call><name><name>ref</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name><name>map</name>.<name>descendingMap</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>slices</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInsertReversed</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>Holder</name>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>SnapTreeMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DeletionInfo</name></type> <name>deletionInfo</name></decl>;</decl_stmt>

        <constructor><name>Holder</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name><name>SnapTreeMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DeletionInfo</name>.<name>LIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><name>Holder</name><parameter_list>(<param><decl><type><name><name>SortedMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name><name>SnapTreeMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DeletionInfo</name>.<name>LIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><name>Holder</name><parameter_list>(<param><decl><type><name><name>SnapTreeMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></param>, <param><decl><type><name>DeletionInfo</name></type> <name>deletionInfo</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>map</name></name> = <name>map</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>deletionInfo</name></name> = <name>deletionInfo</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><name>Holder</name></type> <name>cloneMe</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name>with</name><argument_list>(<argument><expr><call><name><name>map</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><name>Holder</name></type> <name>with</name><parameter_list>(<param><decl><type><name>DeletionInfo</name></type> <name>info</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>Holder</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><name>Holder</name></type> <name>with</name><parameter_list>(<param><decl><type><name><name>SnapTreeMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>newMap</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>Holder</name><argument_list>(<argument><expr><name>newMap</name></expr></argument>, <argument><expr><name>deletionInfo</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line">// There is no point in cloning the underlying map to clear it</comment>
        <comment type="line">// afterwards.</comment>
        <function><type><name>Holder</name></type> <name>clear</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>new <call><name>Holder</name><argument_list>(<argument><expr>new <call><name><name>SnapTreeMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>map</name>.<name>comparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>deletionInfo</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><name>long</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>, <param><decl><type><name><name>SecondaryIndexManager</name>.<name>Updater</name></name></type> <name>indexer</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>name</name> <init>= <expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr>true</expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>IColumn</name></type> <name>oldColumn</name> <init>= <expr><call><name><name>map</name>.<name>putIfAbsent</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>oldColumn</name> == null</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>indexer</name>.<name>insert</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name><name>column</name>.<name>dataSize</name></name><argument_list>()</argument_list></call></expr>;</return>
                }</block></then></if>

                <if>if <condition>(<expr><name>oldColumn</name> instanceof <name>SuperColumn</name></expr>)</condition><then>
                <block>{
                    <assert>assert <expr><name>column</name> instanceof <name>SuperColumn</name></expr>;</assert>
                    <decl_stmt><decl><type><name>long</name></type> <name>previousSize</name> <init>= <expr><call><name><name>oldColumn</name>.<name>dataSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr>((<name>SuperColumn</name>) <name>oldColumn</name>).<call><name>putColumn</name><argument_list>(<argument><expr>(<name>SuperColumn</name>)<name>column</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name><name>oldColumn</name>.<name>dataSize</name></name><argument_list>()</argument_list></call> - <name>previousSize</name></expr>;</return>
                }</block></then>
                <else>else
                <block>{
                    <decl_stmt><decl><type><name>IColumn</name></type> <name>reconciledColumn</name> <init>= <expr><call><name><name>column</name>.<name>reconcile</name></name><argument_list>(<argument><expr><name>oldColumn</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>map</name>.<name>replace</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>oldColumn</name></expr></argument>, <argument><expr><name>reconciledColumn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <comment type="line">// for memtable updates we only care about oldcolumn, reconciledcolumn, but when compacting</comment>
                        <comment type="line">// we need to make sure we update indexes no matter the order we merge</comment>
                        <if>if <condition>(<expr><name>reconciledColumn</name> == <name>column</name></expr>)</condition><then>
                            <expr_stmt><expr><call><name><name>indexer</name>.<name>update</name></name><argument_list>(<argument><expr><name>oldColumn</name></expr></argument>, <argument><expr><name>reconciledColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                        <else>else
                            <expr_stmt><expr><call><name><name>indexer</name>.<name>update</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>reconciledColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                        <return>return <expr><call><name><name>reconciledColumn</name>.<name>dataSize</name></name><argument_list>()</argument_list></call> - <call><name><name>oldColumn</name>.<name>dataSize</name></name><argument_list>()</argument_list></call></expr>;</return>
                    }</block></then></if>
                    <comment type="line">// We failed to replace column due to a concurrent update or a concurrent removal. Keep trying.</comment>
                    <comment type="line">// (Currently, concurrent removal should not happen (only updates), but let us support that anyway.)</comment>
                }</block></else></if>
            }</block></while>
        }</block></function>

        <function><type><name>void</name></type> <name>retainAll</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>columns</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>map</name>.<name>values</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>toRetain</name> <init>= <expr><call><name><name>columns</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>IColumn</name></type> <name>current</name> <init>= <expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>IColumn</name></type> <name>retain</name> <init>= <expr><call><name><name>toRetain</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>toRetain</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>?</name> <super>super <name>ByteBuffer</name></super></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr><call><name><name>map</name>.<name>comparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>current</name> != null &amp;&amp; <name>retain</name> != null</expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>current</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retain</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>c</name> == 0</expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><name>current</name> instanceof <name>SuperColumn</name></expr>)</condition><then>
                    <block>{
                        <assert>assert <expr><name>retain</name> instanceof <name>SuperColumn</name></expr>;</assert>
                        <expr_stmt><expr>((<name>SuperColumn</name>)<name>current</name>).<call><name>retainAll</name><argument_list>(<argument><expr>(<name>SuperColumn</name>)<name>retain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name>current</name> = <call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
                    <expr_stmt><expr><name>retain</name> = <call><name><name>toRetain</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>toRetain</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>c</name> &lt; 0</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>iter</name>.<name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>current</name> = <call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
                }</block></then>
                <else>else <comment type="line">// c &gt; 0</comment>
                <block>{
                    <expr_stmt><expr><name>retain</name> = <call><name><name>toRetain</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>toRetain</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></while>
            <while>while <condition>(<expr><name>current</name> != null</expr>)</condition>
            <block>{
                <expr_stmt><expr><call><name><name>iter</name>.<name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>current</name> = <call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
            }</block></while>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
