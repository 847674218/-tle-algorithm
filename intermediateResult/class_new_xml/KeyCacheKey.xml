<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cache\KeyCacheKey.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>Descriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<class><specifier>public</specifier> class <name>KeyCacheKey</name> <super><implements>implements <name>CacheKey</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Descriptor</name></type> <name>desc</name></decl>;</decl_stmt>

    <comment type="line">// keeping an array instead of a ByteBuffer lowers the overhead of the key cache working set,</comment>
    <comment type="line">// without extra copies on lookup since client-provided key ByteBuffers will be array-backed already</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>key</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>KeyCacheKey</name><parameter_list>(<param><decl><type><name>Descriptor</name></type> <name>desc</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>desc</name></name> = <name>desc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <call><name><name>ByteBufferUtil</name>.<name>getArray</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><name><name>this</name>.<name>key</name></name> != null</expr>;</assert>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>Pair</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getPathInfo</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>desc</name>.<name>ksname</name></name></expr></argument>, <argument><expr><name><name>desc</name>.<name>cfname</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"KeyCacheKey(%s, %s)"</expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>o</name></expr>)</condition><then> <return>return <expr>true</expr>;</return></then></if>
        <if>if <condition>(<expr><name>o</name> == null || <call><name>getClass</name><argument_list>()</argument_list></call> != <call><name><name>o</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <return>return <expr>false</expr>;</return></then></if>

        <decl_stmt><decl><type><name>KeyCacheKey</name></type> <name>that</name> <init>= <expr>(<name>KeyCacheKey</name>) <name>o</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>desc</name> != null ? !<call><name><name>desc</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>desc</name></name></expr></argument>)</argument_list></call> : <name><name>that</name>.<name>desc</name></name> != null</expr>)</condition><then> <return>return <expr>false</expr>;</return></then></if>
        <return>return <expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>that</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>desc</name> != null ? <call><name><name>desc</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 31 * <name>result</name> + (<name>key</name> != null ? <call><name><name>Arrays</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> : 0)</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
