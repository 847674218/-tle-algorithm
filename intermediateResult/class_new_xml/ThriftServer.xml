<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\thrift\ThriftServer.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetSocketAddress</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>CassandraDaemon</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>server</name>.<name>TServer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TFramedTransport</name></name>;</import>

<class><specifier>public</specifier> class <name>ThriftServer</name> <super><implements>implements <name><name>CassandraDaemon</name>.<name>Server</name></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>ThriftServer</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>SYNC</name> <init>= <expr>"sync"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>ASYNC</name> <init>= <expr>"async"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>HSHA</name> <init>= <expr>"hsha"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>InetAddress</name></type> <name>address</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>ThriftServerThread</name></type> <name>server</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ThriftServer</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>address</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>address</name></name> = <name>address</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>server</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>server</name> = new <call><name>ThriftServerThread</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>server</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>server</name> != null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>stopServer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>server</name>.<name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Interrupted while waiting thrift server to stop"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <expr_stmt><expr><name>server</name> = null</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRunning</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>server</name> != null</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Simple class to run the thrift connection accepting code in separate
     * thread of control.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ThriftServerThread</name> <super><extends>extends <name>Thread</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>TServer</name></type> <name>serverEngine</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ThriftServerThread</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>listenAddr</name></decl></param>, <param><decl><type><name>int</name></type> <name>listenPort</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// now we start listening for clients</comment>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Binding thrift service to %s:%s"</expr></argument>, <argument><expr><name>listenAddr</name></expr></argument>, <argument><expr><name>listenPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>TServerFactory</name>.<name>Args</name></name></type> <name>args</name> <init>= <expr>new <call><name><name>TServerFactory</name>.<name>Args</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>args</name>.<name>tProtocolFactory</name></name> = new <call><name><name>TBinaryProtocol</name>.<name>Factory</name></name><argument_list>(<argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getThriftMaxMessageLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>args</name>.<name>addr</name></name> = new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>listenAddr</name></expr></argument>, <argument><expr><name>listenPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>args</name>.<name>cassandraServer</name></name> = new <call><name>CassandraServer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>args</name>.<name>processor</name></name> = new <call><name><name>Cassandra</name>.<name>Processor</name></name><argument_list>(<argument><expr><name><name>args</name>.<name>cassandraServer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>args</name>.<name>keepAlive</name></name> = <call><name><name>DatabaseDescriptor</name>.<name>getRpcKeepAlive</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>args</name>.<name>sendBufferSize</name></name> = <call><name><name>DatabaseDescriptor</name>.<name>getRpcSendBufferSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>args</name>.<name>recvBufferSize</name></name> = <call><name><name>DatabaseDescriptor</name>.<name>getRpcRecvBufferSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tFramedTransportSize</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getThriftFramedTransportSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Using TFramedTransport with a max frame size of {} bytes."</expr></argument>, <argument><expr><name>tFramedTransportSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>args</name>.<name>inTransportFactory</name></name> = new <call><name><name>TFramedTransport</name>.<name>Factory</name></name><argument_list>(<argument><expr><name>tFramedTransportSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>args</name>.<name>outTransportFactory</name></name> = new <call><name><name>TFramedTransport</name>.<name>Factory</name></name><argument_list>(<argument><expr><name>tFramedTransportSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>serverEngine</name> = new <call><name>TServerCustomFactory</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getRpcServerType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>buildTServer</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Listening for thrift clients..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>serverEngine</name>.<name>serve</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>stopServer</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Stop listening to thrift clients"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>serverEngine</name>.<name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
