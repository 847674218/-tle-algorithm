<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\OnDiskAtom.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>MessageDigest</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>MarshalException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IColumnSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISSTableSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>Descriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class type="interface"><specifier>public</specifier> interface <name>OnDiskAtom</name>
<block>{
    <function_decl><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>name</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * For a standard column, this is the same as timestamp().
     * For a super column, this is the min/max column timestamp of the sub columns.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>long</name></type> <name>minTimestamp</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>long</name></type> <name>maxTimestamp</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>getLocalDeletionTime</name><parameter_list>()</parameter_list>;</function_decl> <comment type="line">// for tombstone GC, so int is sufficient granularity</comment>

    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>TypeSizes</name></type> <name>typeSizes</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>long</name></type> <name>serializedSizeForSSTable</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>validateFields</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>metadata</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>updateDigest</name><parameter_list>(<param><decl><type><name>MessageDigest</name></type> <name>digest</name></decl></param>)</parameter_list>;</function_decl>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Serializer</name> <super><implements>implements <name><name>ISSTableSerializer</name><argument_list>&lt;<argument><name>OnDiskAtom</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IColumnSerializer</name></type> <name>columnSerializer</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Serializer</name><parameter_list>(<param><decl><type><name>IColumnSerializer</name></type> <name>columnSerializer</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>columnSerializer</name></name> = <name>columnSerializer</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serializeForSSTable</name><parameter_list>(<param><decl><type><name>OnDiskAtom</name></type> <name>atom</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr><name>atom</name> instanceof <name>IColumn</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>columnSerializer</name>.<name>serialize</name></name><argument_list>(<argument><expr>(<name>IColumn</name>)<name>atom</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <assert>assert <expr><name>atom</name> instanceof <name>RangeTombstone</name></expr>;</assert>
                <expr_stmt><expr><call><name><name>RangeTombstone</name>.<name>serializer</name>.<name>serializeForSSTable</name></name><argument_list>(<argument><expr>(<name>RangeTombstone</name>)<name>atom</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>OnDiskAtom</name></type> <name>deserializeFromSSTable</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name><name>Descriptor</name>.<name>Version</name></name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <return>return <expr><call><name>deserializeFromSSTable</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name><name>IColumnSerializer</name>.<name>Flag</name>.<name>LOCAL</name></name></expr></argument>, <argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> / 1000</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>OnDiskAtom</name></type> <name>deserializeFromSSTable</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name><name>IColumnSerializer</name>.<name>Flag</name></name></type> <name>flag</name></decl></param>, <param><decl><type><name>int</name></type> <name>expireBefore</name></decl></param>, <param><decl><type><name><name>Descriptor</name>.<name>Version</name></name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr><name>columnSerializer</name> instanceof <name>SuperColumnSerializer</name></expr>)</condition><then>
            <block>{
                <return>return <expr><call><name><name>columnSerializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>expireBefore</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>name</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>name</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &lt;= 0</expr>)</condition><then>
                    <throw>throw <expr><call><name><name>ColumnSerializer</name>.<name>CorruptColumnException</name>.<name>create</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name><name>dis</name>.<name>readUnsignedByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>(<name>b</name> &amp; <name><name>ColumnSerializer</name>.<name>RANGE_TOMBSTONE_MASK</name></name>) != 0</expr>)</condition><then>
                    <return>return <expr><call><name><name>RangeTombstone</name>.<name>serializer</name>.<name>deserializeBody</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return></then>
                <else>else
                    <return>return <expr>((<name>ColumnSerializer</name>)<name>columnSerializer</name>).<call><name>deserializeColumnBody</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>expireBefore</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
            }</block></else></if>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
