<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\utils\LegacyBloomFilterSerializer.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>BitSet</name></name>;</import>

<class><specifier>public</specifier> class <name>LegacyBloomFilterSerializer</name>
<block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>LegacyBloomFilter</name></type> <name>bf</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"Shouldn't be serializing legacy bloom filters"</expr></argument>)</argument_list></call></expr>;</throw>
<comment type="line">//        dos.writeInt(bf.getHashCount());</comment>
<comment type="line">//        ObjectOutputStream oos = new ObjectOutputStream(dos);</comment>
<comment type="line">//        oos.writeObject(bf.getBitSet());</comment>
<comment type="line">//        oos.flush();</comment>
    }</block></function>

    <function><type><specifier>public</specifier> <name>LegacyBloomFilter</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>hashes</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ObjectInputStream</name></type> <name>ois</name> <init>= <expr>new <call><name>ObjectInputStream</name><argument_list>(<argument><expr>new <class><super><name>InputStream</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
            <block>{
                <return>return <expr><call><name><name>dis</name>.<name>readByte</name></name><argument_list>()</argument_list></call> &amp; 0xFF</expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
          <decl_stmt><decl><type><name>BitSet</name></type> <name>bs</name> <init>= <expr>(<name>BitSet</name>) <call><name><name>ois</name>.<name>readObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <return>return <expr>new <call><name>LegacyBloomFilter</name><argument_list>(<argument><expr><name>hashes</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
          <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>LegacyBloomFilter</name></type> <name>legacyBloomFilter</name></decl></param>)</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>
}</block></class>
</unit>
