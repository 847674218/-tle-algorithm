<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\CFPropDefs.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name>.<name>AbstractCompactionStrategy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>SyntaxException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name>.<name>CompressionParameters</name></name>;</import>

<class><specifier>public</specifier> class <name>CFPropDefs</name> <super><extends>extends <name>PropertyDefinitions</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>CFPropDefs</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_COMMENT</name> <init>= <expr>"comment"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_READREPAIRCHANCE</name> <init>= <expr>"read_repair_chance"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_DCLOCALREADREPAIRCHANCE</name> <init>= <expr>"dclocal_read_repair_chance"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_GCGRACESECONDS</name> <init>= <expr>"gc_grace_seconds"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_MINCOMPACTIONTHRESHOLD</name> <init>= <expr>"min_threshold"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_MAXCOMPACTIONTHRESHOLD</name> <init>= <expr>"max_threshold"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_REPLICATEONWRITE</name> <init>= <expr>"replicate_on_write"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_CACHING</name> <init>= <expr>"caching"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_BF_FP_CHANCE</name> <init>= <expr>"bloom_filter_fp_chance"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_COMPACTION</name> <init>= <expr>"compaction"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_COMPRESSION</name> <init>= <expr>"compression"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMPACTION_STRATEGY_CLASS_KEY</name> <init>= <expr>"class"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keywords</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>obsoleteKeywords</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr>static
    <block>{
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_COMMENT</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_READREPAIRCHANCE</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_DCLOCALREADREPAIRCHANCE</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_GCGRACESECONDS</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_REPLICATEONWRITE</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_CACHING</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_BF_FP_CHANCE</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_COMPACTION</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;

        <expr><call><name><name>obsoleteKeywords</name>.<name>add</name></name><argument_list>(<argument><expr>"compaction_strategy_class"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>obsoleteKeywords</name>.<name>add</name></name><argument_list>(<argument><expr>"compaction_strategy_options"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>obsoleteKeywords</name>.<name>add</name></name><argument_list>(<argument><expr>"min_compaction_threshold"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>obsoleteKeywords</name>.<name>add</name></name><argument_list>(<argument><expr>"max_compaction_threshold"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>obsoleteKeywords</name>.<name>add</name></name><argument_list>(<argument><expr>"compaction_parameters"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>obsoleteKeywords</name>.<name>add</name></name><argument_list>(<argument><expr>"compression_parameters"</expr></argument>)</argument_list></call></expr>;
    }</block>

    private <name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name> <name>compactionStrategyClass</name> = null</expr>;</expr_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument>, <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>validate</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>obsoleteKeywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compactionOptions</name> <init>= <expr><call><name>getCompactionOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>compactionOptions</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>strategy</name> <init>= <expr><call><name><name>compactionOptions</name>.<name>get</name></name><argument_list>(<argument><expr><name>COMPACTION_STRATEGY_CLASS_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>strategy</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Missing sub-option '" + <name>COMPACTION_STRATEGY_CLASS_KEY</name> + "' for the '" + <name>KW_COMPACTION</name> + "' option."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><name>compactionStrategyClass</name> = <call><name><name>CFMetaData</name>.<name>createCompactionStrategy</name></name><argument_list>(<argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>compactionOptions</name>.<name>remove</name></name><argument_list>(<argument><expr><name>COMPACTION_STRATEGY_CLASS_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>CFMetaData</name>.<name>validateCompactionOptions</name></name><argument_list>(<argument><expr><name>compactionStrategyClass</name></expr></argument>, <argument><expr><name>compactionOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>getCompactionStrategy</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>compactionStrategyClass</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCompactionOptions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compactionOptions</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name>KW_COMPACTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>compactionOptions</name> == null</expr>)</condition><then>
            <return>return <expr><name><name>Collections</name>.</name>&lt;<name>String</name></expr>, <expr><name>String</name>&gt;<call><name>emptyMap</name><argument_list>()</argument_list></call></expr>;</return></then></if>
        <return>return <expr><name>compactionOptions</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCompressionOptions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compressionOptions</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name>KW_COMPRESSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>compressionOptions</name> == null</expr>)</condition><then>
            <return>return <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return></then></if>
        <return>return <expr><name>compressionOptions</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>applyToCFMetadata</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument>, <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name>hasProperty</name><argument_list>(<argument><expr><name>KW_COMMENT</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>comment</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>KW_COMMENT</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name><name>cfm</name>.<name>readRepairChance</name></name><argument_list>(<argument><expr><call><name>getDouble</name><argument_list>(<argument><expr><name>KW_READREPAIRCHANCE</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getReadRepairChance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>dcLocalReadRepairChance</name></name><argument_list>(<argument><expr><call><name>getDouble</name><argument_list>(<argument><expr><name>KW_DCLOCALREADREPAIRCHANCE</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getDcLocalReadRepair</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>gcGraceSeconds</name></name><argument_list>(<argument><expr><call><name>getInt</name><argument_list>(<argument><expr><name>KW_GCGRACESECONDS</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getGcGraceSeconds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>replicateOnWrite</name></name><argument_list>(<argument><expr><call><name>getBoolean</name><argument_list>(<argument><expr><name>KW_REPLICATEONWRITE</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getReplicateOnWrite</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>minCompactionThreshold</name></name><argument_list>(<argument><expr><call><name>toInt</name><argument_list>(<argument><expr><name>KW_MINCOMPACTIONTHRESHOLD</name></expr></argument>, <argument><expr><call><name>getCompactionOptions</name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>KW_MINCOMPACTIONTHRESHOLD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getMinCompactionThreshold</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>maxCompactionThreshold</name></name><argument_list>(<argument><expr><call><name>toInt</name><argument_list>(<argument><expr><name>KW_MAXCOMPACTIONTHRESHOLD</name></expr></argument>, <argument><expr><call><name>getCompactionOptions</name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>KW_MAXCOMPACTIONTHRESHOLD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getMaxCompactionThreshold</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>caching</name></name><argument_list>(<argument><expr><call><name><name>CFMetaData</name>.<name>Caching</name>.<name>fromString</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>KW_CACHING</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getCaching</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>compactionStrategyClass</name> != null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>cfm</name>.<name>compactionStrategyClass</name></name><argument_list>(<argument><expr><name>compactionStrategyClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>compactionStrategyOptions</name></name><argument_list>(<argument><expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getCompactionOptions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>cfm</name>.<name>bloomFilterFpChance</name></name><argument_list>(<argument><expr><call><name>getDouble</name><argument_list>(<argument><expr><name>KW_BF_FP_CHANCE</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getBloomFilterFpChance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name>getCompressionOptions</name><argument_list>()</argument_list></call>.<call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>compressionParameters</name></name><argument_list>(<argument><expr><call><name><name>CompressionParameters</name>.<name>create</name></name><argument_list>(<argument><expr><call><name>getCompressionOptions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"CFPropDefs(%s)"</expr></argument>, <argument><expr><call><name><name>properties</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
