<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\statements\ModificationStatement.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>statements</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOError</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>Permission</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>ColumnSlice</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryPath</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>SliceQueryFilter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>CompositeType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>IMutation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ExpiringColumn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>ClientState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>QueryState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageProxy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name>.<name>ResultMessage</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Abstract class for statements that apply on a given column family.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ModificationStatement</name> <super><extends>extends <name>CFStatement</name></extends> <implements>implements <name>CQLStatement</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ConsistencyLevel</name></type> <name>defaultConsistency</name> <init>= <expr><name><name>ConsistencyLevel</name>.<name>ONE</name></name></expr></init></decl>;</decl_stmt>

    <enum><specifier>public</specifier> <specifier>static</specifier> enum <name>Type</name>
    <block>{
        <decl><name>LOGGED</name></decl>, <decl><name>UNLOGGED</name></decl>, <decl><name>COUNTER</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>Type</name></type> <name>type</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Long</name></type> <name>timestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>timeToLive</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ModificationStatement</name><parameter_list>(<param><decl><type><name>CFName</name></type> <name>name</name></decl></param>, <param><decl><type><name>Attributes</name></type> <name>attrs</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>attrs</name>.<name>timestamp</name></name></expr></argument>, <argument><expr><name><name>attrs</name>.<name>timeToLive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>ModificationStatement</name><parameter_list>(<param><decl><type><name>CFName</name></type> <name>name</name></decl></param>, <param><decl><type><name>Long</name></type> <name>timestamp</name></decl></param>, <param><decl><type><name>int</name></type> <name>timeToLive</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>timestamp</name></name> = <name>timestamp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>timeToLive</name></name> = <name>timeToLive</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkAccess</name><parameter_list>(<param><decl><type><name>ClientState</name></type> <name>state</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnauthorizedException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>state</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><call><name>keyspace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>columnFamily</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Permission</name>.<name>MODIFY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>ClientState</name></type> <name>state</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>timeToLive</name> &lt; 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"A TTL must be greater or equal to 0"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <if>if <condition>(<expr><name>timeToLive</name> &gt; <name><name>ExpiringColumn</name>.<name>MAX_TTL</name></name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"ttl is too large. requested (%d) maximum (%d)"</expr></argument>, <argument><expr><name>timeToLive</name></expr></argument>, <argument><expr><name><name>ExpiringColumn</name>.<name>MAX_TTL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>validateConsistency</name><parameter_list>(<param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>;</function_decl>

    <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>, <param><decl><type><name>QueryState</name></type> <name>queryState</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument>, <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>cl</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Invalid empty consistency level"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <expr_stmt><expr><call><name>validateConsistency</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>IMutation</name></extends></argument>&gt;</argument_list></name></type> <name>mutations</name> <init>= <expr><call><name>getMutations</name><argument_list>(<argument><expr><name>variables</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><call><name><name>queryState</name>.<name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The type should have been set by now or we have a bug</comment>
        <assert>assert <expr><name>type</name> != null</expr>;</assert>

        <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
        <block>{
            <case>case <expr><name>LOGGED</name></expr>:
                <if>if <condition>(<expr><call><name><name>mutations</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>StorageProxy</name>.<name>mutateAtomically</name></name><argument_list>(<argument><expr>(<name><name>Collection</name><argument_list>&lt;<argument><name>RowMutation</name></argument>&gt;</argument_list></name>) <name>mutations</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else>else
                    <expr_stmt><expr><call><name><name>StorageProxy</name>.<name>mutate</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                <break>break;</break>
            </case><case>case <expr><name>UNLOGGED</name></expr>:
            </case><case>case <expr><name>COUNTER</name></expr>:
                <expr_stmt><expr><call><name><name>StorageProxy</name>.<name>mutate</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        </default>}</block></switch>

        <return>return <expr>null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>executeInternal</name><parameter_list>(<param><decl><type><name>QueryState</name></type> <name>queryState</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{
        <for>for (<init><decl><type><name>IMutation</name></type> <name>mutation</name> <range>: <expr><call><name>getMutations</name><argument_list>(<argument><expr><name><name>Collections</name>.</name>&lt;<name>ByteBuffer</name>&gt;<call><name>emptyList</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><call><name><name>queryState</name>.<name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>mutation</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr>null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTimestamp</name><parameter_list>(<param><decl><type><name>long</name></type> <name>now</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>timestamp</name> == null ? <name>now</name> : <name>timestamp</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimestamp</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>timestamp</name></name> = <name>timestamp</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetTimestamp</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>timestamp</name> != null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getTimeToLive</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>timeToLive</name></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnGroupMap</name></argument>&gt;</argument_list></name></type> <name>readRows</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>keys</name></decl></param>, <param><decl><type><name>ColumnNameBuilder</name></type> <name>builder</name></decl></param>, <param><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>toRead</name></decl></param>, <param><decl><type><name>CompositeType</name></type> <name>composite</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>local</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument>, <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>cl</name>.<name>validateForRead</name></name><argument_list>(<argument><expr><call><name>keyspace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Write operation require a read but consistency %s is not supported on reads"</expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <decl_stmt><decl><type><name>ColumnSlice</name><index>[]</index></type> <name>slices</name> <init>= <expr>new <name><name>ColumnSlice</name><index>[<expr><call><name><name>toRead</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>name</name> <range>: <expr><name>toRead</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>start</name> <init>= <expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>.<call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>finish</name> <init>= <expr><call><name><name>builder</name>.<name>copy</name></name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>.<call><name>buildAsEndOfRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>slices</name><index>[<expr><name>i</name>++</expr>]</index></name> = new <call><name>ColumnSlice</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></type> <name>commands</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>keys</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>key</name> <range>: <expr><name>keys</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>commands</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>SliceFromReadCommand</name><argument_list>(<argument><expr><call><name>keyspace</name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><name>key</name></expr></argument>,
                                                  <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><call><name>columnFamily</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                  <argument><expr>new <call><name>SliceQueryFilter</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <try>try
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr><name>local</name>
                           ? <call><name><name>SelectStatement</name>.<name>readLocally</name></name><argument_list>(<argument><expr><call><name>keyspace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>commands</name></expr></argument>)</argument_list></call>
                           : <call><name><name>StorageProxy</name>.<name>read</name></name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnGroupMap</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnGroupMap</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>Row</name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr><name><name>row</name>.<name>cf</name></name> == null || <call><name><name>row</name>.<name>cf</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <continue>continue;</continue></then></if>

                <decl_stmt><decl><type><name><name>ColumnGroupMap</name>.<name>Builder</name></name></type> <name>groupBuilder</name> <init>= <expr>new <call><name><name>ColumnGroupMap</name>.<name>Builder</name></name><argument_list>(<argument><expr><name>composite</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name><name>row</name>.<name>cf</name></name></expr></range></decl></init>)
                    <expr_stmt><expr><call><name><name>groupBuilder</name>.<name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnGroupMap</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr><call><name><name>groupBuilder</name>.<name>groups</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <assert>assert <expr><call><name><name>groups</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> || <call><name><name>groups</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1</expr>;</assert>
                <if>if <condition>(<expr>!<call><name><name>groups</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>row</name>.<name>key</name>.<name>key</name></name></expr></argument>, <argument><expr><call><name><name>groups</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>
            <return>return <expr><name>map</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Convert statement into a list of mutations to apply on the server
     *
     * @param variables value for prepared statement markers
     * @param local if true, any requests (for collections) performed by getMutation should be done locally only.
     * @param cl the consistency to use for the potential reads involved in generating the mutations (for lists set/delete operations)
     * @param now the current timestamp in microseconds to use if no timestamp is user provided.
     *
     * @return list of the mutations
     * @throws InvalidRequestException on invalid requests
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>IMutation</name></extends></argument>&gt;</argument_list></name></type> <name>getMutations</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>local</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></param>, <param><decl><type><name>long</name></type> <name>now</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument>, <argument><expr><name>RequestValidationException</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>ParsedStatement</name>.<name>Prepared</name></name></type> <name>prepare</name><parameter_list>(<param><decl><type><name><name>ColumnSpecification</name><index>[]</index></name></type> <name>boundNames</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>;</function_decl>
}</block></class>
</unit>
