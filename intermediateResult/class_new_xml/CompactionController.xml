<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\compaction\CompactionController.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamily</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DataTracker</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableIdentityIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>CacheService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Throttle</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Manage compaction options.
 */</comment>
<class><specifier>public</specifier> class <name>CompactionController</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>CompactionController</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>DataTracker</name>.<name>SSTableIntervalTree</name></name></type> <name>overlappingTree</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>overlappingSSTables</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>gcBefore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>mergeShardBefore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Throttle</name></type> <name>throttle</name> <init>= <expr>new <call><name>Throttle</name><argument_list>(<argument><expr>"Cassandra_Throttle"</expr></argument>, <argument><expr>new <class><super><name><name>Throttle</name>.<name>ThroughputFunction</name></name></super><argument_list>()</argument_list>
    <block>{
        <comment type="block" format="javadoc">/** @return Instantaneous throughput target in bytes per millisecond. */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>targetThroughput</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name>.<name>getCompactionThroughputMbPerSec</name></name><argument_list>()</argument_list></call> &lt; 1 || <call><name><name>StorageService</name>.<name>instance</name>.<name>isBootstrapMode</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <comment type="line">// throttling disabled</comment>
                <return>return <expr>0</expr>;</return></then></if>
            <comment type="line">// total throughput</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>totalBytesPerMS</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getCompactionThroughputMbPerSec</name></name><argument_list>()</argument_list></call> * 1024 * 1024 / 1000</expr></init></decl>;</decl_stmt>
            <comment type="line">// per stream throughput (target bytes per MS)</comment>
            <return>return <expr><name>totalBytesPerMS</name> / <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>CompactionManager</name>.<name>instance</name>.<name>getActiveCompactions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CompactionController</name><parameter_list>(<param><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></param>, <param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></param>, <param><decl><type><name>int</name></type> <name>gcBefore</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>,
             <argument><expr><name>gcBefore</name></expr></argument>,
             <argument><expr><call><name><name>cfs</name>.<name>getAndReferenceOverlappingSSTables</name></name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructor that subclasses may use when overriding shouldPurge to not need overlappingTree
     */</comment>
    <constructor><specifier>protected</specifier> <name>CompactionController</name><parameter_list>(<param><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxValue</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>CompactionController</name><parameter_list>(<param><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></param>,
                                   <param><decl><type><name>int</name></type> <name>gcBefore</name></decl></param>,
                                   <param><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>overlappingSSTables</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>cfs</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>cfs</name></name> = <name>cfs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>gcBefore</name></name> = <name>gcBefore</name></expr>;</expr_stmt>
        <comment type="line">// If we merge an old CounterId id, we must make sure that no further increment for that id are in an active memtable.</comment>
        <comment type="line">// For that, we must make sure that this id was renewed before the creation of the oldest unflushed memtable. We</comment>
        <comment type="line">// add 5 minutes to be sure we're on the safe side in terms of thread safety (though we should be fine in our</comment>
        <comment type="line">// current 'stop all write during memtable switch' situation).</comment>
        <expr_stmt><expr><name><name>this</name>.<name>mergeShardBefore</name></name> = <call>(<name>int</name>) <argument_list>(<argument><expr>(<call><name><name>cfs</name>.<name>oldestUnflushedMemtable</name></name><argument_list>()</argument_list></call> + 5 * 3600) / 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>overlappingSSTables</name></name> = <name>overlappingSSTables</name> == null ? <name><name>Collections</name>.</name>&lt;<name>SSTableReader</name>&gt;<call><name>emptySet</name><argument_list>()</argument_list></call> : <name>overlappingSSTables</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>overlappingTree</name> = <name>overlappingSSTables</name> == null ? null : <call><name><name>DataTracker</name>.<name>buildIntervalTree</name></name><argument_list>(<argument><expr><name>overlappingSSTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeyspace</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>cfs</name>.<name>table</name>.<name>name</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getColumnFamily</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>cfs</name>.<name>columnFamily</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if it's okay to drop tombstones for the given row, i.e., if we know all the verisons of the row
     * are included in the compaction set
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>shouldPurge</name><parameter_list>(<param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>, <param><decl><type><name>long</name></type> <name>maxDeletionTimestamp</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>filteredSSTables</name> <init>= <expr><call><name><name>overlappingTree</name>.<name>search</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>filteredSSTables</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>sstable</name>.<name>getBloomFilter</name></name><argument_list>()</argument_list></call>.<call><name>isPresent</name><argument_list>(<argument><expr><name><name>key</name>.<name>key</name></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>sstable</name>.<name>getMinTimestamp</name></name><argument_list>()</argument_list></call> &gt;= <name>maxDeletionTimestamp</name></expr>)</condition><then>
                <return>return <expr>false</expr>;</return></then></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>invalidateCachedRow</name><parameter_list>(<param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>cfs</name>.<name>invalidateCachedRow</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeDeletedInCache</name><parameter_list>(<param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// For the copying cache, we'd need to re-serialize the updated cachedRow, which would be racy</comment>
        <comment type="line">// vs other updates.  We'll just ignore it instead, since the next update to this row will invalidate it</comment>
        <comment type="line">// anyway, so the odds of a "tombstones consuming memory indefinitely" problem are minimal.</comment>
        <comment type="line">// See https://issues.apache.org/jira/browse/CASSANDRA-3921 for more discussion.</comment>
        <if>if <condition>(<expr><call><name><name>CacheService</name>.<name>instance</name>.<name>rowCache</name>.<name>isPutCopying</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cachedRow</name> <init>= <expr><call><name><name>cfs</name>.<name>getRawCachedRow</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cachedRow</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>ColumnFamilyStore</name>.<name>removeDeleted</name></name><argument_list>(<argument><expr><name>cachedRow</name></expr></argument>, <argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return an AbstractCompactedRow implementation to write the merged rows in question.
     *
     * If there is a single source row, the data is from a current-version sstable, we don't
     * need to purge and we aren't forcing deserialization for scrub, write it unchanged.
     * Otherwise, we deserialize, purge tombstones, and reserialize in the latest version.
     */</comment>
    <function><type><specifier>public</specifier> <name>AbstractCompactedRow</name></type> <name>getCompactedRow</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>SSTableIdentityIterator</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>rowSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>SSTableIdentityIterator</name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)
            <expr_stmt><expr><name>rowSize</name> += <name><name>row</name>.<name>dataSize</name></name></expr>;</expr_stmt></for>

        <if>if <condition>(<expr><name>rowSize</name> &gt; <call><name><name>DatabaseDescriptor</name>.<name>getInMemoryCompactionLimit</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>keyString</name> <init>= <expr><call><name><name>cfs</name>.<name>metadata</name>.<name>getKeyValidator</name></name><argument_list>()</argument_list></call>.<call><name>getString</name><argument_list>(<argument><expr><call><name><name>rows</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getKey</name><argument_list>()</argument_list></call>.<name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Compacting large row %s/%s:%s (%d bytes) incrementally"</expr></argument>,
                                      <argument><expr><name><name>cfs</name>.<name>table</name>.<name>name</name></name></expr></argument>, <argument><expr><name><name>cfs</name>.<name>columnFamily</name></name></expr></argument>, <argument><expr><name>keyString</name></expr></argument>, <argument><expr><name>rowSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>new <call><name>LazilyCompactedRow</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <call><name>PrecompactedRow</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** convenience method for single-sstable compactions */</comment>
    <function><type><specifier>public</specifier> <name>AbstractCompactedRow</name></type> <name>getCompactedRow</name><parameter_list>(<param><decl><type><name>SSTableIdentityIterator</name></type> <name>row</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getCompactedRow</name><argument_list>(<argument><expr><call><name><name>Collections</name>.<name>singletonList</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>mayThrottle</name><parameter_list>(<param><decl><type><name>long</name></type> <name>currentBytes</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>throttle</name>.<name>throttle</name></name><argument_list>(<argument><expr><name>currentBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>SSTableReader</name>.<name>releaseReferences</name></name><argument_list>(<argument><expr><name>overlappingSSTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
