<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\tools\AbstractJmxClient.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tools</name></name>;</package>
<comment type="block">/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */</comment>


<import>import <name><name>java</name>.<name>io</name>.<name>Closeable</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>javax</name>.<name>management</name>.<name>MBeanServerConnection</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>remote</name>.<name>JMXConnector</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>remote</name>.<name>JMXConnectorFactory</name></name>;</import>
<import>import <name><name>javax</name>.<name>management</name>.<name>remote</name>.<name>JMXServiceURL</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>cli</name>.<name>CommandLine</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>cli</name>.<name>CommandLineParser</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>cli</name>.<name>Option</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>cli</name>.<name>Options</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>cli</name>.<name>ParseException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>cli</name>.<name>PosixParser</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractJmxClient</name> <super><implements>implements <name>Closeable</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Options</name></type> <name>options</name> <init>= <expr>new <call><name>Options</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_JMX_PORT</name> <init>= <expr>7199</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_HOST</name> <init>= <expr>"localhost"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>host</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>int</name></type> <name>port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>JMXConnection</name></type> <name>jmxConn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>PrintStream</name></type> <name>out</name> <init>= <expr><name><name>System</name>.<name>out</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr>static
    <block>{
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr>"host"</expr></argument>, <argument><expr>true</expr></argument>,  <argument><expr>"JMX hostname or IP address (Default: localhost)"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"p"</expr></argument>, <argument><expr>"port"</expr></argument>, <argument><expr>true</expr></argument>,  <argument><expr>"JMX port number (Default: 7199)"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr>"H"</expr></argument>, <argument><expr>"help"</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Print help information"</expr></argument>)</argument_list></call></expr>;
    }</block>

    public <call><name>AbstractJmxClient</name><argument_list>(<argument><expr><name>String</name> <name>host</name></expr></argument>, <argument><expr><name>Integer</name> <name>port</name></expr></argument>, <argument><expr><name>String</name> <name>username</name></expr></argument>, <argument><expr><name>String</name> <name>password</name></expr></argument>)</argument_list></call> throws <name>IOException</name>
    <block>{
        <expr><name><name>this</name>.<name>host</name></name> = (<name>host</name> != null) ? <name>host</name> : <name>DEFAULT_HOST</name></expr>;
        <expr><name><name>this</name>.<name>port</name></name> = (<name>port</name> != null) ? <name>port</name> : <name>DEFAULT_JMX_PORT</name></expr>;
        <expr><name>jmxConn</name> = new <call><name>JMXConnection</name><argument_list>(<argument><expr><name><name>this</name>.<name>host</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>port</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;
    }</block>

    public <name>void</name> <call><name>close</name><argument_list>()</argument_list></call> throws <name>IOException</name>
    <block>{
        <expr><call><name><name>jmxConn</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;
    }</block>

    public <name>void</name> <call><name>writeln</name><argument_list>(<argument><expr><name>Throwable</name> <name>err</name></expr></argument>)</argument_list></call>
    <block>{
        <expr><call><name>writeln</name><argument_list>(<argument><expr><call><name><name>err</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    public <name>void</name> <call><name>writeln</name><argument_list>(<argument><expr><name>String</name> <name>msg</name></expr></argument>)</argument_list></call>
    <block>{
        <expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
    }</block>

    public <name>void</name> <call><name>write</name><argument_list>(<argument><expr><name>String</name> <name>msg</name></expr></argument>)</argument_list></call>
    <block>{
        <expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
    }</block>

    public <name>void</name> <call><name>writeln</name><argument_list>(<argument><expr><name>String</name> <name>format</name></expr></argument>, <argument><expr><name>Object</name>...<name>args</name></expr></argument>)</argument_list></call>
    <block>{
        <expr><call><name>write</name><argument_list>(<argument><expr><name>format</name> + "%n"</expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;
    }</block>

    public <name>void</name> <call><name>write</name><argument_list>(<argument><expr><name>String</name> <name>format</name></expr></argument>, <argument><expr><name>Object</name>...<name>args</name></expr></argument>)</argument_list></call>
    <block>{
        <expr><call><name><name>out</name>.<name>printf</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;
    }</block>

    public <name>void</name> <call><name>setOutput</name><argument_list>(<argument><expr><name>PrintStream</name> <name>out</name></expr></argument>)</argument_list></call>
    <block>{
        <expr><name><name>this</name>.<name>out</name></name> = <name>out</name></expr>;
    }</block>

    public static <name>CommandLine</name> <call><name>processArguments</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call> throws <name>ParseException</name>
    <block>{
        <expr><name>CommandLineParser</name> <name>parser</name> = new <call><name>PosixParser</name><argument_list>()</argument_list></call></expr>;
        <return>return <expr><call><name><name>parser</name>.<name>parse</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>addCmdOption</name><parameter_list>(<param><decl><type><name>String</name></type> <name>shortOpt</name></decl></param>, <param><decl><type><name>String</name></type> <name>longOpt</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>hasArg</name></decl></param>, <param><decl><type><name>String</name></type> <name>description</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>options</name>.<name>addOption</name></name><argument_list>(<argument><expr><name>shortOpt</name></expr></argument>, <argument><expr><name>longOpt</name></expr></argument>, <argument><expr><name>hasArg</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>printHelp</name><parameter_list>(<param><decl><type><name>String</name></type> <name>synopsis</name></decl></param>, <param><decl><type><name>String</name></type> <name>header</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"Usage: %s%n%n"</expr></argument>, <argument><expr><name>synopsis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Options:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>Object</name></type> <name>opt</name> <range>: <expr><call><name><name>options</name>.<name>getOptions</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>shortOpt</name> <init>= <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s,"</expr></argument>, <argument><expr>((<name>Option</name>)<name>opt</name>).<call><name>getOpt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>longOpt</name> <init>= <expr>((<name>Option</name>)<name>opt</name>).<call><name>getLongOpt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>description</name> <init>= <expr>((<name>Option</name>)<name>opt</name>).<call><name>getDescription</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>" -%-4s --%-17s %s%n"</expr></argument>, <argument><expr><name>shortOpt</name></expr></argument>, <argument><expr><name>longOpt</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class>

<class>class <name>JMXConnection</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FMT_URL</name> <init>= <expr>"service:jmx:rmi:///jndi/rmi://%s:%d/jmxrmi"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>host</name></decl>, <decl><type ref="prev"/><name>username</name></decl>, <decl><type ref="prev"/><name>password</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JMXConnector</name></type> <name>jmxc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>MBeanServerConnection</name></type> <name>mbeanServerConn</name></decl>;</decl_stmt>

    <constructor><name>JMXConnection</name><parameter_list>(<param><decl><type><name>String</name></type> <name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><name>JMXConnection</name><parameter_list>(<param><decl><type><name>String</name></type> <name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>, <param><decl><type><name>String</name></type> <name>username</name></decl></param>, <param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>host</name></name> = <name>host</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>username</name></name> = <name>username</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>connect</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>JMXServiceURL</name></type> <name>jmxUrl</name> <init>= <expr>new <call><name>JMXServiceURL</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr><name>FMT_URL</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>env</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>username</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>env</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>JMXConnector</name>.<name>CREDENTIALS</name></name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{ <expr><name>username</name></expr>, <expr><name>password</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><name>jmxc</name> = <call><name><name>JMXConnectorFactory</name>.<name>connect</name></name><argument_list>(<argument><expr><name>jmxUrl</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mbeanServerConn</name> = <call><name><name>jmxc</name>.<name>getMBeanServerConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>jmxc</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>MBeanServerConnection</name></type> <name>getMbeanServerConn</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>mbeanServerConn</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
