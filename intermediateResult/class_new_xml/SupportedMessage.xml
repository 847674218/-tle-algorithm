<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\messages\SupportedMessage.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffers</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>CBUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>Message</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Message to indicate that the server is ready to receive requests.
 */</comment>
<class><specifier>public</specifier> class <name>SupportedMessage</name> <super><extends>extends <name><name>Message</name>.<name>Response</name></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>SupportedMessage</name></argument>&gt;</argument_list></name></name></type> <name>codec</name> <init>= <expr>new <class><super><name><name>Message</name>.<name><name>Codec</name><argument_list>&lt;<argument><name>SupportedMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>SupportedMessage</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>SupportedMessage</name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>readStringToStringListMap</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>SupportedMessage</name></type> <name>msg</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>cb</name> <init>= <expr><call><name><name>ChannelBuffers</name>.<name>dynamicBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>CBUtil</name>.<name>writeStringToStringListMap</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name><name>msg</name>.<name>supported</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>cb</name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>supported</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SupportedMessage</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>supported</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Message</name>.<name>Type</name>.<name>SUPPORTED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>supported</name></name> = <name>supported</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>codec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"SUPPORTED " + <name>supported</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
