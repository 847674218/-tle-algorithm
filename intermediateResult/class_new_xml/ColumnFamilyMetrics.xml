<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\metrics\ColumnFamilyMetrics.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>metrics</name></name>;</package>

<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>Metrics</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>Counter</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>Gauge</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>Histogram</name></name>;</import>
<import>import <name><name>com</name>.<name>yammer</name>.<name>metrics</name>.<name>core</name>.<name>MetricName</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>Table</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableMetadata</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>EstimatedHistogram</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Metrics for {@link ColumnFamilyStore}.
 */</comment>
<class><specifier>public</specifier> class <name>ColumnFamilyMetrics</name>
<block>{
    <comment type="block" format="javadoc">/** Total amount of data stored in the memtable, including column related overhead. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>memtableDataSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total number of columns present in the memtable. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>memtableColumnsCount</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of times flush has resulted in the memtable being switched out. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>memtableSwitchCount</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Current compression ratio for all SSTables */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>compressionRatio</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Histogram of estimated row size (in bytes). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>long</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>estimatedRowSizeHistogram</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Histogram of estimated number of columns. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>long</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>estimatedColumnCountHistogram</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Histogram of the number of sstable data files accessed per read */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Histogram</name></type> <name>sstablesPerReadHistogram</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Read metrics */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>LatencyMetrics</name></type> <name>readLatency</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Write metrics */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>LatencyMetrics</name></type> <name>writeLatency</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Estimated number of tasks pending for this column family */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>pendingTasks</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of SSTables on disk for this CF */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>liveSSTableCount</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Disk space used by SSTables belonging to this CF */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>liveDiskSpaceUsed</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total disk space used by SSTables belonging to this CF, including obsolete ones waiting to be GC'd */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>totalDiskSpaceUsed</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Size of the smallest compacted row */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>minRowSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Size of the largest compacted row */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>maxRowSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Size of the smallest compacted row */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>meanRowSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of false positives in bloom filter */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>bloomFilterFalsePositives</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of false positives in bloom filter from last read */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>recentBloomFilterFalsePositives</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** False positive ratio of bloom filter */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>bloomFilterFalseRatio</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** False positive ratio of bloom filter from last read */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>recentBloomFilterFalseRatio</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Disk space used by bloom filter */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>bloomFilterDiskSpaceUsed</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>MetricNameFactory</name></type> <name>factory</name></decl>;</decl_stmt>

    <comment type="line">// for backward compatibility</comment>
    <decl_stmt><decl><type><annotation>@<name>Deprecated</name></annotation> <specifier>public</specifier> <specifier>final</specifier> <name>EstimatedHistogram</name></type> <name>sstablesPerRead</name> <init>= <expr>new <call><name>EstimatedHistogram</name><argument_list>(<argument><expr>35</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><annotation>@<name>Deprecated</name></annotation> <specifier>public</specifier> <specifier>final</specifier> <name>EstimatedHistogram</name></type> <name>recentSSTablesPerRead</name> <init>= <expr>new <call><name>EstimatedHistogram</name><argument_list>(<argument><expr>35</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates metrics for given {@link ColumnFamilyStore}.
     *
     * @param cfs ColumnFamilyStore to measure metrics
     */</comment>
    <constructor><specifier>public</specifier> <name>ColumnFamilyMetrics</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>factory</name> = new <call><name>ColumnFamilyMetricNameFactory</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>memtableColumnsCount</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"MemtableColumnsCount"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>cfs</name>.<name>getDataTracker</name></name><argument_list>()</argument_list></call>.<call><name>getMemtable</name><argument_list>()</argument_list></call>.<call><name>getOperations</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>memtableDataSize</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"MemtableDataSize"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>cfs</name>.<name>getDataTracker</name></name><argument_list>()</argument_list></call>.<call><name>getMemtable</name><argument_list>()</argument_list></call>.<call><name>getLiveSize</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>memtableSwitchCount</name> = <call><name><name>Metrics</name>.<name>newCounter</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"MemtableSwitchCount"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>estimatedRowSizeHistogram</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"EstimatedRowSizeHistogram"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name><name>long</name><index>[]</index></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>long</name><index>[]</index></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>histogram</name> <init>= <expr>new <name><name>long</name><index>[<expr>90</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>rowSize</name> <init>= <expr><call><name><name>sstable</name>.<name>getEstimatedRowSize</name></name><argument_list>()</argument_list></call>.<call><name>getBuckets</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>histogram</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                        <expr_stmt><expr><name><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name> += <name><name>rowSize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>
                }</block></for>
                <return>return <expr><name>histogram</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>estimatedColumnCountHistogram</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"EstimatedColumnCountHistogram"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name><name>long</name><index>[]</index></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>long</name><index>[]</index></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>histogram</name> <init>= <expr>new <name><name>long</name><index>[<expr>90</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>columnSize</name> <init>= <expr><call><name><name>sstable</name>.<name>getEstimatedColumnCount</name></name><argument_list>()</argument_list></call>.<call><name>getBuckets</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>histogram</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                        <expr_stmt><expr><name><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name> += <name><name>columnSize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>
                }</block></for>
                <return>return <expr><name>histogram</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sstablesPerReadHistogram</name> = <call><name><name>Metrics</name>.<name>newHistogram</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"SSTablesPerReadHistogram"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compressionRatio</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"CompressionRatio"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Double</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <if>if <condition>(<expr><call><name><name>sstable</name>.<name>getCompressionRatio</name></name><argument_list>()</argument_list></call> != <name><name>SSTableMetadata</name>.<name>NO_COMPRESSION_RATIO</name></name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>sum</name> += <call><name><name>sstable</name>.<name>getCompressionRatio</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>total</name>++</expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
                <return>return <expr><name>total</name> != 0 ? (<name>double</name>)<name>sum</name>/<name>total</name>: 0</expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>readLatency</name> = new <call><name>LatencyMetrics</name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr>"Read"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>writeLatency</name> = new <call><name>LatencyMetrics</name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr>"Write"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pendingTasks</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"PendingTasks"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Integer</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <comment type="line">// TODO this actually isn't a good measure of pending tasks</comment>
                <return>return <expr><call><name><name>Table</name>.<name>switchLock</name>.<name>getQueueLength</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>liveSSTableCount</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"LiveSSTableCount"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Integer</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>cfs</name>.<name>getDataTracker</name></name><argument_list>()</argument_list></call>.<call><name>getSSTables</name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>liveDiskSpaceUsed</name> = <call><name><name>Metrics</name>.<name>newCounter</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"LiveDiskSpaceUsed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>totalDiskSpaceUsed</name> = <call><name><name>Metrics</name>.<name>newCounter</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"TotalDiskSpaceUsed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>minRowSize</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"MinRowSize"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>min</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <if>if <condition>(<expr><name>min</name> == 0 || <call><name><name>sstable</name>.<name>getEstimatedRowSize</name></name><argument_list>()</argument_list></call>.<call><name>min</name><argument_list>()</argument_list></call> &lt; <name>min</name></expr>)</condition><then>
                        <expr_stmt><expr><name>min</name> = <call><name><name>sstable</name>.<name>getEstimatedRowSize</name></name><argument_list>()</argument_list></call>.<call><name>min</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></for>
                <return>return <expr><name>min</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxRowSize</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"MaxRowSize"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <if>if <condition>(<expr><call><name><name>sstable</name>.<name>getEstimatedRowSize</name></name><argument_list>()</argument_list></call>.<call><name>max</name><argument_list>()</argument_list></call> &gt; <name>max</name></expr>)</condition><then>
                        <expr_stmt><expr><name>max</name> = <call><name><name>sstable</name>.<name>getEstimatedRowSize</name></name><argument_list>()</argument_list></call>.<call><name>max</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></for>
                <return>return <expr><name>max</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>meanRowSize</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"MeanRowSize"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>sum</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <expr_stmt><expr><name>sum</name> += <call><name><name>sstable</name>.<name>getEstimatedRowSize</name></name><argument_list>()</argument_list></call>.<call><name>mean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
                }</block></for>
                <return>return <expr><name>count</name> &gt; 0 ? <name>sum</name> / <name>count</name> : 0</expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bloomFilterFalsePositives</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"BloomFilterFalsePositives"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name><range>: <expr><call><name><name>cfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                    <expr_stmt><expr><name>count</name> += <call><name><name>sstable</name>.<name>getBloomFilterFalsePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
                <return>return <expr><name>count</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>recentBloomFilterFalsePositives</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"RecentBloomFilterFalsePositives"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name><range>: <expr><call><name><name>cfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                    <expr_stmt><expr><name>count</name> += <call><name><name>sstable</name>.<name>getRecentBloomFilterFalsePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
                <return>return <expr><name>count</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bloomFilterFalseRatio</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"BloomFilterFalseRatio"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Double</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>falseCount</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>trueCount</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name><range>: <expr><call><name><name>cfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <expr_stmt><expr><name>falseCount</name> += <call><name><name>sstable</name>.<name>getBloomFilterFalsePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>trueCount</name> += <call><name><name>sstable</name>.<name>getBloomFilterTruePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <if>if <condition>(<expr><name>falseCount</name> == 0L &amp;&amp; <name>trueCount</name> == 0L</expr>)</condition><then>
                    <return>return <expr>0d</expr>;</return></then></if>
                <return>return <expr>(<name>double</name>) <name>falseCount</name> / (<name>trueCount</name> + <name>falseCount</name>)</expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>recentBloomFilterFalseRatio</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"RecentBloomFilterFalseRatio"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Double</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>falseCount</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>trueCount</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name><range>: <expr><call><name><name>cfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <expr_stmt><expr><name>falseCount</name> += <call><name><name>sstable</name>.<name>getRecentBloomFilterFalsePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>trueCount</name> += <call><name><name>sstable</name>.<name>getRecentBloomFilterTruePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <if>if <condition>(<expr><name>falseCount</name> == 0L &amp;&amp; <name>trueCount</name> == 0L</expr>)</condition><then>
                    <return>return <expr>0d</expr>;</return></then></if>
                <return>return <expr>(<name>double</name>) <name>falseCount</name> / (<name>trueCount</name> + <name>falseCount</name>)</expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bloomFilterDiskSpaceUsed</name> = <call><name><name>Metrics</name>.<name>newGauge</name></name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"BloomFilterDiskSpaceUsed"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Gauge</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>value</name><parameter_list>()</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sst</name> <range>: <expr><call><name><name>cfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                    <expr_stmt><expr><name>total</name> += <call><name><name>sst</name>.<name>getBloomFilterSerializedSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
                <return>return <expr><name>total</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateSSTableIterated</name><parameter_list>(<param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>sstablesPerReadHistogram</name>.<name>update</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recentSSTablesPerRead</name>.<name>add</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sstablesPerRead</name>.<name>add</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Release all associated metrics.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>release</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>readLatency</name>.<name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writeLatency</name>.<name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"MemtableColumnsCount"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"MemtableDataSize"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"MemtableSwitchCount"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"CompressionRatio"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"EstimatedRowSizeHistogram"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"EstimatedColumnCountHistogram"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"SSTablesPerReadHistogram"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"PendingTasks"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"LiveSSTableCount"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"LiveDiskSpaceUsed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"TotalDiskSpaceUsed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"MinRowSize"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"MaxRowSize"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"MeanRowSize"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"BloomFilterFalsePositives"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"RecentBloomFilterFalsePositives"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"BloomFilterFalseRatio"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"RecentBloomFilterFalseRatio"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Metrics</name>.<name>defaultRegistry</name></name><argument_list>()</argument_list></call>.<call><name>removeMetric</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>createMetricName</name></name><argument_list>(<argument><expr>"BloomFilterDiskSpaceUsed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class>class <name>ColumnFamilyMetricNameFactory</name> <super><implements>implements <name>MetricNameFactory</name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspaceName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>columnFamilyName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isIndex</name></decl>;</decl_stmt>

        <constructor><name>ColumnFamilyMetricNameFactory</name><parameter_list>(<param><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>keyspaceName</name></name> = <name><name>cfs</name>.<name>table</name>.<name>name</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>columnFamilyName</name></name> = <call><name><name>cfs</name>.<name>getColumnFamilyName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isIndex</name> = <call><name><name>cfs</name>.<name>isIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>MetricName</name></type> <name>createMetricName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>metricName</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>groupName</name> <init>= <expr><call><name><name>ColumnFamilyMetrics</name>.<name><name>class</name>.<name>getPackage</name></name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><name>isIndex</name> ? "IndexColumnFamily" : "ColumnFamily"</expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>mbeanName</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name>.<name>append</name></name><argument_list>(<argument><expr><name>groupName</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name>.<name>append</name></name><argument_list>(<argument><expr>"type="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name>.<name>append</name></name><argument_list>(<argument><expr>",keyspace="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name>.<name>append</name></name><argument_list>(<argument><expr>",scope="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>columnFamilyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name>.<name>append</name></name><argument_list>(<argument><expr>",name="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>metricName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr>new <call><name>MetricName</name><argument_list>(<argument><expr><name>groupName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>metricName</name></expr></argument>, <argument><expr><name>keyspaceName</name> + "." + <name>columnFamilyName</name></expr></argument>, <argument><expr><call><name><name>mbeanName</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
