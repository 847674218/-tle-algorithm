<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\ServerConnection.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ConcurrentMap</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>ClientState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>QueryState</name></name>;</import>

<import>import <name><name>org</name>.<name>cliffc</name>.<name>high_scale_lib</name>.<name>NonBlockingHashMap</name></name>;</import>

<class><specifier>public</specifier> class <name>ServerConnection</name> <super><extends>extends <name>Connection</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Factory</name></type> <name>FACTORY</name> <init>= <expr>new <class><super><name>Factory</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>Connection</name></type> <name>newConnection</name><parameter_list>(<param><decl><type><name><name>Connection</name>.<name>Tracker</name></name></type> <name>tracker</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>ServerConnection</name><argument_list>(<argument><expr><name>tracker</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <enum><specifier>private</specifier> enum <name>State</name> <block>{ <decl><name>UNINITIALIZED</name></decl>, <decl><name>AUTHENTICATION</name></decl>, <decl><name>READY</name></decl>; }</block></enum>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ClientState</name></type> <name>clientState</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>State</name></type> <name>state</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ConcurrentMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>QueryState</name></argument>&gt;</argument_list></name></type> <name>queryStates</name> <init>= <expr>new <call><name><name>NonBlockingHashMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>QueryState</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ServerConnection</name><parameter_list>(<param><decl><type><name><name>Connection</name>.<name>Tracker</name></name></type> <name>tracker</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>tracker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>clientState</name></name> = new <call><name>ClientState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>state</name></name> = <name><name>State</name>.<name>UNINITIALIZED</name></name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>QueryState</name></type> <name>getQueryState</name><parameter_list>(<param><decl><type><name>int</name></type> <name>streamId</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>QueryState</name></type> <name>qState</name> <init>= <expr><call><name><name>queryStates</name>.<name>get</name></name><argument_list>(<argument><expr><name>streamId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>qState</name> == null</expr>)</condition><then>
        <block>{
            <comment type="line">// In theory we shouldn't get any race here, but it never hurts to be careful</comment>
            <decl_stmt><decl><type><name>QueryState</name></type> <name>newState</name> <init>= <expr>new <call><name>QueryState</name><argument_list>(<argument><expr><name>clientState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>(<name>qState</name> = <call><name><name>queryStates</name>.<name>putIfAbsent</name></name><argument_list>(<argument><expr><name>streamId</name></expr></argument>, <argument><expr><name>newState</name></expr></argument>)</argument_list></call>) == null</expr>)</condition><then>
                <expr_stmt><expr><name>qState</name> = <name>newState</name></expr>;</expr_stmt></then></if>
        }</block></then></if>
        <return>return <expr><name>qState</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateNewMessage</name><parameter_list>(<param><decl><type><name><name>Message</name>.<name>Type</name></name></type> <name>type</name></decl></param>)</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>state</name></expr>)</condition>
        <block>{
            <case>case <expr><name>UNINITIALIZED</name></expr>:
                <if>if <condition>(<expr><name>type</name> != <name><name>Message</name>.<name>Type</name>.<name>STARTUP</name></name> &amp;&amp; <name>type</name> != <name><name>Message</name>.<name>Type</name>.<name>OPTIONS</name></name></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unexpected message %s, expecting STARTUP or OPTIONS"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <break>break;</break>
            </case><case>case <expr><name>AUTHENTICATION</name></expr>:
                <if>if <condition>(<expr><name>type</name> != <name><name>Message</name>.<name>Type</name>.<name>CREDENTIALS</name></name></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unexpected message %s, needs authentication through CREDENTIALS message"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <break>break;</break>
            </case><case>case <expr><name>READY</name></expr>:
                <if>if <condition>(<expr><name>type</name> == <name><name>Message</name>.<name>Type</name>.<name>STARTUP</name></name></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr>"Unexpected message STARTUP, the connection is already initialized"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <break>break;</break>
            </case><default>default:
                <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        </default>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>applyStateTransition</name><parameter_list>(<param><decl><type><name><name>Message</name>.<name>Type</name></name></type> <name>requestType</name></decl></param>, <param><decl><type><name><name>Message</name>.<name>Type</name></name></type> <name>responseType</name></decl></param>)</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>state</name></expr>)</condition>
        <block>{
            <case>case <expr><name>UNINITIALIZED</name></expr>:
                <if>if <condition>(<expr><name>requestType</name> == <name><name>Message</name>.<name>Type</name>.<name>STARTUP</name></name></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><name>responseType</name> == <name><name>Message</name>.<name>Type</name>.<name>AUTHENTICATE</name></name></expr>)</condition><then>
                        <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>AUTHENTICATION</name></name></expr>;</expr_stmt></then>
                    <else>else <if>if <condition>(<expr><name>responseType</name> == <name><name>Message</name>.<name>Type</name>.<name>READY</name></name></expr>)</condition><then>
                        <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>READY</name></name></expr>;</expr_stmt></then></if></else></if>
                }</block></then></if>
                <break>break;</break>
            </case><case>case <expr><name>AUTHENTICATION</name></expr>:
                <assert>assert <expr><name>requestType</name> == <name><name>Message</name>.<name>Type</name>.<name>CREDENTIALS</name></name></expr>;</assert>
                <if>if <condition>(<expr><name>responseType</name> == <name><name>Message</name>.<name>Type</name>.<name>READY</name></name></expr>)</condition><then>
                    <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>READY</name></name></expr>;</expr_stmt></then></if>
            </case><case>case <expr><name>READY</name></expr>:
                <break>break;</break>
            </case><default>default:
                <throw>throw <expr>new <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        </default>}</block></switch>
    }</block></function>
}</block></class>
</unit>
