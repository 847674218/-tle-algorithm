<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\Message.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>EnumSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>UUID</name></name>;</import>

<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffers</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>channel</name></name>.*;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>handler</name>.<name>codec</name>.<name>oneone</name>.<name>OneToOneDecoder</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>handler</name>.<name>codec</name>.<name>oneone</name>.<name>OneToOneEncoder</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>messages</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>QueryState</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A message from the CQL binary protocol.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Message</name>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>Message</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <class type="interface"><specifier>public</specifier> interface <name><name>Codec</name><argument_list>&lt;<argument><name>M</name> <extends>extends <name>Message</name></extends></argument>&gt;</argument_list></name> <super><extends>extends <name><name>CBCodec</name><argument_list>&lt;<argument><name>M</name></argument>&gt;</argument_list></name></extends></super> <block>{}</block></class>

    <enum><specifier>public</specifier> enum <name>Direction</name>
    <block>{
        <decl><name>REQUEST</name></decl>, <decl><name>RESPONSE</name></decl>;

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Direction</name></type> <name>extractFromVersion</name><parameter_list>(<param><decl><type><name>int</name></type> <name>versionWithDirection</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>(<name>versionWithDirection</name> &amp; 0x80) == 0 ? <name>REQUEST</name> : <name>RESPONSE</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>addToVersion</name><parameter_list>(<param><decl><type><name>int</name></type> <name>rawVersion</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><name>this</name> == <name>REQUEST</name> ? (<name>rawVersion</name> &amp; 0x7F) : (<name>rawVersion</name> | 0x80)</expr>;</return>
        }</block></function>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>Type</name>
    <block>{
        <decl><name>ERROR</name>        <argument_list>(<argument><expr>0</expr></argument>,  <argument><expr><name><name>Direction</name>.<name>RESPONSE</name></name></expr></argument>, <argument><expr><name><name>ErrorMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>STARTUP</name>      <argument_list>(<argument><expr>1</expr></argument>,  <argument><expr><name><name>Direction</name>.<name>REQUEST</name></name></expr></argument>,  <argument><expr><name><name>StartupMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>READY</name>        <argument_list>(<argument><expr>2</expr></argument>,  <argument><expr><name><name>Direction</name>.<name>RESPONSE</name></name></expr></argument>, <argument><expr><name><name>ReadyMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>AUTHENTICATE</name> <argument_list>(<argument><expr>3</expr></argument>,  <argument><expr><name><name>Direction</name>.<name>RESPONSE</name></name></expr></argument>, <argument><expr><name><name>AuthenticateMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>CREDENTIALS</name>  <argument_list>(<argument><expr>4</expr></argument>,  <argument><expr><name><name>Direction</name>.<name>REQUEST</name></name></expr></argument>,  <argument><expr><name><name>CredentialsMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>OPTIONS</name>      <argument_list>(<argument><expr>5</expr></argument>,  <argument><expr><name><name>Direction</name>.<name>REQUEST</name></name></expr></argument>,  <argument><expr><name><name>OptionsMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>SUPPORTED</name>    <argument_list>(<argument><expr>6</expr></argument>,  <argument><expr><name><name>Direction</name>.<name>RESPONSE</name></name></expr></argument>, <argument><expr><name><name>SupportedMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>QUERY</name>        <argument_list>(<argument><expr>7</expr></argument>,  <argument><expr><name><name>Direction</name>.<name>REQUEST</name></name></expr></argument>,  <argument><expr><name><name>QueryMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>RESULT</name>       <argument_list>(<argument><expr>8</expr></argument>,  <argument><expr><name><name>Direction</name>.<name>RESPONSE</name></name></expr></argument>, <argument><expr><name><name>ResultMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>PREPARE</name>      <argument_list>(<argument><expr>9</expr></argument>,  <argument><expr><name><name>Direction</name>.<name>REQUEST</name></name></expr></argument>,  <argument><expr><name><name>PrepareMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>EXECUTE</name>      <argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name><name>Direction</name>.<name>REQUEST</name></name></expr></argument>,  <argument><expr><name><name>ExecuteMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>REGISTER</name>     <argument_list>(<argument><expr>11</expr></argument>, <argument><expr><name><name>Direction</name>.<name>REQUEST</name></name></expr></argument>,  <argument><expr><name><name>RegisterMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>EVENT</name>        <argument_list>(<argument><expr>12</expr></argument>, <argument><expr><name><name>Direction</name>.<name>RESPONSE</name></name></expr></argument>, <argument><expr><name><name>EventMessage</name>.<name>codec</name></name></expr></argument>)</argument_list></decl>;

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>opcode</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Direction</name></type> <name>direction</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Codec</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>codec</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Type</name><index>[]</index></type> <name>opcodeIdx</name></decl>;</decl_stmt>
        <expr>static
        <block>{
            <expr><name>int</name> <name>maxOpcode</name> = -1</expr>;
            <for>for (<init><decl><type><name>Type</name></type> <name>type</name> <range>: <expr><call><name><name>Type</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><name>maxOpcode</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxOpcode</name></expr></argument>, <argument><expr><name><name>type</name>.<name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            <name>opcodeIdx</name> = new <name><name>Type</name><index>[<expr><name>maxOpcode</name> + 1</expr>]</index></name></block></expr>;
            <for>for (<init><decl><type><name>Type</name></type> <name>type</name> <range>: <expr><call><name><name>Type</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr><name><name>opcodeIdx</name><index>[<expr><name><name>type</name>.<name>opcode</name></name></expr>]</index></name> != null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Duplicate opcode"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <expr_stmt><expr><name><name>opcodeIdx</name><index>[<expr><name><name>type</name>.<name>opcode</name></name></expr>]</index></name> = <name>type</name></expr>;</expr_stmt>
            }</block></for>
        }</block></enum>

        <constructor><specifier>private</specifier> <name>Type</name><parameter_list>(<param><decl><type><name>int</name></type> <name>opcode</name></decl></param>, <param><decl><type><name>Direction</name></type> <name>direction</name></decl></param>, <param><decl><type><name><name>Codec</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>codec</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>opcode</name></name> = <name>opcode</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>direction</name></name> = <name>direction</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>codec</name></name> = <name>codec</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Type</name></type> <name>fromOpcode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>opcode</name></decl></param>, <param><decl><type><name>Direction</name></type> <name>direction</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Type</name></type> <name>t</name> <init>= <expr><name><name>opcodeIdx</name><index>[<expr><name>opcode</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>t</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unknown opcode %d"</expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if>if <condition>(<expr><name><name>t</name>.<name>direction</name></name> != <name>direction</name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Wrong protocol direction (expected %s, got %s) for opcode %d (%s)"</expr></argument>,
                                                          <argument><expr><name><name>t</name>.<name>direction</name></name></expr></argument>,
                                                          <argument><expr><name>direction</name></expr></argument>,
                                                          <argument><expr><name>opcode</name></expr></argument>,
                                                          <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <return>return <expr><name>t</name></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Type</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>volatile</specifier> <name>Connection</name></type> <name>connection</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>streamId</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>Message</name><parameter_list>(<param><decl><type><name>Type</name></type> <name>type</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>attach</name><parameter_list>(<param><decl><type><name>Connection</name></type> <name>connection</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>connection</name></name> = <name>connection</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Connection</name></type> <name>connection</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>connection</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Message</name></type> <name>setStreamId</name><parameter_list>(<param><decl><type><name>int</name></type> <name>streamId</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>streamId</name></name> = <name>streamId</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getStreamId</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>streamId</name></expr>;</return>
    }</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>()</parameter_list>;</function_decl>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>Request</name> <super><extends>extends <name>Message</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>tracingRequested</name></decl>;</decl_stmt>

        <constructor><specifier>protected</specifier> <name>Request</name><parameter_list>(<param><decl><type><name>Type</name></type> <name>type</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>type</name>.<name>direction</name></name> != <name><name>Direction</name>.<name>REQUEST</name></name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>
        }</block></constructor>

        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Response</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>QueryState</name></type> <name>queryState</name></decl></param>)</parameter_list>;</function_decl>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setTracingRequested</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>tracingRequested</name></name> = true</expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTracingRequested</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>tracingRequested</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>Response</name> <super><extends>extends <name>Message</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>protected</specifier> <name>UUID</name></type> <name>tracingId</name></decl>;</decl_stmt>

        <constructor><specifier>protected</specifier> <name>Response</name><parameter_list>(<param><decl><type><name>Type</name></type> <name>type</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>type</name>.<name>direction</name></name> != <name><name>Direction</name>.<name>RESPONSE</name></name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>Message</name></type> <name>setTracingId</name><parameter_list>(<param><decl><type><name>UUID</name></type> <name>tracingId</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>tracingId</name></name> = <name>tracingId</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getTracingId</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>tracingId</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ProtocolDecoder</name> <super><extends>extends <name>OneToOneDecoder</name></extends></super>
    <block>{
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelHandlerContext</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>Channel</name></type> <name>channel</name></decl></param>, <param><decl><type><name>Object</name></type> <name>msg</name></decl></param>)</parameter_list>
        <block>{
            <assert>assert <expr><name>msg</name> instanceof <name>Frame</name> : "Expecting frame, got " + <name>msg</name></expr>;</assert>

            <decl_stmt><decl><type><name>Frame</name></type> <name>frame</name> <init>= <expr>(<name>Frame</name>)<name>msg</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isRequest</name> <init>= <expr><name><name>frame</name>.<name>header</name>.<name>type</name>.<name>direction</name></name> == <name><name>Direction</name>.<name>REQUEST</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isTracing</name> <init>= <expr><call><name><name>frame</name>.<name>header</name>.<name>flags</name>.<name>contains</name></name><argument_list>(<argument><expr><name><name>Frame</name>.<name>Header</name>.<name>Flag</name>.<name>TRACING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>UUID</name></type> <name>tracingId</name> <init>= <expr><name>isRequest</name> || !<name>isTracing</name> ? null : <call><name><name>CBUtil</name>.<name>readUuid</name></name><argument_list>(<argument><expr><name><name>frame</name>.<name>body</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Message</name></type> <name>message</name> <init>= <expr><call><name><name>frame</name>.<name>header</name>.<name>type</name>.<name>codec</name>.<name>decode</name></name><argument_list>(<argument><expr><name><name>frame</name>.<name>body</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>message</name>.<name>setStreamId</name></name><argument_list>(<argument><expr><name><name>frame</name>.<name>header</name>.<name>streamId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>isRequest</name></expr>)</condition><then>
            <block>{
                <assert>assert <expr><name>message</name> instanceof <name>Request</name></expr>;</assert>
                <decl_stmt><decl><type><name>Request</name></type> <name>req</name> <init>= <expr>(<name>Request</name>)<name>message</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>req</name>.<name>attach</name></name><argument_list>(<argument><expr><name><name>frame</name>.<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>isTracing</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>req</name>.<name>setTracingRequested</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then>
            <else>else
            <block>{
                <assert>assert <expr><name>message</name> instanceof <name>Response</name></expr>;</assert>
                <if>if <condition>(<expr><name>isTracing</name></expr>)</condition><then>
                    <expr_stmt><expr>((<name>Response</name>)<name>message</name>).<call><name>setTracingId</name><argument_list>(<argument><expr><name>tracingId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></else></if>

            <return>return <expr><name>message</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ProtocolEncoder</name> <super><extends>extends <name>OneToOneEncoder</name></extends></super>
    <block>{
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>ChannelHandlerContext</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>Channel</name></type> <name>channel</name></decl></param>, <param><decl><type><name>Object</name></type> <name>msg</name></decl></param>)</parameter_list>
        <block>{
            <assert>assert <expr><name>msg</name> instanceof <name>Message</name> : "Expecting message, got " + <name>msg</name></expr>;</assert>

            <decl_stmt><decl><type><name>Message</name></type> <name>message</name> <init>= <expr>(<name>Message</name>)<name>msg</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>body</name> <init>= <expr><call><name><name>message</name>.<name>encode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>EnumSet</name><argument_list>&lt;<argument><name><name>Frame</name>.<name>Header</name>.<name>Flag</name></name></argument>&gt;</argument_list></name></type> <name>flags</name> <init>= <expr><call><name><name>EnumSet</name>.<name>noneOf</name></name><argument_list>(<argument><expr><name><name>Frame</name>.<name>Header</name>.<name>Flag</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>message</name> instanceof <name>Response</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>UUID</name></type> <name>tracingId</name> <init>= <expr>((<name>Response</name>)<name>message</name>).<call><name>getTracingId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>tracingId</name> != null</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>body</name> = <call><name><name>ChannelBuffers</name>.<name>wrappedBuffer</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name>.<name>uuidToCB</name></name><argument_list>(<argument><expr><name>tracingId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>flags</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>Frame</name>.<name>Header</name>.<name>Flag</name>.<name>TRACING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <else>else
            <block>{
                <assert>assert <expr><name>message</name> instanceof <name>Request</name></expr>;</assert>
                <if>if <condition>(<expr>((<name>Request</name>)<name>message</name>).<call><name>isTracingRequested</name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>flags</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>Frame</name>.<name>Header</name>.<name>Flag</name>.<name>TRACING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></else></if>
            <return>return <expr><call><name><name>Frame</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>message</name>.<name>type</name></name></expr></argument>, <argument><expr><call><name><name>message</name>.<name>getStreamId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><call><name><name>message</name>.<name>connection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Dispatcher</name> <super><extends>extends <name>SimpleChannelUpstreamHandler</name></extends></super>
    <block>{
        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>void</name></type> <name>messageReceived</name><parameter_list>(<param><decl><type><name>ChannelHandlerContext</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>MessageEvent</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <assert>assert <expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> instanceof <name>Message</name> : "Expecting message, got " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</assert>

            <if>if <condition>(<expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> instanceof <name>Response</name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr>"Invalid response message received, expecting requests"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>Request</name></type> <name>request</name> <init>= <expr>(<name>Request</name>)<call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <try>try
            <block>{
                <assert>assert <expr><call><name><name>request</name>.<name>connection</name></name><argument_list>()</argument_list></call> instanceof <name>ServerConnection</name></expr>;</assert>
                <decl_stmt><decl><type><name>ServerConnection</name></type> <name>connection</name> <init>= <expr>(<name>ServerConnection</name>)<call><name><name>request</name>.<name>connection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>connection</name>.<name>validateNewMessage</name></name><argument_list>(<argument><expr><name><name>request</name>.<name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Received: " + <name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>Response</name></type> <name>response</name> <init>= <expr><call><name><name>request</name>.<name>execute</name></name><argument_list>(<argument><expr><call><name><name>connection</name>.<name>getQueryState</name></name><argument_list>(<argument><expr><call><name><name>request</name>.<name>getStreamId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>response</name>.<name>setStreamId</name></name><argument_list>(<argument><expr><call><name><name>request</name>.<name>getStreamId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>response</name>.<name>attach</name></name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>connection</name>.<name>applyStateTransition</name></name><argument_list>(<argument><expr><name><name>request</name>.<name>type</name></name></expr></argument>, <argument><expr><name><name>response</name>.<name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Responding: " + <name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>ctx</name>.<name>getChannel</name></name><argument_list>()</argument_list></call>.<call><name>write</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>)</parameter_list>
            <block>{
                <comment type="line">// Don't let the exception propagate to exceptionCaught() if we can help it so that we can assign the right streamID.</comment>
                <expr_stmt><expr><call><name><name>ctx</name>.<name>getChannel</name></name><argument_list>()</argument_list></call>.<call><name>write</name><argument_list>(<argument><expr><call><name><name>ErrorMessage</name>.<name>fromException</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call>.<call><name>setStreamId</name><argument_list>(<argument><expr><call><name><name>request</name>.<name>getStreamId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>void</name></type> <name>exceptionCaught</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>ChannelHandlerContext</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>ExceptionEvent</name></type> <name>e</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr><call><name><name>ctx</name>.<name>getChannel</name></name><argument_list>()</argument_list></call>.<call><name>isOpen</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>ChannelFuture</name></type> <name>future</name> <init>= <expr><call><name><name>ctx</name>.<name>getChannel</name></name><argument_list>()</argument_list></call>.<call><name>write</name><argument_list>(<argument><expr><call><name><name>ErrorMessage</name>.<name>fromException</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// On protocol exception, close the channel as soon as the message have been sent</comment>
                <if>if <condition>(<expr><call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call> instanceof <name>ProtocolException</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>future</name>.<name>addListener</name></name><argument_list>(<argument><expr>new <class><super><name>ChannelFutureListener</name></super><argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>void</name></type> <name>operationComplete</name><parameter_list>(<param><decl><type><name>ChannelFuture</name></type> <name>future</name></decl></param>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>ctx</name>.<name>getChannel</name></name><argument_list>()</argument_list></call>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></function>
    }</block></class>
}
</unit>
