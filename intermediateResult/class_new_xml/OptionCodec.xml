<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\transport\OptionCodec.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Array</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>EnumMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>jboss</name>.<name>netty</name>.<name>buffer</name>.<name>ChannelBuffers</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<class><specifier>public</specifier> class <name><name>OptionCodec</name><argument_list>&lt;<argument><name>T</name> <extends>extends <name><name>Enum</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends> &amp; <name><name>OptionCodec</name>.<name><name>Codecable</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name>
<block>{
    <class type="interface"><specifier>public</specifier> interface <name><name>Codecable</name><argument_list>&lt;<argument><name>T</name> <extends>extends <name><name>Enum</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name>
    <block>{
        <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>getId</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><specifier>public</specifier> <name>Object</name></type> <name>readValue</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>writeValue</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>value</name></decl></param>, <param><decl><type><name>ChannelBuffer</name></type> <name>cb</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>serializedValueSize</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>klass</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>T</name><index>[]</index></type> <name>ids</name></decl>;</decl_stmt>

    <constructor><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><block>{<expr>"unchecked"</expr>}</block></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <name>OptionCodec</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>klass</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>klass</name></name> = <name>klass</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>T</name><index>[]</index></type> <name>values</name> <init>= <expr><call><name><name>klass</name>.<name>getEnumConstants</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>maxId</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>T</name></type> <name>opt</name> <range>: <expr><name>values</name></expr></range></decl></init>)
            <expr_stmt><expr><name>maxId</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxId</name></expr></argument>, <argument><expr><call><name><name>opt</name>.<name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <expr_stmt><expr><name>ids</name> = (<name><name>T</name><index>[]</index></name>)<call><name><name>Array</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>maxId</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>T</name></type> <name>opt</name> <range>: <expr><name>values</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><name><name>ids</name><index>[<expr><call><name><name>opt</name>.<name>getId</name></name><argument_list>()</argument_list></call></expr>]</index></name> != null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Duplicate option id %d"</expr></argument>, <argument><expr><call><name><name>opt</name>.<name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <expr_stmt><expr><name><name>ids</name><index>[<expr><call><name><name>opt</name>.<name>getId</name></name><argument_list>()</argument_list></call></expr>]</index></name> = <name>opt</name></expr>;</expr_stmt>
        }</block></for>
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>T</name></type> <name>fromId</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>T</name></type> <name>opt</name> <init>= <expr><name><name>ids</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>opt</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unknown option id %d"</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <return>return <expr><name>opt</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>T</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>decode</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>EnumMap</name><argument_list>&lt;<argument><name>T</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr>new <call><name><name>EnumMap</name><argument_list>&lt;<argument><name>T</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>body</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>T</name></type> <name>opt</name> <init>= <expr><call><name>fromId</name><argument_list>(<argument><expr><call><name><name>body</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><call><name><name>opt</name>.<name>readValue</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>options</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Duplicate option %s in message"</expr></argument>, <argument><expr><call><name><name>opt</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <expr_stmt><expr><call><name><name>options</name>.<name>put</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>options</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>T</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>optLength</name> <init>= <expr>2</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>T</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>options</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><name>optLength</name> += 2 + <call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>serializedValueSize</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>cb</name> <init>= <expr><call><name><name>ChannelBuffers</name>.<name>buffer</name></name><argument_list>(<argument><expr><name>optLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cb</name>.<name>writeShort</name></name><argument_list>(<argument><expr><call><name><name>options</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>T</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>options</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>T</name></type> <name>opt</name> <init>= <expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cb</name>.<name>writeShort</name></name><argument_list>(<argument><expr><call><name><name>opt</name>.<name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>opt</name>.<name>writeValue</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>cb</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Pair</name><argument_list>&lt;<argument><name>T</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>decodeOne</name><parameter_list>(<param><decl><type><name>ChannelBuffer</name></type> <name>body</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>T</name></type> <name>opt</name> <init>= <expr><call><name>fromId</name><argument_list>(<argument><expr><call><name><name>body</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><call><name><name>opt</name>.<name>readValue</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ChannelBuffer</name></type> <name>encodeOne</name><parameter_list>(<param><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>T</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>option</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>T</name></type> <name>opt</name> <init>= <expr><name><name>option</name>.<name>left</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>obj</name> <init>= <expr><name><name>option</name>.<name>right</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ChannelBuffer</name></type> <name>cb</name> <init>= <expr><call><name><name>ChannelBuffers</name>.<name>buffer</name></name><argument_list>(<argument><expr><call><name>oneSerializedSize</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>cb</name>.<name>writeShort</name></name><argument_list>(<argument><expr><call><name><name>opt</name>.<name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>opt</name>.<name>writeValue</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cb</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>oneSerializedSize</name><parameter_list>(<param><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>T</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>option</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>T</name></type> <name>opt</name> <init>= <expr><name><name>option</name>.<name>left</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>obj</name> <init>= <expr><name><name>option</name>.<name>right</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr>2 + <call><name><name>opt</name>.<name>serializedValueSize</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
