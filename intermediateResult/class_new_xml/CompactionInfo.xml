<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\compaction\CompactionInfo.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>UUID</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>

<comment type="block" format="javadoc">/** Implements serializable to allow structured info to be returned via JMX. */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>CompactionInfo</name> <super><implements>implements <name>Serializable</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr>3695381572726744816L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>cfm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>OperationType</name></type> <name>tasktype</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>completed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>total</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>unit</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CompactionInfo</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>, <param><decl><type><name>OperationType</name></type> <name>tasktype</name></decl></param>, <param><decl><type><name>long</name></type> <name>bytesComplete</name></decl></param>, <param><decl><type><name>long</name></type> <name>totalBytes</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>cfm</name></expr></argument>, <argument><expr><name>tasktype</name></expr></argument>, <argument><expr><name>bytesComplete</name></expr></argument>, <argument><expr><name>totalBytes</name></expr></argument>, <argument><expr>"bytes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>CompactionInfo</name><parameter_list>(<param><decl><type><name>OperationType</name></type> <name>tasktype</name></decl></param>, <param><decl><type><name>long</name></type> <name>completed</name></decl></param>, <param><decl><type><name>long</name></type> <name>total</name></decl></param>, <param><decl><type><name>String</name></type> <name>unit</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr><name>tasktype</name></expr></argument>, <argument><expr><name>completed</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>CompactionInfo</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>, <param><decl><type><name>OperationType</name></type> <name>tasktype</name></decl></param>, <param><decl><type><name>long</name></type> <name>completed</name></decl></param>, <param><decl><type><name>long</name></type> <name>total</name></decl></param>, <param><decl><type><name>String</name></type> <name>unit</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>tasktype</name></name> = <name>tasktype</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>completed</name></name> = <name>completed</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>total</name></name> = <name>total</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>cfm</name></name> = <name>cfm</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>unit</name></name> = <name>unit</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/** @return A copy of this CompactionInfo with updated progress. */</comment>
    <function><type><specifier>public</specifier> <name>CompactionInfo</name></type> <name>forProgress</name><parameter_list>(<param><decl><type><name>long</name></type> <name>complete</name></decl></param>, <param><decl><type><name>long</name></type> <name>total</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>CompactionInfo</name><argument_list>(<argument><expr><name>cfm</name></expr></argument>, <argument><expr><name>tasktype</name></expr></argument>, <argument><expr><name>complete</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getId</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>cfm</name>.<name>cfId</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeyspace</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>cfm</name>.<name>ksName</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getColumnFamily</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>cfm</name>.<name>cfName</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>getCFMetaData</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>cfm</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getCompleted</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>completed</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTotal</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>total</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>OperationType</name></type> <name>getTaskType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>tasktype</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buff</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>'@'</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr>'('</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name>getKeyspace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name>getColumnFamily</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name>getCompleted</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>'/'</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name>getTotal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr>')'</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>asMap</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ret</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>put</name></name><argument_list>(<argument><expr>"id"</expr></argument>, <argument><expr><call><name>getId</name><argument_list>()</argument_list></call> == null ? "" : <call><name>getId</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>put</name></name><argument_list>(<argument><expr>"keyspace"</expr></argument>, <argument><expr><call><name>getKeyspace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>put</name></name><argument_list>(<argument><expr>"columnfamily"</expr></argument>, <argument><expr><call><name>getColumnFamily</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>put</name></name><argument_list>(<argument><expr>"completed"</expr></argument>, <argument><expr><call><name><name>Long</name>.<name>toString</name></name><argument_list>(<argument><expr><name>completed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>put</name></name><argument_list>(<argument><expr>"total"</expr></argument>, <argument><expr><call><name><name>Long</name>.<name>toString</name></name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>put</name></name><argument_list>(<argument><expr>"taskType"</expr></argument>, <argument><expr><call><name><name>tasktype</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>put</name></name><argument_list>(<argument><expr>"unit"</expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>Holder</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>stopRequested</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>CompactionInfo</name></type> <name>getCompactionInfo</name><parameter_list>()</parameter_list>;</function_decl>
        <decl_stmt><decl><type><name>double</name></type> <name>load</name> <init>= <expr><call><name><name>StorageService</name>.<name>instance</name>.<name>getLoad</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>reportedSeverity</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><name>stopRequested</name> = true</expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isStopRequested</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>stopRequested</name></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * report event on the size of the compaction.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>started</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><name>reportedSeverity</name> = <call><name><name>StorageService</name>.<name>instance</name>.<name>reportSeverity</name></name><argument_list>(<argument><expr><call><name>getCompactionInfo</name><argument_list>()</argument_list></call>.<call><name>getTotal</name><argument_list>()</argument_list></call>/<name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * remove the event complete
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>finished</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>reportedSeverity</name></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>StorageService</name>.<name>instance</name>.<name>reportSeverity</name></name><argument_list>(<argument><expr>-(<call><name>getCompactionInfo</name><argument_list>()</argument_list></call>.<call><name>getTotal</name><argument_list>()</argument_list></call>/<name>load</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><name>reportedSeverity</name> = false</expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
