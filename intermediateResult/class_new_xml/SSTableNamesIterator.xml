<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\db\columniterator\SSTableNamesIterator.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamily</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamilySerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DeletionInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>IColumn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>RowIndexEntry</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>OnDiskAtom</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>CorruptSSTableException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>IndexHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileDataInput</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileMark</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>IFilter</name></name>;</import>

<class><specifier>public</specifier> class <name>SSTableNamesIterator</name> <super><extends>extends <name>SimpleAbstractColumnIterator</name></extends> <implements>implements <name>ISSTableColumnIterator</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>ColumnFamily</name></type> <name>cf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SSTableReader</name></type> <name>sstable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>FileDataInput</name></type> <name>fileToClose</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>OnDiskAtom</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>DecoratedKey</name></type> <name>key</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SSTableNamesIterator</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>, <param><decl><type><name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>columns</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>sstable</name></name> = <name>sstable</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columns</name></name> = <name>columns</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RowIndexEntry</name></type> <name>indexEntry</name> <init>= <expr><call><name><name>sstable</name>.<name>getPosition</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>SSTableReader</name>.<name>Operator</name>.<name>EQ</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>indexEntry</name> == null</expr>)</condition><then>
            <return>return;</return></then></if>

        <try>try
        <block>{
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><name>indexEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sstable</name>.<name>markSuspect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>CorruptSSTableException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>sstable</name>.<name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <finally>finally
        <block>{
            <if>if <condition>(<expr><name>fileToClose</name> != null</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>fileToClose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></finally></try>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>SSTableNamesIterator</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>FileDataInput</name></type> <name>file</name></decl></param>, <param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>, <param><decl><type><name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>, <param><decl><type><name>RowIndexEntry</name></type> <name>indexEntry</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>columns</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>sstable</name></name> = <name>sstable</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columns</name></name> = <name>columns</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>indexEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sstable</name>.<name>markSuspect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>CorruptSSTableException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>sstable</name>.<name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>FileDataInput</name></type> <name>createFileDataInput</name><parameter_list>(<param><decl><type><name>long</name></type> <name>position</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>fileToClose</name> = <call><name><name>sstable</name>.<name>getFileDataInput</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>fileToClose</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>SSTableReader</name></type> <name>getSStable</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>sstable</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>read</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>FileDataInput</name></type> <name>file</name></decl></param>, <param><decl><type><name>RowIndexEntry</name></type> <name>indexEntry</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>IFilter</name></type> <name>bf</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>IndexHelper</name>.<name>IndexInfo</name></name></argument>&gt;</argument_list></name></type> <name>indexList</name></decl>;</decl_stmt>

        <comment type="line">// If the entry is not indexed or the index is not promoted, read from the row start</comment>
        <if>if <condition>(<expr>!<call><name><name>indexEntry</name>.<name>isIndexed</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>file</name> == null</expr>)</condition><then>
                <expr_stmt><expr><name>file</name> = <call><name>createFileDataInput</name><argument_list>(<argument><expr><name><name>indexEntry</name>.<name>position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><call><name><name>file</name>.<name>seek</name></name><argument_list>(<argument><expr><name><name>indexEntry</name>.<name>position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

            <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>keyInDisk</name> <init>= <expr><call><name><name>SSTableReader</name>.<name>decodeKey</name></name><argument_list>(<argument><expr><name><name>sstable</name>.<name>partitioner</name></name></expr></argument>,
                                                             <argument><expr><name><name>sstable</name>.<name>descriptor</name></name></expr></argument>,
                                                             <argument><expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><call><name><name>keyInDisk</name>.<name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> : <call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s != %s in %s"</expr></argument>, <argument><expr><name>keyInDisk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>file</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</assert>
            <expr_stmt><expr><call><name><name>SSTableReader</name>.<name>readRowSize</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>sstable</name>.<name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>sstable</name>.<name>descriptor</name>.<name>version</name>.<name>hasPromotedIndexes</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>bf</name> = <call><name><name>indexEntry</name>.<name>isIndexed</name></name><argument_list>()</argument_list></call> ? <call><name><name>indexEntry</name>.<name>bloomFilter</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
            <expr_stmt><expr><name>indexList</name> = <call><name><name>indexEntry</name>.<name>columnsIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <assert>assert <expr><name>file</name> != null</expr>;</assert>
            <expr_stmt><expr><name>bf</name> = <call><name><name>IndexHelper</name>.<name>defreezeBloomFilter</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>sstable</name>.<name>descriptor</name>.<name>version</name>.<name>filterType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexList</name> = <call><name><name>IndexHelper</name>.<name>deserializeIndex</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr>!<call><name><name>indexEntry</name>.<name>isIndexed</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <comment type="line">// we can stop early if bloom filter says none of the columns actually exist -- but,</comment>
            <comment type="line">// we can't stop before initializing the cf above, in case there's a relevant tombstone</comment>
            <decl_stmt><decl><type><name>ColumnFamilySerializer</name></type> <name>serializer</name> <init>= <expr><name><name>ColumnFamily</name>.<name>serializer</name></name></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name>cf</name> = <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>sstable</name>.<name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cf</name>.<name>delete</name></name><argument_list>(<argument><expr><call><name><name>DeletionInfo</name>.<name>serializer</name></name><argument_list>()</argument_list></call>.<call><name>deserializeFromSSTable</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>sstable</name>.<name>descriptor</name>.<name>version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr><name>serializer</name> + " failed to deserialize " + <call><name><name>sstable</name>.<name>getColumnFamilyName</name></name><argument_list>()</argument_list></call> + " with " + <name><name>sstable</name>.<name>metadata</name></name> + " from " + <name>file</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>cf</name> = <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>sstable</name>.<name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cf</name>.<name>delete</name></name><argument_list>(<argument><expr><call><name><name>indexEntry</name>.<name>deletionInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>OnDiskAtom</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>OnDiskAtom</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>filteredColumnNames</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>name</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><name>bf</name> == null || <call><name><name>bf</name>.<name>isPresent</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>filteredColumnNames</name>.<name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><call><name><name>filteredColumnNames</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <if>if <condition>(<expr><call><name><name>indexList</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>readSimpleColumns</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>filteredColumnNames</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>basePosition</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>sstable</name>.<name>descriptor</name>.<name>version</name>.<name>hasPromotedIndexes</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>basePosition</name> = <name><name>indexEntry</name>.<name>position</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <assert>assert <expr><name>file</name> != null</expr>;</assert>
                <expr_stmt><expr><call><name><name>file</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// column count</comment>
                <expr_stmt><expr><name>basePosition</name> = <call><name><name>file</name>.<name>getFilePointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>readIndexedColumns</name><argument_list>(<argument><expr><name><name>sstable</name>.<name>metadata</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>filteredColumnNames</name></expr></argument>, <argument><expr><name>indexList</name></expr></argument>, <argument><expr><name>basePosition</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// create an iterator view of the columns we read</comment>
        <expr_stmt><expr><name>iter</name> = <call><name><name>result</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readSimpleColumns</name><parameter_list>(<param><decl><type><name>FileDataInput</name></type> <name>file</name></decl></param>, <param><decl><type><name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columnNames</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>filteredColumnNames</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>OnDiskAtom</name></argument>&gt;</argument_list></name></type> <name>result</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>OnDiskAtom</name>.<name>Serializer</name></name></type> <name>atomSerializer</name> <init>= <expr><call><name><name>cf</name>.<name>getOnDiskSerializer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columns</name> <init>= <expr><call><name><name>file</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>columns</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>OnDiskAtom</name></type> <name>column</name> <init>= <expr><call><name><name>atomSerializer</name>.<name>deserializeFromSSTable</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>sstable</name>.<name>descriptor</name>.<name>version</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>column</name> instanceof <name>IColumn</name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><call><name><name>columnNames</name>.<name>contains</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>n</name>++ &gt; <call><name><name>filteredColumnNames</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <break>break;</break></then></if>
                }</block></then></if>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readIndexedColumns</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>metadata</name></decl></param>,
                                    <param><decl><type><name>FileDataInput</name></type> <name>file</name></decl></param>,
                                    <param><decl><type><name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columnNames</name></decl></param>,
                                    <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>filteredColumnNames</name></decl></param>,
                                    <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>IndexHelper</name>.<name>IndexInfo</name></name></argument>&gt;</argument_list></name></type> <name>indexList</name></decl></param>,
                                    <param><decl><type><name>long</name></type> <name>basePosition</name></decl></param>,
                                    <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>OnDiskAtom</name></argument>&gt;</argument_list></name></type> <name>result</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <comment type="block">/* get the various column ranges we have to read */</comment>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr><name><name>metadata</name>.<name>comparator</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>IndexHelper</name>.<name>IndexInfo</name></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>IndexHelper</name>.<name>IndexInfo</name></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lastIndexIdx</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>name</name> <range>: <expr><name>filteredColumnNames</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>IndexHelper</name>.<name>indexFor</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>indexList</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>lastIndexIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>index</name> &lt; 0 || <name>index</name> == <call><name><name>indexList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <continue>continue;</continue></then></if>
            <decl_stmt><decl><type><name><name>IndexHelper</name>.<name>IndexInfo</name></name></type> <name>indexInfo</name> <init>= <expr><call><name><name>indexList</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Check the index block does contain the column names and that we haven't inserted this block yet.</comment>
            <if>if <condition>(<expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>indexInfo</name>.<name>firstName</name></name></expr></argument>)</argument_list></call> &lt; 0 || <name>index</name> == <name>lastIndexIdx</name></expr>)</condition><then>
                <continue>continue;</continue></then></if>
            <expr_stmt><expr><call><name><name>ranges</name>.<name>add</name></name><argument_list>(<argument><expr><name>indexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lastIndexIdx</name> = <name>index</name></expr>;</expr_stmt>
        }</block></for>

        <if>if <condition>(<expr><call><name><name>ranges</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <for>for (<init><decl><type><name><name>IndexHelper</name>.<name>IndexInfo</name></name></type> <name>indexInfo</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>positionToSeek</name> <init>= <expr><name>basePosition</name> + <name><name>indexInfo</name>.<name>offset</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line">// With new promoted indexes, our first seek in the data file will happen at that point.</comment>
            <if>if <condition>(<expr><name>file</name> == null</expr>)</condition><then>
                <expr_stmt><expr><name>file</name> = <call><name>createFileDataInput</name><argument_list>(<argument><expr><name>positionToSeek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <decl_stmt><decl><type><name><name>OnDiskAtom</name>.<name>Serializer</name></name></type> <name>atomSerializer</name> <init>= <expr><call><name><name>cf</name>.<name>getOnDiskSerializer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>file</name>.<name>seek</name></name><argument_list>(<argument><expr><name>positionToSeek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>FileMark</name></type> <name>mark</name> <init>= <expr><call><name><name>file</name>.<name>mark</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// TODO only completely deserialize columns we are interested in</comment>
            <while>while <condition>(<expr><call><name><name>file</name>.<name>bytesPastMark</name></name><argument_list>(<argument><expr><name>mark</name></expr></argument>)</argument_list></call> &lt; <name><name>indexInfo</name>.<name>width</name></name></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>OnDiskAtom</name></type> <name>column</name> <init>= <expr><call><name><name>atomSerializer</name>.<name>deserializeFromSSTable</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>sstable</name>.<name>descriptor</name>.<name>version</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// we check vs the original Set, not the filtered List, for efficiency</comment>
                <if>if <condition>(<expr>!(<name>column</name> instanceof <name>IColumn</name>) || <call><name><name>columnNames</name>.<name>contains</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></while>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>getKey</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>key</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnFamily</name></type> <name>getColumnFamily</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>cf</name></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>OnDiskAtom</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>iter</name> == null || !<call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></then></if>
        <return>return <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
