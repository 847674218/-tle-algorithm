<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cql3\statements\ColumnGroupMap.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>statements</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>IColumn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>CompositeType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<class><specifier>public</specifier> class <name>ColumnGroupMap</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ByteBuffer</name><index>[]</index></type> <name>fullPath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>Value</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ColumnGroupMap</name><parameter_list>(<param><decl><type><name><name>ByteBuffer</name><index>[]</index></name></type> <name>fullPath</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fullPath</name></name> = <name>fullPath</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name><name>ByteBuffer</name><index>[]</index></name></type> <name>fullName</name></decl></param>, <param><decl><type><name>int</name></type> <name>idx</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>columnName</name> <init>= <expr><name><name>fullName</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>fullName</name>.<name>length</name></name> == <name>idx</name> + 2</expr>)</condition><then>
        <block>{
            <comment type="line">// It's a collection</comment>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>v</name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>v</name> = new <call><name>Collection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <assert>assert <expr><name>v</name> instanceof <name>Collection</name></expr>;</assert>

            <expr_stmt><expr>((<name>Collection</name>)<name>v</name>).<call><name>add</name><argument_list>(<argument><expr><call><name><name>Pair</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>fullName</name><index>[<expr><name>idx</name> + 1</expr>]</index></name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <assert>assert <expr>!<call><name><name>map</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</assert>
            <expr_stmt><expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr>new <call><name>Simple</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>getKeyComponent</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name><name>fullPath</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>getSimple</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>v</name> == null</expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>

        <assert>assert <expr><name>v</name> instanceof <name>Simple</name></expr>;</assert>
        <return>return <expr>((<name>Simple</name>)<name>v</name>).<name>column</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getCollection</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>v</name> == null</expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>

        <assert>assert <expr><name>v</name> instanceof <name>Collection</name></expr>;</assert>
        <return>return <expr>(<name><name>List</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name>)<name>v</name></expr>;</return>
    }</block></function>

    <class type="interface"><specifier>private</specifier> interface <name>Value</name> <block>{}</block></class><empty_stmt>;</empty_stmt>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>Simple</name> <super><implements>implements <name>Value</name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>IColumn</name></type> <name>column</name></decl>;</decl_stmt>

        <constructor><name>Simple</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>column</name></name> = <name>column</name></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>Collection</name> <super><extends>extends <name><name>ArrayList</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Value</name></implements></super> <block>{}</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Builder</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CompositeType</name></type> <name>composite</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>idx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>ByteBuffer</name><index>[]</index></type> <name>previous</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnGroupMap</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ColumnGroupMap</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>ColumnGroupMap</name></type> <name>currentGroup</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Builder</name><parameter_list>(<param><decl><type><name>CompositeType</name></type> <name>composite</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>hasCollections</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>composite</name></name> = <name>composite</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>idx</name></name> = <call><name><name>composite</name>.<name>types</name>.<name>size</name></name><argument_list>()</argument_list></call> - (<name>hasCollections</name> ? 2 : 1)</expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>c</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><call><name><name>c</name>.<name>isMarkedForDelete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return;</return></then></if>

            <decl_stmt><decl><type><name>ByteBuffer</name><index>[]</index></type> <name>current</name> <init>= <expr><call><name><name>composite</name>.<name>split</name></name><argument_list>(<argument><expr><call><name><name>c</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>currentGroup</name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>currentGroup</name> = new <call><name>ColumnGroupMap</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>currentGroup</name>.<name>add</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>previous</name> = <name>current</name></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>

            <if>if <condition>(<expr>!<call><name>isSameGroup</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>groups</name>.<name>add</name></name><argument_list>(<argument><expr><name>currentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>currentGroup</name> = new <call><name>ColumnGroupMap</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>currentGroup</name>.<name>add</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>previous</name> = <name>current</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * For sparse composite, returns wheter the column belong to the same
         * cqlRow than the previously added, based on the full list of component
         * in the name.
         * Two columns do belong together if they differ only by the last
         * component.
         */</comment>
        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isSameGroup</name><parameter_list>(<param><decl><type><name><name>ByteBuffer</name><index>[]</index></name></type> <name>c</name></decl></param>)</parameter_list>
        <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>idx</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <if>if <condition>(<expr>!<name><name>c</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr><name><name>previous</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr>false</expr>;</return></then></if>
            }</block></for>
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnGroupMap</name></argument>&gt;</argument_list></name></type> <name>groups</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>currentGroup</name> != null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>groups</name>.<name>add</name></name><argument_list>(<argument><expr><name>currentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>currentGroup</name> = null</expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>groups</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
