<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\cli\CliUtils.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cli</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CfDef</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>IndexOperator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>KsDef</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringEscapeUtils</name></name>;</import>

<class><specifier>public</specifier> class <name>CliUtils</name>
<block>{
    <comment type="block" format="javadoc">/**
     * Strips leading and trailing "'" characters, and handles
     * and escaped characters such as \n, \r, etc.
     * @param b - string to unescape
     * @return String - unexspaced string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>unescapeSQLString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>b</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>b</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> == '\'' &amp;&amp; <call><name><name>b</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>b</name>.<name>length</name></name><argument_list>()</argument_list></call>-1</expr></argument>)</argument_list></call> == '\''</expr>)</condition><then>
            <expr_stmt><expr><name>b</name> = <call><name><name>b</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>b</name>.<name>length</name></name><argument_list>()</argument_list></call>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><call><name><name>StringEscapeUtils</name>.<name>unescapeJava</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>escapeSQLString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>b</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// single quotes are not escaped in java, need to be for cli</comment>
        <return>return <expr><call><name><name>StringEscapeUtils</name>.<name>escapeJava</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>"\'"</expr></argument>, <argument><expr>"\\'"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Returns IndexOperator from string representation
     * @param operator - string representing IndexOperator (=, &gt;=, &gt;, &lt;, &lt;=)
     * @return IndexOperator - enum value of IndexOperator or null if not found
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IndexOperator</name></type> <name>getIndexOperator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>operator</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>operator</name>.<name>equals</name></name><argument_list>(<argument><expr>"="</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr><name><name>IndexOperator</name>.<name>EQ</name></name></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>operator</name>.<name>equals</name></name><argument_list>(<argument><expr>"&gt;="</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr><name><name>IndexOperator</name>.<name>GTE</name></name></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>operator</name>.<name>equals</name></name><argument_list>(<argument><expr>"&gt;"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr><name><name>IndexOperator</name>.<name>GT</name></name></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>operator</name>.<name>equals</name></name><argument_list>(<argument><expr>"&lt;"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr><name><name>IndexOperator</name>.<name>LT</name></name></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>operator</name>.<name>equals</name></name><argument_list>(<argument><expr>"&lt;="</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr><name><name>IndexOperator</name>.<name>LTE</name></name></expr>;</return>
        }</block></then></if></else></if></else></if></else></if></else></if>

        <return>return <expr>null</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns set of column family names in specified keySpace.
     * @param keySpace - keyspace definition to get column family names from.
     * @return Set - column family names
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCfNamesByKeySpace</name><parameter_list>(<param><decl><type><name>KsDef</name></type> <name>keySpace</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>names</name> <init>= <expr>new <call><name><name>LinkedHashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>CfDef</name></type> <name>cfDef</name> <range>: <expr><call><name><name>keySpace</name>.<name>getCf_defs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>names</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>cfDef</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>names</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Parse the statement from cli and return KsDef
     *
     * @param keyspaceName - name of the keyspace to lookup
     * @param keyspaces - List of known keyspaces
     *
     * @return metadata about keyspace or null
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KsDef</name></type> <name>getKeySpaceDef</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspaceName</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>KsDef</name></argument>&gt;</argument_list></name></type> <name>keyspaces</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>keyspaceName</name> = <call><name><name>keyspaceName</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>KsDef</name></type> <name>ksDef</name> <range>: <expr><name>keyspaces</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>ksDef</name>.<name>name</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>ksDef</name></expr>;</return></then></if>
        }</block></for>

        <return>return <expr>null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>quote</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"'%s'"</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
