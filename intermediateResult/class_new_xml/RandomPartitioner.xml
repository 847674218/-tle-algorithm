<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\dht\RandomPartitioner.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name></name>;</package>

<import>import <name><name>java</name>.<name>math</name>.<name>BigDecimal</name></name>;</import>
<import>import <name><name>java</name>.<name>math</name>.<name>BigInteger</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>CharacterCodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>GuidGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class generates a BigIntegerToken using MD5 hash.
 */</comment>
<class><specifier>public</specifier> class <name>RandomPartitioner</name> <super><extends>extends <name><name>AbstractPartitioner</name><argument_list>&lt;<argument><name>BigIntegerToken</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BigInteger</name></type> <name>ZERO</name> <init>= <expr>new <call><name>BigInteger</name><argument_list>(<argument><expr>"0"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BigIntegerToken</name></type> <name>MINIMUM</name> <init>= <expr>new <call><name>BigIntegerToken</name><argument_list>(<argument><expr>"-1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BigInteger</name></type> <name>MAXIMUM</name> <init>= <expr>new <call><name>BigInteger</name><argument_list>(<argument><expr>"2"</expr></argument>)</argument_list></call>.<call><name>pow</name><argument_list>(<argument><expr>127</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>DELIMITER_BYTE</name> <init>= <expr>":".<call><name>getBytes</name><argument_list>()</argument_list></call><index>[<expr>0</expr>]</index></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>decorateKey</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>DecoratedKey</name><argument_list>(<argument><expr><call><name>getToken</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>convertFromDiskFormat</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>fromdisk</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// find the delimiter position</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>splitPoint</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>fromdisk</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>fromdisk</name>.<name>limit</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <if>if <condition>(<expr><call><name><name>fromdisk</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> == <name>DELIMITER_BYTE</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>splitPoint</name> = <name>i</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <assert>assert <expr><name>splitPoint</name> != -1</expr>;</assert>

        <comment type="line">// and decode the token and key</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>token</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>token</name> = <call><name><name>ByteBufferUtil</name>.<name>string</name></name><argument_list>(<argument><expr><name>fromdisk</name></expr></argument>, <argument><expr><call><name><name>fromdisk</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>splitPoint</name> - <call><name><name>fromdisk</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>CharacterCodingException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>key</name> <init>= <expr><call><name><name>fromdisk</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>key</name>.<name>position</name></name><argument_list>(<argument><expr><name>splitPoint</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <call><name>DecoratedKey</name><argument_list>(<argument><expr>new <call><name>BigIntegerToken</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Token</name></type> <name>midpoint</name><parameter_list>(<param><decl><type><name>Token</name></type> <name>ltoken</name></decl></param>, <param><decl><type><name>Token</name></type> <name>rtoken</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// the symbolic MINIMUM token should act as ZERO: the empty bit array</comment>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>left</name> <init>= <expr><call><name><name>ltoken</name>.<name>equals</name></name><argument_list>(<argument><expr><name>MINIMUM</name></expr></argument>)</argument_list></call> ? <name>ZERO</name> : ((<name>BigIntegerToken</name>)<name>ltoken</name>).<name>token</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>right</name> <init>= <expr><call><name><name>rtoken</name>.<name>equals</name></name><argument_list>(<argument><expr><name>MINIMUM</name></expr></argument>)</argument_list></call> ? <name>ZERO</name> : ((<name>BigIntegerToken</name>)<name>rtoken</name>).<name>token</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>BigInteger</name></argument>,<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>midpair</name> <init>= <expr><call><name><name>FBUtilities</name>.<name>midpoint</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr>127</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// discard the remainder</comment>
        <return>return <expr>new <call><name>BigIntegerToken</name><argument_list>(<argument><expr><name><name>midpair</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>BigIntegerToken</name></type> <name>getMinimumToken</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>MINIMUM</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>BigIntegerToken</name></type> <name>getRandomToken</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>token</name> <init>= <expr><call><name><name>FBUtilities</name>.<name>hashToBigInteger</name></name><argument_list>(<argument><expr><call><name><name>GuidGenerator</name>.<name>guidAsBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>( <expr><call><name><name>token</name>.<name>signum</name></name><argument_list>()</argument_list></call> == -1</expr> )</condition><then>
            <expr_stmt><expr><name>token</name> = <call><name><name>token</name>.<name>multiply</name></name><argument_list>(<argument><expr><call><name><name>BigInteger</name>.<name>valueOf</name></name><argument_list>(<argument><expr>-1L</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr>new <call><name>BigIntegerToken</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Token</name>.<name><name>TokenFactory</name><argument_list>&lt;<argument><name>BigInteger</name></argument>&gt;</argument_list></name></name></type> <name>tokenFactory</name> <init>= <expr>new <class><super><name><name>Token</name>.<name><name>TokenFactory</name><argument_list>&lt;<argument><name>BigInteger</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>toByteArray</name><parameter_list>(<param><decl><type><name><name>Token</name><argument_list>&lt;<argument><name>BigInteger</name></argument>&gt;</argument_list></name></type> <name>bigIntegerToken</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>bigIntegerToken</name>.<name>token</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>Token</name><argument_list>&lt;<argument><name>BigInteger</name></argument>&gt;</argument_list></name></type> <name>fromByteArray</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>BigIntegerToken</name><argument_list>(<argument><expr>new <call><name>BigInteger</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>getArray</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<param><decl><type><name><name>Token</name><argument_list>&lt;<argument><name>BigInteger</name></argument>&gt;</argument_list></name></type> <name>bigIntegerToken</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>bigIntegerToken</name>.<name>token</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>token</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
        <block>{
            <try>try
            <block>{
                <decl_stmt><decl><type><name>BigInteger</name></type> <name>i</name> <init>= <expr>new <call><name>BigInteger</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>i</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>ZERO</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Token must be &gt;= 0"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <if>if <condition>(<expr><call><name><name>i</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>MAXIMUM</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Token must be &lt;= 2**127"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>Token</name><argument_list>&lt;<argument><name>BigInteger</name></argument>&gt;</argument_list></name></type> <name>fromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>string</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>BigIntegerToken</name><argument_list>(<argument><expr>new <call><name>BigInteger</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name><name>Token</name>.<name><name>TokenFactory</name><argument_list>&lt;<argument><name>BigInteger</name></argument>&gt;</argument_list></name></name></type> <name>getTokenFactory</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>tokenFactory</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>preservesOrder</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>BigIntegerToken</name></type> <name>getToken</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>key</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
            <return>return <expr><name>MINIMUM</name></expr>;</return></then></if>
        <return>return <expr>new <call><name>BigIntegerToken</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>hashToBigInteger</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>describeOwnership</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>sortedTokens</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>ownerships</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>i</name> <init>= <expr><call><name><name>sortedTokens</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// 0-case</comment>
        <if>if <condition>(<expr>!<call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"No nodes present in the cluster. How did you call this?"</expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
        <comment type="line">// 1-case</comment>
        <if>if <condition>(<expr><call><name><name>sortedTokens</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ownerships</name>.<name>put</name></name><argument_list>(<argument><expr>(<name>Token</name>)<call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>Float</name><argument_list>(<argument><expr>1.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <comment type="line">// n-case</comment>
        <else>else <block>{
            <comment type="line">// NOTE: All divisions must take place in BigDecimals, and all modulo operators must take place in BigIntegers.</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>BigInteger</name></type> <name>ri</name> <init>= <expr><name>MAXIMUM</name></expr></init></decl>;</decl_stmt>                                                  <comment type="line">//  (used for addition later)</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>BigDecimal</name></type> <name>r</name>  <init>= <expr>new <call><name>BigDecimal</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                                       <comment type="line">// The entire range, 2**127</comment>
            <decl_stmt><decl><type><name>Token</name></type> <name>start</name> <init>= <expr>(<name>Token</name>)<call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>BigInteger</name></type> <name>ti</name> <init>= <expr>((<name>BigIntegerToken</name>)<name>start</name>).<name>token</name></expr></init></decl>;</decl_stmt>  <comment type="line">// The first token and its value</comment>
            <decl_stmt><decl><type><name>Token</name></type> <name>t</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>BigInteger</name></type> <name>tim1</name> <init>= <expr><name>ti</name></expr></init></decl>;</decl_stmt>                                                  <comment type="line">// The last token and its value (after loop)</comment>
            <while>while <condition>(<expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><name>t</name> = (<name>Token</name>)<call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ti</name> = ((<name>BigIntegerToken</name>)<name>t</name>).<name>token</name></expr>;</expr_stmt>                               <comment type="line">// The next token and its value</comment>
                <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr>new <call><name>BigDecimal</name><argument_list>(<argument><expr><call><name><name>ti</name>.<name>subtract</name></name><argument_list>(<argument><expr><name>tim1</name></expr></argument>)</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call>.<call><name>mod</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>divide</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>.<call><name>floatValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// %age = ((T(i) - T(i-1) + R) % R) / R</comment>
                <expr_stmt><expr><call><name><name>ownerships</name>.<name>put</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                               <comment type="line">// save (T(i) -&gt; %age)</comment>
                <expr_stmt><expr><name>tim1</name> = <name>ti</name></expr>;</expr_stmt>                                                                          <comment type="line">// -&gt; advance loop</comment>
            }</block></while>
            <comment type="line">// The start token's range extends backward to the last token, which is why both were saved above.</comment>
            <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr>new <call><name>BigDecimal</name><argument_list>(<argument><expr>((<name>BigIntegerToken</name>)<name>start</name>).<call><name><name>token</name>.<name>subtract</name></name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call>.<call><name>mod</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>divide</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>.<call><name>floatValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ownerships</name>.<name>put</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>ownerships</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
