<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\exceptions\ExceptionCode.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>transport</name>.<name>ProtocolException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Exceptions code, as defined by the binary protocol.
 */</comment>
<enum><specifier>public</specifier> enum <name>ExceptionCode</name>
<block>{
    <decl><name>SERVER_ERROR</name>    <argument_list>(<argument><expr>0x0000</expr></argument>)</argument_list></decl>,
    <decl><name>PROTOCOL_ERROR</name>  <argument_list>(<argument><expr>0x000A</expr></argument>)</argument_list></decl>,

    <decl><name>BAD_CREDENTIALS</name> <argument_list>(<argument><expr>0x0100</expr></argument>)</argument_list></decl>,

    <comment type="line">// 1xx: problem during request execution</comment>
    <decl><name>UNAVAILABLE</name>     <argument_list>(<argument><expr>0x1000</expr></argument>)</argument_list></decl>,
    <decl><name>OVERLOADED</name>      <argument_list>(<argument><expr>0x1001</expr></argument>)</argument_list></decl>,
    <decl><name>IS_BOOTSTRAPPING</name><argument_list>(<argument><expr>0x1002</expr></argument>)</argument_list></decl>,
    <decl><name>TRUNCATE_ERROR</name>  <argument_list>(<argument><expr>0x1003</expr></argument>)</argument_list></decl>,
    <decl><name>WRITE_TIMEOUT</name>   <argument_list>(<argument><expr>0x1100</expr></argument>)</argument_list></decl>,
    <decl><name>READ_TIMEOUT</name>    <argument_list>(<argument><expr>0x1200</expr></argument>)</argument_list></decl>,

    <comment type="line">// 2xx: problem validating the request</comment>
    <decl><name>SYNTAX_ERROR</name>    <argument_list>(<argument><expr>0x2000</expr></argument>)</argument_list></decl>,
    <decl><name>UNAUTHORIZED</name>    <argument_list>(<argument><expr>0x2100</expr></argument>)</argument_list></decl>,
    <decl><name>INVALID</name>         <argument_list>(<argument><expr>0x2200</expr></argument>)</argument_list></decl>,
    <decl><name>CONFIG_ERROR</name>    <argument_list>(<argument><expr>0x2300</expr></argument>)</argument_list></decl>,
    <decl><name>ALREADY_EXISTS</name>  <argument_list>(<argument><expr>0x2400</expr></argument>)</argument_list></decl>,
    <decl><name>UNPREPARED</name>      <argument_list>(<argument><expr>0x2500</expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>ExceptionCode</name></argument>&gt;</argument_list></name></type> <name>valueToCode</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>ExceptionCode</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ExceptionCode</name>.<name>values</name></name><argument_list>()</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr>static
    <block>{
        <for>for (<init><decl><type><name>ExceptionCode</name></type> <name>code</name> <range>: <expr><call><name><name>ExceptionCode</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>valueToCode</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>code</name>.<name>value</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></expr>

    <constructor><specifier>private</specifier> <name>ExceptionCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ExceptionCode</name></type> <name>fromValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ExceptionCode</name></type> <name>code</name> <init>= <expr><call><name><name>valueToCode</name>.<name>get</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>code</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unknown error code %d"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <return>return <expr><name>code</name></expr>;</return>
    }</block></function>
}</block></enum>
</unit>
