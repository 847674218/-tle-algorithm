<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\dht\IPartitioner.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>

<class type="interface"><specifier>public</specifier> interface <name><name>IPartitioner</name><argument_list>&lt;<argument><name>T</name> <extends>extends <name>Token</name></extends></argument>&gt;</argument_list></name>
<block>{
    <comment type="block" format="javadoc">/**
     * @deprecated Used by SSTables before version 'e'.
     *
     * Convert the on disk representation to a DecoratedKey object
     * @param key On disk representation
     * @return DecoratedKey object
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>convertFromDiskFormat</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Transform key to object representation of the on-disk format.
     *
     * @param key the raw, client-facing key
     * @return decorated version of key
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>decorateKey</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Calculate a Token representing the approximate "middle" of the given
     * range.
     *
     * @return The approximate midpoint between left and right.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>Token</name></type> <name>midpoint</name><parameter_list>(<param><decl><type><name>Token</name></type> <name>left</name></decl></param>, <param><decl><type><name>Token</name></type> <name>right</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return The minimum possible Token in the range that is being partitioned.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>T</name></type> <name>getMinimumToken</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return a Token that can be used to route a given key
     * (This is NOT a method to create a Token from its string representation;
     * for that, use TokenFactory.fromString.)
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>T</name></type> <name>getToken</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return a randomly generated token
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>T</name></type> <name>getRandomToken</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name><name>Token</name>.<name>TokenFactory</name></name></type> <name>getTokenFactory</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return True if the implementing class preserves key order in the Tokens
     * it generates.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>preservesOrder</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Calculate the deltas between tokens in the ring in order to compare
     *  relative sizes.
     *
     * @param sortedTokens a sorted List of Tokens
     * @return the mapping from 'token' to 'percentage of the ring owned by that token'.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>describeOwnership</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>sortedTokens</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <argument_list>&lt;<argument><name>R</name> <extends>extends <name>RingPosition</name></extends></argument>&gt;</argument_list> <name>R</name></type> <name>minValue</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>R</name></argument>&gt;</argument_list></name></type> <name>klass</name></decl></param>)</parameter_list>;</function_decl>
}</block></class>
</unit>
