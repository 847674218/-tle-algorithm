<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\config\ColumnDefinition.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Maps</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>UntypedResultSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryPath</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>exceptions</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ColumnDef</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>IndexType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name>.<name>json</name></name>;</import>

<class><specifier>public</specifier> class <name>ColumnDefinition</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>IndexType</name></type> <name>index_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>index_options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>index_name</name></decl>;</decl_stmt>

    <comment type="block">/*
     * If the column comparator is a composite type, indicates to which
     * component this definition refers to. If null, the definition refers to
     * the full column name.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Integer</name></type> <name>componentIndex</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ColumnDefinition</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name></decl></param>, <param><decl><type><name>IndexType</name></type> <name>index_type</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>index_options</name></decl></param>, <param><decl><type><name>String</name></type> <name>index_name</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>componentIndex</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>name</name> != null &amp;&amp; <name>validator</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>index_name</name></name> = <name>index_name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>validator</name></name> = <name>validator</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>componentIndex</name></name> = <name>componentIndex</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>setIndexType</name></name><argument_list>(<argument><expr><name>index_type</name></expr></argument>, <argument><expr><name>index_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ColumnDefinition</name></type> <name>clone</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>ColumnDefinition</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>validator</name></expr></argument>, <argument><expr><name>index_type</name></expr></argument>, <argument><expr><name>index_options</name></expr></argument>, <argument><expr><name>index_name</name></expr></argument>, <argument><expr><name>componentIndex</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>o</name></expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then></if>
        <if>if <condition>(<expr><name>o</name> == null || <call><name>getClass</name><argument_list>()</argument_list></call> != <call><name><name>o</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>

        <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>that</name> <init>= <expr>(<name>ColumnDefinition</name>) <name>o</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index_name</name> != null ? !<call><name><name>index_name</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>index_name</name></name></expr></argument>)</argument_list></call> : <name><name>that</name>.<name>index_name</name></name> != null</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <if>if <condition>(<expr><name>index_type</name> != <name><name>that</name>.<name>index_type</name></name></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <if>if <condition>(<expr><name>index_options</name> != null ? !<call><name><name>index_options</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>index_options</name></name></expr></argument>)</argument_list></call> : <name><name>that</name>.<name>index_options</name></name> != null</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <if>if <condition>(<expr><name>componentIndex</name> != null ? !<call><name><name>componentIndex</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>componentIndex</name></name></expr></argument>)</argument_list></call> : <name><name>that</name>.<name>componentIndex</name></name> != null</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <return>return <expr>!(<name>validator</name> != null ? !<call><name><name>validator</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>validator</name></name></expr></argument>)</argument_list></call> : <name><name>that</name>.<name>validator</name></name> != null)</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>name</name> != null ? <call><name><name>name</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 31 * <name>result</name> + (<name>validator</name> != null ? <call><name><name>validator</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 31 * <name>result</name> + (<name>index_type</name> != null ? <call><name><name>index_type</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 31 * <name>result</name> + (<name>index_options</name> != null ? <call><name><name>index_options</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 31 * <name>result</name> + (<name>index_name</name> != null ? <call><name><name>index_name</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 31 * <name>result</name> + (<name>componentIndex</name> != null ? <call><name><name>componentIndex</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnDef</name></type> <name>toThrift</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ColumnDef</name></type> <name>cd</name> <init>= <expr>new <call><name>ColumnDef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>cd</name>.<name>setName</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>clone</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cd</name>.<name>setValidation_class</name></name><argument_list>(<argument><expr><call><name><name>validator</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cd</name>.<name>setIndex_type</name></name><argument_list>(<argument><expr><name>index_type</name> == null
                            ? null
                            : <call><name><name>IndexType</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>index_type</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cd</name>.<name>setIndex_name</name></name><argument_list>(<argument><expr><name>index_name</name> == null ? null : <name>index_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cd</name>.<name>setIndex_options</name></name><argument_list>(<argument><expr><name>index_options</name> == null ? null : <call><name><name>Maps</name>.<name>newHashMap</name></name><argument_list>(<argument><expr><name>index_options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>cd</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnDefinition</name></type> <name>fromThrift</name><parameter_list>(<param><decl><type><name>ColumnDef</name></type> <name>thriftColumnDef</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <return>return <expr>new <call><name>ColumnDefinition</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>thriftColumnDef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name><name>thriftColumnDef</name>.<name>validation_class</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name><name>thriftColumnDef</name>.<name>index_type</name></name></expr></argument>,
                                    <argument><expr><name><name>thriftColumnDef</name>.<name>index_options</name></name></expr></argument>,
                                    <argument><expr><name><name>thriftColumnDef</name>.<name>index_name</name></name></expr></argument>,
                                    <argument><expr>null</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></type> <name>fromThrift</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnDef</name></argument>&gt;</argument_list></name></type> <name>thriftDefs</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>thriftDefs</name> == null</expr>)</condition><then>
            <return>return <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></type> <name>cds</name> <init>= <expr>new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ColumnDef</name></type> <name>thriftColumnDef</name> <range>: <expr><name>thriftDefs</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>cds</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>thriftColumnDef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fromThrift</name><argument_list>(<argument><expr><name>thriftColumnDef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <return>return <expr><name>cds</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Drop specified column from the schema using given row.
     *
     * @param rm         The schema row mutation
     * @param cfName     The name of the parent ColumnFamily
     * @param timestamp  The timestamp to use for column modification
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>deleteFromSchema</name><parameter_list>(<param><decl><type><name>RowMutation</name></type> <name>rm</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>rm</name>.<name>addOrGet</name></name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_COLUMNS_CF</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ldt</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> / 1000</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"validator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"index_type"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"index_options"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"index_name"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"component_index"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>toSchema</name><parameter_list>(<param><decl><type><name>RowMutation</name></type> <name>rm</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>rm</name>.<name>addOrGet</name></name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_COLUMNS_CF</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ldt</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> / 1000</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>validator</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"validator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>index_type</name> == null ? <call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"index_type"</expr></argument>)</argument_list></call>
                                        : <call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>index_type</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"index_type"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>index_options</name> == null ? <call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"index_options"</expr></argument>)</argument_list></call>
                                           : <call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name>json</name><argument_list>(<argument><expr><name>index_options</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"index_options"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>index_name</name> == null ? <call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"index_name"</expr></argument>)</argument_list></call>
                                        : <call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>index_name</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"index_name"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>componentIndex</name> == null ? <call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"component_index"</expr></argument>)</argument_list></call>
                                            : <call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>componentIndex</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"component_index"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>(<param><decl><type><name>ColumnDefinition</name></type> <name>def</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>  <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name>getIndexType</name><argument_list>()</argument_list></call> != null &amp;&amp; <call><name><name>def</name>.<name>getIndexType</name></name><argument_list>()</argument_list></call> != null</expr>)</condition><then>
        <block>{
            <comment type="line">// If an index is set (and not drop by this update), the validator shouldn't be change to a non-compatible one</comment>
            <if>if <condition>(<expr>!<call><name><name>def</name>.<name>getValidator</name></name><argument_list>()</argument_list></call>.<call><name>isCompatibleWith</name><argument_list>(<argument><expr><call><name>getValidator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Cannot modify validator to a non-compatible one for column %s since an index is set"</expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <assert>assert <expr><call><name>getIndexName</name><argument_list>()</argument_list></call> != null</expr>;</assert>
            <if>if <condition>(<expr>!<call><name>getIndexName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>def</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Cannot modify index name"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>componentIndex</name> != null &amp;&amp; !<call><name><name>componentIndex</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>def</name>.<name>componentIndex</name></name></expr></argument>)</argument_list></call>)
         || (<name>componentIndex</name> == null &amp;&amp; <name><name>def</name>.<name>componentIndex</name></name> != null)</expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Cannot modify component index for column %s"</expr></argument>, <argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <expr_stmt><expr><call><name>setValidator</name><argument_list>(<argument><expr><call><name><name>def</name>.<name>getValidator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setIndexType</name><argument_list>(<argument><expr><call><name><name>def</name>.<name>getIndexType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>def</name>.<name>getIndexOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setIndexName</name><argument_list>(<argument><expr><call><name><name>def</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Deserialize columns from low-level representation
     *
     * @return Thrift-based deserialized representation of the column
     * @param row
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></type> <name>fromSchema</name><parameter_list>(<param><decl><type><name>Row</name></type> <name>row</name></decl></param>, <param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>row</name>.<name>cf</name></name> == null</expr>)</condition><then>
            <return>return <expr><call><name><name>Collections</name>.<name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></type> <name>cds</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>UntypedResultSet</name>.<name>Row</name></name></type> <name>result</name> <range>: <expr><call><name><name>QueryProcessor</name>.<name>resultify</name></name><argument_list>(<argument><expr>"SELECT * FROM system.schema_columns"</expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
        <block>{
            <try>try
            <block>{
                <decl_stmt><decl><type><name>IndexType</name></type> <name>index_type</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>index_options</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>index_name</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Integer</name></type> <name>componentIndex</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>result</name>.<name>has</name></name><argument_list>(<argument><expr>"index_type"</expr></argument>)</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><name>index_type</name> = <call><name><name>IndexType</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"index_type"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <if>if <condition>(<expr><call><name><name>result</name>.<name>has</name></name><argument_list>(<argument><expr>"index_options"</expr></argument>)</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><name>index_options</name> = <call><name><name>FBUtilities</name>.<name>fromJsonMap</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"index_options"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <if>if <condition>(<expr><call><name><name>result</name>.<name>has</name></name><argument_list>(<argument><expr>"index_name"</expr></argument>)</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><name>index_name</name> = <call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"index_name"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <if>if <condition>(<expr><call><name><name>result</name>.<name>has</name></name><argument_list>(<argument><expr>"component_index"</expr></argument>)</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><name>componentIndex</name> = <call><name><name>result</name>.<name>getInt</name></name><argument_list>(<argument><expr>"component_index"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <expr_stmt><expr><call><name><name>cds</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>ColumnDefinition</name><argument_list>(<argument><expr><call><name><name>cfm</name>.<name>getColumnDefinitionComparator</name></name><argument_list>(<argument><expr><name>componentIndex</name></expr></argument>)</argument_list></call>.<call><name>fromString</name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"column_name"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"validator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>index_type</name></expr></argument>,
                                             <argument><expr><name>index_options</name></expr></argument>,
                                             <argument><expr><name>index_name</name></expr></argument>,
                                             <argument><expr><name>componentIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>RequestValidationException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></for>

        <return>return <expr><name>cds</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Row</name></type> <name>readSchema</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>key</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>decorateKey</name><argument_list>(<argument><expr><call><name><name>SystemTable</name>.<name>getSchemaKSKey</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>columnsStore</name> <init>= <expr><call><name><name>SystemTable</name>.<name>schemaCFS</name></name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_COLUMNS_CF</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>columnsStore</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>,
                                                       <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_COLUMNS_CF</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                       <argument><expr><call><name><name>DefsTable</name>.<name>searchComposite</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>,
                                                       <argument><expr><call><name><name>DefsTable</name>.<name>searchComposite</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>,
                                                       <argument><expr>false</expr></argument>,
                                                       <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Row</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"ColumnDefinition{" +
               "name=" + <call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> +
               ", validator=" + <name>validator</name> +
               ", index_type=" + <name>index_type</name> +
               ", index_name='" + <name>index_name</name> + '\'' +
               (<name>componentIndex</name> != null ? ", component_index=" + <name>componentIndex</name> : "") +
               '}'</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getIndexName</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>index_name</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIndexName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>index_name</name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIndexType</name><parameter_list>(<param><decl><type><name>IndexType</name></type> <name>index_type</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>index_options</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>index_type</name></name> = <name>index_type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>index_options</name></name> = <name>index_options</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IndexType</name></type> <name>getIndexType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>index_type</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getIndexOptions</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>index_options</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getValidator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>validator</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValidator</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>validator</name></name> = <name>validator</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getStringMap</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>CharSequence</name></argument>, <argument><name>CharSequence</name></argument>&gt;</argument_list></name></type> <name>charMap</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>charMap</name> == null</expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stringMap</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>CharSequence</name></argument>, <argument><name>CharSequence</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>charMap</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>stringMap</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>


        <return>return <expr><name>stringMap</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
