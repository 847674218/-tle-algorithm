<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.2.1\src\java\org\apache\cassandra\io\util\SegmentedFile.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>MappedByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>Config</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>FSReadError</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Abstracts a read-only file that has been split into segments, each of which can be represented by an independent
 * FileDataInput. Allows for iteration over the FileDataInputs, or random access to the FileDataInput for a given
 * position.
 *
 * The JVM can only map up to 2GB at a time, so each segment is at most that size when using mmap i/o. If a segment
 * would need to be longer than 2GB, that segment will not be mmap'd, and a new RandomAccessFile will be created for
 * each access to that segment.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>SegmentedFile</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>length</name></decl>;</decl_stmt>

    <comment type="line">// This differs from length for compressed files (but we still need length for</comment>
    <comment type="line">// SegmentIterator because offsets in the file are relative to the uncompressed size)</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>onDiskLength</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Use getBuilder to get a Builder to construct a SegmentedFile.
     */</comment>
    <constructor><name>SegmentedFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>, <param><decl><type><name>long</name></type> <name>length</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>protected</specifier> <name>SegmentedFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>, <param><decl><type><name>long</name></type> <name>length</name></decl></param>, <param><decl><type><name>long</name></type> <name>onDiskLength</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>length</name></name> = <name>length</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>onDiskLength</name></name> = <name>onDiskLength</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return A SegmentedFile.Builder.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>getBuilder</name><parameter_list>(<param><decl><type><name><name>Config</name>.<name>DiskAccessMode</name></name></type> <name>mode</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>mode</name> == <name><name>Config</name>.<name>DiskAccessMode</name>.<name>mmap</name></name>
               ? new <call><name><name>MmappedSegmentedFile</name>.<name>Builder</name></name><argument_list>()</argument_list></call>
               : new <call><name><name>BufferedSegmentedFile</name>.<name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>getCompressedBuilder</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name><name>CompressedSegmentedFile</name>.<name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>FileDataInput</name></type> <name>getSegment</name><parameter_list>(<param><decl><type><name>long</name></type> <name>position</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return An Iterator over segments, beginning with the segment containing the given position: each segment must be closed after use.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>FileDataInput</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>(<param><decl><type><name>long</name></type> <name>position</name></decl></param>, <param><decl><type><name>int</name></type> <name>bufferSize</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>SegmentIterator</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Do whatever action is needed to reclaim ressources used by this SegmentedFile.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>cleanup</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Collects potential segmentation points in an underlying file, and builds a SegmentedFile to represent it.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>Builder</name>
    <block>{
        <comment type="block" format="javadoc">/**
         * Adds a position that would be a safe place for a segment boundary in the file. For a block/row based file
         * format, safe boundaries are block/row edges.
         * @param boundary The absolute position of the potential boundary in the file.
         */</comment>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>addPotentialBoundary</name><parameter_list>(<param><decl><type><name>long</name></type> <name>boundary</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/**
         * Called after all potential boundaries have been added to apply this Builder to a concrete file on disk.
         * @param path The file on disk.
         */</comment>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>SegmentedFile</name></type> <name>complete</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list>;</function_decl>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serializeBounds</name><parameter_list>(<param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getDiskAccessMode</name></name><argument_list>()</argument_list></call>.<call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>deserializeBounds</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr>!<call><name><name>dis</name>.<name>readUTF</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getDiskAccessMode</name></name><argument_list>()</argument_list></call>.<call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Cannot deserialize SSTable Summary component because the DiskAccessMode was changed!"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></function>
    }</block></class>

    <class><specifier>static</specifier> <specifier>final</specifier> class <name>Segment</name> <super><extends>extends <name><name>Pair</name><argument_list>&lt;<argument><name>Long</name></argument>, <argument><name>MappedByteBuffer</name></argument>&gt;</argument_list></name></extends> <implements>implements <name><name>Comparable</name><argument_list>&lt;<argument><name>Segment</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <constructor><specifier>public</specifier> <name>Segment</name><parameter_list>(<param><decl><type><name>long</name></type> <name>offset</name></decl></param>, <param><decl><type><name>MappedByteBuffer</name></type> <name>segment</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Segment</name></type> <name>that</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>(<name>int</name>)<call><name><name>Math</name>.<name>signum</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>left</name></name> - <name><name>that</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * A lazy Iterator over segments in forward order from the given position.
     */</comment>
    <class><specifier>final</specifier> class <name>SegmentIterator</name> <super><implements>implements <name><name>Iterator</name><argument_list>&lt;<argument><name>FileDataInput</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>nextpos</name></decl>;</decl_stmt>
        <constructor><specifier>public</specifier> <name>SegmentIterator</name><parameter_list>(<param><decl><type><name>long</name></type> <name>position</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>nextpos</name></name> = <name>position</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>nextpos</name> &lt; <name>length</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>FileDataInput</name></type> <name>next</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>position</name> <init>= <expr><name>nextpos</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>position</name> &gt;= <name>length</name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>FileDataInput</name></type> <name>segment</name> <init>= <expr><call><name>getSegment</name><argument_list>(<argument><expr><name>nextpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name>nextpos</name> = <name>nextpos</name> + <call><name><name>segment</name>.<name>bytesRemaining</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>FSReadError</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
            <return>return <expr><name>segment</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{ <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw> }</block></function>
    }</block></class>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getSimpleName</name><argument_list>()</argument_list></call> + "(path='" + <name>path</name> + "'" +
               ", length=" + <name>length</name> +
               ")"</expr>;</return>
}</block></function>
}</block></class>
</unit>
