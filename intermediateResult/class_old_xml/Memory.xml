<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\util\Memory.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name></name>;</package>

<import>import <name><name>sun</name>.<name>misc</name>.<name>Unsafe</name></name>;</import>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Field</name></name>;</import>

<class><specifier>public</specifier> class <name>Memory</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Unsafe</name></type> <name>unsafe</name></decl>;</decl_stmt>

    <expr_stmt><expr>static
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>Field</name></type> <name>field</name> <init>= <expr><call><name><name>sun</name>.<name>misc</name>.<name>Unsafe</name>.<name><name>class</name>.<name>getDeclaredField</name></name></name><argument_list>(<argument><expr>"theUnsafe"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>field</name>.<name>setAccessible</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>unsafe</name> = (<name><name>sun</name>.<name>misc</name>.<name>Unsafe</name></name>) <call><name><name>field</name>.<name>get</name></name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block></try>}</block></expr></expr_stmt>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
    }</block></class>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>peer</name></decl>;</decl_stmt>
    <comment type="line">// size of the memory region</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>Memory</name><parameter_list>(<param><decl><type><name>long</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>size</name> = <name>bytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>peer</name> = <call><name><name>unsafe</name>.<name>allocateMemory</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Memory</name></type> <name>allocate</name><parameter_list>(<param><decl><type><name>long</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>bytes</name> &lt; 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

        <return>return <expr>new <call><name>Memory</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setByte</name><parameter_list>(<param><decl><type><name>long</name></type> <name>offset</name></decl></param>, <param><decl><type><name>byte</name></type> <name>b</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>checkPosition</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>unsafe</name>.<name>putByte</name></name><argument_list>(<argument><expr><name>peer</name> + <name>offset</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Transfers count bytes from buffer to Memory
     *
     * @param memoryOffset start offset in the memory
     * @param buffer the data buffer
     * @param bufferOffset start offset of the buffer
     * @param count number of bytes to transfer
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBytes</name><parameter_list>(<param><decl><type><name>long</name></type> <name>memoryOffset</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>bufferOffset</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>buffer</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw></then>
        <else>else <if>if <condition>(<expr><name>bufferOffset</name> &lt; 0
                 || <name><name>count</name> <argument_list>&lt; <argument>0
                 || <name>bufferOffset</name> + <name>count</name></argument> &gt;</argument_list></name> <name><name>buffer</name>.<name>length</name></name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw></then>
        <else>else <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then>
            <return>return;</return></then></if></else></if></else></if>

        <expr_stmt><expr><call><name>checkPosition</name><argument_list>(<argument><expr><name>memoryOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>end</name> <init>= <expr><name>memoryOffset</name> + <name>count</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>checkPosition</name><argument_list>(<argument><expr><name>end</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>memoryOffset</name> &lt; <name>end</name></expr>)</condition>
            <expr_stmt><expr><call><name><name>unsafe</name>.<name>putByte</name></name><argument_list>(<argument><expr><name>peer</name> + <name>memoryOffset</name>++</expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><name>bufferOffset</name>++</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
    }</block></function>

    <function><type><specifier>public</specifier> <name>byte</name></type> <name>getByte</name><parameter_list>(<param><decl><type><name>long</name></type> <name>offset</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>checkPosition</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>unsafe</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>peer</name> + <name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Transfers count bytes from Memory starting at memoryOffset to buffer starting at bufferOffset
     *
     * @param memoryOffset start offset in the memory
     * @param buffer the data buffer
     * @param bufferOffset start offset of the buffer
     * @param count number of bytes to transfer
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>getBytes</name><parameter_list>(<param><decl><type><name>long</name></type> <name>memoryOffset</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>bufferOffset</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>buffer</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw></then>
        <else>else <if>if <condition>(<expr><name>bufferOffset</name> &lt; 0 || <name><name>count</name> <argument_list>&lt; <argument>0 || <name>count</name></argument> &gt;</argument_list></name> <name><name>buffer</name>.<name>length</name></name> - <name>bufferOffset</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw></then>
        <else>else <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then>
            <return>return;</return></then></if></else></if></else></if>

        <expr_stmt><expr><call><name>checkPosition</name><argument_list>(<argument><expr><name>memoryOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>end</name> <init>= <expr><name>memoryOffset</name> + <name>count</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>checkPosition</name><argument_list>(<argument><expr><name>end</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>memoryOffset</name> &lt; <name>end</name></expr>)</condition>
            <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>bufferOffset</name>++</expr>]</index></name> = <call><name><name>unsafe</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>peer</name> + <name>memoryOffset</name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkPosition</name><parameter_list>(<param><decl><type><name>long</name></type> <name>offset</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>peer</name> == 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Memory was freed"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <if>if <condition>(<expr><name><name>offset</name> <argument_list>&lt; <argument>0 || <name>offset</name></argument> &gt;</argument_list></name>= <name>size</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>(<argument><expr>"Illegal offset: " + <name>offset</name> + ", size: " + <name>size</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>free</name><parameter_list>()</parameter_list>
    <block>{
        <assert>assert <expr><name>peer</name> != 0</expr>;</assert>
        <expr_stmt><expr><call><name><name>unsafe</name>.<name>freeMemory</name></name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>peer</name> = 0</expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>
}

</unit>
