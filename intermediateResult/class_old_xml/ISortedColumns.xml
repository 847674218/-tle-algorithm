<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\ISortedColumns.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>SortedMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>SortedSet</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Function</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>IIterableColumns</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Allocator</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A sorted map of columns.
 * This represents the backing map of a colum family.
 *
 * Whether the implementation is thread safe or not is left to the
 * implementing classes.
 */</comment>
<class type="interface"><specifier>public</specifier> interface <name>ISortedColumns</name> <super><extends>extends <name>IIterableColumns</name></extends></super>
<block>{
    <comment type="block" format="javadoc">/**
     * Shallow cloning of the column map.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>ISortedColumns</name></type> <name>cloneMe</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the factory used for this ISortedColumns implementation.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>Factory</name></type> <name>getFactory</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>DeletionInfo</name></type> <name>getDeletionInfo</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<param><decl><type><name>DeletionInfo</name></type> <name>info</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>maybeResetDeletionTimes</name><parameter_list>(<param><decl><type><name>int</name></type> <name>gcBefore</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>retainAll</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>columns</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Adds a column to this column map.
     * If a column with the same name is already present in the map, it will
     * be replaced by the newly added column.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Adds all the columns of a given column map to this column map.
     * This is equivalent to:
     *   &lt;code&gt;
     *   for (Column c : cm)
     *      add(c);
     *   &lt;/code&gt;
     *  but is potentially faster.
     *
     *  @return the difference in size seen after merging the given columns
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>long</name></type> <name>addAllWithSizeDelta</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>cm</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>, <param><decl><type><name><name>Function</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>transformation</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Adds the columns without necessarily computing the size delta
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>addAll</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>cm</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>, <param><decl><type><name><name>Function</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>transformation</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Replace oldColumn if present by newColumn.
     * Returns true if oldColumn was present and thus replaced.
     * oldColumn and newColumn should have the same name.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>replace</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>oldColumn</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>newColumn</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Remove if present a column by name.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>removeColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Clear this column map, removing all columns.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get a column given its name, returning null if the column is not
     * present.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>IColumn</name></type> <name>getColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a set with the names of columns in this column map.
     * The resulting set is sorted and the order is the one of the columns in
     * this column map.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>getColumnNames</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the columns of this column map as a collection.
     * The columns in the returned collection should be sorted as the columns
     * in this map.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>getSortedColumns</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the columns of this column map as a collection.
     * The columns in the returned collection should be sorted in reverse
     * order of the columns in this map.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>getReverseSortedColumns</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the number of columns in this map.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns true if this map is empty, false otherwise.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns an iterator that iterates over the columns of this map in
     * reverse order.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>reverseIterator</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns an iterator over the columns of this map starting from the
     * first column whose name is equal or greater than @param start.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a reversed iterator over the columns of this map starting from
     * the last column whose name is equal or lesser than @param start.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>reverseIterator</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns if this map only support inserts in reverse order.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isInsertReversed</name><parameter_list>()</parameter_list>;</function_decl>

    <class type="interface"><specifier>public</specifier> interface <name>Factory</name>
    <block>{
        <comment type="block" format="javadoc">/**
         * Returns a (initially empty) column map whose columns are sorted
         * according to the provided comparator.
         * The {@code insertReversed} flag is an hint on how we expect insertion to be perfomed,
         * either in sorted or reverse sorted order. This is used by ArrayBackedSortedColumns to
         * allow optimizing for both forward and reversed slices. This does not matter for ThreadSafeSortedColumns.
         * Note that this is only an hint on how we expect to do insertion, this does not change the map sorting.
         */</comment>
        <function_decl><type><specifier>public</specifier> <name>ISortedColumns</name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>insertReversed</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/**
         * Returns a column map whose columns are sorted according to the comparator of the provided sorted
         * map (which thus, is assumed to _not_ be sorted by natural order) and that initially contains the
         * columns in the provided sorted map.
         * See {@code create} for the description of {@code insertReversed}
         */</comment>
        <function_decl><type><specifier>public</specifier> <name>ISortedColumns</name></type> <name>fromSorted</name><parameter_list>(<param><decl><type><name><name>SortedMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>sm</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>insertReversed</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>DeletionInfo</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>markedForDeleteAt</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>localDeletionTime</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>DeletionInfo</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>Long</name>.<name>MIN_VALUE</name></name></expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>public</specifier> <name>DeletionInfo</name><parameter_list>(<param><decl><type><name>long</name></type> <name>markedForDeleteAt</name></decl></param>, <param><decl><type><name>int</name></type> <name>localDeletionTime</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// Pre-1.1 node may return MIN_VALUE for non-deleted container, but the new default is MAX_VALUE</comment>
            <comment type="line">// (see CASSANDRA-3872)</comment>
            <if>if <condition>(<expr><name>localDeletionTime</name> == <name><name>Integer</name>.<name>MIN_VALUE</name></name></expr>)</condition><then>
                <expr_stmt><expr><name>localDeletionTime</name> = <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>;</expr_stmt></then></if>

            <expr_stmt><expr><name><name>this</name>.<name>markedForDeleteAt</name></name> = <name>markedForDeleteAt</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>localDeletionTime</name></name> = <name>localDeletionTime</name></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>
}</block></class>
</unit>
