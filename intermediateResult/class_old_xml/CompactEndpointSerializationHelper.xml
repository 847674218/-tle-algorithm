<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\net\CompactEndpointSerializationHelper.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>Inet4Address</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>Inet6Address</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>

<class><specifier>public</specifier> class <name>CompactEndpointSerializationHelper</name>
<block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buf</name> <init>= <expr><call><name><name>endpoint</name>.<name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeByte</name></name><argument_list>(<argument><expr><name><name>buf</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>dis</name>.<name>readByte</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dis</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>bytes</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>InetAddress</name>.<name>getByAddress</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>from</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>from</name> instanceof <name>Inet4Address</name></expr>)</condition><then>
            <return>return <expr>1 + 4</expr>;</return></then></if>
        <assert>assert <expr><name>from</name> instanceof <name>Inet6Address</name></expr>;</assert>
        <return>return <expr>1 + 16</expr>;</return>
    }</block></function>
}</block></class>
</unit>
