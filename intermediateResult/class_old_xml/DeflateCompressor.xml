<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\compress\DeflateCompressor.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>DataFormatException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>Deflater</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>Inflater</name></name>;</import>

<class><specifier>public</specifier> class <name>DeflateCompressor</name> <super><implements>implements <name>ICompressor</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DeflateCompressor</name></type> <name>instance</name> <init>= <expr>new <call><name>DeflateCompressor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list>&lt;<argument><name>Deflater</name></argument>&gt;</argument_list></name></type> <name>deflater</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list>&lt;<argument><name>Inflater</name></argument>&gt;</argument_list></name></type> <name>inflater</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DeflateCompressor</name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compressionOptions</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// no specific options supported so far</comment>
        <return>return <expr><name>instance</name></expr>;</return>
    }</block></function>

    <constructor><specifier>private</specifier> <name>DeflateCompressor</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>deflater</name> = new <class><super><name><name>ThreadLocal</name><argument_list>&lt;<argument><name>Deflater</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <name>Deflater</name></type> <name>initialValue</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr>new <call><name>Deflater</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><name>inflater</name> = new <class><super><name><name>ThreadLocal</name><argument_list>&lt;<argument><name>Inflater</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <name>Inflater</name></type> <name>initialValue</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr>new <call><name>Inflater</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>supportedOptions</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>initialCompressedBufferLength</name><parameter_list>(<param><decl><type><name>int</name></type> <name>chunkLength</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>chunkLength</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compress</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></param>, <param><decl><type><name>int</name></type> <name>inputOffset</name></decl></param>, <param><decl><type><name>int</name></type> <name>inputLength</name></decl></param>, <param><decl><type><name><name>ICompressor</name>.<name>WrappedArray</name></name></type> <name>output</name></decl></param>, <param><decl><type><name>int</name></type> <name>outputOffset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>Deflater</name></type> <name>def</name> <init>= <expr><call><name><name>deflater</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setInput</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputOffset</name></expr></argument>, <argument><expr><name>inputLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>def</name>.<name>needsInput</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>offs</name> <init>= <expr><name>outputOffset</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>true</expr>)</condition>
        <block>{
            <expr_stmt><expr><name>offs</name> += <call><name><name>def</name>.<name>deflate</name></name><argument_list>(<argument><expr><name><name>output</name>.<name>buffer</name></name></expr></argument>, <argument><expr><name>offs</name></expr></argument>, <argument><expr><name><name>output</name>.<name>buffer</name>.<name>length</name></name> - <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>def</name>.<name>finished</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <return>return <expr><name>offs</name> - <name>outputOffset</name></expr>;</return>
            }</block></then>
            <else>else
            <block>{
                <comment type="line">// We're not done, output was too small. Increase it and continue</comment>
                <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>newBuffer</name> <init>= <expr>new <name><name>byte</name><index>[<expr>(<name><name>output</name>.<name>buffer</name>.<name>length</name></name>*4)/3 + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name><name>output</name>.<name>buffer</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>newBuffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>output</name>.<name>buffer</name></name> = <name>newBuffer</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>uncompress</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></param>, <param><decl><type><name>int</name></type> <name>inputOffset</name></decl></param>, <param><decl><type><name>int</name></type> <name>inputLength</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl></param>, <param><decl><type><name>int</name></type> <name>outputOffset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>Inflater</name></type> <name>inf</name> <init>= <expr><call><name><name>inflater</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inf</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inf</name>.<name>setInput</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputOffset</name></expr></argument>, <argument><expr><name>inputLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>inf</name>.<name>needsInput</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then></if>

        <comment type="line">// We assume output is big enough</comment>
        <try>try
        <block>{
            <return>return <expr><call><name><name>inf</name>.<name>inflate</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outputOffset</name></expr></argument>, <argument><expr><name><name>output</name>.<name>length</name></name> - <name>outputOffset</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>DataFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
