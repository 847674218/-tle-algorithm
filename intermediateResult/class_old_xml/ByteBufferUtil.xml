<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\ByteBufferUtil.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<comment type="block">/*
 * BE ADVISED: New imports added here might introduce new dependencies for
 * the clientutil jar.  If in doubt, run the `ant test-clientutil-jar' target
 * afterward, and ensure the tests still pass.
 */</comment>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>CharacterCodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>Charset</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<import>import static <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Charsets</name>.<name>UTF_8</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileDataInput</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Utility methods to make ByteBuffers less painful
 * The following should illustrate the different ways byte buffers can be used
 *
 *        public void testArrayOffet()
 *        {
 *
 *            byte[] b = "test_slice_array".getBytes();
 *            ByteBuffer bb = ByteBuffer.allocate(1024);
 *
 *            assert bb.position() == 0;
 *            assert bb.limit()    == 1024;
 *            assert bb.capacity() == 1024;
 *
 *            bb.put(b);
 *
 *            assert bb.position()  == b.length;
 *            assert bb.remaining() == bb.limit() - bb.position();
 *
 *            ByteBuffer bb2 = bb.slice();
 *
 *            assert bb2.position()    == 0;
 *
 *            //slice should begin at other buffers current position
 *            assert bb2.arrayOffset() == bb.position();
 *
 *            //to match the position in the underlying array one needs to
 *            //track arrayOffset
 *            assert bb2.limit()+bb2.arrayOffset() == bb.limit();
 *
 *
 *            assert bb2.remaining() == bb.remaining();
 *
 *        }
 *
 * }
 *
 */</comment>
<class><specifier>public</specifier> class <name>ByteBufferUtil</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>EMPTY_BYTE_BUFFER</name> <init>= <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>compareUnsigned</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>o1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>o2</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>o1</name> != null</expr>;</assert>
        <assert>assert <expr><name>o2</name> != null</expr>;</assert>
        <if>if <condition>(<expr><name>o1</name> == <name>o2</name></expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then></if>

        <if>if <condition>(<expr><call><name><name>o1</name>.<name>hasArray</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>o2</name>.<name>hasArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr><call><name><name>FBUtilities</name>.<name>compareUnsigned</name></name><argument_list>(<argument><expr><call><name><name>o1</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>o2</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>o1</name>.<name>position</name></name><argument_list>()</argument_list></call> + <call><name><name>o1</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>o2</name>.<name>position</name></name><argument_list>()</argument_list></call> + <call><name><name>o2</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>o1</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>o2</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>end1</name> <init>= <expr><call><name><name>o1</name>.<name>position</name></name><argument_list>()</argument_list></call> + <call><name><name>o1</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end2</name> <init>= <expr><call><name><name>o2</name>.<name>position</name></name><argument_list>()</argument_list></call> + <call><name><name>o2</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>o1</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init>, <name>j</name> <init>= <expr><call><name><name>o2</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>end1</name> &amp;&amp; <name>j</name> &lt; <name>end2</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>j</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr>(<call><name><name>o1</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> &amp; 0xff)</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr>(<call><name><name>o2</name>.<name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> &amp; 0xff)</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>a</name> != <name>b</name></expr>)</condition><then>
                <return>return <expr><name>a</name> - <name>b</name></expr>;</return></then></if>
        }</block></for>
        <return>return <expr><call><name><name>o1</name>.<name>remaining</name></name><argument_list>()</argument_list></call> - <call><name><name>o2</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>o1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>o2</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>compareUnsigned</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>o1</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>o2</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>compareUnsigned</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Decode a String representation.
     * This method assumes that the encoding charset is UTF_8.
     *
     * @param buffer a byte buffer holding the string representation
     * @return the decoded string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>string</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>CharacterCodingException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name>string</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Decode a String representation.
     * This method assumes that the encoding charset is UTF_8.
     *
     * @param buffer a byte buffer holding the string representation
     * @param position the starting position in {@code buffer} to start decoding from
     * @param length the number of bytes from {@code buffer} to use
     * @return the decoded string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>string</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>position</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>CharacterCodingException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name>string</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Decode a String representation.
     *
     * @param buffer a byte buffer holding the string representation
     * @param position the starting position in {@code buffer} to start decoding from
     * @param length the number of bytes from {@code buffer} to use
     * @param charset the String encoding charset
     * @return the decoded string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>string</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>position</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>, <param><decl><type><name>Charset</name></type> <name>charset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>CharacterCodingException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>copy</name> <init>= <expr><call><name><name>buffer</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>copy</name>.<name>position</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>copy</name>.<name>limit</name></name><argument_list>(<argument><expr><call><name><name>copy</name>.<name>position</name></name><argument_list>()</argument_list></call> + <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>string</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Decode a String representation.
     *
     * @param buffer a byte buffer holding the string representation
     * @param charset the String encoding charset
     * @return the decoded string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>string</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></param>, <param><decl><type><name>Charset</name></type> <name>charset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>CharacterCodingException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>charset</name>.<name>newDecoder</name></name><argument_list>()</argument_list></call>.<call><name>decode</name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * You should almost never use this.  Instead, use the write* methods to avoid copies.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>getArray</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>buffer</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>buffer</name>.<name>hasArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>boff</name> <init>= <expr><call><name><name>buffer</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call> + <call><name><name>buffer</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>boff</name> == 0 &amp;&amp; <name>length</name> == <call><name><name>buffer</name>.<name>array</name></name><argument_list>()</argument_list></call>.<name>length</name></expr>)</condition><then>
                <return>return <expr><call><name><name>buffer</name>.<name>array</name></name><argument_list>()</argument_list></call></expr>;</return></then>
            <else>else
                <return>return <expr><call><name><name>Arrays</name>.<name>copyOfRange</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>boff</name></expr></argument>, <argument><expr><name>boff</name> + <name>length</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
        }</block></then></if>
        <comment type="line">// else, DirectByteBuffer.get() is the fastest route</comment>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>duplicate</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>bytes</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * ByteBuffer adaptation of org.apache.commons.lang.ArrayUtils.lastIndexOf method
     *
     * @param buffer the array to traverse for looking for the object, may be &lt;code&gt;null&lt;/code&gt;
     * @param valueToFind the value to find
     * @param startIndex the start index (i.e. BB position) to travers backwards from
     * @return the last index (i.e. BB position) of the value within the array
     * [between buffer.position() and buffer.limit()]; &lt;code&gt;-1&lt;/code&gt; if not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>lastIndexOf</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></param>, <param><decl><type><name>byte</name></type> <name>valueToFind</name></decl></param>, <param><decl><type><name>int</name></type> <name>startIndex</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>buffer</name> != null</expr>;</assert>

        <if>if <condition>(<expr><name>startIndex</name> &lt; <call><name><name>buffer</name>.<name>position</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr>-1</expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>startIndex</name> &gt;= <call><name><name>buffer</name>.<name>limit</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>startIndex</name> = <call><name><name>buffer</name>.<name>limit</name></name><argument_list>()</argument_list></call> - 1</expr>;</expr_stmt>
        }</block></then></if></else></if>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>startIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= <call><name><name>buffer</name>.<name>position</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)
        <block>{
            <if>if <condition>(<expr><name>valueToFind</name> == <call><name><name>buffer</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>i</name></expr>;</return></then></if>
        }</block></for>

        <return>return <expr>-1</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Encode a String in a ByteBuffer using UTF_8.
     *
     * @param s the string to encode
     * @return the encoded string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>bytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>s</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Encode a String in a ByteBuffer using the provided charset.
     *
     * @param s the string to encode
     * @param charset the String encoding charset to use
     * @return the encoded string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>bytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>, <param><decl><type><name>Charset</name></type> <name>charset</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>s</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return a new copy of the data in @param buffer
     * USUALLY YOU SHOULD USE ByteBuffer.duplicate() INSTEAD, which creates a new Buffer
     * (so you can mutate its position without affecting the original) without copying the underlying array.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>clone</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>buffer</name> != null</expr>;</assert>

        <if>if <condition>(<expr><call><name><name>buffer</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
            <return>return <expr><name>EMPTY_BYTE_BUFFER</name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>clone</name> <init>= <expr><call><name><name>ByteBuffer</name>.<name>allocate</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>buffer</name>.<name>hasArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call> + <call><name><name>buffer</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>clone</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>clone</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clone</name>.<name>flip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>arrayCopy</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>position</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>buffer</name>.<name>hasArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call> + <name>position</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr>((<name>ByteBuffer</name>) <call><name><name>buffer</name>.<name>duplicate</name></name><argument_list>()</argument_list></call>.<call><name>position</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call>).<call><name>get</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Transfer bytes from one ByteBuffer to another.
     * This function acts as System.arrayCopy() but for ByteBuffers.
     *
     * @param src the source ByteBuffer
     * @param srcPos starting position in the source ByteBuffer
     * @param dst the destination ByteBuffer
     * @param dstPos starting position in the destination ByteBuffer
     * @param length the number of bytes to copy
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>arrayCopy</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>src</name></decl></param>, <param><decl><type><name>int</name></type> <name>srcPos</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>dst</name></decl></param>, <param><decl><type><name>int</name></type> <name>dstPos</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>src</name>.<name>hasArray</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>dst</name>.<name>hasArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>src</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>src</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call> + <name>srcPos</name></expr></argument>,
                             <argument><expr><call><name><name>dst</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>dst</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call> + <name>dstPos</name></expr></argument>,
                             <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <if>if <condition>(<expr><call><name><name>src</name>.<name>limit</name></name><argument_list>()</argument_list></call> - <name>srcPos</name> &lt; <name>length</name> || <call><name><name>dst</name>.<name>limit</name></name><argument_list>()</argument_list></call> - <name>dstPos</name> &lt; <name>length</name></expr>)</condition><then>
                <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <comment type="line">// TODO: ByteBuffer.put is polymorphic, and might be slow here</comment>
                <expr_stmt><expr><call><name><name>dst</name>.<name>put</name></name><argument_list>(<argument><expr><name>dstPos</name>++</expr></argument>, <argument><expr><call><name><name>src</name>.<name>get</name></name><argument_list>(<argument><expr><name>srcPos</name>++</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeWithLength</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// writing data bytes to output source</comment>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeWithLength</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>bytes</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name><name>buffer</name>.<name>hasArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>arrayOffset</name></name><argument_list>()</argument_list></call> + <call><name><name>buffer</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>buffer</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>buffer</name>.<name>limit</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>writeByte</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeWithShortLength</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>buffer</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr>0 &lt;= <name>length</name> &amp;&amp; <name>length</name> &lt;= <name><name>FBUtilities</name>.<name>MAX_UNSIGNED_SHORT</name></name> : <name>length</name></expr>;</assert>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>writeByte</name></name><argument_list>(<argument><expr>(<name>length</name> &gt;&gt; 8) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>writeByte</name></name><argument_list>(<argument><expr><name>length</name> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// writing data bytes to output source</comment>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>readWithLength</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>length</name> &lt; 0</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Corrupt (negative) value length encountered"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <return>return <expr><call><name><name>ByteBufferUtil</name>.<name>read</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/* @return An unsigned short in an integer. */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>readShortLength</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr>(<call><name><name>in</name>.<name>readByte</name></name><argument_list>()</argument_list></call> &amp; 0xFF) &lt;&lt; 8</expr></init></decl>;</decl_stmt>
        <return>return <expr><name>length</name> | (<call><name><name>in</name>.<name>readByte</name></name><argument_list>()</argument_list></call> &amp; 0xFF)</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param in data input
     * @return An unsigned short in an integer.
     * @throws IOException if an I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>readWithShortLength</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>ByteBufferUtil</name>.<name>read</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><call><name>readShortLength</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param in data input
     * @return null
     * @throws IOException if an I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>skipShortLength</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><call><name>readShortLength</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>FileUtils</name>.<name>skipBytesFully</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>read</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>in</name> instanceof <name>FileDataInput</name></expr>)</condition><then>
            <return>return <expr>((<name>FileDataInput</name>) <name>in</name>).<call><name>readBytes</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buff</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>in</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a byte buffer to an integer.
     * Does not change the byte buffer position.
     *
     * @param bytes byte buffer to convert to integer
     * @return int representation of the byte buffer
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>toInt</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>bytes</name>.<name>getInt</name></name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>toLong</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>bytes</name>.<name>getLong</name></name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>float</name></type> <name>toFloat</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>bytes</name>.<name>getFloat</name></name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>toDouble</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>bytes</name>.<name>getDouble</name></name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>bytes</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ByteBuffer</name>.<name>allocate</name></name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call>.<call><name>putInt</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>bytes</name><parameter_list>(<param><decl><type><name>long</name></type> <name>n</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ByteBuffer</name>.<name>allocate</name></name><argument_list>(<argument><expr>8</expr></argument>)</argument_list></call>.<call><name>putLong</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>bytes</name><parameter_list>(<param><decl><type><name>float</name></type> <name>f</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ByteBuffer</name>.<name>allocate</name></name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call>.<call><name>putFloat</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>bytes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ByteBuffer</name>.<name>allocate</name></name><argument_list>(<argument><expr>8</expr></argument>)</argument_list></call>.<call><name>putDouble</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InputStream</name></type> <name>inputStream</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ByteBuffer</name></type> <name>copy</name> <init>= <expr><call><name><name>bytes</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr>new <class><super><name>InputStream</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
            <block>{
                <if>if <condition>(<expr>!<call><name><name>copy</name>.<name>hasRemaining</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <return>return <expr>-1</expr>;</return></then></if>

                <return>return <expr><call><name><name>copy</name>.<name>get</name></name><argument_list>()</argument_list></call> &amp; 0xFF</expr>;</return>
            }</block></function>

            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>, <param><decl><type><name>int</name></type> <name>off</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
            <block>{
                <if>if <condition>(<expr>!<call><name><name>copy</name>.<name>hasRemaining</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <return>return <expr>-1</expr>;</return></then></if>

                <expr_stmt><expr><name>len</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><call><name><name>copy</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>copy</name>.<name>get</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>len</name></expr>;</return>
            }</block></function>

            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>int</name></type> <name>available</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
            <block>{
                <return>return <expr><call><name><name>copy</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>bytesToHex</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name> <init>= <expr><call><name><name>bytes</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> <init>= <expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>c</name> <init>= <expr>new <name><name>char</name><index>[<expr><name>size</name> * 2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bint</name> <init>= <expr><call><name><name>bytes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name>+<name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name> * 2</expr>]</index></name> = <name><name>Hex</name>.<name>byteToChar</name><index>[<expr>(<name>bint</name> &amp; 0xf0) &gt;&gt; 4</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><index>[<expr>1 + <name>i</name> * 2</expr>]</index></name> = <name><name>Hex</name>.<name>byteToChar</name><index>[<expr><name>bint</name> &amp; 0x0f</expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>Hex</name>.<name>wrapCharArray</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>hexToBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>Hex</name>.<name>hexToBytes</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Compare two ByteBuffer at specified offsets for length.
     * Compares the non equal bytes as unsigned.
     * @param bytes1 First byte buffer to compare.
     * @param offset1 Position to start the comparison at in the first array.
     * @param bytes2 Second byte buffer to compare.
     * @param offset2 Position to start the comparison at in the second array.
     * @param length How many bytes to compare?
     * @return -1 if byte1 is less than byte2, 1 if byte2 is less than byte1 or 0 if equal.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>compareSubArrays</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes1</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>bytes2</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset2</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>( <expr>null == <name>bytes1</name></expr> )</condition><then>
        <block>{
            <if>if <condition>( <expr>null == <name>bytes2</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then>
            <else>else <return>return <expr>-1</expr>;</return></else></if>
        }</block></then></if>
        <if>if <condition>(<expr>null == <name>bytes2</name></expr> )</condition><then> <return>return <expr>1</expr>;</return></then></if>

        <assert>assert <expr><call><name><name>bytes1</name>.<name>limit</name></name><argument_list>()</argument_list></call> &gt;= <name>offset1</name> + <name>length</name> : "The first byte array isn't long enough for the specified offset and length."</expr>;</assert>
        <assert>assert <expr><call><name><name>bytes2</name>.<name>limit</name></name><argument_list>()</argument_list></call> &gt;= <name>offset2</name> + <name>length</name> : "The second byte array isn't long enough for the specified offset and length."</expr>;</assert>
        <for>for ( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )
        <block>{
            <decl_stmt><decl><type><name>byte</name></type> <name>byte1</name> <init>= <expr><call><name><name>bytes1</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset1</name> + <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name></type> <name>byte2</name> <init>= <expr><call><name><name>bytes2</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset2</name> + <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>( <expr><name>byte1</name> == <name>byte2</name></expr> )</condition><then>
                <continue>continue;</continue></then></if>
            <comment type="line">// compare non-equal bytes as unsigned</comment>
            <return>return <expr>(<name>byte1</name> &amp; 0xFF) &lt; (<name>byte2</name> &amp; 0xFF) ? -1 : 1</expr>;</return>
        }</block></for>
        <return>return <expr>0</expr>;</return>
    }</block></function>
}</block></class>
</unit>
