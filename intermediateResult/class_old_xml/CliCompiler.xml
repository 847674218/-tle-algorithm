<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\cli\CliCompiler.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cli</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>antlr</name>.<name>runtime</name>.<name>ANTLRStringStream</name></name>;</import>
<import>import <name><name>org</name>.<name>antlr</name>.<name>runtime</name>.<name>CharStream</name></name>;</import>
<import>import <name><name>org</name>.<name>antlr</name>.<name>runtime</name>.<name>CommonTokenStream</name></name>;</import>
<import>import <name><name>org</name>.<name>antlr</name>.<name>runtime</name>.<name>tree</name>.<name>Tree</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CfDef</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>KsDef</name></name>;</import>


<class><specifier>public</specifier> class <name>CliCompiler</name>
<block>{

    <comment type="line">// ANTLR does not provide case-insensitive tokenization support</comment>
    <comment type="line">// out of the box. So we override the LA (lookahead) function</comment>
    <comment type="line">// of the ANTLRStringStream class. Note: This doesn't change the</comment>
    <comment type="line">// token text-- but just relaxes the matching rules to match</comment>
    <comment type="line">// in upper case. [Logic borrowed from Hive code.]</comment>
    <comment type="line">//</comment>
    <comment type="line">// Also see discussion on this topic in:</comment>
    <comment type="line">// http://www.antlr.org/wiki/pages/viewpage.action?pageId=1782.</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ANTLRNoCaseStringStream</name>  <super><extends>extends <name>ANTLRStringStream</name></extends></super>
    <block>{
        <constructor><specifier>public</specifier> <name>ANTLRNoCaseStringStream</name><parameter_list>(<param><decl><type><name>String</name></type> <name>input</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>LA</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>returnChar</name> <init>= <expr><call><name><name>super</name>.<name>LA</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>returnChar</name> == <name><name>CharStream</name>.<name>EOF</name></name></expr>)</condition><then>
            <block>{
                <return>return <expr><name>returnChar</name></expr>;</return>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>returnChar</name> == 0</expr>)</condition><then>
            <block>{
                <return>return <expr><name>returnChar</name></expr>;</return>
            }</block></then></if></else></if>

            <return>return <expr><call><name><name>Character</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr>(<name>char</name>)<name>returnChar</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Tree</name></type> <name>compileQuery</name><parameter_list>(<param><decl><type><name>String</name></type> <name>query</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Tree</name></type> <name>queryTree</name></decl>;</decl_stmt>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>ANTLRStringStream</name></type> <name>input</name> <init>= <expr>new <call><name>ANTLRNoCaseStringStream</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>CliLexer</name></type> <name>lexer</name> <init>= <expr>new <call><name>CliLexer</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CommonTokenStream</name></type> <name>tokens</name> <init>= <expr>new <call><name>CommonTokenStream</name><argument_list>(<argument><expr><name>lexer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>CliParser</name></type> <name>parser</name> <init>= <expr>new <call><name>CliParser</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// start parsing...</comment>
            <expr_stmt><expr><name>queryTree</name> = <call>(<name>Tree</name>)<argument_list>(<argument><expr><call><name><name>parser</name>.<name>root</name></name><argument_list>()</argument_list></call>.<call><name>getTree</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// semantic analysis if any...</comment>
            <comment type="line">//  [tbd]</comment>

        }</block>
        <catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// if there was an exception we don't want to process request any further</comment>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <return>return <expr><name>queryTree</name></expr>;</return>
    }</block></function>
    <comment type="block">/*
     * NODE_COLUMN_ACCESS related functions.
     */</comment>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getColumnFamily</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>astNode</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>CfDef</name></argument>&gt;</argument_list></name></type> <name>cfDefs</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getColumnFamily</name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>astNode</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfDefs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getColumnFamily</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>CfDef</name></argument>&gt;</argument_list></name></type> <name>cfDefs</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>lastMatchedName</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>CfDef</name></type> <name>cfDef</name> <range>: <expr><name>cfDefs</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>cfDef</name>.<name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <return>return <expr><name>cfName</name></expr>;</return>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>cfDef</name>.<name>name</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>cfName</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>lastMatchedName</name> = <name><name>cfDef</name>.<name>name</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>matches</name>++</expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></for>

        <if>if <condition>(<expr><name>matches</name> &gt; 1 || <name>matches</name> == 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>cfName</name> + " not found in current keyspace."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <return>return <expr><name>lastMatchedName</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getKeySpace</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>KsDef</name></argument>&gt;</argument_list></name></type> <name>keyspaces</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getKeySpace</name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspaces</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getKeySpace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>KsDef</name></argument>&gt;</argument_list></name></type> <name>keyspaces</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>lastMatchedName</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>KsDef</name></type> <name>ksDef</name> <range>: <expr><name>keyspaces</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>ksDef</name>.<name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <return>return <expr><name>ksName</name></expr>;</return>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>ksDef</name>.<name>name</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>ksName</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>lastMatchedName</name> = <name><name>ksDef</name>.<name>name</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>matches</name>++</expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></for>

        <if>if <condition>(<expr><name>matches</name> &gt; 1 || <name>matches</name> == 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Keyspace '" + <name>ksName</name> + "' not found."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <return>return <expr><name>lastMatchedName</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getKey</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>astNode</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>astNode</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>numColumnSpecifiers</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>astNode</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Skip over table, column family and rowKey</comment>
        <return>return <expr><call><name><name>astNode</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> - 2</expr>;</return>
    }</block></function>

    <comment type="line">// Returns the pos'th (0-based index) column specifier in the astNode</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getColumn</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>astNode</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Skip over table, column family and rowKey</comment>
        <return>return <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>astNode</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>pos</name> + 2</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
