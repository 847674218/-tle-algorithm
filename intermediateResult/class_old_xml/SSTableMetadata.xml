<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\sstable\SSTableMetadata.java"><comment type="block">/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>commitlog</name>.<name>ReplayPosition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>EstimatedHistogram</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Metadata for a SSTable.
 * Metadata includes:
 *  - estimated row size histogram
 *  - estimated column count histogram
 *  - replay position
 *  - max column timestamp
 *  - compression ratio
 *  - partitioner
 *  - generations of sstables from which this sstable was compacted, if any
 *
 * An SSTableMetadata should be instantiated via the Collector, openFromDescriptor()
 * or createDefaultInstance()
 */</comment>
<class><specifier>public</specifier> class <name>SSTableMetadata</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>SSTableMetadata</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SSTableMetadataSerializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>SSTableMetadataSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>EstimatedHistogram</name></type> <name>estimatedRowSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>EstimatedHistogram</name></type> <name>estimatedColumnCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ReplayPosition</name></type> <name>replayPosition</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>maxTimestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>double</name></type> <name>compressionRatio</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>partitioner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>ancestors</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>SSTableMetadata</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name>defaultRowSizeHistogram</name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><call><name>defaultColumnCountHistogram</name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><name><name>ReplayPosition</name>.<name>NONE</name></name></expr></argument>,
             <argument><expr><name><name>Long</name>.<name>MAX_VALUE</name></name></expr></argument>,
             <argument><expr><name><name>Double</name>.<name>MIN_VALUE</name></name></expr></argument>,
             <argument><expr>null</expr></argument>,
             <argument><expr><name><name>Collections</name>.</name>&lt;<name>Integer</name>&gt;<call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>SSTableMetadata</name><parameter_list>(<param><decl><type><name>EstimatedHistogram</name></type> <name>rowSizes</name></decl></param>, <param><decl><type><name>EstimatedHistogram</name></type> <name>columnCounts</name></decl></param>, <param><decl><type><name>ReplayPosition</name></type> <name>replayPosition</name></decl></param>, <param><decl><type><name>long</name></type> <name>maxTimestamp</name></decl></param>, <param><decl><type><name>double</name></type> <name>cr</name></decl></param>, <param><decl><type><name>String</name></type> <name>partitioner</name></decl></param>, <param><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>ancestors</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>estimatedRowSize</name></name> = <name>rowSizes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>estimatedColumnCount</name></name> = <name>columnCounts</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>replayPosition</name></name> = <name>replayPosition</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxTimestamp</name></name> = <name>maxTimestamp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>compressionRatio</name></name> = <name>cr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>partitioner</name></name> = <name>partitioner</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>ancestors</name></name> = <name>ancestors</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableMetadata</name></type> <name>createDefaultInstance</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>SSTableMetadata</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Collector</name></type> <name>createCollector</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>Collector</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>static</specifier> <name>EstimatedHistogram</name></type> <name>defaultColumnCountHistogram</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// EH of 114 can track a max value of 2395318855, i.e., &gt; 2B columns</comment>
        <return>return <expr>new <call><name>EstimatedHistogram</name><argument_list>(<argument><expr>114</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>static</specifier> <name>EstimatedHistogram</name></type> <name>defaultRowSizeHistogram</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// EH of 150 can track a max value of 1697806495183, i.e., &gt; 1.5PB</comment>
        <return>return <expr>new <call><name>EstimatedHistogram</name><argument_list>(<argument><expr>150</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Collector</name>
    <block>{
        <decl_stmt><decl><type><specifier>protected</specifier> <name>EstimatedHistogram</name></type> <name>estimatedRowSize</name> <init>= <expr><call><name>defaultRowSizeHistogram</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>EstimatedHistogram</name></type> <name>estimatedColumnCount</name> <init>= <expr><call><name>defaultColumnCountHistogram</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>ReplayPosition</name></type> <name>replayPosition</name> <init>= <expr><name><name>ReplayPosition</name>.<name>NONE</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>maxTimestamp</name> <init>= <expr><name><name>Long</name>.<name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>compressionRatio</name> <init>= <expr><name><name>Double</name>.<name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>ancestors</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>addRowSize</name><parameter_list>(<param><decl><type><name>long</name></type> <name>rowSize</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>estimatedRowSize</name>.<name>add</name></name><argument_list>(<argument><expr><name>rowSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumnCount</name><parameter_list>(<param><decl><type><name>long</name></type> <name>columnCount</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>estimatedColumnCount</name>.<name>add</name></name><argument_list>(<argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Ratio is compressed/uncompressed and it is
         * if you have 1.x then compression isn't helping
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addCompressionRatio</name><parameter_list>(<param><decl><type><name>long</name></type> <name>compressed</name></decl></param>, <param><decl><type><name>long</name></type> <name>uncompressed</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name>compressionRatio</name> = (<name>double</name>) <name>compressed</name>/<name>uncompressed</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>updateMaxTimestamp</name><parameter_list>(<param><decl><type><name>long</name></type> <name>potentialMax</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name>maxTimestamp</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxTimestamp</name></expr></argument>, <argument><expr><name>potentialMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>SSTableMetadata</name></type> <name>finalizeMetadata</name><parameter_list>(<param><decl><type><name>String</name></type> <name>partitioner</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>SSTableMetadata</name><argument_list>(<argument><expr><name>estimatedRowSize</name></expr></argument>,
                                       <argument><expr><name>estimatedColumnCount</name></expr></argument>,
                                       <argument><expr><name>replayPosition</name></expr></argument>,
                                       <argument><expr><name>maxTimestamp</name></expr></argument>,
                                       <argument><expr><name>compressionRatio</name></expr></argument>,
                                       <argument><expr><name>partitioner</name></expr></argument>,
                                       <argument><expr><name>ancestors</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Collector</name></type> <name>estimatedRowSize</name><parameter_list>(<param><decl><type><name>EstimatedHistogram</name></type> <name>estimatedRowSize</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>estimatedRowSize</name></name> = <name>estimatedRowSize</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Collector</name></type> <name>estimatedColumnCount</name><parameter_list>(<param><decl><type><name>EstimatedHistogram</name></type> <name>estimatedColumnCount</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>estimatedColumnCount</name></name> = <name>estimatedColumnCount</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Collector</name></type> <name>replayPosition</name><parameter_list>(<param><decl><type><name>ReplayPosition</name></type> <name>replayPosition</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>replayPosition</name></name> = <name>replayPosition</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Collector</name></type> <name>addAncestor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>generation</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>ancestors</name>.<name>add</name></name><argument_list>(<argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SSTableMetadataSerializer</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>SSTableMetadataSerializer</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>SSTableMetadata</name></type> <name>sstableStats</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <assert>assert <expr><name><name>sstableStats</name>.<name>partitioner</name></name> != null</expr>;</assert>

            <expr_stmt><expr><call><name><name>EstimatedHistogram</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>sstableStats</name>.<name>estimatedRowSize</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>EstimatedHistogram</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>sstableStats</name>.<name>estimatedColumnCount</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ReplayPosition</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name><name>sstableStats</name>.<name>replayPosition</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeLong</name></name><argument_list>(<argument><expr><name><name>sstableStats</name>.<name>maxTimestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeDouble</name></name><argument_list>(<argument><expr><name><name>sstableStats</name>.<name>compressionRatio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><name><name>sstableStats</name>.<name>partitioner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>sstableStats</name>.<name>ancestors</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>Integer</name></type> <name>g</name> <range>: <expr><name><name>sstableStats</name>.<name>ancestors</name></name></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></function>

        <function><type><specifier>public</specifier> <name>SSTableMetadata</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Load metadata for {}"</expr></argument>, <argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>statsFile</name> <init>= <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name>.<name>filenameFor</name></name><argument_list>(<argument><expr><name><name>SSTable</name>.<name>COMPONENT_STATS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>statsFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"No sstable stats for {}"</expr></argument>, <argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>new <call><name>SSTableMetadata</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name>DataInputStream</name></type> <name>dis</name> <init>= <expr>new <call><name>DataInputStream</name><argument_list>(<argument><expr>new <call><name>BufferedInputStream</name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>statsFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <return>return <expr><call><name>deserialize</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <finally>finally
            <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>SSTableMetadata</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInputStream</name></type> <name>dis</name></decl></param>, <param><decl><type><name>Descriptor</name></type> <name>desc</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>EstimatedHistogram</name></type> <name>rowSizes</name> <init>= <expr><call><name><name>EstimatedHistogram</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>EstimatedHistogram</name></type> <name>columnCounts</name> <init>= <expr><call><name><name>EstimatedHistogram</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ReplayPosition</name></type> <name>replayPosition</name> <init>= <expr><name><name>desc</name>.<name>metadataIncludesReplayPosition</name></name>
                                          ? <call><name><name>ReplayPosition</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call>
                                          : <name><name>ReplayPosition</name>.<name>NONE</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name><name>desc</name>.<name>metadataIncludesModernReplayPosition</name></name></expr>)</condition><then>
            <block>{
                <comment type="line">// replay position may be "from the future" thanks to older versions generating them with nanotime.</comment>
                <comment type="line">// make sure we don't omit replaying something that we should.  see CASSANDRA-4782</comment>
                <expr_stmt><expr><name>replayPosition</name> = <name><name>ReplayPosition</name>.<name>NONE</name></name></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>long</name></type> <name>maxTimestamp</name> <init>= <expr><call><name><name>desc</name>.<name>containsTimestamp</name></name><argument_list>()</argument_list></call> ? <call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call> : <name><name>Long</name>.<name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name><name>desc</name>.<name>tracksMaxTimestamp</name></name></expr>)</condition><then> <comment type="line">// see javadoc to Descriptor.containsTimestamp</comment>
                <expr_stmt><expr><name>maxTimestamp</name> = <name><name>Long</name>.<name>MAX_VALUE</name></name></expr>;</expr_stmt></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>compressionRatio</name> <init>= <expr><name><name>desc</name>.<name>hasCompressionRatio</name></name>
                                    ? <call><name><name>dis</name>.<name>readDouble</name></name><argument_list>()</argument_list></call>
                                    : <name><name>Double</name>.<name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>partitioner</name> <init>= <expr><name><name>desc</name>.<name>hasPartitioner</name></name> ? <call><name><name>dis</name>.<name>readUTF</name></name><argument_list>()</argument_list></call> : null</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nbAncestors</name> <init>= <expr><name><name>desc</name>.<name>hasAncestors</name></name> ? <call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call> : 0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>ancestors</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nbAncestors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>nbAncestors</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <expr_stmt><expr><call><name><name>ancestors</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            <return>return <expr>new <call><name>SSTableMetadata</name><argument_list>(<argument><expr><name>rowSizes</name></expr></argument>, <argument><expr><name>columnCounts</name></expr></argument>, <argument><expr><name>replayPosition</name></expr></argument>, <argument><expr><name>maxTimestamp</name></expr></argument>, <argument><expr><name>compressionRatio</name></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
