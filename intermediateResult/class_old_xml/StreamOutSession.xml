<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\streaming\StreamOutSession.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>streaming</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ConcurrentMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicInteger</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>cliffc</name>.<name>high_scale_lib</name>.<name>NonBlockingHashMap</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class manages the streaming of multiple files one after the other.
 */</comment>
<class><specifier>public</specifier> class <name>StreamOutSession</name> <super><extends>extends <name>AbstractStreamSession</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>StreamOutSession</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// one host may have multiple stream sessions.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ConcurrentMap</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>, <argument><name>StreamOutSession</name></argument>&gt;</argument_list></name></type> <name>streams</name> <init>= <expr>new <call><name><name>NonBlockingHashMap</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>, <argument><name>StreamOutSession</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>AtomicInteger</name></type> <name>sessionIdCounter</name> <init>= <expr>new <call><name>AtomicInteger</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The next session id is a combination of a local integer counter and a flag used to avoid collisions
     * between session id's generated on different machines. Nodes can may have StreamOutSessions with the
     * following contexts:
     *
     * &lt;1.1.1.1, (stream_in_flag, 6)&gt;
     * &lt;1.1.1.1, (stream_out_flag, 6)&gt;
     *
     * The first is an out stream created in response to a request from node 1.1.1.1. The  id (6) was created by
     * the requesting node. The second is an out stream created by this node to push to 1.1.1.1. The  id (6) was
     * created by this node.
     * @return next StreamOutSession sessionId
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>nextSessionId</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>(((<name>long</name>)<name><name>StreamHeader</name>.<name>STREAM_OUT_SOURCE_FLAG</name></name> &lt;&lt; 32) + <call><name><name>sessionIdCounter</name>.<name>incrementAndGet</name></name><argument_list>()</argument_list></call>)</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StreamOutSession</name></type> <name>create</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>host</name></decl></param>, <param><decl><type><name>IStreamCallback</name></type> <name>callback</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>nextSessionId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StreamOutSession</name></type> <name>create</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>host</name></decl></param>, <param><decl><type><name>long</name></type> <name>sessionId</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>sessionId</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StreamOutSession</name></type> <name>create</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>host</name></decl></param>, <param><decl><type><name>long</name></type> <name>sessionId</name></decl></param>, <param><decl><type><name>IStreamCallback</name></type> <name>callback</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>context</name> <init>= <expr>new <call><name><name>Pair</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>sessionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StreamOutSession</name></type> <name>session</name> <init>= <expr>new <call><name>StreamOutSession</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>streams</name>.<name>put</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>session</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StreamOutSession</name></type> <name>get</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>host</name></decl></param>, <param><decl><type><name>long</name></type> <name>sessionId</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>streams</name>.<name>get</name></name><argument_list>(<argument><expr>new <call><name><name>Pair</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>sessionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>PendingFile</name></argument>&gt;</argument_list></name></type> <name>files</name> <init>= <expr>new <call><name><name>NonBlockingHashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>PendingFile</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>String</name></type> <name>currentFile</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>StreamOutSession</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>context</name></decl></param>, <param><decl><type><name>IStreamCallback</name></type> <name>callback</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFilesToStream</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>PendingFile</name></argument>&gt;</argument_list></name></type> <name>pendingFiles</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>PendingFile</name></type> <name>pendingFile</name> <range>: <expr><name>pendingFiles</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Adding file {} to be streamed."</expr></argument>, <argument><expr><call><name><name>pendingFile</name>.<name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name>files</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>pendingFile</name>.<name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pendingFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>retry</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>streamFile</name><argument_list>(<argument><expr><call><name><name>files</name>.<name>get</name></name><argument_list>(<argument><expr><name>currentFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>streamFile</name><parameter_list>(<param><decl><type><name>PendingFile</name></type> <name>pf</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Streaming {} ..."</expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>currentFile</name> = <call><name><name>pf</name>.<name>getFilename</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>stream</name><argument_list>(<argument><expr>new <call><name>StreamHeader</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><call><name>getSessionId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>startNext</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <assert>assert <expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>currentFile</name></expr></argument>)</argument_list></call></expr>;</assert>
        <expr_stmt><expr><call><name><name>files</name>.<name>get</name></name><argument_list>(<argument><expr><name>currentFile</name></expr></argument>)</argument_list></call>.<call><name><name>sstable</name>.<name>releaseReference</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>files</name>.<name>remove</name></name><argument_list>(<argument><expr><name>currentFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>PendingFile</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>files</name>.<name>values</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>streamFile</name><argument_list>(<argument><expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>closeInternal</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>success</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Release reference on last file (or any uncompleted ones)</comment>
        <for>for (<init><decl><type><name>PendingFile</name></type> <name>file</name> <range>: <expr><call><name><name>files</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>file</name>.<name>sstable</name>.<name>releaseReference</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
        <expr_stmt><expr><call><name><name>streams</name>.<name>remove</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/** convenience method for use when testing */</comment>
    <function><type><name>void</name></type> <name>await</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{
        <while>while <condition>(<expr><call><name><name>streams</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition>
            <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>PendingFile</name></argument>&gt;</argument_list></name></type> <name>getFiles</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>files</name>.<name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>getDestinations</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>hosts</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>StreamOutSession</name></type> <name>session</name> <range>: <expr><call><name><name>streams</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>hosts</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>session</name>.<name>getHost</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>hosts</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>PendingFile</name></argument>&gt;</argument_list></name></type> <name>getOutgoingFiles</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>host</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>PendingFile</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>PendingFile</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>, <argument><name>StreamOutSession</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>streams</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name><name>left</name>.<name>equals</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>list</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>getFiles</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>
        <return>return <expr><name>list</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateCurrentFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>file</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>file</name>.<name>equals</name></name><argument_list>(<argument><expr><name>currentFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"target reports current file is %s but is %s"</expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>currentFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>begin</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>PendingFile</name></type> <name>first</name> <init>= <expr><call><name><name>files</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? null : <call><name><name>files</name>.<name>values</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>currentFile</name> = <name>first</name> == null ? null : <call><name><name>first</name>.<name>getFilename</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StreamHeader</name></type> <name>header</name> <init>= <expr>new <call><name>StreamHeader</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><call><name>getSessionId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><call><name><name>files</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Streaming to {}"</expr></argument>, <argument><expr><call><name>getHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Files are {}"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><call><name><name>files</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>","</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>stream</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><call><name>getHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
