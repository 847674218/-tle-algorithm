<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\DecoratedKey.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Token</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a decorated key, handy for certain operations
 * where just working with strings gets slow.
 *
 * We do a lot of sorting of DecoratedKeys, so for speed, we assume that tokens correspond one-to-one with keys.
 * This is not quite correct in the case of RandomPartitioner (which uses MD5 to hash keys to tokens);
 * if this matters, you can subclass RP to use a stronger hash, or use a non-lossy tokenization scheme (as in the
 * OrderPreservingPartitioner classes).
 */</comment>
<class><specifier>public</specifier> class <name><name>DecoratedKey</name><argument_list>&lt;<argument><name>T</name> <extends>extends <name>Token</name></extends></argument>&gt;</argument_list></name> <super><extends>extends <name>RowPosition</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IPartitioner</name></type> <name>partitioner</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr>new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>DecoratedKey</name></type> <name>o1</name></decl></param>, <param><decl><type><name>DecoratedKey</name></type> <name>o2</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>o1</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T</name></type> <name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>key</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DecoratedKey</name><parameter_list>(<param><decl><type><name>T</name></type> <name>token</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>token</name> != null &amp;&amp; <name>key</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>token</name></name> = <name>token</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>key</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return> <comment type="line">// hash of key is enough</comment>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>obj</name></expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then></if>
        <if>if <condition>(<expr><name>obj</name> == null || <call><name><name>this</name>.<name>getClass</name></name><argument_list>()</argument_list></call> != <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>

        <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>other</name> <init>= <expr>(<name>DecoratedKey</name>)<name>obj</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>ByteBufferUtil</name>.<name>compareUnsigned</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>other</name>.<name>key</name></name></expr></argument>)</argument_list></call> == 0</expr>;</return> <comment type="line">// we compare faster than BB.equals for array backed BB</comment>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>RowPosition</name></type> <name>pos</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>pos</name></expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then></if>

        <comment type="line">// delegate to Token.KeyBound if needed</comment>
        <if>if <condition>(<expr>!(<name>pos</name> instanceof <name>DecoratedKey</name>)</expr>)</condition><then>
            <return>return <expr>-<call><name><name>pos</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

        <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>otherKey</name> <init>= <expr>(<name>DecoratedKey</name>) <name>pos</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>token</name>.<name>compareTo</name></name><argument_list>(<argument><expr><call><name><name>otherKey</name>.<name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>cmp</name> == 0 ? <call><name><name>ByteBufferUtil</name>.<name>compareUnsigned</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>otherKey</name>.<name>key</name></name></expr></argument>)</argument_list></call> : <name>cmp</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMinimum</name><parameter_list>(<param><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// A DecoratedKey can never be the minimum position on the ring</comment>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>RowPosition</name>.<name>Kind</name></name></type> <name>kind</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>RowPosition</name>.<name>Kind</name>.<name>ROW_KEY</name></name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>keystring</name> <init>= <expr><name>key</name> == null ? "null" : <call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>"DecoratedKey(" + <name>token</name> + ", " + <name>keystring</name> + ")"</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>T</name></type> <name>getToken</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>token</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
