<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\cache\SerializingCacheProvider.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOError</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamily</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DBConstants</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISerializer</name></name>;</import>

<class><specifier>public</specifier> class <name>SerializingCacheProvider</name> <super><implements>implements <name>IRowCacheProvider</name></implements></super>
<block>{
    <function><type><specifier>public</specifier> <name><name>ICache</name><argument_list>&lt;<argument><name>RowCacheKey</name></argument>, <argument><name>IRowCacheEntry</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>(<param><decl><type><name>long</name></type> <name>capacity</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useMemoryWeigher</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name><name>SerializingCache</name><argument_list>&lt;<argument><name>RowCacheKey</name></argument>, <argument><name>IRowCacheEntry</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>useMemoryWeigher</name></expr></argument>, <argument><expr>new <call><name>RowCacheSerializer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>RowCacheSerializer</name> <super><implements>implements <name><name>ISerializer</name><argument_list>&lt;<argument><name>IRowCacheEntry</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>IRowCacheEntry</name></type> <name>cf</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>)</parameter_list>
        <block>{
            <assert>assert <expr><name>cf</name> != null</expr>;</assert> <comment type="line">// unlike CFS we don't support nulls, since there is no need for that in the cache</comment>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>writeBoolean</name></name><argument_list>(<argument><expr><name>cf</name> instanceof <name>RowCacheSentinel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>cf</name> instanceof <name>RowCacheSentinel</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>out</name>.<name>writeLong</name></name><argument_list>(<argument><expr>((<name>RowCacheSentinel</name>) <name>cf</name>).<name>sentinelId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else>else
                    <expr_stmt><expr><call><name><name>ColumnFamily</name>.<name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr>(<name>ColumnFamily</name>) <name>cf</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>IRowCacheEntry</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>isSentinel</name> <init>= <expr><call><name><name>in</name>.<name>readBoolean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>isSentinel</name></expr>)</condition><then>
                <return>return <expr>new <call><name>RowCacheSentinel</name><argument_list>(<argument><expr><call><name><name>in</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
            <return>return <expr><call><name><name>ColumnFamily</name>.<name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>IRowCacheEntry</name></type> <name>cf</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><name><name>DBConstants</name>.<name>boolSize</name></name>
                   + (<name>cf</name> instanceof <name>RowCacheSentinel</name>
                      ? <name><name>DBConstants</name>.<name>intSize</name></name> + <name><name>DBConstants</name>.<name>longSize</name></name>
                      : <call><name><name>ColumnFamily</name>.<name>serializer</name></name><argument_list>()</argument_list></call>.<call><name>serializedSize</name><argument_list>(<argument><expr>(<name>ColumnFamily</name>) <name>cf</name></expr></argument>)</argument_list></call>)</expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
