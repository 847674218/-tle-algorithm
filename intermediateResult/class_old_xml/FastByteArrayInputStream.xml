<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\util\FastByteArrayInputStream.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>

<comment type="block">/*
 * This file has been modified from Apache Harmony's ByteArrayInputStream
 * implementation. The synchronized methods of the original have been
 * replaced by non-synchronized methods. This makes this certain operations
 * FASTer, but also *not thread-safe*.
 *
 * This file remains formatted the same as the Apache Harmony original to
 * make patching easier if any bug fixes are made to the Harmony version.
 */</comment>

<comment type="block" format="javadoc">/**
 * A specialized {@link InputStream } for reading the contents of a byte array.
 *
 * @see ByteArrayInputStream
 */</comment>
<class><specifier>public</specifier> class <name>FastByteArrayInputStream</name> <super><extends>extends <name>InputStream</name></extends></super> <block>{
    <comment type="block" format="javadoc">/**
     * The {@code byte} array containing the bytes to stream over.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>byte</name><index>[]</index></type> <name>buf</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The current position within the byte array.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>pos</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The current mark position. Initially set to 0 or the &lt;code&gt;offset&lt;/code&gt;
     * parameter within the constructor.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>mark</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The total number of bytes initially available in the byte array
     * {@code buf}.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>count</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructs a new {@code ByteArrayInputStream} on the byte array
     * {@code buf}.
     *
     * @param buf
     *            the byte array to stream over.
     */</comment>
    <constructor><specifier>public</specifier> <name>FastByteArrayInputStream</name><parameter_list>(<param><decl><type><name>byte</name></type> <name><name>buf</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>mark</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>buf</name></name> = <name>buf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>count</name></name> = <name><name>buf</name>.<name>length</name></name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new {@code ByteArrayInputStream} on the byte array
     * {@code buf} with the initial position set to {@code offset} and the
     * number of bytes available set to {@code offset} + {@code length}.
     *
     * @param buf
     *            the byte array to stream over.
     * @param offset
     *            the initial position in {@code buf} to start streaming from.
     * @param length
     *            the number of bytes available for streaming.
     */</comment>
    <constructor><specifier>public</specifier> <name>FastByteArrayInputStream</name><parameter_list>(<param><decl><type><name>byte</name></type> <name><name>buf</name><index>[]</index></name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>buf</name></name> = <name>buf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> = <name>offset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mark</name> = <name>offset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name> = <name>offset</name> + <name>length</name> &gt; <name><name>buf</name>.<name>length</name></name> ? <name><name>buf</name>.<name>length</name></name> : <name>offset</name> + <name>length</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns the number of bytes that are available before this stream will
     * block. This method returns the number of bytes yet to be read from the
     * source byte array.
     *
     * @return the number of bytes available before blocking.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>available</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>count</name> - <name>pos</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Closes this stream and frees resources associated with this stream.
     *
     * @throws IOException
     *             if an I/O error occurs while closing this stream.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// Do nothing on close, this matches JDK behaviour.</comment>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Sets a mark position in this ByteArrayInputStream. The parameter
     * {@code readlimit} is ignored. Sending {@code reset()} will reposition the
     * stream back to the marked position.
     *
     * @param readlimit
     *            ignored.
     * @see #markSupported()
     * @see #reset()
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>mark</name><parameter_list>(<param><decl><type><name>int</name></type> <name>readlimit</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mark</name> = <name>pos</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Indicates whether this stream supports the {@code mark()} and
     * {@code reset()} methods. Returns {@code true} since this class supports
     * these methods.
     *
     * @return always {@code true}.
     * @see #mark(int)
     * @see #reset()
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>markSupported</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads a single byte from the source byte array and returns it as an
     * integer in the range from 0 to 255. Returns -1 if the end of the source
     * array has been reached.
     *
     * @return the byte read or -1 if the end of this stream has been reached.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>pos</name> &lt; <name>count</name> ? <name><name>buf</name><index>[<expr><name>pos</name>++</expr>]</index></name> &amp; 0xFF : -1</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads at most {@code len} bytes from this stream and stores
     * them in byte array {@code b} starting at {@code offset}. This
     * implementation reads bytes from the source byte array.
     *
     * @param b
     *            the byte array in which to store the bytes read.
     * @param offset
     *            the initial position in {@code b} to store the bytes read from
     *            this stream.
     * @param length
     *            the maximum number of bytes to store in {@code b}.
     * @return the number of bytes actually read or -1 if no bytes were read and
     *         the end of the stream was encountered.
     * @throws IndexOutOfBoundsException
     *             if {@code offset &lt; 0} or {@code length &lt; 0}, or if
     *             {@code offset + length} is greater than the size of
     *             {@code b}.
     * @throws NullPointerException
     *             if {@code b} is {@code null}.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<param><decl><type><name>byte</name></type> <name><name>b</name><index>[]</index></name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>b</name> == null</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">// avoid int overflow</comment>
        <if>if <condition>(<expr><name><name>offset</name> <argument_list>&lt; <argument>0 || <name>offset</name></argument> &gt;</argument_list></name> <name><name>b</name>.<name>length</name></name> || <name><name>length</name> <argument_list>&lt; <argument>0
                || <name>length</name></argument> &gt;</argument_list></name> <name><name>b</name>.<name>length</name></name> - <name>offset</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">// Are there any bytes available?</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>pos</name></name> &gt;= <name><name>this</name>.<name>count</name></name></expr>)</condition><then> <block>{
            <return>return <expr>-1</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>length</name> == 0</expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>copylen</name> <init>= <expr><name><name>this</name>.<name>count</name></name> - <name>pos</name> &lt; <name>length</name> ? <name><name>this</name>.<name>count</name></name> - <name>pos</name> : <name>length</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>copylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> += <name>copylen</name></expr>;</expr_stmt>
        <return>return <expr><name>copylen</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Resets this stream to the last marked location. This implementation
     * resets the position to either the marked position, the start position
     * supplied in the constructor or 0 if neither has been provided.
     *
     * @see #mark(int)
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>pos</name> = <name>mark</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Skips {@code count} number of bytes in this InputStream. Subsequent
     * {@code read()}s will not return these bytes unless {@code reset()} is
     * used. This implementation skips {@code count} number of bytes in the
     * target stream. It does nothing and returns 0 if {@code n} is negative.
     *
     * @param n
     *            the number of bytes to skip.
     * @return the number of bytes actually skipped.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>skip</name><parameter_list>(<param><decl><type><name>long</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>n</name> &lt;= 0</expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name>pos</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pos</name> = <name><name>this</name>.<name>count</name></name> - <name>pos</name> &lt; <name>n</name> ? <name><name>this</name>.<name>count</name></name> : <call>(<name>int</name>) <argument_list>(<argument><expr><name>pos</name> + <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>pos</name> - <name>temp</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
