<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\cache\FreeableMemory.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>

<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicInteger</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>Memory</name></name>;</import>

<class><specifier>public</specifier> class <name>FreeableMemory</name> <super><extends>extends <name>Memory</name></extends></super>
<block>{
    <decl_stmt><decl><type><name>AtomicInteger</name></type> <name>references</name> <init>= <expr>new <call><name>AtomicInteger</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FreeableMemory</name><parameter_list>(<param><decl><type><name>long</name></type> <name>size</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return true if we succeed in referencing before the reference count reaches zero.
     * (A FreeableMemory object is created with a reference count of one.)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>reference</name><parameter_list>()</parameter_list>
    <block>{
        <while>while <condition>(<expr>true</expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>references</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>n</name> &lt;= 0</expr>)</condition><then>
                <return>return <expr>false</expr>;</return></then></if>
            <if>if <condition>(<expr><call><name><name>references</name>.<name>compareAndSet</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name> + 1</expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr>true</expr>;</return></then></if>
        }</block></while>
    }</block></function>

    <comment type="block" format="javadoc">/** decrement reference count.  if count reaches zero, the object is freed. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unreference</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>references</name>.<name>decrementAndGet</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr><call><name>free</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name></type> <name>getByte</name><parameter_list>(<param><decl><type><name>long</name></type> <name>offset</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>peer</name> != 0</expr>;</assert>
        <return>return <expr><call><name><name>super</name>.<name>getByte</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
