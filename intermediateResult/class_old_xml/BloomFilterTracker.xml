<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\sstable\BloomFilterTracker.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicLong</name></name>;</import>

<class><specifier>public</specifier> class <name>BloomFilterTracker</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>AtomicLong</name></type> <name>falsePositiveCount</name> <init>= <expr>new <call><name>AtomicLong</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AtomicLong</name></type> <name>truePositiveCount</name> <init>= <expr>new <call><name>AtomicLong</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lastFalsePositiveCount</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lastTruePositiveCount</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFalsePositive</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>falsePositiveCount</name>.<name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTruePositive</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>truePositiveCount</name>.<name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getFalsePositiveCount</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>falsePositiveCount</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getRecentFalsePositiveCount</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>fpc</name> <init>= <expr><call><name>getFalsePositiveCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <return>return <expr>(<name>fpc</name> - <name>lastFalsePositiveCount</name>)</expr>;</return>
        }</block>
        <finally>finally
        <block>{
            <expr_stmt><expr><name>lastFalsePositiveCount</name> = <name>fpc</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTruePositiveCount</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>truePositiveCount</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getRecentTruePositiveCount</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>tpc</name> <init>= <expr><call><name>getTruePositiveCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <return>return <expr>(<name>tpc</name> - <name>lastTruePositiveCount</name>)</expr>;</return>
        }</block>
        <finally>finally
        <block>{
            <expr_stmt><expr><name>lastTruePositiveCount</name> = <name>tpc</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>
}</block></class>
</unit>
