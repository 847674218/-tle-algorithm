<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\thrift\TCustomSocket.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>;</package>


<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>Socket</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>SocketException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TIOStreamTransport</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TTransportException</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Socket implementation of the TTransport interface.
 *
 * Adds socket buffering
 *
 */</comment>
<class><specifier>public</specifier> class <name>TCustomSocket</name> <super><extends>extends <name>TIOStreamTransport</name></extends></super> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><call><name><name>TCustomSocket</name>.<name><name>class</name>.<name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Wrapped Socket object
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Socket</name></type> <name>socket_</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Remote host
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>host_</name>  <init>= <expr>null</expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Remote port
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>port_</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Socket timeout
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>timeout_</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Constructor that takes an already created socket.
   *
   * @param socket Already created socket object
   * @throws TTransportException if there is an error setting up the streams
   */</comment>
  <constructor><specifier>public</specifier> <name>TCustomSocket</name><parameter_list>(<param><decl><type><name>Socket</name></type> <name>socket</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TTransportException</name></expr></argument></throws> <block>{
    <expr_stmt><expr><name>socket_</name> = <name>socket</name></expr>;</expr_stmt>
    <try>try <block>{
      <expr_stmt><expr><call><name><name>socket_</name>.<name>setSoLinger</name></name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>socket_</name>.<name>setTcpNoDelay</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<param><decl><type><name>SocketException</name></type> <name>sx</name></decl></param>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>LOGGER</name>.<name>warn</name></name><argument_list>(<argument><expr>"Could not configure socket."</expr></argument>, <argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>

    <if>if <condition>(<expr><call><name>isOpen</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <try>try <block>{
        <expr_stmt><expr><name>inputStream_</name> = new <call><name>BufferedInputStream</name><argument_list>(<argument><expr><call><name><name>socket_</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>1024</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>outputStream_</name> = new <call><name>BufferedOutputStream</name><argument_list>(<argument><expr><call><name><name>socket_</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>1024</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>iox</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr>new <call><name>TTransportException</name><argument_list>(<argument><expr><name><name>TTransportException</name>.<name>NOT_OPEN</name></name></expr></argument>, <argument><expr><name>iox</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></then></if>
  }</block></constructor>

  <comment type="block" format="javadoc">/**
   * Creates a new unconnected socket that will connect to the given host
   * on the given port.
   *
   * @param host Remote host
   * @param port Remote port
   */</comment>
  <constructor><specifier>public</specifier> <name>TCustomSocket</name><parameter_list>(<param><decl><type><name>String</name></type> <name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="block" format="javadoc">/**
   * Creates a new unconnected socket that will connect to the given host
   * on the given port.
   *
   * @param host    Remote host
   * @param port    Remote port
   * @param timeout Socket timeout
   */</comment>
  <constructor><specifier>public</specifier> <name>TCustomSocket</name><parameter_list>(<param><decl><type><name>String</name></type> <name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>, <param><decl><type><name>int</name></type> <name>timeout</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><name>host_</name> = <name>host</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>port_</name> = <name>port</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>timeout_</name> = <name>timeout</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initSocket</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="block" format="javadoc">/**
   * Initializes the socket object
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>initSocket</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>socket_</name> = new <call><name>Socket</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{
      <expr_stmt><expr><call><name><name>socket_</name>.<name>setSoLinger</name></name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>socket_</name>.<name>setTcpNoDelay</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>socket_</name>.<name>setSoTimeout</name></name><argument_list>(<argument><expr><name>timeout_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<param><decl><type><name>SocketException</name></type> <name>sx</name></decl></param>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>LOGGER</name>.<name>error</name></name><argument_list>(<argument><expr>"Could not configure socket."</expr></argument>, <argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Sets the socket timeout
   *
   * @param timeout Milliseconds timeout
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeout</name><parameter_list>(<param><decl><type><name>int</name></type> <name>timeout</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><name>timeout_</name> = <name>timeout</name></expr>;</expr_stmt>
    <try>try <block>{
      <expr_stmt><expr><call><name><name>socket_</name>.<name>setSoTimeout</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<param><decl><type><name>SocketException</name></type> <name>sx</name></decl></param>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>LOGGER</name>.<name>warn</name></name><argument_list>(<argument><expr>"Could not set socket timeout."</expr></argument>, <argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a reference to the underlying socket.
   */</comment>
  <function><type><specifier>public</specifier> <name>Socket</name></type> <name>getSocket</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>socket_</name> == null</expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>initSocket</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>socket_</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Checks whether the socket is connected.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isOpen</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>socket_</name> == null</expr>)</condition><then> <block>{
      <return>return <expr>false</expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name><name>socket_</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Connects the socket, creating a new socket object if necessary.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>open</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TTransportException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><call><name>isOpen</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr>new <call><name>TTransportException</name><argument_list>(<argument><expr><name><name>TTransportException</name>.<name>ALREADY_OPEN</name></name></expr></argument>, <argument><expr>"Socket already connected."</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>host_</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
      <throw>throw <expr>new <call><name>TTransportException</name><argument_list>(<argument><expr><name><name>TTransportException</name>.<name>NOT_OPEN</name></name></expr></argument>, <argument><expr>"Cannot open null host."</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
    <if>if <condition>(<expr><name>port_</name> &lt;= 0</expr>)</condition><then> <block>{
      <throw>throw <expr>new <call><name>TTransportException</name><argument_list>(<argument><expr><name><name>TTransportException</name>.<name>NOT_OPEN</name></name></expr></argument>, <argument><expr>"Cannot open without port."</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <if>if <condition>(<expr><name>socket_</name> == null</expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>initSocket</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <try>try <block>{
      <expr_stmt><expr><call><name><name>socket_</name>.<name>connect</name></name><argument_list>(<argument><expr>new <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>host_</name></expr></argument>, <argument><expr><name>port_</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>inputStream_</name> = new <call><name>BufferedInputStream</name><argument_list>(<argument><expr><call><name><name>socket_</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>1024</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>outputStream_</name> = new <call><name>BufferedOutputStream</name><argument_list>(<argument><expr><call><name><name>socket_</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>1024</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>iox</name></decl></param>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr>new <call><name>TTransportException</name><argument_list>(<argument><expr><name><name>TTransportException</name>.<name>NOT_OPEN</name></name></expr></argument>, <argument><expr><name>iox</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Closes the socket.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">// Close the underlying streams</comment>
    <expr_stmt><expr><call><name><name>super</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Close the socket</comment>
    <if>if <condition>(<expr><name>socket_</name> != null</expr>)</condition><then> <block>{
      <try>try <block>{
        <expr_stmt><expr><call><name><name>socket_</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>iox</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>LOGGER</name>.<name>warn</name></name><argument_list>(<argument><expr>"Could not close socket."</expr></argument>, <argument><expr><name>iox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
      <expr_stmt><expr><name>socket_</name> = null</expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

}</block></class></unit>
