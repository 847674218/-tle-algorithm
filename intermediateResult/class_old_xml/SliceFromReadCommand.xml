<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\SliceFromReadCommand.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryFilter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryPath</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>RepairCallback</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ColumnParent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>SliceFromReadCommand</name> <super><extends>extends <name>ReadCommand</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>SliceFromReadCommand</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>finish</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>reversed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>count</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SliceFromReadCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>finish</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>column_parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><name>reversed</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>SliceFromReadCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>finish</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>CMD_TYPE_GET_SLICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>start</name></name> = <name>start</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>finish</name></name> = <name>finish</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>reversed</name></name> = <name>reversed</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>count</name></name> = <name>count</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ReadCommand</name></type> <name>copy</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ReadCommand</name></type> <name>readCommand</name> <init>= <expr>new <call><name>SliceFromReadCommand</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>queryPath</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><name>reversed</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>readCommand</name>.<name>setDigestQuery</name></name><argument_list>(<argument><expr><call><name>isDigestQuery</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>readCommand</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Row</name></type> <name>getRow</name><parameter_list>(<param><decl><type><name>Table</name></type> <name>table</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>dk</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>decorateKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>table</name>.<name>getRow</name></name><argument_list>(<argument><expr><call><name><name>QueryFilter</name>.<name>getSliceFilter</name></name><argument_list>(<argument><expr><name>dk</name></expr></argument>, <argument><expr><name>queryPath</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><name>reversed</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>ReadCommand</name></type> <name>maybeGenerateRetryCommand</name><parameter_list>(<param><decl><type><name>RepairCallback</name></type> <name>handler</name></decl></param>, <param><decl><type><name>Row</name></type> <name>row</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>maxLiveColumns</name> <init>= <expr><call><name><name>handler</name>.<name>getMaxLiveColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>liveColumnsInRow</name> <init>= <expr><name>row</name> != null ? <call><name><name>row</name>.<name>getLiveColumnCount</name></name><argument_list>()</argument_list></call> : 0</expr></init></decl>;</decl_stmt>

        <comment type="line">// We generate a retry if at least one node reply with count live columns but after merge we have less</comment>
        <comment type="line">// than the total number of column we are interested in (which may be &lt; count on a retry)</comment>
        <if>if <condition>(<expr>(<name>maxLiveColumns</name> &gt;= <name>count</name>) &amp;&amp; (<name>liveColumnsInRow</name> &lt; <call><name>getOriginalRequestedCount</name><argument_list>()</argument_list></call>)</expr>)</condition><then>
        <block>{
            <comment type="line">// We asked t (= count) live columns and got l (=liveColumnsInRow) ones.</comment>
            <comment type="line">// From that, we can estimate that on this row, for x requested</comment>
            <comment type="line">// columns, only l/t end up live after reconciliation. So for next</comment>
            <comment type="line">// round we want to ask x column so that x * (l/t) == t, i.e. x = t^2/l.</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>retryCount</name> <init>= <expr><name>liveColumnsInRow</name> == 0 ? <name>count</name> + 1 : ((<name>count</name> * <name>count</name>) / <name>liveColumnsInRow</name>) + 1</expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>RetriedSliceFromReadCommand</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>queryPath</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><name>reversed</name></expr></argument>, <argument><expr><call><name>getOriginalRequestedCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>retryCount</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <return>return <expr>null</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>maybeTrim</name><parameter_list>(<param><decl><type><name>Row</name></type> <name>row</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>(<name>row</name> == null) || (<name><name>row</name>.<name>cf</name></name> == null)</expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>liveColumnsInRow</name> <init>= <expr><call><name><name>row</name>.<name>cf</name>.<name>getLiveColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>liveColumnsInRow</name> &gt; <call><name>getOriginalRequestedCount</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>columnsToTrim</name> <init>= <expr><name>liveColumnsInRow</name> - <call><name>getOriginalRequestedCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"trimming {} live columns to the originally requested {}"</expr></argument>, <argument><expr><call><name><name>row</name>.<name>cf</name>.<name>getLiveColumnCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getOriginalRequestedCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>reversed</name></expr>)</condition><then>
                <expr_stmt><expr><name>columns</name> = <call><name><name>row</name>.<name>cf</name>.<name>getSortedColumns</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>columns</name> = <call><name><name>row</name>.<name>cf</name>.<name>getReverseSortedColumns</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>

            <decl_stmt><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>toRemove</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columnIterator</name> <init>= <expr><call><name><name>columns</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>columnIterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> &amp;&amp; (<call><name><name>toRemove</name>.<name>size</name></name><argument_list>()</argument_list></call> &lt; <name>columnsToTrim</name>)</expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>IColumn</name></type> <name>column</name> <init>= <expr><call><name><name>columnIterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>column</name>.<name>isLive</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>toRemove</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></while>

            <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>columnName</name> <range>: <expr><name>toRemove</name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>row</name>.<name>cf</name>.<name>remove</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * The original number of columns requested by the user.
     * This can be different from count when the slice command is a retry (see
     * RetriedSliceFromReadCommand)
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>getOriginalRequestedCount</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>count</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"SliceFromReadCommand(" +
               "table='" + <name>table</name> + '\'' +
               ", key='" + <call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> + '\'' +
               ", column_parent='" + <name>queryPath</name> + '\'' +
               ", start='" + <call><name>getComparator</name><argument_list>()</argument_list></call>.<call><name>getString</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> + '\'' +
               ", finish='" + <call><name>getComparator</name><argument_list>()</argument_list></call>.<call><name>getString</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call> + '\'' +
               ", reversed=" + <name>reversed</name> +
               ", count=" + <name>count</name> +
               ')'</expr>;</return>
    }</block></function>
}</block></class>

<class>class <name>SliceFromReadCommandSerializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>ReadCommand</name></type> <name>rm</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>SliceFromReadCommand</name></type> <name>realRM</name> <init>= <expr>(<name>SliceFromReadCommand</name>)<name>rm</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeBoolean</name></name><argument_list>(<argument><expr><call><name><name>realRM</name>.<name>isDigestQuery</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><name><name>realRM</name>.<name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name><name>realRM</name>.<name>key</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>realRM</name>.<name>queryPath</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name><name>realRM</name>.<name>start</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name><name>realRM</name>.<name>finish</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeBoolean</name></name><argument_list>(<argument><expr><name><name>realRM</name>.<name>reversed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>realRM</name>.<name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ReadCommand</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>isDigest</name> <init>= <expr><call><name><name>dis</name>.<name>readBoolean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SliceFromReadCommand</name></type> <name>rm</name> <init>= <expr>new <call><name>SliceFromReadCommand</name><argument_list>(<argument><expr><call><name><name>dis</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>QueryPath</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>dis</name>.<name>readBoolean</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>setDigestQuery</name></name><argument_list>(<argument><expr><name>isDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rm</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>ReadCommand</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>SliceFromReadCommand</name></type> <name>command</name> <init>= <expr>(<name>SliceFromReadCommand</name>) <name>cmd</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>DBConstants</name>.<name>boolSize</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>shortSize</name></name> + <call><name><name>FBUtilities</name>.<name>encodedUTF8Length</name></name><argument_list>(<argument><expr><name><name>command</name>.<name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>shortSize</name></name> + <call><name><name>command</name>.<name>key</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> += <call><name><name>command</name>.<name>queryPath</name>.<name>serializedSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>shortSize</name></name> + <call><name><name>command</name>.<name>start</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>shortSize</name></name> + <call><name><name>command</name>.<name>finish</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>boolSize</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>intSize</name></name></expr>;</expr_stmt>
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
