<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\BigLongArray.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<comment type="block" format="javadoc">/**
 * A GC friendly long[].
 * Allocating large arrays (that are not short-lived) generate fragmentation
 * in old-gen space. This breaks such large long array into fixed size pages
 * to avoid that problem.
 */</comment>
<class><specifier>public</specifier> class <name>BigLongArray</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_PAGE_SIZE</name> <init>= <expr>4096</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name><index>[]</index><index>[]</index></type> <name>pages</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>size</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>pageSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>pageCount</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BigLongArray</name><parameter_list>(<param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>DEFAULT_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>BigLongArray</name><parameter_list>(<param><decl><type><name>int</name></type> <name>size</name></decl></param>, <param><decl><type><name>int</name></type> <name>pageSize</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>size</name></name> = <name>size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>pageSize</name></name> = <name>pageSize</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>lastPageSize</name> <init>= <expr><name>size</name> % <name>pageSize</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fullPageCount</name> <init>= <expr><name>size</name> / <name>pageSize</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pageCount</name> = <name>fullPageCount</name> + (<name>lastPageSize</name> == 0 ? 0 : 1)</expr>;</expr_stmt>
        <expr_stmt><expr><name>pages</name> = new <name><name>long</name><index>[<expr><name>pageCount</name></expr>]</index><index>[]</index></name></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>fullPageCount</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
            <expr_stmt><expr><name><name>pages</name><index>[<expr><name>i</name></expr>]</index></name> = new <name><name>long</name><index>[<expr><name>pageSize</name></expr>]</index></name></expr>;</expr_stmt></for>

        <if>if <condition>(<expr><name>lastPageSize</name> != 0</expr>)</condition><then>
            <expr_stmt><expr><name><name>pages</name><index>[<expr><name><name>pages</name>.<name>length</name></name> - 1</expr>]</index></name> = new <name><name>long</name><index>[<expr><name>lastPageSize</name></expr>]</index></name></expr>;</expr_stmt></then></if>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<param><decl><type><name>int</name></type> <name>idx</name></decl></param>, <param><decl><type><name>long</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>idx</name> <argument_list>&lt; <argument>0 || <name>idx</name></argument> &gt;</argument_list></name> <name>size</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%d is not whithin [0, %d)"</expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>page</name> <init>= <expr><name>idx</name> / <name>pageSize</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pageIdx</name> <init>= <expr><name>idx</name> % <name>pageSize</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pages</name><index>[<expr><name>page</name></expr>]</index><index>[<expr><name>pageIdx</name></expr>]</index></name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>get</name><parameter_list>(<param><decl><type><name>int</name></type> <name>idx</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>idx</name> <argument_list>&lt; <argument>0 || <name>idx</name></argument> &gt;</argument_list></name> <name>size</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%d is not whithin [0, %d)"</expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>page</name> <init>= <expr><name>idx</name> / <name>pageSize</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pageIdx</name> <init>= <expr><name>idx</name> % <name>pageSize</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name><name>pages</name><index>[<expr><name>page</name></expr>]</index><index>[<expr><name>pageIdx</name></expr>]</index></name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
