<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\cql3\Relation.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Relations encapsulate the relationship between an entity of some kind, and
 * a value (term). For example, &lt;key&gt; &gt; "start" or "colname1" = "somevalue".
 *
 */</comment>
<class><specifier>public</specifier> class <name>Relation</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ColumnIdentifier</name></type> <name>entity</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Type</name></type> <name>relationType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Term</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>inValues</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>onToken</name></decl>;</decl_stmt>

    <enum><specifier>public</specifier> <specifier>static</specifier> enum <name>Type</name>
    <block>{
        <decl><name>EQ</name></decl>, <decl><name>LT</name></decl>, <decl><name>LTE</name></decl>, <decl><name>GTE</name></decl>, <decl><name>GT</name></decl>, <decl><name>IN</name></decl>;

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Type</name></type> <name>forString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><call><name><name>s</name>.<name>equals</name></name><argument_list>(<argument><expr>"="</expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>EQ</name></expr>;</return></then>
            <else>else <if>if <condition>(<expr><call><name><name>s</name>.<name>equals</name></name><argument_list>(<argument><expr>"&lt;"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>LT</name></expr>;</return></then>
            <else>else <if>if <condition>(<expr><call><name><name>s</name>.<name>equals</name></name><argument_list>(<argument><expr>"&lt;="</expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>LTE</name></expr>;</return></then>
            <else>else <if>if <condition>(<expr><call><name><name>s</name>.<name>equals</name></name><argument_list>(<argument><expr>"&gt;="</expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>GTE</name></expr>;</return></then>
            <else>else <if>if <condition>(<expr><call><name><name>s</name>.<name>equals</name></name><argument_list>(<argument><expr>"&gt;"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>GT</name></expr>;</return></then></if></else></if></else></if></else></if></else></if>

            <return>return <expr>null</expr>;</return>
        }</block></function>
    }</block></enum>

    <constructor><specifier>private</specifier> <name>Relation</name><parameter_list>(<param><decl><type><name>ColumnIdentifier</name></type> <name>entity</name></decl></param>, <param><decl><type><name>Type</name></type> <name>type</name></decl></param>, <param><decl><type><name>Term</name></type> <name>value</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>inValues</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>onToken</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>entity</name></name> = <name>entity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>relationType</name></name> = <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>inValues</name></name> = <name>inValues</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>onToken</name></name> = <name>onToken</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new relation.
     *
     * @param entity the kind of relation this is; what the term is being compared to.
     * @param type the type that describes how this entity relates to the value.
     * @param value the value being compared.
     */</comment>
    <constructor><specifier>public</specifier> <name>Relation</name><parameter_list>(<param><decl><type><name>ColumnIdentifier</name></type> <name>entity</name></decl></param>, <param><decl><type><name>String</name></type> <name>type</name></decl></param>, <param><decl><type><name>Term</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>entity</name></expr></argument>, <argument><expr><call><name><name>Type</name>.<name>forString</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Relation</name><parameter_list>(<param><decl><type><name>ColumnIdentifier</name></type> <name>entity</name></decl></param>, <param><decl><type><name>String</name></type> <name>type</name></decl></param>, <param><decl><type><name>Term</name></type> <name>value</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>onToken</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>entity</name></expr></argument>, <argument><expr><call><name><name>Type</name>.<name>forString</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><name>onToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Relation</name></type> <name>createInRelation</name><parameter_list>(<param><decl><type><name>ColumnIdentifier</name></type> <name>entity</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>Relation</name><argument_list>(<argument><expr><name>entity</name></expr></argument>, <argument><expr><name><name>Type</name>.<name>IN</name></name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Type</name></type> <name>operator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>relationType</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnIdentifier</name></type> <name>getEntity</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>entity</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Term</name></type> <name>getValue</name><parameter_list>()</parameter_list>
    <block>{
        <assert>assert <expr><name>relationType</name> != <name><name>Type</name>.<name>IN</name></name></expr>;</assert>
        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Term</name></argument>&gt;</argument_list></name></type> <name>getInValues</name><parameter_list>()</parameter_list>
    <block>{
        <assert>assert <expr><name>relationType</name> == <name><name>Type</name>.<name>IN</name></name></expr>;</assert>
        <return>return <expr><name>inValues</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addInValue</name><parameter_list>(<param><decl><type><name>Term</name></type> <name>t</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>inValues</name>.<name>add</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>relationType</name> == <name><name>Type</name>.<name>IN</name></name></expr>)</condition><then>
            <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s IN %s"</expr></argument>, <argument><expr><name>entity</name></expr></argument>, <argument><expr><name>inValues</name></expr></argument>)</argument_list></call></expr>;</return></then>
        <else>else
            <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s %s %s"</expr></argument>, <argument><expr><name>entity</name></expr></argument>, <argument><expr><name>relationType</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
    }</block></function>
}</block></class>
</unit>
