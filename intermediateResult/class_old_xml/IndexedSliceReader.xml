<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\columniterator\IndexedSliceReader.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>io</name>.<name>IOError</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayDeque</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Deque</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>AbstractIterator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamily</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>IColumn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>IndexHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileDataInput</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileMark</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="block" format="javadoc">/**
 *  This is a reader that finds the block for a starting column and returns
 *  blocks before/after it for each next call. This function assumes that
 *  the CF is sorted by name and exploits the name index.
 */</comment>
<class>class <name>IndexedSliceReader</name> <super><extends>extends <name><name>AbstractIterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>IColumnIterator</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ColumnFamily</name></type> <name>emptyColumnFamily</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name><name>IndexHelper</name>.<name>IndexInfo</name></name></argument>&gt;</argument_list></name></type> <name>indexes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>FileDataInput</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>startColumn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>finishColumn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>reversed</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>BlockFetcher</name></type> <name>fetcher</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Deque</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>blockColumns</name> <init>= <expr>new <call><name><name>ArrayDeque</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>IndexedSliceReader</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>FileDataInput</name></type> <name>input</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>startColumn</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>finishColumn</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>input</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>startColumn</name></name> = <name>startColumn</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>finishColumn</name></name> = <name>finishColumn</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>reversed</name></name> = <name>reversed</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>comparator</name> = <name><name>sstable</name>.<name>metadata</name>.<name>comparator</name></name></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>IndexHelper</name>.<name>skipBloomFilter</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexes</name> = <call><name><name>IndexHelper</name>.<name>deserializeIndex</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>emptyColumnFamily</name> = <call><name><name>ColumnFamily</name>.<name>serializer</name></name><argument_list>()</argument_list></call>.<call><name>deserializeFromSSTableNoColumns</name><argument_list>(<argument><expr><call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>sstable</name>.<name>metadata</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fetcher</name> = <name>indexes</name> == null ? new <call><name>SimpleBlockFetcher</name><argument_list>()</argument_list></call> : new <call><name>IndexedBlockFetcher</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sstable</name>.<name>markSuspect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ColumnFamily</name></type> <name>getColumnFamily</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>emptyColumnFamily</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>getKey</name><parameter_list>()</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isColumnNeeded</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>startColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; <call><name><name>finishColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then>
        <else>else <if>if <condition>(<expr><call><name><name>startColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; !<name>reversed</name></expr>)</condition><then>
            <return>return <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finishColumn</name></expr></argument>)</argument_list></call> &lt;= 0</expr>;</return></then>
        <else>else <if>if <condition>(<expr><call><name><name>startColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; <name>reversed</name></expr>)</condition><then>
            <return>return <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finishColumn</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return></then>
        <else>else <if>if <condition>(<expr><call><name><name>finishColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; !<name>reversed</name></expr>)</condition><then>
            <return>return <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>startColumn</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return></then>
        <else>else <if>if <condition>(<expr><call><name><name>finishColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; <name>reversed</name></expr>)</condition><then>
            <return>return <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>startColumn</name></expr></argument>)</argument_list></call> &lt;= 0</expr>;</return></then>
        <else>else <if>if <condition>(<expr>!<name>reversed</name></expr>)</condition><then>
            <return>return <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>startColumn</name></expr></argument>)</argument_list></call> &gt;= 0 &amp;&amp; <call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finishColumn</name></expr></argument>)</argument_list></call> &lt;= 0</expr>;</return></then>
        <else>else <comment type="line">// if reversed</comment>
            <return>return <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>startColumn</name></expr></argument>)</argument_list></call> &lt;= 0 &amp;&amp; <call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finishColumn</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return></else></if></else></if></else></if></else></if></else></if></else></if>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>IColumn</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
    <block>{
        <while>while <condition>(<expr>true</expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>IColumn</name></type> <name>column</name> <init>= <expr><call><name><name>blockColumns</name>.<name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>column</name> != null &amp;&amp; <call><name>isColumnNeeded</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>column</name></expr>;</return></then></if>
            <try>try
            <block>{
                <if>if <condition>(<expr><name>column</name> == null &amp;&amp; !<call><name><name>fetcher</name>.<name>getNextBlock</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></then></if>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></while>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{
    }</block></function>

    <class type="interface">interface <name>BlockFetcher</name>
    <block>{
        <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>getNextBlock</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
    }</block></class>

    <class><specifier>private</specifier> class <name>IndexedBlockFetcher</name> <super><implements>implements <name>BlockFetcher</name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>FileMark</name></type> <name>mark</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>curRangeIndex</name></decl>;</decl_stmt>

        <constructor><name>IndexedBlockFetcher</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>file</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// column count</comment>
            <expr_stmt><expr><name><name>this</name>.<name>mark</name></name> = <call><name><name>file</name>.<name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>curRangeIndex</name> = <call><name><name>IndexHelper</name>.<name>indexFor</name></name><argument_list>(<argument><expr><name>startColumn</name></expr></argument>, <argument><expr><name>indexes</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr><name>reversed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getNextBlock</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr><name><name>curRangeIndex</name> <argument_list>&lt; <argument>0 || <name>curRangeIndex</name></argument> &gt;</argument_list></name>= <call><name><name>indexes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr>false</expr>;</return></then></if>

            <comment type="block">/* seek to the correct offset to the data, and calculate the data size */</comment>
            <decl_stmt><decl><type><name><name>IndexHelper</name>.<name>IndexInfo</name></name></type> <name>curColPosition</name> <init>= <expr><call><name><name>indexes</name>.<name>get</name></name><argument_list>(<argument><expr><name>curRangeIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block">/* see if this read is really necessary. */</comment>
            <if>if <condition>(<expr><name>reversed</name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr>(<call><name><name>finishColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; <call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name>finishColumn</name></expr></argument>, <argument><expr><name><name>curColPosition</name>.<name>lastName</name></name></expr></argument>)</argument_list></call> &gt; 0) ||
                    (<call><name><name>startColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; <call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name>startColumn</name></expr></argument>, <argument><expr><name><name>curColPosition</name>.<name>firstName</name></name></expr></argument>)</argument_list></call> &lt; 0)</expr>)</condition><then>
                    <return>return <expr>false</expr>;</return></then></if>
            }</block></then>
            <else>else
            <block>{
                <if>if <condition>(<expr>(<call><name><name>startColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; <call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name>startColumn</name></expr></argument>, <argument><expr><name><name>curColPosition</name>.<name>lastName</name></name></expr></argument>)</argument_list></call> &gt; 0) ||
                    (<call><name><name>finishColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; <call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name>finishColumn</name></expr></argument>, <argument><expr><name><name>curColPosition</name>.<name>firstName</name></name></expr></argument>)</argument_list></call> &lt; 0)</expr>)</condition><then>
                    <return>return <expr>false</expr>;</return></then></if>
            }</block></else></if>

            <decl_stmt><decl><type><name>boolean</name></type> <name>outOfBounds</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>file</name>.<name>reset</name></name><argument_list>(<argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>skipBytesFully</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>curColPosition</name>.<name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>file</name>.<name>bytesPastMark</name></name><argument_list>(<argument><expr><name>mark</name></expr></argument>)</argument_list></call> &lt; <name><name>curColPosition</name>.<name>offset</name></name> + <name><name>curColPosition</name>.<name>width</name></name> &amp;&amp; !<name>outOfBounds</name></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>IColumn</name></type> <name>column</name> <init>= <expr><call><name><name>emptyColumnFamily</name>.<name>getColumnSerializer</name></name><argument_list>()</argument_list></call>.<call><name>deserialize</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>reversed</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>blockColumns</name>.<name>addFirst</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else>else
                    <expr_stmt><expr><call><name><name>blockColumns</name>.<name>addLast</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

                <comment type="block">/* see if we can stop seeking. */</comment>
                <if>if <condition>(<expr>!<name>reversed</name> &amp;&amp; <call><name><name>finishColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
                    <expr_stmt><expr><name>outOfBounds</name> = <call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finishColumn</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</expr_stmt></then>
                <else>else <if>if <condition>(<expr><name>reversed</name> &amp;&amp; <call><name><name>startColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
                    <expr_stmt><expr><name>outOfBounds</name> = <call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>startColumn</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</expr_stmt></then></if></else></if>
            }</block></while>

            <if>if <condition>(<expr><name>reversed</name></expr>)</condition><then>
                <expr_stmt><expr><name>curRangeIndex</name>--</expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>curRangeIndex</name>++</expr>;</expr_stmt></else></if>
            <return>return <expr>true</expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>SimpleBlockFetcher</name> <super><implements>implements <name>BlockFetcher</name></implements></super>
    <block>{
        <constructor><specifier>private</specifier> <name>SimpleBlockFetcher</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>columns</name> <init>= <expr><call><name><name>file</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>columns</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <decl_stmt><decl><type><name>IColumn</name></type> <name>column</name> <init>= <expr><call><name><name>emptyColumnFamily</name>.<name>getColumnSerializer</name></name><argument_list>()</argument_list></call>.<call><name>deserialize</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>reversed</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>blockColumns</name>.<name>addFirst</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else>else
                    <expr_stmt><expr><call><name><name>blockColumns</name>.<name>addLast</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

                <comment type="block">/* see if we can stop seeking. */</comment>
                <decl_stmt><decl><type><name>boolean</name></type> <name>outOfBounds</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<name>reversed</name> &amp;&amp; <call><name><name>finishColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
                    <expr_stmt><expr><name>outOfBounds</name> = <call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finishColumn</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</expr_stmt></then>
                <else>else <if>if <condition>(<expr><name>reversed</name> &amp;&amp; <call><name><name>startColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
                    <expr_stmt><expr><name>outOfBounds</name> = <call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>startColumn</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</expr_stmt></then></if></else></if>
                <if>if <condition>(<expr><name>outOfBounds</name></expr>)</condition><then>
                    <break>break;</break></then></if>
            }</block></for>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getNextBlock</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
