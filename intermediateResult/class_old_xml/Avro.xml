<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\config\Avro.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamilyType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>BytesType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>TypeParser</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>migration</name>.<name>avro</name>.<name>CfDef</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name>.<name>CompressionParameters</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>AbstractReplicationStrategy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>NetworkTopologyStrategy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>IndexType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name>.<name>Caching</name></name>;</import>

<comment type="block" format="javadoc">/**
 * methods to load schema definitions from old-style Avro serialization
 */</comment>
<class><specifier>public</specifier> class <name>Avro</name>
<block>{
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>KSMetaData</name></type> <name>ksFromAvro</name><parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>migration</name>.<name>avro</name>.<name>KsDef</name></name></type> <name>ks</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>repStratClass</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>strategyClassName</name> <init>= <expr><call><name><name>KSMetaData</name>.<name>convertOldStrategyName</name></name><argument_list>(<argument><expr><call><name><name>ks</name>.<name>strategy_class</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>repStratClass</name> = (<name><name>Class</name><argument_list>&lt;<argument><name>AbstractReplicationStrategy</name></argument>&gt;</argument_list></name>)<call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>strategyClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Could not create ReplicationStrategy of type " + <name><name>ks</name>.<name>strategy_class</name></name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>strategyOptions</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>ks</name>.<name>strategy_options</name></name> != null</expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>CharSequence</name></argument>, <argument><name>CharSequence</name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><call><name><name>ks</name>.<name>strategy_options</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>e</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// Silently discard a replication_factor option to NTS.</comment>
                <comment type="line">// The history is, people were creating CFs with the default settings (which in the CLI is NTS) and then</comment>
                <comment type="line">// giving it a replication_factor option, which is nonsensical.  Initially our strategy was to silently</comment>
                <comment type="line">// ignore this option, but that turned out to confuse people more.  So in 0.8.2 we switched to throwing</comment>
                <comment type="line">// an exception in the NTS constructor, which would be turned into an InvalidRequestException for the</comment>
                <comment type="line">// client.  But, it also prevented startup for anyone upgrading without first cleaning that option out.</comment>
                <if>if <condition>(<expr><name>repStratClass</name> == <name><name>NetworkTopologyStrategy</name>.<name>class</name></name> &amp;&amp; <call><name><name>name</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"replication_factor"</expr></argument>)</argument_list></call></expr>)</condition><then>
                    <continue>continue;</continue></then></if>
                <expr_stmt><expr><call><name><name>strategyOptions</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <expr_stmt><expr><call><name>maybeAddReplicationFactor</name><argument_list>(<argument><expr><name>strategyOptions</name></expr></argument>, <argument><expr><call><name><name>ks</name>.<name>strategy_class</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ks</name>.<name>replication_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>cfsz</name> <init>= <expr><call><name><name>ks</name>.<name>cf_defs</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfMetaData</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>CFMetaData</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>cfsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>CfDef</name></type> <name>cf_def</name> <range>: <expr><name><name>ks</name>.<name>cf_defs</name></name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>keysCached</name> <init>= <expr><name><name>cf_def</name>.<name>key_cache_size</name></name> == null ? -1 : <name><name>cf_def</name>.<name>key_cache_size</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>rowsCached</name> <init>= <expr><name><name>cf_def</name>.<name>row_cache_size</name></name> == null ? -1 : <name><name>cf_def</name>.<name>row_cache_size</name></name></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>keysCached</name> &gt; 0 &amp;&amp; <name>rowsCached</name> &gt; 0</expr>)</condition><then>
                <expr_stmt><expr><name><name>cf_def</name>.<name>caching</name></name> = <call><name><name>Caching</name>.<name>ALL</name>.<name>name</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>keysCached</name> &lt;= 0 &amp;&amp; <name>rowsCached</name> &lt;= 0</expr>)</condition><then>
                <expr_stmt><expr><name><name>cf_def</name>.<name>caching</name></name> = <call><name><name>Caching</name>.<name>NONE</name>.<name>name</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>keysCached</name> &gt; 0 &amp;&amp; <name>rowsCached</name> &lt;= 0</expr>)</condition><then>
                <expr_stmt><expr><name><name>cf_def</name>.<name>caching</name></name> = <call><name><name>Caching</name>.<name>KEYS_ONLY</name>.<name>name</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name><name>cf_def</name>.<name>caching</name></name> = <call><name><name>Caching</name>.<name>ROWS_ONLY</name>.<name>name</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if>

            <expr_stmt><expr><call><name><name>cfMetaData</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>cfFromAvro</name><argument_list>(<argument><expr><name>cf_def</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr>new <call><name>KSMetaData</name><argument_list>(<argument><expr><call><name><name>ks</name>.<name>name</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>repStratClass</name></expr></argument>, <argument><expr><name>strategyOptions</name></expr></argument>, <argument><expr><name><name>ks</name>.<name>durable_writes</name></name></expr></argument>, <argument><expr><name>cfMetaData</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>maybeAddReplicationFactor</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></param>, <param><decl><type><name>String</name></type> <name>cls</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>rf</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>rf</name> != null &amp;&amp; (<call><name><name>cls</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"SimpleStrategy"</expr></argument>)</argument_list></call> || <call><name><name>cls</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"OldNetworkTopologyStrategy"</expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>options</name>.<name>put</name></name><argument_list>(<argument><expr>"replication_factor"</expr></argument>, <argument><expr><call><name><name>rf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>CFMetaData</name></type> <name>cfFromAvro</name><parameter_list>(<param><decl><type><name>CfDef</name></type> <name>cf</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>subcolumnComparator</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyValidator</name></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>comparator</name> = <call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>comparator_type</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>cf</name>.<name>subcomparator_type</name></name> != null</expr>)</condition><then>
                <expr_stmt><expr><name>subcolumnComparator</name> = <call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name><name>cf</name>.<name>subcomparator_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><name>validator</name> = <call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name><name>cf</name>.<name>default_validation_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>keyValidator</name> = <call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name><name>cf</name>.<name>key_validation_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Could not inflate CFMetaData for " + <name>cf</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></type> <name>column_metadata</name> <init>= <expr>new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>BytesType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>migration</name>.<name>avro</name>.<name>ColumnDef</name></name></type> <name>aColumn_metadata</name> <range>: <expr><name><name>cf</name>.<name>column_metadata</name></name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <init>= <expr><call><name>columnFromAvro</name><argument_list>(<argument><expr><name>aColumn_metadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>cd</name>.<name>getIndexType</name></name><argument_list>()</argument_list></call> != null &amp;&amp; <call><name><name>cd</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call> == null</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>cd</name>.<name>setIndexName</name></name><argument_list>(<argument><expr><call><name><name>CFMetaData</name>.<name>getDefaultIndexName</name></name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>name</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr><name><name>cd</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name>column_metadata</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>cd</name>.<name>name</name></name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>newCFMD</name> <init>= <expr>new <call><name>CFMetaData</name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>keyspace</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>cf</name>.<name>name</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>ColumnFamilyType</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>column_type</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><name>comparator</name></expr></argument>,
                                            <argument><expr><name>subcolumnComparator</name></expr></argument>,
                                            <argument><expr><name><name>cf</name>.<name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// When we pull up an old avro CfDef which doesn't have these arguments,</comment>
        <comment type="line">//  it doesn't default them correctly. Without explicit defaulting,</comment>
        <comment type="line">//  grandfathered metadata becomes wrong or causes crashes.</comment>
        <comment type="line">//  Isn't AVRO supposed to handle stuff like this?</comment>
        <if>if <condition>(<expr><name><name>cf</name>.<name>min_compaction_threshold</name></name> != null</expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>newCFMD</name>.<name>minCompactionThreshold</name></name><argument_list>(<argument><expr><name><name>cf</name>.<name>min_compaction_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
        <if>if <condition>(<expr><name><name>cf</name>.<name>max_compaction_threshold</name></name> != null</expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>newCFMD</name>.<name>maxCompactionThreshold</name></name><argument_list>(<argument><expr><name><name>cf</name>.<name>max_compaction_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
        <if>if <condition>(<expr><name><name>cf</name>.<name>key_alias</name></name> != null</expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>newCFMD</name>.<name>keyAlias</name></name><argument_list>(<argument><expr><name><name>cf</name>.<name>key_alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
        <if>if <condition>(<expr><name><name>cf</name>.<name>column_aliases</name></name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>newCFMD</name>.<name>columnAliases</name></name><argument_list>(<argument><expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>cf</name>.<name>column_aliases</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if> <comment type="line">// fix avro stupidity</comment>
        <if>if <condition>(<expr><name><name>cf</name>.<name>value_alias</name></name> != null</expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>newCFMD</name>.<name>valueAlias</name></name><argument_list>(<argument><expr><name><name>cf</name>.<name>value_alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
        <if>if <condition>(<expr><name><name>cf</name>.<name>compaction_strategy</name></name> != null</expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><name><name>newCFMD</name>.<name>compactionStrategyClass</name></name> = <call><name><name>CFMetaData</name>.<name>createCompactionStrategy</name></name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>compaction_strategy</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>cf</name>.<name>compaction_strategy_options</name></name> != null</expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>CharSequence</name></argument>, <argument><name>CharSequence</name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><call><name><name>cf</name>.<name>compaction_strategy_options</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name>newCFMD</name>.<name>compactionStrategyOptions</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></then></if>

        <decl_stmt><decl><type><name>CompressionParameters</name></type> <name>cp</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>cp</name> = <call><name><name>CompressionParameters</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>cf</name>.<name>compression_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <decl_stmt><decl><type><name><name>CFMetaData</name>.<name>Caching</name></name></type> <name>caching</name></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>caching</name> = <name><name>cf</name>.<name>caching</name></name> == null ? <name><name>CFMetaData</name>.<name>DEFAULT_CACHING_STRATEGY</name></name> : <call><name><name>CFMetaData</name>.<name>Caching</name>.<name>fromString</name></name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>caching</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <return>return <expr><call><name><name>newCFMD</name>.<name>comment</name></name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>comment</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                      .<call><name>readRepairChance</name><argument_list>(<argument><expr><name><name>cf</name>.<name>read_repair_chance</name></name></expr></argument>)</argument_list></call>
                      .<call><name>dcLocalReadRepairChance</name><argument_list>(<argument><expr><name><name>cf</name>.<name>dclocal_read_repair_chance</name></name></expr></argument>)</argument_list></call>
                      .<call><name>replicateOnWrite</name><argument_list>(<argument><expr><name><name>cf</name>.<name>replicate_on_write</name></name></expr></argument>)</argument_list></call>
                      .<call><name>gcGraceSeconds</name><argument_list>(<argument><expr><name><name>cf</name>.<name>gc_grace_seconds</name></name></expr></argument>)</argument_list></call>
                      .<call><name>defaultValidator</name><argument_list>(<argument><expr><name>validator</name></expr></argument>)</argument_list></call>
                      .<call><name>keyValidator</name><argument_list>(<argument><expr><name>keyValidator</name></expr></argument>)</argument_list></call>
                      .<call><name>columnMetadata</name><argument_list>(<argument><expr><name>column_metadata</name></expr></argument>)</argument_list></call>
                      .<call><name>compressionParameters</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call>
                      .<call><name>bloomFilterFpChance</name><argument_list>(<argument><expr><name><name>cf</name>.<name>bloom_filter_fp_chance</name></name></expr></argument>)</argument_list></call>
                      .<call><name>caching</name><argument_list>(<argument><expr><name>caching</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>ColumnDefinition</name></type> <name>columnFromAvro</name><parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>migration</name>.<name>avro</name>.<name>ColumnDef</name></name></type> <name>cd</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>IndexType</name></type> <name>index_type</name> <init>= <expr><name><name>cd</name>.<name>index_type</name></name> == null ? null : <call><name><name>Enum</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name><name>IndexType</name>.<name>class</name></name></expr></argument>, <argument><expr><call><name><name>cd</name>.<name>index_type</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>index_name</name> <init>= <expr><name><name>cd</name>.<name>index_name</name></name> == null ? null : <call><name><name>cd</name>.<name>index_name</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validatorType</name> <init>= <expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name><name>cd</name>.<name>validation_class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>ColumnDefinition</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>cd</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>validatorType</name></expr></argument>, <argument><expr><name>index_type</name></expr></argument>, <argument><expr><call><name><name>ColumnDefinition</name>.<name>getStringMap</name></name><argument_list>(<argument><expr><name><name>cd</name>.<name>index_options</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>index_name</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
