<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\compress\CompressionParameters.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>AbstractSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>ImmutableSet</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Sets</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>builder</name>.<name>EqualsBuilder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>builder</name>.<name>HashCodeBuilder</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name>;</import>

<class><specifier>public</specifier> class <name>CompressionParameters</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>CompressionParameters</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>DEFAULT_CHUNK_LENGTH</name> <init>= <expr>65536</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>double</name></type> <name>DEFAULT_CRC_CHECK_CHANCE</name> <init>= <expr>1.0</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SSTABLE_COMPRESSION</name> <init>= <expr>"sstable_compression"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CHUNK_LENGTH_KB</name> <init>= <expr>"chunk_length_kb"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CRC_CHECK_CHANCE</name> <init>= <expr>"crc_check_chance"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>GLOBAL_OPTIONS</name> <init>= <expr><call><name><name>ImmutableSet</name>.<name>of</name></name><argument_list>(<argument><expr><name>CRC_CHECK_CHANCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ICompressor</name></type> <name>sstableCompressor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Integer</name></type> <name>chunkLength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>double</name></type> <name>crcCheckChance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>otherOptions</name></decl>;</decl_stmt> <comment type="line">// Unrecognized options, can be use by the compressor</comment>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParameters</name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>CharSequence</name></extends></argument>, <argument><name>?</name> <extends>extends <name>CharSequence</name></extends></argument>&gt;</argument_list></name></type> <name>opts</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><call><name>copyOptions</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sstableCompressionClass</name> <init>= <expr><call><name><name>options</name>.<name>get</name></name><argument_list>(<argument><expr><name>SSTABLE_COMPRESSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>chunkLength</name> <init>= <expr><call><name><name>options</name>.<name>get</name></name><argument_list>(<argument><expr><name>CHUNK_LENGTH_KB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>options</name>.<name>remove</name></name><argument_list>(<argument><expr><name>SSTABLE_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name>.<name>remove</name></name><argument_list>(<argument><expr><name>CHUNK_LENGTH_KB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CompressionParameters</name></type> <name>cp</name> <init>= <expr>new <call><name>CompressionParameters</name><argument_list>(<argument><expr><name>sstableCompressionClass</name></expr></argument>, <argument><expr><call><name>parseChunkLength</name><argument_list>(<argument><expr><name>chunkLength</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cp</name>.<name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cp</name></expr>;</return>
    }</block></function>

    <constructor><specifier>public</specifier> <name>CompressionParameters</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sstableCompressorClass</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>chunkLength</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>otherOptions</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name>createCompressor</name><argument_list>(<argument><expr><call><name>parseCompressorClass</name><argument_list>(<argument><expr><name>sstableCompressorClass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>otherOptions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name>otherOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>CompressionParameters</name><parameter_list>(<param><decl><type><name>ICompressor</name></type> <name>sstableCompressor</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// can't try/catch as first statement in the constructor, thus repeating constructor code here.</comment>
        <expr_stmt><expr><name><name>this</name>.<name>sstableCompressor</name></name> = <name>sstableCompressor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>chunkLength</name> = null</expr>;</expr_stmt>
        <expr_stmt><expr><name>otherOptions</name> = <call><name><name>Collections</name>.<name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>crcCheckChance</name> = <name>DEFAULT_CRC_CHECK_CHANCE</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>CompressionParameters</name><parameter_list>(<param><decl><type><name>ICompressor</name></type> <name>sstableCompressor</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>chunkLength</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>otherOptions</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>sstableCompressor</name></name> = <name>sstableCompressor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>chunkLength</name></name> = <name>chunkLength</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>otherOptions</name></name> = <name>otherOptions</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>crcCheckChance</name></name> = <call><name><name>otherOptions</name>.<name>get</name></name><argument_list>(<argument><expr><name>CRC_CHECK_CHANCE</name></expr></argument>)</argument_list></call> == null
                              ? <name>DEFAULT_CRC_CHECK_CHANCE</name>
                              : <call><name>parseCrcCheckChance</name><argument_list>(<argument><expr><call><name><name>otherOptions</name>.<name>get</name></name><argument_list>(<argument><expr><name>CRC_CHECK_CHANCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCrcCheckChance</name><parameter_list>(<param><decl><type><name>double</name></type> <name>crcCheckChance</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>validateCrcCheckChance</name><argument_list>(<argument><expr><name>crcCheckChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Setting crcCheckChance to {}"</expr></argument>, <argument><expr><name>crcCheckChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>crcCheckChance</name></name> = <name>crcCheckChance</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCrcCheckChance</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>this</name>.<name>crcCheckChance</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>double</name></type> <name>parseCrcCheckChance</name><parameter_list>(<param><decl><type><name>String</name></type> <name>crcCheckChance</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>chance</name> <init>= <expr><call><name><name>Double</name>.<name>parseDouble</name></name><argument_list>(<argument><expr><name>crcCheckChance</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>validateCrcCheckChance</name><argument_list>(<argument><expr><name>chance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>chance</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"crc_check_chance should be a double"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateCrcCheckChance</name><parameter_list>(<param><decl><type><name>double</name></type> <name>crcCheckChance</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name><name>crcCheckChance</name> <argument_list>&lt; <argument>0.0d || <name>crcCheckChance</name></argument> &gt;</argument_list></name> 1.0d</expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"crc_check_chance should be between 0.0 and 1.0"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>chunkLength</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>chunkLength</name> == null ? <name>DEFAULT_CHUNK_LENGTH</name> : <name>chunkLength</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ICompressor</name></extends></argument>&gt;</argument_list></name></type> <name>parseCompressorClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>className</name> == null || <call><name><name>className</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>

        <expr_stmt><expr><name>className</name> = <call><name><name>className</name>.<name>contains</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call> ? <name>className</name> : "org.apache.cassandra.io.compress." + <name>className</name></expr>;</expr_stmt>
        <try>try
        <block>{
            <return>return <expr>(<name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ICompressor</name></extends></argument>&gt;</argument_list></name>)<call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Could not create Compression for type " + <name>className</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ICompressor</name></type> <name>createCompressor</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ICompressor</name></extends></argument>&gt;</argument_list></name></type> <name>compressorClass</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compressionOptions</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>compressorClass</name> == null</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr>!<call><name><name>compressionOptions</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Unknown compression options (" + <call><name><name>compressionOptions</name>.<name>keySet</name></name><argument_list>()</argument_list></call> + ") since no compression class found"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <return>return <expr>null</expr>;</return>
        }</block></then></if>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>compressorClass</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"create"</expr></argument>, <argument><expr><name><name>Map</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ICompressor</name></type> <name>compressor</name> <init>= <expr>(<name>ICompressor</name>)<call><name><name>method</name>.<name>invoke</name></name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr><name>compressionOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Check for unknown options</comment>
            <decl_stmt><decl><type><name><name>AbstractSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>supportedOpts</name> <init>=  <expr><call><name><name>Sets</name>.<name>union</name></name><argument_list>(<argument><expr><call><name><name>compressor</name>.<name>supportedOptions</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>GLOBAL_OPTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>String</name></type> <name>provided</name> <range>: <expr><call><name><name>compressionOptions</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <if>if <condition>(<expr>!<call><name><name>supportedOpts</name>.<name>contains</name></name><argument_list>(<argument><expr><name>provided</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Unknown compression options " + <name>provided</name></expr></argument>)</argument_list></call></expr>;</throw></then></if></for>
            <return>return <expr><name>compressor</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"create method not found"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>SecurityException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Access forbiden"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Cannot access method create in " + <call><name><name>compressorClass</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Throwable</name></type> <name>cause</name> <init>= <expr><call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s.create() threw an error: %s"</expr></argument>,
                                             <argument><expr><call><name><name>compressorClass</name>.<name>getSimpleName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><name>cause</name> == null ? <call><name><name>e</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> + " " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> : <call><name><name>cause</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> + " " + <call><name><name>cause</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>ExceptionInInitializerError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Cannot initialize class " + <call><name><name>compressorClass</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>copyOptions</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>CharSequence</name></extends></argument>, <argument><name>?</name> <extends>extends <name>CharSequence</name></extends></argument>&gt;</argument_list></name></type> <name>co</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>co</name> == null || <call><name><name>co</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name><name>Collections</name>.</name>&lt;<name>String</name></expr>, <expr><name>String</name>&gt;<call><name>emptyMap</name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compressionOptions</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>CharSequence</name></extends></argument>, <argument><name>?</name> <extends>extends <name>CharSequence</name></extends></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>co</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>compressionOptions</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>compressionOptions</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Parse the chunk length (in KB) and returns it as bytes.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>parseChunkLength</name><parameter_list>(<param><decl><type><name>String</name></type> <name>chLengthKB</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>chLengthKB</name> == null</expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>parsed</name> <init>= <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>chLengthKB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>parsed</name> &gt; <name><name>Integer</name>.<name>MAX_VALUE</name></name> / 1024</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Value of " + <name>CHUNK_LENGTH_KB</name> + " is too large (" + <name>parsed</name> + ")"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <return>return <expr>1024 * <name>parsed</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Invalid value for " + <name>CHUNK_LENGTH_KB</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="line">// chunkLength must be a power of 2 because we assume so when</comment>
    <comment type="line">// computing the chunk number from an uncompressed file offset (see</comment>
    <comment type="line">// CompressedRandomAccessReader.decompresseChunk())</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <comment type="line">// if chunk length was not set (chunkLength == null), this is fine, default will be used</comment>
        <if>if <condition>(<expr><name>chunkLength</name> != null</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>chunkLength</name> &lt;= 0</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Invalid negative or null " + <name>CHUNK_LENGTH_KB</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>chunkLength</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>c</name> != 0</expr>)</condition>
            <block>{
                <if>if <condition>(<expr>(<name>c</name> &amp; 0x01) != 0</expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><name>found</name></expr>)</condition><then>
                        <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><name>CHUNK_LENGTH_KB</name> + " must be a power of 2"</expr></argument>)</argument_list></call></expr>;</throw></then>
                    <else>else
                        <expr_stmt><expr><name>found</name> = true</expr>;</expr_stmt></else></if>
                }</block></then></if>
                <expr_stmt><expr><name>c</name> &gt;&gt;= 1</expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>

        <expr_stmt><expr><call><name>validateCrcCheckChance</name><argument_list>(<argument><expr><name>crcCheckChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>asThriftOptions</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>otherOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>sstableCompressor</name> == null</expr>)</condition><then>
            <return>return <expr><name>options</name></expr>;</return></then></if>

        <expr_stmt><expr><call><name><name>options</name>.<name>put</name></name><argument_list>(<argument><expr><name>SSTABLE_COMPRESSION</name></expr></argument>, <argument><expr><call><name><name>sstableCompressor</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>chunkLength</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>options</name>.<name>put</name></name><argument_list>(<argument><expr><name>CHUNK_LENGTH_KB</name></expr></argument>, <argument><expr><call><name>chunkLengthInKB</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>options</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>chunkLengthInKB</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name>chunkLength</name><argument_list>()</argument_list></call> / 1024</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then>
        <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>obj</name> == null || <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call> != <call><name>getClass</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if></else></if>

        <decl_stmt><decl><type><name>CompressionParameters</name></type> <name>cp</name> <init>= <expr>(<name>CompressionParameters</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>EqualsBuilder</name><argument_list>()</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>sstableCompressor</name></expr></argument>, <argument><expr><name><name>cp</name>.<name>sstableCompressor</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name><name>cp</name>.<name>chunkLength</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>otherOptions</name></expr></argument>, <argument><expr><name><name>cp</name>.<name>otherOptions</name></name></expr></argument>)</argument_list></call>
            .<call><name>isEquals</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>HashCodeBuilder</name><argument_list>(<argument><expr>29</expr></argument>, <argument><expr>1597</expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>sstableCompressor</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>chunkLength</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>otherOptions</name></expr></argument>)</argument_list></call>
            .<call><name>toHashCode</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
