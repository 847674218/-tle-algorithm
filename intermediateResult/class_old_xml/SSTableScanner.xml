<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\sstable\SSTableScanner.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOError</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>IColumnIteratorFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>LazyColumnIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name>.<name>ICompactionScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>RowPosition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>IColumnIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryFilter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>RandomAccessReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>SSTableScanner</name> <super><implements>implements <name>ICompactionScanner</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>SSTableScanner</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>RandomAccessReader</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>SSTableReader</name></type> <name>sstable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>IColumnIterator</name></type> <name>row</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>exhausted</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumnIterator</name></argument>&gt;</argument_list></name></type> <name>iterator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>QueryFilter</name></type> <name>filter</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @param sstable SSTable to scan.
     */</comment>
    <constructor><name>SSTableScanner</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skipCache</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <call><name><name>sstable</name>.<name>openDataReader</name></name><argument_list>(<argument><expr><name>skipCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sstable</name>.<name>markSuspect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><name><name>this</name>.<name>sstable</name></name> = <name>sstable</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * @param sstable SSTable to scan.
     * @param filter filter to use when scanning the columns
     */</comment>
    <constructor><name>SSTableScanner</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>QueryFilter</name></type> <name>filter</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <call><name><name>sstable</name>.<name>openDataReader</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sstable</name>.<name>markSuspect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><name><name>this</name>.<name>sstable</name></name> = <name>sstable</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>filter</name></name> = <name>filter</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>file</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>seekTo</name><parameter_list>(<param><decl><type><name>RowPosition</name></type> <name>seekKey</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>position</name> <init>= <expr><call><name><name>sstable</name>.<name>getPosition</name></name><argument_list>(<argument><expr><name>seekKey</name></expr></argument>, <argument><expr><name><name>SSTableReader</name>.<name>Operator</name>.<name>GE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>position</name> &lt; 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>exhausted</name> = true</expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>file</name>.<name>seek</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>row</name> = null</expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sstable</name>.<name>markSuspect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"corrupt sstable"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLengthInBytes</name><parameter_list>()</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>file</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getCurrentPosition</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>file</name>.<name>getFilePointer</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getBackingFiles</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>sstable</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>iterator</name> == null</expr>)</condition><then>
            <expr_stmt><expr><name>iterator</name> = <name>exhausted</name> ? <call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr>new <name><name>IColumnIterator</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call> : new <call><name>KeyScanningIterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumnIterator</name></type> <name>next</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>iterator</name> == null</expr>)</condition><then>
            <expr_stmt><expr><name>iterator</name> = <name>exhausted</name> ? <call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr>new <name><name>IColumnIterator</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call> : new <call><name>KeyScanningIterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <class><specifier>protected</specifier> class <name>KeyScanningIterator</name> <super><implements>implements <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumnIterator</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>finishedAt</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
        <block>{
            <try>try
            <block>{
                <if>if <condition>(<expr><name>row</name> == null</expr>)</condition><then>
                    <return>return <expr>!<call><name><name>file</name>.<name>isEOF</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>
                <return>return <expr><name>finishedAt</name> &lt; <call><name><name>file</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>sstable</name>.<name>markSuspect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>IColumnIterator</name></type> <name>next</name><parameter_list>()</parameter_list>
        <block>{
            <try>try
            <block>{
                <if>if <condition>(<expr><name>row</name> != null</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>file</name>.<name>seek</name></name><argument_list>(<argument><expr><name>finishedAt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <assert>assert <expr>!<call><name><name>file</name>.<name>isEOF</name></name><argument_list>()</argument_list></call></expr>;</assert>

                <decl_stmt><decl><type><specifier>final</specifier> <name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>key</name> <init>= <expr><call><name><name>SSTableReader</name>.<name>decodeKey</name></name><argument_list>(<argument><expr><name><name>sstable</name>.<name>partitioner</name></name></expr></argument>,
                                                           <argument><expr><name><name>sstable</name>.<name>descriptor</name></name></expr></argument>,
                                                           <argument><expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>dataSize</name> <init>= <expr><call><name><name>SSTableReader</name>.<name>readRowSize</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>sstable</name>.<name>descriptor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>dataStart</name> <init>= <expr><call><name><name>file</name>.<name>getFilePointer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>finishedAt</name> = <name>dataStart</name> + <name>dataSize</name></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>filter</name> == null</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>row</name> = new <call><name>SSTableIdentityIterator</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dataStart</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>row</name></expr>;</return>
                }</block></then>
                <else>else
                <block>{
                    <return>return <expr><name>row</name> = new <call><name>LazyColumnIterator</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>new <class><super><name>IColumnIteratorFactory</name></super><argument_list>()</argument_list>
                    <block>{
                        <function><type><specifier>public</specifier> <name>IColumnIterator</name></type> <name>create</name><parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr><call><name><name>filter</name>.<name>getSSTableColumnIterator</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</return>
                }</block></else></if>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>sstable</name>.<name>markSuspect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name><name>SSTableScanner</name>.<name>this</name></name> + " failed to provide next columns from " + <name>this</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getSimpleName</name><argument_list>()</argument_list></call> + "(" +
                   "finishedAt:" + <name>finishedAt</name> +
                   ")"</expr>;</return>
    }</block></function>
    }</block></class>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getSimpleName</name><argument_list>()</argument_list></call> + "(" +
               "file=" + <name>file</name> +
               " sstable=" + <name>sstable</name> +
               " exhausted=" + <name>exhausted</name> +
               ")"</expr>;</return>
    }</block></function>
}</block></class></unit>
