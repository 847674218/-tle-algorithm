<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\ThreadSafeSortedColumns.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>SortedMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>SortedSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ConcurrentSkipListMap</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Function</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Allocator</name></name>;</import>

<class><specifier>public</specifier> class <name>ThreadSafeSortedColumns</name> <super><extends>extends <name>AbstractThreadUnsafeSortedColumns</name></extends> <implements>implements <name>ISortedColumns</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ConcurrentSkipListMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>factory</name> <init>= <expr>new <class><super><name>Factory</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>ISortedColumns</name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>insertReversed</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>ThreadSafeSortedColumns</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ISortedColumns</name></type> <name>fromSorted</name><parameter_list>(<param><decl><type><name><name>SortedMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>sortedMap</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>insertReversed</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>ThreadSafeSortedColumns</name><argument_list>(<argument><expr><name>sortedMap</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>factory</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>factory</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>(<name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name>)<call><name><name>map</name>.<name>comparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <constructor><specifier>private</specifier> <name>ThreadSafeSortedColumns</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>map</name></name> = new <call><name><name>ConcurrentSkipListMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>ThreadSafeSortedColumns</name><parameter_list>(<param><decl><type><name><name>SortedMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>map</name></name> = new <call><name><name>ConcurrentSkipListMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>getFactory</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>factory</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ISortedColumns</name></type> <name>cloneMe</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>ThreadSafeSortedColumns</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInsertReversed</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="block">/*
     * If we find an old column that has the same name
     * the ask it to resolve itself else add the new column
    */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addColumnInternal</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>addColumnInternal</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>name</name> <init>= <expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>true</expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>IColumn</name></type> <name>oldColumn</name> <init>= <expr><call><name><name>map</name>.<name>putIfAbsent</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>oldColumn</name> == null</expr>)</condition><then>
                <return>return <expr><call><name><name>column</name>.<name>serializedSize</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>

            <if>if <condition>(<expr><name>oldColumn</name> instanceof <name>SuperColumn</name></expr>)</condition><then>
            <block>{
                <assert>assert <expr><name>column</name> instanceof <name>SuperColumn</name></expr>;</assert>
                <decl_stmt><decl><type><name>long</name></type> <name>previousSize</name> <init>= <expr><call><name><name>oldColumn</name>.<name>serializedSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr>((<name>SuperColumn</name>) <name>oldColumn</name>).<call><name>putColumn</name><argument_list>(<argument><expr>(<name>SuperColumn</name>)<name>column</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>oldColumn</name>.<name>serializedSize</name></name><argument_list>()</argument_list></call> - <name>previousSize</name></expr>;</return>
            }</block></then>
            <else>else
            <block>{
                <comment type="line">// calculate reconciled col from old (existing) col and new col</comment>
                <decl_stmt><decl><type><name>IColumn</name></type> <name>reconciledColumn</name> <init>= <expr><call><name><name>column</name>.<name>reconcile</name></name><argument_list>(<argument><expr><name>oldColumn</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>map</name>.<name>replace</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>oldColumn</name></expr></argument>, <argument><expr><name>reconciledColumn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><call><name><name>reconciledColumn</name>.<name>serializedSize</name></name><argument_list>()</argument_list></call> - <call><name><name>oldColumn</name>.<name>serializedSize</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>

                <comment type="line">// We failed to replace column due to a concurrent update or a concurrent removal. Keep trying.</comment>
                <comment type="line">// (Currently, concurrent removal should not happen (only updates), but let us support that anyway.)</comment>
            }</block></else></if>
        }</block></while>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * We need to go through each column in the column container and resolve it before adding
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAll</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>cm</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>, <param><decl><type><name><name>Function</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>transformation</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addAllWithSizeDelta</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>transformation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>addAllWithSizeDelta</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>cm</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>, <param><decl><type><name><name>Function</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>transformation</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><call><name><name>cm</name>.<name>getDeletionInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>sizeDelta</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><call><name><name>cm</name>.<name>getSortedColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><name>sizeDelta</name> += <call><name>addColumnInternal</name><argument_list>(<argument><expr><call><name><name>transformation</name>.<name>apply</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><name>sizeDelta</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>replace</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>oldColumn</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>newColumn</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>oldColumn</name>.<name>name</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>newColumn</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

        <return>return <expr><call><name><name>map</name>.<name>replace</name></name><argument_list>(<argument><expr><call><name><name>oldColumn</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oldColumn</name></expr></argument>, <argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>getColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>map</name>.<name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>map</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>map</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>getSortedColumns</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>map</name>.<name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>getReverseSortedColumns</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>map</name>.<name>descendingMap</name></name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>getColumnNames</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>map</name>.<name>navigableKeySet</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>map</name>.<name>values</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>reverseIterator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getReverseSortedColumns</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>map</name>.<name>tailMap</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>reverseIterator</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>map</name>.<name>descendingMap</name></name><argument_list>()</argument_list></call>.<call><name>tailMap</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
