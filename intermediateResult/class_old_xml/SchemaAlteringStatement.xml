<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\cql3\statements\SchemaAlteringStatement.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>statements</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>CQLStatement</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>Schema</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>CFName</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>ClientState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageProxy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CqlResult</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>SchemaDisagreementException</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Predicates</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Maps</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Abstract class for statements that alter the schema.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>SchemaAlteringStatement</name> <super><extends>extends <name>CFStatement</name></extends> <implements>implements <name>CQLStatement</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>timeLimitForSchemaAgreement</name> <init>= <expr>10 * 1000</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isColumnFamilyLevel</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>SchemaAlteringStatement</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>isColumnFamilyLevel</name></name> = false</expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>protected</specifier> <name>SchemaAlteringStatement</name><parameter_list>(<param><decl><type><name>CFName</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>isColumnFamilyLevel</name></name> = true</expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>prepareKeyspace</name><parameter_list>(<param><decl><type><name>ClientState</name></type> <name>state</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>isColumnFamilyLevel</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>super</name>.<name>prepareKeyspace</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Prepared</name></type> <name>prepare</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <return>return <expr>new <call><name>Prepared</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>announceMigration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>;</function_decl>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>ClientState</name></type> <name>state</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>validateSchemaAgreement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CqlResult</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>ClientState</name></type> <name>state</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name>announceMigration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>InvalidRequestException</name></type> <name>ex</name> <init>= <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ex</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name>validateSchemaIsSettled</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>null</expr>;</return>
    }</block></function>

    <comment type="line">// Copypasta from CassandraServer (where it is private).</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateSchemaAgreement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SchemaDisagreementException</name></expr></argument></throws>
    <block>{
       <if>if <condition>(<expr><call><name>describeSchemaVersions</name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then>
            <throw>throw <expr>new <call><name>SchemaDisagreementException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>describeSchemaVersions</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// unreachable hosts don't count towards disagreement</comment>
        <return>return <expr><call><name><name>Maps</name>.<name>filterKeys</name></name><argument_list>(<argument><expr><call><name><name>StorageProxy</name>.<name>describeSchemaVersions</name></name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>Predicates</name>.<name>not</name></name><argument_list>(<argument><expr><call><name><name>Predicates</name>.<name>equalTo</name></name><argument_list>(<argument><expr><name><name>StorageProxy</name>.<name>UNREACHABLE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateSchemaIsSettled</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SchemaDisagreementException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>limit</name> <init>= <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> + <name>timeLimitForSchemaAgreement</name></expr></init></decl>;</decl_stmt>

        <label><name>outer</name>:</label>
        <while>while <condition>(<expr><name>limit</name> - <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> &gt;= 0</expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>currentVersionId</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getVersion</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>String</name></type> <name>version</name> <range>: <expr><call><name>describeSchemaVersions</name><argument_list>()</argument_list></call>.<call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr>!<call><name><name>version</name>.<name>equals</name></name><argument_list>(<argument><expr><name>currentVersionId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <continue>continue outer;</continue></then></if>
            }</block></for>

            <comment type="line">// schemas agree</comment>
            <return>return;</return>
        }</block></while>

        <throw>throw <expr>new <call><name>SchemaDisagreementException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>
}</block></class>
</unit>
