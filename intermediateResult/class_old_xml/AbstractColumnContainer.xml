<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\AbstractColumnContainer.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>SortedSet</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Function</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Functions</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>IIterableColumns</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Allocator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>HeapAllocator</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractColumnContainer</name> <super><implements>implements <name>IColumnContainer</name>, <name>IIterableColumns</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>AbstractColumnContainer</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>ISortedColumns</name></type> <name>columns</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>AbstractColumnContainer</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>columns</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>columns</name></name> = <name>columns</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Deprecated</name></annotation> <comment type="line">// TODO this is a hack to set initial value outside constructor</comment>
    <specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<param><decl><type><name>int</name></type> <name>localtime</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>columns</name>.<name>delete</name></name><argument_list>(<argument><expr>new <call><name><name>ISortedColumns</name>.<name>DeletionInfo</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>localtime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<param><decl><type><name>AbstractColumnContainer</name></type> <name>cc2</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>columns</name>.<name>delete</name></name><argument_list>(<argument><expr><call><name><name>cc2</name>.<name>columns</name>.<name>getDeletionInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMarkedForDelete</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call> &gt; <name><name>Long</name>.<name>MIN_VALUE</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getMarkedForDeleteAt</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>getDeletionInfo</name></name><argument_list>()</argument_list></call>.<name>markedForDeleteAt</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLocalDeletionTime</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>getDeletionInfo</name></name><argument_list>()</argument_list></call>.<name>localDeletionTime</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>getComparator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Drops expired row-level tombstones.  Normally, these are dropped once the row no longer exists, but
     * if new columns are inserted into the row post-deletion, they can keep the row tombstone alive indefinitely,
     * with non-intuitive results.  See https://issues.apache.org/jira/browse/CASSANDRA-2317
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>maybeResetDeletionTimes</name><parameter_list>(<param><decl><type><name>int</name></type> <name>gcBefore</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>columns</name>.<name>maybeResetDeletionTimes</name></name><argument_list>(<argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>addAllWithSizeDelta</name><parameter_list>(<param><decl><type><name>AbstractColumnContainer</name></type> <name>cc</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>, <param><decl><type><name><name>Function</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>transformation</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>addAllWithSizeDelta</name></name><argument_list>(<argument><expr><name><name>cc</name>.<name>columns</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>transformation</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAll</name><parameter_list>(<param><decl><type><name>AbstractColumnContainer</name></type> <name>cc</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>, <param><decl><type><name><name>Function</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>transformation</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>columns</name>.<name>addAll</name></name><argument_list>(<argument><expr><name><name>cc</name>.<name>columns</name></name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>transformation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAll</name><parameter_list>(<param><decl><type><name>AbstractColumnContainer</name></type> <name>cc</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addAll</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name><name>Functions</name>.</name>&lt;<name>IColumn</name>&gt;<call><name>identity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name><name>HeapAllocator</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>columns</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>getColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>getColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>replace</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>oldColumn</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>newColumn</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>replace</name></name><argument_list>(<argument><expr><name>oldColumn</name></expr></argument>, <argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/*
     * Note that for some of the implementation backing the container, the
     * return set may not have implementation for tailSet, headSet and subSet.
     * See ColumnNamesSet in ArrayBackedSortedColumns for more details.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>getColumnNames</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>getColumnNames</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>getSortedColumns</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>getSortedColumns</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>getReverseSortedColumns</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>getReverseSortedColumns</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>columns</name>.<name>removeColumn</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>retainAll</name><parameter_list>(<param><decl><type><name>AbstractColumnContainer</name></type> <name>container</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>columns</name>.<name>retainAll</name></name><argument_list>(<argument><expr><name><name>container</name>.<name>columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnCount</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getEstimatedColumnCount</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLiveColumnCount</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>column</name>.<name>isLive</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt></then></if>
        }</block></for>

        <return>return <expr><name>count</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>reverseIterator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>reverseIterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>iterator</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>reverseIterator</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>reverseIterator</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasIrrelevantData</name><parameter_list>(<param><decl><type><name>int</name></type> <name>gcBefore</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name>getLocalDeletionTime</name><argument_list>()</argument_list></call> &lt; <name>gcBefore</name></expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>deletedAt</name> <init>= <expr><call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
            <if>if <condition>(<expr><call><name><name>column</name>.<name>mostRecentLiveChangeAt</name></name><argument_list>()</argument_list></call> &lt;= <name>deletedAt</name> || <call><name><name>column</name>.<name>hasIrrelevantData</name></name><argument_list>(<argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr>true</expr>;</return></then></if></for>

        <return>return <expr>false</expr>;</return>
    }</block></function>
}</block></class>
</unit>
