<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\service\StorageServiceMBean.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ExecutionException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeoutException</name></name>;</import>

<import>import <name><name>javax</name>.<name>management</name>.<name>NotificationEmitter</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>UnavailableException</name></name>;</import>


<class type="interface"><specifier>public</specifier> interface <name>StorageServiceMBean</name> <super><extends>extends <name>NotificationEmitter</name></extends></super>
<block>{
    <comment type="block" format="javadoc">/**
     * Retrieve the list of live nodes in the cluster, where "liveness" is
     * determined by the failure detector of the node being queried.
     *
     * @return set of IP addresses, as Strings
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLiveNodes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Retrieve the list of unreachable nodes in the cluster, as determined
     * by this node's failure detector.
     *
     * @return set of IP addresses, as Strings
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getUnreachableNodes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Retrieve the list of nodes currently bootstrapping into the ring.
     *
     * @return set of IP addresses, as Strings
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getJoiningNodes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Retrieve the list of nodes currently leaving the ring.
     *
     * @return set of IP addresses, as Strings
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLeavingNodes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Retrieve the list of nodes currently moving in the ring.
     *
     * @return set of IP addresses, as Strings
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getMovingNodes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Fetch a string representation of the token.
     *
     * @return a string token
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getToken</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Fetch a string representation of the Cassandra version.
     * @return A string representation of the Cassandra version.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getReleaseVersion</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Fetch a string representation of the current Schema version.
     * @return A string representation of the Schema version.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getSchemaVersion</name><parameter_list>()</parameter_list>;</function_decl>


    <comment type="block" format="javadoc">/**
     * Get the list of all data file locations from conf
     * @return String array of all locations
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getAllDataFileLocations</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get location of the commit log
     * @return a string path
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getCommitLogLocation</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get location of the saved caches dir
     * @return a string path
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getSavedCachesLocation</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Retrieve a map of range to end points that describe the ring topology
     * of a Cassandra cluster.
     *
     * @return mapping of ranges to end points
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRangeToEndpointMap</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Retrieve a map of range to rpc addresses that describe the ring topology
     * of a Cassandra cluster.
     *
     * @return mapping of ranges to rpc addresses
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRangeToRpcaddressMap</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * The same as {@code describeRing(String)} but converts TokenRange to the String for JMX compatibility
     *
     * @param keyspace The keyspace to fetch information about
     *
     * @return a List of TokenRange(s) converted to String for the given keyspace
     *
     * @throws InvalidRequestException if there is no ring information available about keyspace
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name> <argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>describeRingJMX</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the local node's primary range.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getPrimaryRange</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Retrieve a map of pending ranges to endpoints that describe the ring topology
     * @param keyspace the keyspace to get the pending range map for.
     * @return a map of pending ranges to endpoints
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getPendingRangeToEndpointMap</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Retrieve a map of tokens to endpoints, including the bootstrapping
     * ones.
     *
     * @return a map of tokens to endpoints in ascending order
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTokenToEndpointMap</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Numeric load value.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>double</name></type> <name>getLoad</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Human-readable load value */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getLoadString</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Human-readable load value.  Keys are IP addresses. */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLoadMap</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Return the generation value for this node.
     *
     * @return generation number
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>getCurrentGenerationNumber</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * This method returns the N endpoints that are responsible for storing the
     * specified key i.e for replication.
     *
     * @param table keyspace name also known as table
     * @param cf Column family name
     * @param key - key for which we need to find the endpoint return value -
     * the endpoint responsible for this key
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>getNaturalEndpoints</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>String</name></type> <name>cf</name></decl></param>, <param><decl><type><name>String</name></type> <name>key</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>getNaturalEndpoints</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Takes the snapshot for the given tables. A snapshot name must be specified.
     *
     * @param tag the tag given to the snapshot; may not be null or empty
     * @param tableNames the name of the tables to snapshot; empty means "all."
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>takeSnapshot</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tag</name></decl></param>, <param><decl><type><name>String</name>...</type> <name>tableNames</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Takes the snapshot of a specific column family. A snapshot name must be specified.
     *
     * @param tableName the keyspace which holds the specified column family
     * @param columnFamilyName the column family to snapshot
     * @param tag the tag given to the snapshot; may not be null or empty
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>takeColumnFamilySnapshot</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamilyName</name></decl></param>, <param><decl><type><name>String</name></type> <name>tag</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Remove the snapshot with the given name from the given tables.
     * If no tag is specified we will remove all snapshots.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>clearSnapshot</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tag</name></decl></param>, <param><decl><type><name>String</name>...</type> <name>tableNames</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Forces major compaction of a single keyspace
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>forceTableCompaction</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>String</name>...</type> <name>columnFamilies</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Trigger a cleanup of keys on a single keyspace
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>forceTableCleanup</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>String</name>...</type> <name>columnFamilies</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Scrub (deserialize + reserialize at the latest version, skipping bad rows if any) the given keyspace.
     * If columnFamilies array is empty, all CFs are scrubbed.
     *
     * Scrubbed CFs will be snapshotted first.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>scrub</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>String</name>...</type> <name>columnFamilies</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Rewrite all sstables to the latest version.
     * Unlike scrub, it doesn't skip bad rows and do not snapshot sstables first.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>upgradeSSTables</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>String</name>...</type> <name>columnFamilies</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Flush all memtables for the given column families, or all columnfamilies for the given table
     * if none are explicitly listed.
     * @param tableName
     * @param columnFamilies
     * @throws IOException
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>forceTableFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>String</name>...</type> <name>columnFamilies</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Invoke repair asynchronously.
     * You can track repair progress by subscribing JMX notification sent from this StorageServiceMBean.
     * Notification format is:
     *   type: "repair"
     *   userObject: int array of length 2, [0]=command number, [1]=ordinal of AntiEntropyService.Status
     *
     * @return Repair command number, or 0 if nothing to repair
     * @see #forceTableRepair(String, boolean, String...)
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>forceRepairAsync</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isSequential</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>primaryRange</name></decl></param>, <param><decl><type><name>String</name>...</type> <name>columnFamilies</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Same as forceRepairAsync, but handles a specified range
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>forceRepairRangeAsync</name><parameter_list>(<param><decl><type><name>String</name></type> <name>beginToken</name></decl></param>, <param><decl><type><name>String</name></type> <name>endToken</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isSequential</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name>...</type> <name>columnFamilies</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Triggers proactive repair for given column families, or all columnfamilies for the given table
     * if none are explicitly listed.
     * @param tableName
     * @param columnFamilies
     * @throws IOException
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>forceTableRepair</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isSequential</name></decl></param>, <param><decl><type><name>String</name>...</type> <name>columnFamilies</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Triggers proactive repair but only for the node primary range.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>forceTableRepairPrimaryRange</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isSequential</name></decl></param>, <param><decl><type><name>String</name>...</type> <name>columnFamilies</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Perform repair of a specific range.
     *
     * This allows incremental repair to be performed by having an external controller submitting repair jobs.
     * Note that the provided range much be a subset of one of the node local range.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>forceTableRepairRange</name><parameter_list>(<param><decl><type><name>String</name></type> <name>beginToken</name></decl></param>, <param><decl><type><name>String</name></type> <name>endToken</name></decl></param>, <param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isSequential</name></decl></param>, <param><decl><type><name>String</name>...</type> <name>columnFamilies</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>forceTerminateAllRepairSessions</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * transfer this node's data to other machines and remove it from service.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>decommission</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @param newToken token to move this node to.
     * This node will unload its data onto its neighbors, and bootstrap to the new token.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>move</name><parameter_list>(<param><decl><type><name>String</name></type> <name>newToken</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * removeToken removes token (and all data associated with
     * enpoint that had it) from the ring
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>removeToken</name><parameter_list>(<param><decl><type><name>String</name></type> <name>token</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the status of a token removal.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getRemovalStatus</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Force a remove operation to finish.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>forceRemoveCompletion</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** set the logging level at runtime */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setLog4jLevel</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classQualifier</name></decl></param>, <param><decl><type><name>String</name></type> <name>level</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** get the operational mode (leaving, joining, normal, decommissioned, client) **/</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getOperationMode</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** get the progress of a drain operation */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getDrainProgress</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** makes node unavailable for writes, flushes memtables and replays commitlog. */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>drain</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Truncates (deletes) the given columnFamily from the provided keyspace.
     * Calling truncate results in actual deletion of all data in the cluster
     * under the given columnFamily and it will fail unless all hosts are up.
     * All data in the given column family will be deleted, but its definition
     * will not be affected.
     *
     * @param keyspace The keyspace to delete from
     * @param columnFamily The column family to delete data from.
     *
     * @throws UnavailableException if some of the hosts in the ring are down.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>truncate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimeoutException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * given a list of tokens (representing the nodes in the cluster), returns
     *   a mapping from "token -&gt; %age of cluster owned by that token"
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>getOwnership</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Effective ownership is % of the data each node owns given the keyspace
     * we calculate the percentage using replication factor.
     * If Keyspace == null, this method will try to verify if all the keyspaces
     * in the cluster have the same replication strategies and if yes then we will
     * use the first else a empty Map is returned.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>effectiveOwnership</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getKeyspaces</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Change endpointsnitch class and dynamic-ness (and dynamic attributes) at runtime
     * @param epSnitchClassName        the canonical path name for a class implementing IEndpointSnitch
     * @param dynamic                  boolean that decides whether dynamicsnitch is used or not
     * @param dynamicUpdateInterval    integer, in ms (default 100)
     * @param dynamicResetInterval     integer, in ms (default 600,000)
     * @param dynamicBadnessThreshold  double, (default 0.0)
     * @throws ConfigurationException  classname not found on classpath
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>updateSnitch</name><parameter_list>(<param><decl><type><name>String</name></type> <name>epSnitchClassName</name></decl></param>, <param><decl><type><name>Boolean</name></type> <name>dynamic</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>dynamicUpdateInterval</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>dynamicResetInterval</name></decl></param>, <param><decl><type><name>Double</name></type> <name>dynamicBadnessThreshold</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>;</function_decl>

    <comment type="line">// allows a user to forcibly 'kill' a sick node</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>stopGossiping</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// allows a user to recover a forcibly 'killed' node</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>startGossiping</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// to determine if gossip is disabled</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// allows a user to disable thrift</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>stopRPCServer</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// allows a user to reenable thrift</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>startRPCServer</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// to determine if thrift is running</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isRPCServerRunning</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// allows a node that have been started without joining the ring to join it</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>joinRing</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name></expr></argument></throws>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isJoined</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>getExceptionCount</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setStreamThroughputMbPerSec</name><parameter_list>(<param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>getStreamThroughputMbPerSec</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>getCompactionThroughputMbPerSec</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setCompactionThroughputMbPerSec</name><parameter_list>(<param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isIncrementalBackupsEnabled</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setIncrementalBackupsEnabled</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Initiate a process of streaming data for which we are responsible from other nodes. It is similar to bootstrap
     * except meant to be used on a node which is already in the cluster (typically containing no data) as an
     * alternative to running repair.
     *
     * @param sourceDc Name of DC from which to select sources for streaming or null to pick any node
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>rebuild</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sourceDc</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>bulkLoad</name><parameter_list>(<param><decl><type><name>String</name></type> <name>directory</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>rescheduleFailedDeletions</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Load new SSTables to the given keyspace/columnFamily
     *
     * @param ksName The parent keyspace name
     * @param cfName The ColumnFamily name where SSTables belong
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>loadNewSSTables</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Return a List of Tokens representing a sample of keys across all ColumnFamilyStores.
     *
     * Note: this should be left as an operation, not an attribute (methods starting with "get")
     * to avoid sending potentially multiple MB of data when accessing this mbean by default.  See CASSANDRA-4452.
     *
     * @return set of Tokens as Strings
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>sampleKeyRange</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * rebuild the specified indexes
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>rebuildSecondaryIndex</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name>String</name>...</type> <name>idxNames</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>resetLocalSchema</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
}</block></class>
</unit>
