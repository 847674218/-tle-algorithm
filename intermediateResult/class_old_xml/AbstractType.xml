<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\marshal\AbstractType.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>IColumn</name></name>;</import>
<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>IndexHelper</name>.<name>IndexInfo</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Specifies a Comparator for a specific type of ByteBuffer.
 *
 * Note that empty ByteBuffer are used to represent "start at the beginning"
 * or "stop at the end" arguments to get_slice, so the Comparator
 * should always handle those values even if they normally do not
 * represent a valid ByteBuffer for the type being compared.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>AbstractType</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>IndexInfo</name></argument>&gt;</argument_list></name></type> <name>indexComparator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>IndexInfo</name></argument>&gt;</argument_list></name></type> <name>indexReverseComparator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columnComparator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columnReverseComparator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>reverseComparator</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>AbstractType</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>indexComparator</name> = new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>IndexInfo</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>IndexInfo</name></type> <name>o1</name></decl></param>, <param><decl><type><name>IndexInfo</name></type> <name>o2</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr><call><name><name>AbstractType</name>.<name>this</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>o1</name>.<name>lastName</name></name></expr></argument>, <argument><expr><name><name>o2</name>.<name>lastName</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><name>indexReverseComparator</name> = new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>IndexInfo</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>IndexInfo</name></type> <name>o1</name></decl></param>, <param><decl><type><name>IndexInfo</name></type> <name>o2</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr><call><name><name>AbstractType</name>.<name>this</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>o1</name>.<name>firstName</name></name></expr></argument>, <argument><expr><name><name>o2</name>.<name>firstName</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnComparator</name> = new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>c1</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>c2</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr><call><name><name>AbstractType</name>.<name>this</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>c1</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>c2</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnReverseComparator</name> = new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>c1</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>c2</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr><call><name><name>AbstractType</name>.<name>this</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>c2</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>c1</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><name>reverseComparator</name> = new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>o1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>o2</name></decl></param>)</parameter_list>
            <block>{
                <if>if <condition>(<expr><call><name><name>o1</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                <block>{
                    <return>return <expr><call><name><name>o2</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 ? 0 : -1</expr>;</return>
                }</block></then></if>
                <if>if <condition>(<expr><call><name><name>o2</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                <block>{
                    <return>return <expr>1</expr>;</return>
                }</block></then></if>

                <return>return <expr><call><name><name>AbstractType</name>.<name>this</name>.<name>compare</name></name><argument_list>(<argument><expr><name>o2</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
    }</block></constructor>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>T</name></type> <name>compose</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ByteBuffer</name></type> <name>decompose</name><parameter_list>(<param><decl><type><name>T</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** get a string representation of the bytes suitable for log messages */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** get a byte representation of the given string. */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ByteBuffer</name></type> <name>fromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>;</function_decl>

    <comment type="block">/* validate that the byte array is a valid sequence for the type we are supposed to be comparing */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/** @deprecated use reverseComparator field instead */</comment>
    <function><type><specifier>public</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>getReverseComparator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>reverseComparator</name></expr>;</return>
    }</block></function>

    <comment type="block">/* convenience method */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>builder</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>builder</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/* convenience method */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getColumnsString</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>builder</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>getString</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>builder</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCommutative</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parseDefaultParameters</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>baseType</name></decl></param>, <param><decl><type><name>TypeParser</name></type> <name>parser</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parameters</name> <init>= <expr><call><name><name>parser</name>.<name>getKeyValueParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>reversed</name> <init>= <expr><call><name><name>parameters</name>.<name>get</name></name><argument_list>(<argument><expr>"reversed"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>reversed</name> != null &amp;&amp; (<call><name><name>reversed</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> || <call><name><name>reversed</name>.<name>equals</name></name><argument_list>(<argument><expr>"true"</expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <block>{
            <return>return <expr><call><name><name>ReversedType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>baseType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <return>return <expr><name>baseType</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if this comparator is compatible with the provided
     * previous comparator, that is if previous can safely be replaced by this.
     * A comparator cn should be compatible with a previous one cp if forall columns c1 and c2,
     * if   cn.validate(c1) and cn.validate(c2) and cn.compare(c1, c2) == v,
     * then cp.validate(c1) and cp.validate(c2) and cp.compare(c1, c2) == v.
     *
     * Note that a type should be compatible with at least itself and when in
     * doubt, keep the default behavior of not being compatible with any other comparator!
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCompatibleWith</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>previous</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>this</name> == <name>previous</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * This must be overriden by subclasses if necessary so that for any
     * AbstractType, this == TypeParser.parse(toString()).
     *
     * Note that for backwards compatibility this includes the full classname.
     * For CQL purposes the short name is fine.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
