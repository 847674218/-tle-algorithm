<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\WriteResponse.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>Message</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>


<comment type="block">/*
 * This message is sent back the row mutation verb handler
 * and basically specifies if the write succeeded or not for a particular
 * key in a table
 */</comment>
<class><specifier>public</specifier> class <name>WriteResponse</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>WriteResponseSerializer</name></type> <name>serializer_</name> <init>= <expr>new <call><name>WriteResponseSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>WriteResponseSerializer</name></type> <name>serializer</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>serializer_</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Message</name></type> <name>makeWriteResponseMessage</name><parameter_list>(<param><decl><type><name>Message</name></type> <name>original</name></decl></param>, <param><decl><type><name>WriteResponse</name></type> <name>respose</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr><call><name><name>FBUtilities</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>respose</name></expr></argument>, <argument><expr><call><name><name>WriteResponse</name>.<name>serializer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>original</name>.<name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>original</name>.<name>getReply</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><call><name><name>original</name>.<name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>table_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>key_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>status_</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>WriteResponse</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>bVal</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name>table_</name> = <name>table</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>key_</name> = <name>key</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>status_</name> = <name>bVal</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><type><specifier>public</specifier> <name>String</name></type> <name>table</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>table_</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>key</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>key_</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSuccess</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name>status_</name></expr>;</return>
	}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WriteResponseSerializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>WriteResponse</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>WriteResponse</name></type> <name>wm</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>wm</name>.<name>table</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><call><name><name>wm</name>.<name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeBoolean</name></name><argument_list>(<argument><expr><call><name><name>wm</name>.<name>isSuccess</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>WriteResponse</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>table</name> <init>= <expr><call><name><name>dis</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>key</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>status</name> <init>= <expr><call><name><name>dis</name>.<name>readBoolean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>WriteResponse</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>WriteResponse</name></type> <name>response</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>DBConstants</name>.<name>shortSize</name></name> + <call><name><name>FBUtilities</name>.<name>encodedUTF8Length</name></name><argument_list>(<argument><expr><call><name><name>response</name>.<name>table</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>shortSize</name></name> + <call><name><name>response</name>.<name>key</name></name><argument_list>()</argument_list></call>.<call><name>remaining</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>boolSize</name></name></expr>;</expr_stmt>
            <return>return <expr><name>size</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
