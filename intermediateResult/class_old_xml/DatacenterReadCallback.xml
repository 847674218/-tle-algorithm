<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\service\DatacenterReadCallback.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ReadResponse</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>Table</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>NetworkTopologyStrategy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>Message</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>UnavailableException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Datacenter Quorum response handler blocks for a quorum of responses from the local DC
 */</comment>
<class><specifier>public</specifier> class <name><name>DatacenterReadCallback</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>ReadCallback</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>localComparator</name> <init>= <expr>new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint1</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>endpoint2</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>local1</name> <init>= <expr><call><name><name>localdc</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><name>endpoint1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>local2</name> <init>= <expr><call><name><name>localdc</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><name>endpoint2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>local1</name> &amp;&amp; !<name>local2</name></expr>)</condition><then>
                <return>return <expr>-1</expr>;</return></then></if>
            <if>if <condition>(<expr><name>local2</name> &amp;&amp; !<name>local1</name></expr>)</condition><then>
                <return>return <expr>1</expr>;</return></then></if>
            <return>return <expr>0</expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DatacenterReadCallback</name><parameter_list>(<param><decl><type><name>IResponseResolver</name></type> <name>resolver</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></param>, <param><decl><type><name>IReadCommand</name></type> <name>command</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>endpoints</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>endpoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>void</name></type> <name>sortForConsistencyLevel</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>endpoints</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>endpoints</name></expr></argument>, <argument><expr><name>localComparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>boolean</name></type> <name>waitingFor</name><parameter_list>(<param><decl><type><name>Message</name></type> <name>message</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>localdc</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><call><name><name>message</name>.<name>getFrom</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>boolean</name></type> <name>waitingFor</name><parameter_list>(<param><decl><type><name>ReadResponse</name></type> <name>response</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// cheat and leverage our knowledge that a local read is the only way the ReadResponse</comment>
        <comment type="line">// version of this method gets called</comment>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>determineBlockFor</name><parameter_list>(<param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>, <param><decl><type><name>String</name></type> <name>table</name></decl></param>)</parameter_list>
	<block>{
        <decl_stmt><decl><type><name>NetworkTopologyStrategy</name></type> <name>stategy</name> <init>= <expr>(<name>NetworkTopologyStrategy</name>) <call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>.<call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr>(<call><name><name>stategy</name>.<name>getReplicationFactor</name></name><argument_list>(<argument><expr><name>localdc</name></expr></argument>)</argument_list></call> / 2) + 1</expr>;</return>
	}</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>assureSufficientLiveNodes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnavailableException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>localEndpoints</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>InetAddress</name></type> <name>endpoint</name> <range>: <expr><name>endpoints</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>localdc</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>localEndpoints</name>++</expr>;</expr_stmt></then></if>
        }</block></for>

        <if>if <condition>(<expr><name>localEndpoints</name> &lt; <name>blockfor</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"Local replicas ["</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>InetAddress</name></type> <name>endpoint</name> <range>: <expr><name>endpoints</name></expr></range></decl></init>)
                <block>{
                    <if>if <condition>(<expr><call><name><name>localdc</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>builder</name>.<name>append</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></for>
                <expr_stmt><expr><call><name><name>builder</name>.<name>append</name></name><argument_list>(<argument><expr>"] are insufficient to satisfy LOCAL_QUORUM requirement of "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>blockfor</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" live nodes in '"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>localdc</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr><call><name><name>builder</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <throw>throw <expr>new <call><name>UnavailableException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
