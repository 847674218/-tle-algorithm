<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\cql3\CFPropDefs.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Sets</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name>.<name>AbstractCompactionStrategy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>TypeParser</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name>.<name>CompressionParameters</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>InvalidRequestException</name></name>;</import>

<class><specifier>public</specifier> class <name>CFPropDefs</name> <super><extends>extends <name>PropertyDefinitions</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>CFPropDefs</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_COMMENT</name> <init>= <expr>"comment"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_READREPAIRCHANCE</name> <init>= <expr>"read_repair_chance"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_DCLOCALREADREPAIRCHANCE</name> <init>= <expr>"dclocal_read_repair_chance"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_GCGRACESECONDS</name> <init>= <expr>"gc_grace_seconds"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_MINCOMPACTIONTHRESHOLD</name> <init>= <expr>"min_compaction_threshold"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_MAXCOMPACTIONTHRESHOLD</name> <init>= <expr>"max_compaction_threshold"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_REPLICATEONWRITE</name> <init>= <expr>"replicate_on_write"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_COMPACTION_STRATEGY_CLASS</name> <init>= <expr>"compaction_strategy_class"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_CACHING</name> <init>= <expr>"caching"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KW_BF_FP_CHANCE</name> <init>= <expr>"bloom_filter_fp_chance"</expr></init></decl>;</decl_stmt>

    <comment type="line">// Maps CQL short names to the respective Cassandra comparator/validator class names</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>comparators</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keywords</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>obsoleteKeywords</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>allowedKeywords</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMPACTION_OPTIONS_PREFIX</name> <init>= <expr>"compaction_strategy_options"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMPRESSION_PARAMETERS_PREFIX</name> <init>= <expr>"compression_parameters"</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr>static
    <block>{
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"ascii"</expr></argument>, <argument><expr>"AsciiType"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"bigint"</expr></argument>, <argument><expr>"LongType"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"blob"</expr></argument>, <argument><expr>"BytesType"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"boolean"</expr></argument>, <argument><expr>"BooleanType"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"counter"</expr></argument>, <argument><expr>"CounterColumnType"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"decimal"</expr></argument>, <argument><expr>"DecimalType"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"double"</expr></argument>, <argument><expr>"DoubleType"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"float"</expr></argument>, <argument><expr>"FloatType"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"int"</expr></argument>, <argument><expr>"Int32Type"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"text"</expr></argument>, <argument><expr>"UTF8Type"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"timestamp"</expr></argument>, <argument><expr>"DateType"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"uuid"</expr></argument>, <argument><expr>"UUIDType"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"varchar"</expr></argument>, <argument><expr>"UTF8Type"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"varint"</expr></argument>, <argument><expr>"IntegerType"</expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>comparators</name>.<name>put</name></name><argument_list>(<argument><expr>"timeuuid"</expr></argument>, <argument><expr>"TimeUUIDType"</expr></argument>)</argument_list></call></expr>;

        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_COMMENT</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_READREPAIRCHANCE</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_DCLOCALREADREPAIRCHANCE</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_GCGRACESECONDS</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_REPLICATEONWRITE</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_COMPACTION_STRATEGY_CLASS</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_CACHING</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>keywords</name>.<name>add</name></name><argument_list>(<argument><expr><name>KW_BF_FP_CHANCE</name></expr></argument>)</argument_list></call></expr>;

        <expr><call><name><name>allowedKeywords</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>keywords</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>allowedKeywords</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>obsoleteKeywords</name></expr></argument>)</argument_list></call></expr>;
    }</block>

    private <name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name> <name>compactionStrategyClass</name> = null</expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compactionStrategyOptions</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compressionParameters</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parseType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>comparators</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>type</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>className</name> == null</expr>)</condition><then>
                <expr_stmt><expr><name>className</name> = <name>type</name></expr>;</expr_stmt></then></if>
            <return>return <expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>InvalidRequestException</name></type> <name>ex</name> <init>= <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ex</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>validate</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>obsoleteKeywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>properties</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>KW_COMPACTION_STRATEGY_CLASS</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>compactionStrategyClass</name> = <call><name><name>CFMetaData</name>.<name>createCompactionStrategy</name></name><argument_list>(<argument><expr><call><name><name>properties</name>.<name>get</name></name><argument_list>(<argument><expr><name>KW_COMPACTION_STRATEGY_CLASS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>compactionStrategyOptions</name>.<name>remove</name></name><argument_list>(<argument><expr><name>KW_COMPACTION_STRATEGY_CLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>addProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>composite</name> <init>= <expr><call><name><name>name</name>.<name>split</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>composite</name>.<name>length</name></name> &gt; 1</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name><name>composite</name><index>[<expr>0</expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr><name>COMPACTION_OPTIONS_PREFIX</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>compactionStrategyOptions</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>composite</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>composite</name><index>[<expr>0</expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr><name>COMPRESSION_PARAMETERS_PREFIX</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>compressionParameters</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>composite</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>addProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>applyToCFMetadata</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name>hasProperty</name><argument_list>(<argument><expr><name>KW_COMMENT</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>comment</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>KW_COMMENT</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name><name>cfm</name>.<name>readRepairChance</name></name><argument_list>(<argument><expr><call><name>getDouble</name><argument_list>(<argument><expr><name>KW_READREPAIRCHANCE</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getReadRepairChance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>dcLocalReadRepairChance</name></name><argument_list>(<argument><expr><call><name>getDouble</name><argument_list>(<argument><expr><name>KW_DCLOCALREADREPAIRCHANCE</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getDcLocalReadRepair</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>gcGraceSeconds</name></name><argument_list>(<argument><expr><call><name>getInt</name><argument_list>(<argument><expr><name>KW_GCGRACESECONDS</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getGcGraceSeconds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>replicateOnWrite</name></name><argument_list>(<argument><expr><call><name>getBoolean</name><argument_list>(<argument><expr><name>KW_REPLICATEONWRITE</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getReplicateOnWrite</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>minCompactionThreshold</name></name><argument_list>(<argument><expr><call><name>toInt</name><argument_list>(<argument><expr><name>KW_MINCOMPACTIONTHRESHOLD</name></expr></argument>, <argument><expr><call><name><name>compactionStrategyOptions</name>.<name>get</name></name><argument_list>(<argument><expr><name>KW_MINCOMPACTIONTHRESHOLD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getMinCompactionThreshold</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>maxCompactionThreshold</name></name><argument_list>(<argument><expr><call><name>toInt</name><argument_list>(<argument><expr><name>KW_MAXCOMPACTIONTHRESHOLD</name></expr></argument>, <argument><expr><call><name><name>compactionStrategyOptions</name>.<name>get</name></name><argument_list>(<argument><expr><name>KW_MAXCOMPACTIONTHRESHOLD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getMaxCompactionThreshold</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>caching</name></name><argument_list>(<argument><expr><call><name><name>CFMetaData</name>.<name>Caching</name>.<name>fromString</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>KW_CACHING</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getCaching</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfm</name>.<name>bloomFilterFpChance</name></name><argument_list>(<argument><expr><call><name>getDouble</name><argument_list>(<argument><expr><name>KW_BF_FP_CHANCE</name></expr></argument>, <argument><expr><call><name><name>cfm</name>.<name>getBloomFilterFpChance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>compactionStrategyClass</name> != null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>cfm</name>.<name>compactionStrategyClass</name></name><argument_list>(<argument><expr><name>compactionStrategyClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>compactionStrategyOptions</name></name><argument_list>(<argument><expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>compactionStrategyOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>compressionParameters</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>compressionParameters</name></name><argument_list>(<argument><expr><call><name><name>CompressionParameters</name>.<name>create</name></name><argument_list>(<argument><expr><name>compressionParameters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"CFPropDefs(%s, compaction: %s, compression: %s)"</expr></argument>,
                             <argument><expr><call><name><name>properties</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>compactionStrategyOptions</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>compressionParameters</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
