<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\hadoop\ColumnFamilySplit.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>hadoop</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>io</name>.<name>Writable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>mapreduce</name>.<name>InputSplit</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<class><specifier>public</specifier> class <name>ColumnFamilySplit</name> <super><extends>extends <name>InputSplit</name></extends> <implements>implements <name>Writable</name>, <name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>mapred</name>.<name>InputSplit</name></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>startToken</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>endToken</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>dataNodes</name></decl>;</decl_stmt>

    <constructor><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>ColumnFamilySplit</name><parameter_list>(<param><decl><type><name>String</name></type> <name>startToken</name></decl></param>, <param><decl><type><name>String</name></type> <name>endToken</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>dataNodes</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>startToken</name></expr></argument>, <argument><expr><name>endToken</name></expr></argument>, <argument><expr><name><name>Long</name>.<name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name>dataNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>ColumnFamilySplit</name><parameter_list>(<param><decl><type><name>String</name></type> <name>startToken</name></decl></param>, <param><decl><type><name>String</name></type> <name>endToken</name></decl></param>, <param><decl><type><name>long</name></type> <name>length</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>dataNodes</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>startToken</name> != null</expr>;</assert>
        <assert>assert <expr><name>endToken</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>startToken</name></name> = <name>startToken</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>endToken</name></name> = <name>endToken</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>length</name></name> = <name>length</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dataNodes</name></name> = <name>dataNodes</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getStartToken</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>startToken</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getEndToken</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>endToken</name></expr>;</return>
    }</block></function>

    <comment type="line">// getLength and getLocations satisfy the InputSplit abstraction</comment>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLength</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>length</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getLocations</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>dataNodes</name></expr>;</return>
    }</block></function>

    <comment type="line">// This should only be used by KeyspaceSplit.read();</comment>
    <constructor><specifier>protected</specifier> <name>ColumnFamilySplit</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <comment type="line">// These three methods are for serializing and deserializing</comment>
    <comment type="line">// KeyspaceSplits as needed by the Writable interface.</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>DataOutput</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>out</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><name>startToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><name>endToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>writeLong</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>dataNodes</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>String</name></type> <name>endpoint</name> <range>: <expr><name>dataNodes</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><name>startToken</name> = <call><name><name>in</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>endToken</name> = <call><name><name>in</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>length</name> = <call><name><name>in</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>numOfEndpoints</name> <init>= <expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>dataNodes</name> = new <name><name>String</name><index>[<expr><name>numOfEndpoints</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>numOfEndpoints</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <expr_stmt><expr><name><name>dataNodes</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>in</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"ColumnFamilySplit(" +
               "(" + <name>startToken</name>
               + ", '" + <name>endToken</name> + ']'
               + " @" + (<name>dataNodes</name> == null ? null : <call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>dataNodes</name></expr></argument>)</argument_list></call>) + ')'</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFamilySplit</name></type> <name>read</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ColumnFamilySplit</name></type> <name>w</name> <init>= <expr>new <call><name>ColumnFamilySplit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>readFields</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>w</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
