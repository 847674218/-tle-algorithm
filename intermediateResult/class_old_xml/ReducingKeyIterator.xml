<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\sstable\ReducingKeyIterator.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>CloseableIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>IMergeIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>MergeIterator</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Caller must acquire and release references to the sstables used here.
 */</comment>
<class><specifier>public</specifier> class <name>ReducingKeyIterator</name> <super><implements>implements <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>IMergeIterator</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>,<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>mi</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ReducingKeyIterator</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list>&lt;<argument><name>KeyIterator</name></argument>&gt;</argument_list></name></type> <name>iters</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>KeyIterator</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>sstables</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>sstables</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>iters</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>KeyIterator</name><argument_list>(<argument><expr><name><name>sstable</name>.<name>descriptor</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <expr_stmt><expr><name>mi</name> = <call><name><name>MergeIterator</name>.<name>get</name></name><argument_list>(<argument><expr><name>iters</name></expr></argument>, <argument><expr><name><name>DecoratedKey</name>.<name>comparator</name></name></expr></argument>, <argument><expr>new <class><super><name><name>MergeIterator</name>.<name><name>Reducer</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>,<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <decl_stmt><decl><type><name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>reduced</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>boolean</name></type> <name>trivialReduceIsTrivial</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr>true</expr>;</return>
            }</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>reduce</name><parameter_list>(<param><decl><type><name>DecoratedKey</name></type> <name>current</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><name>reduced</name> = <name>current</name></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier>protected</specifier> <name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getReduced</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><name>reduced</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <for>for (<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><call><name><name>mi</name>.<name>iterators</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr>((<name>CloseableIterator</name>)<name>o</name>).<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTotalBytes</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>m</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><call><name><name>mi</name>.<name>iterators</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><name>m</name> += ((<name>KeyIterator</name>) <name>o</name>).<call><name>getTotalBytes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>m</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getBytesRead</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>m</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><call><name><name>mi</name>.<name>iterators</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><name>m</name> += ((<name>KeyIterator</name>) <name>o</name>).<call><name>getBytesRead</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>m</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTaskType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"Secondary index build"</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>mi</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>next</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>mi</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>
}</block></class>
</unit>
