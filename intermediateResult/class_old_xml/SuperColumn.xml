<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\SuperColumn.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Objects</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Iterables</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>MarshalException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IColumnSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>ColumnSortedMap</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>DataOutputBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Allocator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>HeapAllocator</name></name>;</import>
<import>import <name><name>org</name>.<name>cliffc</name>.<name>high_scale_lib</name>.<name>NonBlockingHashMap</name></name>;</import>

<class><specifier>public</specifier> class <name>SuperColumn</name> <super><extends>extends <name>AbstractColumnContainer</name></extends> <implements>implements <name>IColumn</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>NonBlockingHashMap</name><argument_list>&lt;<argument><name>Comparator</name></argument>, <argument><name>SuperColumnSerializer</name></argument>&gt;</argument_list></name></type> <name>serializers</name> <init>= <expr>new <call><name><name>NonBlockingHashMap</name><argument_list>&lt;<argument><name>Comparator</name></argument>, <argument><name>SuperColumnSerializer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SuperColumnSerializer</name></type> <name>serializer</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>SuperColumnSerializer</name></type> <name>serializer</name> <init>= <expr><call><name><name>serializers</name>.<name>get</name></name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>serializer</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>serializer</name> = new <call><name>SuperColumnSerializer</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>serializers</name>.<name>put</name></name><argument_list>(<argument><expr><name>comparator</name></expr></argument>, <argument><expr><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>serializer</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>name</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SuperColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>AtomicSortedColumns</name>.<name>factory</name></name><argument_list>()</argument_list></call>.<call><name>create</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><name>SuperColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name>ISortedColumns</name></type> <name>columns</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><name>name</name> != null</expr>;</assert>
        <assert>assert <expr><call><name><name>name</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &lt;= <name><name>IColumn</name>.<name>MAX_NAME_LENGTH</name></name></expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>SuperColumn</name></type> <name>cloneMeShallow</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>SuperColumn</name></type> <name>sc</name> <init>= <expr>new <call><name>SuperColumn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>getComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sc</name>.<name>delete</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>sc</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>cloneMe</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>SuperColumn</name></type> <name>sc</name> <init>= <expr>new <call><name>SuperColumn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>columns</name>.<name>cloneMe</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sc</name>.<name>delete</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>sc</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>name</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>getSubColumns</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getSortedColumns</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>getSubColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>IColumn</name></type> <name>column</name> <init>= <expr><call><name><name>columns</name>.<name>getColumn</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>column</name> == null || <name>column</name> instanceof <name>Column</name></expr>;</assert>
        <return>return <expr><name>column</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * This calculates the exact size of the sub columns on the fly
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>serializedSize</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * This returns the size of the super-column when serialized.
     * @see org.apache.cassandra.db.IColumn#serializedSize()
    */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>serializedSize</name><parameter_list>()</parameter_list>
    <block>{
    	<comment type="block">/*
    	 * We need to keep the way we are calculating the column size in sync with the
    	 * way we are calculating the size for the column family serializer.
    	 */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>DBConstants</name>.<name>shortSize</name></name> + <call><name><name>name</name>.<name>remaining</name></name><argument_list>()</argument_list></call> + <name><name>DBConstants</name>.<name>intSize</name></name> + <name><name>DBConstants</name>.<name>longSize</name></name> + <name><name>DBConstants</name>.<name>intSize</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>subColumn</name> <range>: <expr><call><name>getSubColumns</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><name>size</name> += <call><name><name>subColumn</name>.<name>serializedSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>timestamp</name><parameter_list>()</parameter_list>
    <block>{
    	<throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"This operation is not supported for Super Columns."</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>maxTimestamp</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>maxTimestamp</name> <init>= <expr><call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>subColumn</name> <range>: <expr><call><name>getSubColumns</name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><name>maxTimestamp</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxTimestamp</name></expr></argument>, <argument><expr><call><name><name>subColumn</name>.<name>maxTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><name>maxTimestamp</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>mostRecentLiveChangeAt</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><name><name>Long</name>.<name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><call><name>getSubColumns</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr>!<call><name><name>column</name>.<name>isMarkedForDelete</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>column</name>.<name>timestamp</name></name><argument_list>()</argument_list></call> &gt; <name>max</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>max</name> = <call><name><name>column</name>.<name>timestamp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>max</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>mostRecentNonGCableChangeAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>gcbefore</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><name><name>Long</name>.<name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><call><name>getSubColumns</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>column</name>.<name>getLocalDeletionTime</name></name><argument_list>()</argument_list></call> &gt;= <name>gcbefore</name> &amp;&amp; <call><name><name>column</name>.<name>timestamp</name></name><argument_list>()</argument_list></call> &gt; <name>max</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>max</name> = <call><name><name>column</name>.<name>timestamp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>max</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>value</name><parameter_list>()</parameter_list>
    <block>{
    	<throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"This operation is not supported for Super Columns."</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>column</name> instanceof <name>Column</name> : "A super column can only contain simple columns"</expr>;</assert>
        <expr_stmt><expr><call><name><name>super</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/*
     * Go through each sub column if it exists then as it to resolve itself
     * if the column does not exist then create it.
     */</comment>
    <function><type><name>void</name></type> <name>putColumn</name><parameter_list>(<param><decl><type><name>SuperColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>IColumn</name></type> <name>subColumn</name> <range>: <expr><call><name><name>column</name>.<name>getSubColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
        	<expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name>subColumn</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>diff</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>columnNew</name></decl></param>)</parameter_list>
    <block>{
    	<decl_stmt><decl><type><name>IColumn</name></type> <name>columnDiff</name> <init>= <expr>new <call><name>SuperColumn</name><argument_list>(<argument><expr><call><name><name>columnNew</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>((<name>SuperColumn</name>)<name>columnNew</name>).<call><name>getComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>columnNew</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call> &gt; <call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr>((<name>SuperColumn</name>)<name>columnDiff</name>).<call><name>delete</name><argument_list>(<argument><expr><call><name><name>columnNew</name>.<name>getLocalDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>columnNew</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// (don't need to worry about columnNew containing subColumns that are shadowed by</comment>
        <comment type="line">// the delete tombstone, since columnNew was generated by CF.resolve, which</comment>
        <comment type="line">// takes care of those for us.)</comment>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>subColumn</name> <range>: <expr><call><name><name>columnNew</name>.<name>getSubColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
        	<decl_stmt><decl><type><name>IColumn</name></type> <name>columnInternal</name> <init>= <expr><call><name><name>columns</name>.<name>getColumn</name></name><argument_list>(<argument><expr><call><name><name>subColumn</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        	<if>if<condition>(<expr><name>columnInternal</name> == null</expr> )</condition><then>
        	<block>{
        		<expr_stmt><expr><call><name><name>columnDiff</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>subColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	}</block></then>
        	<else>else
        	<block>{
            	<decl_stmt><decl><type><name>IColumn</name></type> <name>subColumnDiff</name> <init>= <expr><call><name><name>columnInternal</name>.<name>diff</name></name><argument_list>(<argument><expr><name>subColumn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        		<if>if<condition>(<expr><name>subColumnDiff</name> != null</expr>)</condition><then>
        		<block>{
            		<expr_stmt><expr><call><name><name>columnDiff</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>subColumnDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        		}</block></then></if>
        	}</block></else></if>
        }</block></for>

        <if>if <condition>(<expr>!<call><name><name>columnDiff</name>.<name>getSubColumns</name></name><argument_list>()</argument_list></call>.<call><name>isEmpty</name><argument_list>()</argument_list></call> || <call><name><name>columnNew</name>.<name>isMarkedForDelete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        	<return>return <expr><name>columnDiff</name></expr>;</return></then>
        <else>else
        	<return>return <expr>null</expr>;</return></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateDigest</name><parameter_list>(<param><decl><type><name>MessageDigest</name></type> <name>digest</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>name</name> != null</expr>;</assert>
        <expr_stmt><expr><call><name><name>digest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>name</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DataOutputBuffer</name></type> <name>buffer</name> <init>= <expr>new <call><name>DataOutputBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>buffer</name>.<name>writeLong</name></name><argument_list>(<argument><expr><call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>digest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>getData</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><call><name>getSubColumns</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>column</name>.<name>updateDigest</name></name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
    <block>{
    	<decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"SuperColumn("</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>isMarkedForDelete</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" -delete at "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" ["</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>getComparator</name><argument_list>()</argument_list></call>.<call><name>getColumnsString</name><argument_list>(<argument><expr><call><name>getSubColumns</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"])"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLive</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>mostRecentLiveChangeAt</name><argument_list>()</argument_list></call> &gt; <call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>localCopy</name><parameter_list>(<param><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>localCopy</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name><name>HeapAllocator</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>localCopy</name><parameter_list>(<param><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// we don't try to intern supercolumn names, because if we're using Cassandra correctly it's almost</comment>
        <comment type="line">// certainly just going to pollute our interning map with unique, dynamic values</comment>
        <decl_stmt><decl><type><name>SuperColumn</name></type> <name>sc</name> <init>= <expr>new <call><name>SuperColumn</name><argument_list>(<argument><expr><call><name><name>allocator</name>.<name>clone</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name>.<name>getComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sc</name>.<name>delete</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for(<init><decl><type><name>IColumn</name></type> <name>c</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>sc</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>c</name>.<name>localCopy</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>sc</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>reconcile</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>c</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>reconcile</name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>reconcile</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>c</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"This operation is unsupported on super columns."</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>serializationFlags</name><parameter_list>()</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"Super columns don't have a serialization mask"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateFields</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>metadata</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>metadata</name>.<name>comparator</name>.<name>validate</name></name><argument_list>(<argument><expr><call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><call><name>getSubColumns</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>column</name>.<name>validateFields</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>o</name></expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then></if>
        <if>if <condition>(<expr><name>o</name> == null || <call><name>getClass</name><argument_list>()</argument_list></call> != <call><name><name>o</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>

        <decl_stmt><decl><type><name>SuperColumn</name></type> <name>sc</name> <init>= <expr>(<name>SuperColumn</name>)<name>o</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>sc</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <if>if <condition>(<expr><call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call> != <call><name><name>sc</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <if>if <condition>(<expr><call><name>getLocalDeletionTime</name><argument_list>()</argument_list></call> != <call><name><name>sc</name>.<name>getLocalDeletionTime</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <return>return <expr><call><name><name>Iterables</name>.<name>elementsEqual</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><name><name>sc</name>.<name>columns</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Objects</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getLocalDeletionTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<class>class <name>SuperColumnSerializer</name> <super><implements>implements <name>IColumnSerializer</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SuperColumnSerializer</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>comparator</name></name> = <name>comparator</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>comparator</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>SuperColumn</name></type> <name>superColumn</name> <init>= <expr>(<name>SuperColumn</name>)<name>column</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>superColumn</name>.<name>getLocalDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>superColumn</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><call><name><name>column</name>.<name>getSubColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>IColumn</name></type> <name>subColumn</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>Column</name>.<name>serializer</name></name><argument_list>()</argument_list></call>.<call><name>serialize</name><argument_list>(<argument><expr><name>subColumn</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name>deserialize</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name><name>IColumnSerializer</name>.<name>Flag</name>.<name>LOCAL</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name><name>IColumnSerializer</name>.<name>Flag</name></name></type> <name>flag</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name>deserialize</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> / 1000</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name><name>IColumnSerializer</name>.<name>Flag</name></name></type> <name>flag</name></decl></param>, <param><decl><type><name>int</name></type> <name>expireBefore</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>name</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>localDeleteTime</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>localDeleteTime</name> != <name><name>Integer</name>.<name>MIN_VALUE</name></name> &amp;&amp; <name>localDeleteTime</name> &lt;= 0</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Invalid localDeleteTime read: " + <name>localDeleteTime</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>long</name></type> <name>markedForDeleteAt</name> <init>= <expr><call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* read the number of columns */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnSerializer</name></type> <name>serializer</name> <init>= <expr><call><name><name>Column</name>.<name>serializer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnSortedMap</name></type> <name>preSortedMap</name> <init>= <expr>new <call><name>ColumnSortedMap</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>, <argument><expr><name>serializer</name></expr></argument>, <argument><expr><name>dis</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>expireBefore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SuperColumn</name></type> <name>superColumn</name> <init>= <expr>new <call><name>SuperColumn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>AtomicSortedColumns</name>.<name>factory</name></name><argument_list>()</argument_list></call>.<call><name>fromSorted</name><argument_list>(<argument><expr><name>preSortedMap</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>superColumn</name>.<name>delete</name></name><argument_list>(<argument><expr><name>localDeleteTime</name></expr></argument>, <argument><expr><name>markedForDeleteAt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>superColumn</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>object</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>object</name>.<name>serializedSize</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
