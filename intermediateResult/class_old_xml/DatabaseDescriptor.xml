<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\config\DatabaseDescriptor.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileFilter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name>.<name>IRowCacheProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>Config</name>.<name>RequestSchedulerId</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DefsTable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>SystemTable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>Table</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>DynamicEndpointSnitch</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>EndpointSnitchInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>IEndpointSnitch</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>SeedProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>scheduler</name>.<name>IRequestScheduler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>scheduler</name>.<name>NoScheduler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>CacheService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>MigrationManager</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CassandraDaemon</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>yaml</name>.<name>snakeyaml</name>.<name>Loader</name></name>;</import>
<import>import <name><name>org</name>.<name>yaml</name>.<name>snakeyaml</name>.<name>TypeDescription</name></name>;</import>
<import>import <name><name>org</name>.<name>yaml</name>.<name>snakeyaml</name>.<name>Yaml</name></name>;</import>
<import>import <name><name>org</name>.<name>yaml</name>.<name>snakeyaml</name>.<name>error</name>.<name>YAMLException</name></name>;</import>

<class><specifier>public</specifier> class <name>DatabaseDescriptor</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>DatabaseDescriptor</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IEndpointSnitch</name></type> <name>snitch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>listenAddress</name></decl>;</decl_stmt> <comment type="line">// leave null so we can fall through to getLocalHost</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>broadcastAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>rpcAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>SeedProvider</name></type> <name>seedProvider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IInternodeAuthenticator</name></type> <name>internodeAuthenticator</name></decl>;</decl_stmt>

    <comment type="block">/* Hashing strategy Random or OPHF */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IPartitioner</name></type> <name>partitioner</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Config</name>.<name>DiskAccessMode</name></name></type> <name>indexAccessMode</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Config</name></type> <name>conf</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IAuthenticator</name></type> <name>authenticator</name> <init>= <expr>new <call><name>AllowAllAuthenticator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IAuthority</name></type> <name>authority</name> <init>= <expr>new <call><name>AllowAllAuthority</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>DEFAULT_CONFIGURATION</name> <init>= <expr>"cassandra.yaml"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IRequestScheduler</name></type> <name>requestScheduler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>RequestSchedulerId</name></type> <name>requestSchedulerId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>RequestSchedulerOptions</name></type> <name>requestSchedulerOptions</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>keyCacheSizeInMB</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IRowCacheProvider</name></type> <name>rowCacheProvider</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Inspect the classpath to find storage configuration file
     */</comment>
    <function><type><specifier>static</specifier> <name>URL</name></type> <name>getStorageConfigURL</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>configUrl</name> <init>= <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"cassandra.config"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>configUrl</name> == null</expr>)</condition><then>
            <expr_stmt><expr><name>configUrl</name> = <name>DEFAULT_CONFIGURATION</name></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>URL</name></type> <name>url</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>url</name> = new <call><name>URL</name><argument_list>(<argument><expr><name>configUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>url</name>.<name>openStream</name></name><argument_list>()</argument_list></call>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// catches well-formed but bogus URLs</comment>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>ClassLoader</name></type> <name>loader</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name><name>class</name>.<name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>url</name> = <call><name><name>loader</name>.<name>getResource</name></name><argument_list>(<argument><expr><name>configUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>url</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Cannot locate " + <name>configUrl</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></catch></try>

        <return>return <expr><name>url</name></expr>;</return>
    }</block></function>

    <expr_stmt><expr>static
    <block>{
        <if>if <condition>(<expr><call><name><name>Config</name>.<name>getLoadYaml</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>loadYaml</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>conf</name> = new <call><name>Config</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></expr></expr_stmt>
    <function><type><specifier>static</specifier> <name>void</name></type> <name>loadYaml</name><parameter_list>()</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><call><name>getStorageConfigURL</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Loading settings from " + <name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>InputStream</name></type> <name>input</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name>input</name> = <call><name><name>url</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <comment type="line">// getStorageConfigURL should have ruled this out</comment>
                <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
            <decl_stmt><decl><type><name><name>org</name>.<name>yaml</name>.<name>snakeyaml</name>.<name>constructor</name>.<name>Constructor</name></name></type> <name>constructor</name> <init>= <expr>new <call><name><name>org</name>.<name>yaml</name>.<name>snakeyaml</name>.<name>constructor</name>.<name>Constructor</name></name><argument_list>(<argument><expr><name><name>Config</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TypeDescription</name></type> <name>seedDesc</name> <init>= <expr>new <call><name>TypeDescription</name><argument_list>(<argument><expr><name><name>SeedProviderDef</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>seedDesc</name>.<name>putMapPropertyType</name></name><argument_list>(<argument><expr>"parameters"</expr></argument>, <argument><expr><name><name>String</name>.<name>class</name></name></expr></argument>, <argument><expr><name><name>String</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>constructor</name>.<name>addTypeDescription</name></name><argument_list>(<argument><expr><name>seedDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Yaml</name></type> <name>yaml</name> <init>= <expr>new <call><name>Yaml</name><argument_list>(<argument><expr>new <call><name>Loader</name><argument_list>(<argument><expr><name>constructor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>conf</name> = (<name>Config</name>)<call><name><name>yaml</name>.<name>load</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr>!<call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.arch"</expr></argument>)</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr>"64"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"32bit JVM detected.  It is recommended to run Cassandra on a 64bit JVM for better performance."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>commitlog_sync</name></name> == null</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Missing required directive CommitLogSync"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>commitlog_sync</name></name> == <name><name>Config</name>.<name>CommitLogSync</name>.<name>batch</name></name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name><name>conf</name>.<name>commitlog_sync_batch_window_in_ms</name></name> == null</expr>)</condition><then>
                <block>{
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Missing value for commitlog_sync_batch_window_in_ms: Double expected."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then>
                <else>else <if>if <condition>(<expr><name><name>conf</name>.<name>commitlog_sync_period_in_ms</name></name> != null</expr>)</condition><then>
                <block>{
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Batch sync specified, but commitlog_sync_period_in_ms found. Only specify commitlog_sync_batch_window_in_ms when using batch sync"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if></else></if>
                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Syncing log with a batch window of " + <name><name>conf</name>.<name>commitlog_sync_batch_window_in_ms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <if>if <condition>(<expr><name><name>conf</name>.<name>commitlog_sync_period_in_ms</name></name> == null</expr>)</condition><then>
                <block>{
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Missing value for commitlog_sync_period_in_ms: Integer expected"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then>
                <else>else <if>if <condition>(<expr><name><name>conf</name>.<name>commitlog_sync_batch_window_in_ms</name></name> != null</expr>)</condition><then>
                <block>{
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"commitlog_sync_period_in_ms specified, but commitlog_sync_batch_window_in_ms found.  Only specify commitlog_sync_period_in_ms when using periodic sync."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if></else></if>
                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Syncing log with a period of " + <name><name>conf</name>.<name>commitlog_sync_period_in_ms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>commitlog_total_space_in_mb</name></name> == null</expr>)</condition><then>
                <expr_stmt><expr><name><name>conf</name>.<name>commitlog_total_space_in_mb</name></name> = <call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.arch"</expr></argument>)</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr>"64"</expr></argument>)</argument_list></call> ? 1024 : 32</expr>;</expr_stmt></then></if>

            <comment type="block">/* evaluate the DiskAccessMode Config directive, which also affects indexAccessMode selection */</comment>
            <if>if <condition>(<expr><name><name>conf</name>.<name>disk_access_mode</name></name> == <name><name>Config</name>.<name>DiskAccessMode</name>.<name>auto</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>conf</name>.<name>disk_access_mode</name></name> = <call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.arch"</expr></argument>)</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr>"64"</expr></argument>)</argument_list></call> ? <name><name>Config</name>.<name>DiskAccessMode</name>.<name>mmap</name></name> : <name><name>Config</name>.<name>DiskAccessMode</name>.<name>standard</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>indexAccessMode</name> = <name><name>conf</name>.<name>disk_access_mode</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"DiskAccessMode 'auto' determined to be " + <name><name>conf</name>.<name>disk_access_mode</name></name> + ", indexAccessMode is " + <name>indexAccessMode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>conf</name>.<name>disk_access_mode</name></name> == <name><name>Config</name>.<name>DiskAccessMode</name>.<name>mmap_index_only</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>conf</name>.<name>disk_access_mode</name></name> = <name><name>Config</name>.<name>DiskAccessMode</name>.<name>standard</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>indexAccessMode</name> = <name><name>Config</name>.<name>DiskAccessMode</name>.<name>mmap</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"DiskAccessMode is " + <name><name>conf</name>.<name>disk_access_mode</name></name> + ", indexAccessMode is " + <name>indexAccessMode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>indexAccessMode</name> = <name><name>conf</name>.<name>disk_access_mode</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"DiskAccessMode is " + <name><name>conf</name>.<name>disk_access_mode</name></name> + ", indexAccessMode is " + <name>indexAccessMode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>

	        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"page_cache_hinting is " + <name><name>conf</name>.<name>populate_io_cache_on_flush</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Authentication and authorization backend, implementing IAuthenticator and IAuthority */</comment>
            <if>if <condition>(<expr><name><name>conf</name>.<name>authenticator</name></name> != null</expr>)</condition><then>
                <expr_stmt><expr><name>authenticator</name> = <name><name>FBUtilities</name>.</name>&lt;<name>IAuthenticator</name>&gt;<call><name>construct</name><argument_list>(<argument><expr><name><name>conf</name>.<name>authenticator</name></name></expr></argument>, <argument><expr>"authenticator"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <if>if <condition>(<expr><name><name>conf</name>.<name>authority</name></name> != null</expr>)</condition><then>
                <expr_stmt><expr><name>authority</name> = <name><name>FBUtilities</name>.</name>&lt;<name>IAuthority</name>&gt;<call><name>construct</name><argument_list>(<argument><expr><name><name>conf</name>.<name>authority</name></name></expr></argument>, <argument><expr>"authority"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>internode_authenticator</name></name> != null</expr>)</condition><then>
                <expr_stmt><expr><name>internodeAuthenticator</name> = <call><name><name>FBUtilities</name>.<name>construct</name></name><argument_list>(<argument><expr><name><name>conf</name>.<name>internode_authenticator</name></name></expr></argument>, <argument><expr>"internode_authenticator"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>internodeAuthenticator</name> = new <call><name>AllowAllInternodeAuthenticator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>

            <expr_stmt><expr><call><name><name>authenticator</name>.<name>validateConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>authority</name>.<name>validateConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>internodeAuthenticator</name>.<name>validateConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Hashing strategy */</comment>
            <if>if <condition>(<expr><name><name>conf</name>.<name>partitioner</name></name> == null</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Missing directive: partitioner"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <try>try
            <block>{
                <expr_stmt><expr><name>partitioner</name> = <call><name><name>FBUtilities</name>.<name>newPartitioner</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"cassandra.partitioner"</expr></argument>, <argument><expr><name><name>conf</name>.<name>partitioner</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Invalid partitioner class " + <name><name>conf</name>.<name>partitioner</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <comment type="block">/* phi convict threshold for FailureDetector */</comment>
            <if>if <condition>(<expr><name><name>conf</name>.<name><name>phi_convict_threshold</name> <argument_list>&lt; <argument>5 || <name><name>conf</name>.<name>phi_convict_threshold</name></name></argument> &gt;</argument_list></name></name> 16</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"phi_convict_threshold must be between 5 and 16"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <comment type="block">/* Thread per pool */</comment>
            <if>if <condition>(<expr><name><name>conf</name>.<name>concurrent_reads</name></name> != null &amp;&amp; <name><name>conf</name>.<name>concurrent_reads</name></name> &lt; 2</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"concurrent_reads must be at least 2"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>concurrent_writes</name></name> != null &amp;&amp; <name><name>conf</name>.<name>concurrent_writes</name></name> &lt; 2</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"concurrent_writes must be at least 2"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>concurrent_replicates</name></name> != null &amp;&amp; <name><name>conf</name>.<name>concurrent_replicates</name></name> &lt; 2</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"concurrent_replicates must be at least 2"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>memtable_total_space_in_mb</name></name> == null</expr>)</condition><then>
                <expr_stmt><expr><name><name>conf</name>.<name>memtable_total_space_in_mb</name></name> = <call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call>.<call><name>maxMemory</name><argument_list>()</argument_list></call> / (3 * 1048576)</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <if>if <condition>(<expr><name><name>conf</name>.<name>memtable_total_space_in_mb</name></name> &lt;= 0</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"memtable_total_space_in_mb must be positive"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Global memtable threshold is enabled at {}MB"</expr></argument>, <argument><expr><name><name>conf</name>.<name>memtable_total_space_in_mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Memtable flush writer threads */</comment>
            <if>if <condition>(<expr><name><name>conf</name>.<name>memtable_flush_writers</name></name> != null &amp;&amp; <name><name>conf</name>.<name>memtable_flush_writers</name></name> &lt; 1</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"memtable_flush_writers must be at least 1"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>conf</name>.<name>memtable_flush_writers</name></name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>conf</name>.<name>memtable_flush_writers</name></name> = <name><name>conf</name>.<name>data_file_directories</name>.<name>length</name></name></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <comment type="block">/* Local IP or hostname to bind services to */</comment>
            <if>if <condition>(<expr><name><name>conf</name>.<name>listen_address</name></name> != null</expr>)</condition><then>
            <block>{
                <try>try
                <block>{
                    <expr_stmt><expr><name>listenAddress</name> = <call><name><name>InetAddress</name>.<name>getByName</name></name><argument_list>(<argument><expr><name><name>conf</name>.<name>listen_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Unknown listen_address '" + <name><name>conf</name>.<name>listen_address</name></name> + "'"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then></if>

            <comment type="block">/* Gossip Address to broadcast */</comment>
            <if>if <condition>(<expr><name><name>conf</name>.<name>broadcast_address</name></name> != null</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><call><name><name>conf</name>.<name>broadcast_address</name>.<name>equals</name></name><argument_list>(<argument><expr>"0.0.0.0"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"broadcast_address cannot be 0.0.0.0!"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>

                <try>try
                <block>{
                    <expr_stmt><expr><name>broadcastAddress</name> = <call><name><name>InetAddress</name>.<name>getByName</name></name><argument_list>(<argument><expr><name><name>conf</name>.<name>broadcast_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Unknown broadcast_address '" + <name><name>conf</name>.<name>broadcast_address</name></name> + "'"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then></if>

            <comment type="block">/* Local IP or hostname to bind RPC server to */</comment>
            <if>if <condition>(<expr><name><name>conf</name>.<name>rpc_address</name></name> != null</expr>)</condition><then>
            <block>{
                <try>try
                <block>{
                    <expr_stmt><expr><name>rpcAddress</name> = <call><name><name>InetAddress</name>.<name>getByName</name></name><argument_list>(<argument><expr><name><name>conf</name>.<name>rpc_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Unknown host in rpc_address " + <name><name>conf</name>.<name>rpc_address</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>rpcAddress</name> = <call><name><name>FBUtilities</name>.<name>getLocalAddress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>thrift_framed_transport_size_in_mb</name></name> &lt;= 0</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"thrift_framed_transport_size_in_mb must be positive"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <comment type="block">/* end point snitch */</comment>
            <if>if <condition>(<expr><name><name>conf</name>.<name>endpoint_snitch</name></name> == null</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Missing endpoint_snitch directive"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><name>snitch</name> = <call><name>createEndpointSnitch</name><argument_list>(<argument><expr><name><name>conf</name>.<name>endpoint_snitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>EndpointSnitchInfo</name>.<name>create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Request Scheduler setup */</comment>
            <expr_stmt><expr><name>requestSchedulerOptions</name> = <name><name>conf</name>.<name>request_scheduler_options</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>conf</name>.<name>request_scheduler</name></name> != null</expr>)</condition><then>
            <block>{
                <try>try
                <block>{
                    <if>if <condition>(<expr><name>requestSchedulerOptions</name> == null</expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>requestSchedulerOptions</name> = new <call><name>RequestSchedulerOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>Class</name></type> <name>cls</name> <init>= <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name><name>conf</name>.<name>request_scheduler</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>requestScheduler</name> = (<name>IRequestScheduler</name>) <call><name><name>cls</name>.<name>getConstructor</name></name><argument_list>(<argument><expr><name><name>RequestSchedulerOptions</name>.<name>class</name></name></expr></argument>)</argument_list></call>.<call><name>newInstance</name><argument_list>(<argument><expr><name>requestSchedulerOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Invalid Request Scheduler class " + <name><name>conf</name>.<name>request_scheduler</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch>
                <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Unable to instantiate request scheduler"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>requestScheduler</name> = new <call><name>NoScheduler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>request_scheduler_id</name></name> == <name><name>RequestSchedulerId</name>.<name>keyspace</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>requestSchedulerId</name> = <name><name>conf</name>.<name>request_scheduler_id</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <comment type="line">// Default to Keyspace</comment>
                <expr_stmt><expr><name>requestSchedulerId</name> = <name><name>RequestSchedulerId</name>.<name>keyspace</name></name></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call> &amp;&amp; <name><name>conf</name>.<name>auto_bootstrap</name></name> != null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"setting auto_bootstrap to " + <name><name>conf</name>.<name>auto_bootstrap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

           <if>if <condition>(<expr><name><name>conf</name>.<name>in_memory_compaction_limit_in_mb</name></name> != null &amp;&amp; <name><name>conf</name>.<name>in_memory_compaction_limit_in_mb</name></name> &lt;= 0</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"in_memory_compaction_limit_in_mb must be a positive integer"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>concurrent_compactors</name></name> == null</expr>)</condition><then>
                <expr_stmt><expr><name><name>conf</name>.<name>concurrent_compactors</name></name> = <call><name><name>FBUtilities</name>.<name>getAvailableProcessors</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>concurrent_compactors</name></name> &lt;= 0</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"concurrent_compactors should be strictly greater than 0"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>compaction_throughput_mb_per_sec</name></name> == null</expr>)</condition><then>
                <expr_stmt><expr><name><name>conf</name>.<name>compaction_throughput_mb_per_sec</name></name> = 16</expr>;</expr_stmt></then></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>stream_throughput_outbound_megabits_per_sec</name></name> == null</expr>)</condition><then>
                <expr_stmt><expr><name><name>conf</name>.<name>stream_throughput_outbound_megabits_per_sec</name></name> = 400</expr>;</expr_stmt></then></if>

            <if>if <condition>(<expr>!<call><name><name>CassandraDaemon</name>.<name>rpc_server_types</name>.<name>contains</name></name><argument_list>(<argument><expr><call><name><name>conf</name>.<name>rpc_server_type</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Unknown rpc_server_type: " + <name><name>conf</name>.<name>rpc_server_type</name></name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if>if <condition>(<expr><name><name>conf</name>.<name>rpc_min_threads</name></name> == null</expr>)</condition><then>
                <expr_stmt><expr><name><name>conf</name>.<name>rpc_min_threads</name></name> = <call><name><name>conf</name>.<name>rpc_server_type</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"hsha"</expr></argument>)</argument_list></call>
                                     ? <call><name><name>FBUtilities</name>.<name>getAvailableProcessors</name></name><argument_list>()</argument_list></call> * 4
                                     : 16</expr>;</expr_stmt></then></if>
            <if>if <condition>(<expr><name><name>conf</name>.<name>rpc_max_threads</name></name> == null</expr>)</condition><then>
                <expr_stmt><expr><name><name>conf</name>.<name>rpc_max_threads</name></name> = <call><name><name>conf</name>.<name>rpc_server_type</name>.<name>toLowerCase</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"hsha"</expr></argument>)</argument_list></call>
                                     ? <call><name><name>FBUtilities</name>.<name>getAvailableProcessors</name></name><argument_list>()</argument_list></call> * 4
                                     : <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>;</expr_stmt></then></if>

            <comment type="block">/* data file and commit log directories. they get created later, when they're needed. */</comment>
            <if>if <condition>(<expr><name><name>conf</name>.<name>commitlog_directory</name></name> != null &amp;&amp; <name><name>conf</name>.<name>data_file_directories</name></name> != null &amp;&amp; <name><name>conf</name>.<name>saved_caches_directory</name></name> != null</expr>)</condition><then>
            <block>{
                <for>for (<init><decl><type><name>String</name></type> <name>datadir</name> <range>: <expr><name><name>conf</name>.<name>data_file_directories</name></name></expr></range></decl></init>)
                <block>{
                    <if>if <condition>(<expr><call><name><name>datadir</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name>.<name>commitlog_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"commitlog_directory must not be the same as any data_file_directories"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                    <if>if <condition>(<expr><call><name><name>datadir</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name>.<name>saved_caches_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"saved_caches_directory must not be the same as any data_file_directories"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                }</block></for>

                <if>if <condition>(<expr><call><name><name>conf</name>.<name>commitlog_directory</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name>.<name>saved_caches_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"saved_caches_directory must not be the same as the commitlog_directory"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            }</block></then>
            <else>else
            <block>{
                <if>if <condition>(<expr><name><name>conf</name>.<name>commitlog_directory</name></name> == null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"commitlog_directory missing"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <if>if <condition>(<expr><name><name>conf</name>.<name>data_file_directories</name></name> == null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"data_file_directories missing; at least one data directory must be specified"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <if>if <condition>(<expr><name><name>conf</name>.<name>saved_caches_directory</name></name> == null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"saved_caches_directory missing"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            }</block></else></if>

            <if>if <condition>(<expr><name><name>conf</name>.<name>initial_token</name></name> != null</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>partitioner</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>validate</name><argument_list>(<argument><expr><name><name>conf</name>.<name>initial_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <try>try
            <block>{
                <comment type="line">// if key_cache_size_in_mb option was set to "auto" then size of the cache should be "min(5% of Heap (in MB), 100MB)</comment>
                <expr_stmt><expr><name>keyCacheSizeInMB</name> = (<name><name>conf</name>.<name>key_cache_size_in_mb</name></name> == null)
                                    ? <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call>.<call><name>totalMemory</name><argument_list>()</argument_list></call> * 0.05 / 1024 / 1024</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>100</expr></argument>)</argument_list></call>
                                    : <name><name>conf</name>.<name>key_cache_size_in_mb</name></name></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>keyCacheSizeInMB</name> &lt; 0</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>NumberFormatException</name><argument_list>()</argument_list></call></expr>;</throw></then></if> <comment type="line">// to escape duplicating error message</comment>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"key_cache_size_in_mb option was set incorrectly to '"
                                                 + <name><name>conf</name>.<name>key_cache_size_in_mb</name></name> + "', supported values are &lt;integer&gt; &gt;= 0."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <expr_stmt><expr><name>rowCacheProvider</name> = <call><name><name>FBUtilities</name>.<name>newCacheProvider</name></name><argument_list>(<argument><expr><name><name>conf</name>.<name>row_cache_provider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Hardcoded system tables</comment>
            <decl_stmt><decl><type><name>KSMetaData</name></type> <name>systemMeta</name> <init>= <expr><call><name><name>KSMetaData</name>.<name>systemKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>load</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>StatusCf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>load</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>HintsCf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>load</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>MigrationsCf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>load</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>SchemaCf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>load</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>IndexCf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>load</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>NodeIdCf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>load</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>VersionCf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>load</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>SchemaKeyspacesCf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>load</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>SchemaColumnFamiliesCf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>load</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>SchemaColumnsCf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>addSystemTable</name></name><argument_list>(<argument><expr><name>systemMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Load the seeds for node contact points */</comment>
            <if>if <condition>(<expr><name><name>conf</name>.<name>seed_provider</name></name> == null</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"seeds configuration is missing; a minimum of one seed is required."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <try>try
            <block>{
                <decl_stmt><decl><type><name>Class</name></type> <name>seedProviderClass</name> <init>= <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name><name>conf</name>.<name>seed_provider</name>.<name>class_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>seedProvider</name> = (<name>SeedProvider</name>)<call><name><name>seedProviderClass</name>.<name>getConstructor</name></name><argument_list>(<argument><expr><name><name>Map</name>.<name>class</name></name></expr></argument>)</argument_list></call>.<call><name>newInstance</name><argument_list>(<argument><expr><name><name>conf</name>.<name>seed_provider</name>.<name>parameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <comment type="line">// there are about 5 checked exceptions that could be thrown here.</comment>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Fatal configuration error"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + "\nFatal configuration error; unable to start server.  See log for stacktrace."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <if>if <condition>(<expr><call><name><name>seedProvider</name>.<name>getSeeds</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"The seed provider lists no seeds."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Fatal configuration error"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + "\nFatal configuration error; unable to start server.  See log for stacktrace."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>YAMLException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Fatal configuration error error"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + "\nInvalid yaml; unable to start server.  See log for stacktrace."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>IEndpointSnitch</name></type> <name>createEndpointSnitch</name><parameter_list>(<param><decl><type><name>String</name></type> <name>snitchClassName</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>snitchClassName</name>.<name>contains</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>snitchClassName</name> = "org.apache.cassandra.locator." + <name>snitchClassName</name></expr>;</expr_stmt></then></if>
        <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>FBUtilities</name>.<name>construct</name></name><argument_list>(<argument><expr><name>snitchClassName</name></expr></argument>, <argument><expr>"snitch"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name><name>conf</name>.<name>dynamic_snitch</name></name> ? new <call><name>DynamicEndpointSnitch</name><argument_list>(<argument><expr><name>snitch</name></expr></argument>)</argument_list></call> : <name>snitch</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** load keyspace (table) definitions, but do not initialize the table instances. */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>loadSchemas</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>schemaCFS</name> <init>= <expr><call><name><name>SystemTable</name>.<name>schemaCFS</name></name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_KEYSPACES_CF</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// if table with definitions is empty try loading the old way</comment>
        <if>if <condition>(<expr><call><name><name>schemaCFS</name>.<name>estimateKeys</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
        <block>{
            <comment type="line">// we can load tables from local storage if a version is set in the system table and that actually maps to</comment>
            <comment type="line">// real data in the definitions table.  If we do end up loading from xml, store the definitions so that we</comment>
            <comment type="line">// don't load from xml anymore.</comment>
            <decl_stmt><decl><type><name>UUID</name></type> <name>uuid</name> <init>= <expr><call><name><name>MigrationManager</name>.<name>getLastMigrationId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>uuid</name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Couldn't detect any schema definitions in local storage."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// peek around the data directories to see if anything is there.</comment>
                <if>if <condition>(<expr><call><name>hasExistingNoSystemTables</name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Found table data in data directories. Consider using the CLI to define your schema."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else>else
                    <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"To create keyspaces and column families, see 'help create keyspace' in the CLI, or set up a schema using the thrift system_* calls."</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Loading schema version " + <call><name><name>uuid</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>KSMetaData</name></argument>&gt;</argument_list></name></type> <name>tableDefs</name> <init>= <expr><call><name><name>DefsTable</name>.<name>loadFromStorage</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// happens when someone manually deletes all tables and restarts.</comment>
                <if>if <condition>(<expr><call><name><name>tableDefs</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"No schema definitions were found in local storage."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <comment type="line">// if non-system tables where found, trying to load them</comment>
                <block>{
                    <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>load</name></name><argument_list>(<argument><expr><name>tableDefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>load</name></name><argument_list>(<argument><expr><call><name><name>DefsTable</name>.<name>loadFromTable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>updateVersion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Schema</name>.<name>instance</name>.<name>fixCFMaxId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasExistingNoSystemTables</name><parameter_list>()</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>String</name></type> <name>dataDir</name> <range>: <expr><call><name>getAllDataFileLocations</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>dataPath</name> <init>= <expr>new <call><name>File</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>dataPath</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>dataPath</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <comment type="line">// see if there are other directories present.</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>dirCount</name> <init>= <expr><call><name><name>dataPath</name>.<name>listFiles</name></name><argument_list>(<argument><expr>new <class><super><name>FileFilter</name></super><argument_list>()</argument_list>
                <block>{
                    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<param><decl><type><name>File</name></type> <name>pathname</name></decl></param>)</parameter_list>
                    <block>{
                        <return>return <expr>(<call><name><name>pathname</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>Table</name>.<name>SYSTEM_TABLE</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>pathname</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr>;</return>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call>.<name>length</name></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>dirCount</name> &gt; 0</expr>)</condition><then>
                    <return>return <expr>true</expr>;</return></then></if>
            }</block></then></if>
        }</block></for>

        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IAuthenticator</name></type> <name>getAuthenticator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>authenticator</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IAuthority</name></type> <name>getAuthority</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>authority</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getThriftFramedTransportSize</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>thrift_framed_transport_size_in_mb</name></name> * 1024 * 1024</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Creates all storage-related directories.
     * @throws IOException when a disk problem is encountered.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>createAllDirectories</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <try>try <block>{
            <if>if <condition>(<expr><name><name>conf</name>.<name>data_file_directories</name>.<name>length</name></name> == 0</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"At least one DataFileDirectory must be specified"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <for>for ( <init><decl><type><name>String</name></type> <name>dataFileDirectory</name> <range>: <expr><name><name>conf</name>.<name>data_file_directories</name></name></expr></range></decl></init> )
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>createDirectory</name></name><argument_list>(<argument><expr><name>dataFileDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            <if>if <condition>(<expr><name><name>conf</name>.<name>commitlog_directory</name></name> == null</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"commitlog_directory must be specified"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>createDirectory</name></name><argument_list>(<argument><expr><name><name>conf</name>.<name>commitlog_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>conf</name>.<name>saved_caches_directory</name></name> == null</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"saved_caches_directory must be specified"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>createDirectory</name></name><argument_list>(<argument><expr><name><name>conf</name>.<name>saved_caches_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>ex</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Fatal error: " + <call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Bad configuration; unable to start server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IPartitioner</name></type> <name>getPartitioner</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>partitioner</name></expr>;</return>
    }</block></function>

    <comment type="block">/* For tests ONLY, don't use otherwise or all hell will break loose */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setPartitioner</name><parameter_list>(<param><decl><type><name>IPartitioner</name></type> <name>newPartitioner</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>partitioner</name> = <name>newPartitioner</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IEndpointSnitch</name></type> <name>getEndpointSnitch</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>snitch</name></expr>;</return>
    }</block></function>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setEndpointSnitch</name><parameter_list>(<param><decl><type><name>IEndpointSnitch</name></type> <name>eps</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>snitch</name> = <name>eps</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IRequestScheduler</name></type> <name>getRequestScheduler</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>requestScheduler</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RequestSchedulerOptions</name></type> <name>getRequestSchedulerOptions</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>requestSchedulerOptions</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RequestSchedulerId</name></type> <name>getRequestSchedulerId</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>requestSchedulerId</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getJobTrackerAddress</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>job_tracker_host</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getColumnIndexSize</name><parameter_list>()</parameter_list>
    <block>{
    	<return>return <expr><name><name>conf</name>.<name>column_index_size_in_kb</name></name> * 1024</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getInitialToken</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"cassandra.initial_token"</expr></argument>, <argument><expr><name><name>conf</name>.<name>initial_token</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getReplaceToken</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"cassandra.replace_token"</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getClusterName</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>cluster_name</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getMaxStreamingRetries</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>max_streaming_retries</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getJobJarLocation</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>job_jar_file_location</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getStoragePort</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"cassandra.storage_port"</expr></argument>, <argument><expr><call><name><name>conf</name>.<name>storage_port</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getSSLStoragePort</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"cassandra.ssl_storage_port"</expr></argument>, <argument><expr><call><name><name>conf</name>.<name>ssl_storage_port</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRpcPort</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"cassandra.rpc_port"</expr></argument>, <argument><expr><call><name><name>conf</name>.<name>rpc_port</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getRpcTimeout</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>rpc_timeout_in_ms</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRpcTimeout</name><parameter_list>(<param><decl><type><name>Long</name></type> <name>timeOutInMillis</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>conf</name>.<name>rpc_timeout_in_ms</name></name> = <name>timeOutInMillis</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getPhiConvictThreshold</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>phi_convict_threshold</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getConcurrentReaders</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>concurrent_reads</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getConcurrentWriters</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>concurrent_writes</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getConcurrentReplicators</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>concurrent_replicates</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getFlushWriters</name><parameter_list>()</parameter_list>
    <block>{
            <return>return <expr><name><name>conf</name>.<name>memtable_flush_writers</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInMemoryCompactionLimit</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>in_memory_compaction_limit_in_mb</name></name> * 1024 * 1024</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInMemoryCompactionLimit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sizeInMB</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>conf</name>.<name>in_memory_compaction_limit_in_mb</name></name> = <name>sizeInMB</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getConcurrentCompactors</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>concurrent_compactors</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isMultithreadedCompaction</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>multithreaded_compaction</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCompactionThroughputMbPerSec</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>compaction_throughput_mb_per_sec</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCompactionThroughputMbPerSec</name><parameter_list>(<param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>conf</name>.<name>compaction_throughput_mb_per_sec</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getStreamThroughputOutboundMegabitsPerSec</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>stream_throughput_outbound_megabits_per_sec</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setStreamThroughputOutboundMegabitsPerSec</name><parameter_list>(<param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>conf</name>.<name>stream_throughput_outbound_megabits_per_sec</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name><index>[]</index></type> <name>getAllDataFileLocations</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>data_file_directories</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getCommitLogLocation</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>commitlog_directory</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * size of commitlog segments to allocate 
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCommitLogSegmentSize</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>commitlog_segment_size_in_mb</name></name> * 1024 * 1024</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getSavedCachesLocation</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>saved_caches_directory</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>getSeeds</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableSet</name></name><argument_list>(<argument><expr>new <call><name>HashSet</name><argument_list>(<argument><expr><call><name><name>seedProvider</name>.<name>getSeeds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getListenAddress</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>listenAddress</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getBroadcastAddress</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>broadcastAddress</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IInternodeAuthenticator</name></type> <name>getInternodeAuthenticator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>internodeAuthenticator</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setBroadcastAddress</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>broadcastAdd</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>broadcastAddress</name> = <name>broadcastAdd</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getRpcAddress</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>rpcAddress</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getRpcServerType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>rpc_server_type</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getRpcKeepAlive</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>rpc_keepalive</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>getRpcMinThreads</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>rpc_min_threads</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>getRpcMaxThreads</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>rpc_max_threads</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>getRpcSendBufferSize</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>rpc_send_buff_size_in_bytes</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>getRpcRecvBufferSize</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>rpc_recv_buff_size_in_bytes</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getCommitLogSyncBatchWindow</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>commitlog_sync_batch_window_in_ms</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCommitLogSyncPeriod</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>conf</name>.<name>commitlog_sync_period_in_ms</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name>.<name>CommitLogSync</name></name></type> <name>getCommitLogSync</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>commitlog_sync</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name>.<name>DiskAccessMode</name></name></type> <name>getDiskAccessMode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>disk_access_mode</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name>.<name>DiskAccessMode</name></name></type> <name>getIndexAccessMode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>indexAccessMode</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSnapshotBeforeCompaction</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>snapshot_before_compaction</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAutoSnapshot</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>conf</name>.<name>auto_snapshot</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAutoBootstrap</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>auto_bootstrap</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hintedHandoffEnabled</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>hinted_handoff_enabled</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getMaxHintWindow</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>max_hint_window_in_ms</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>getIndexInterval</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>index_interval</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>getSerializedCachePath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name><name>CacheService</name>.<name>CacheType</name></name></type> <name>cacheType</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>conf</name>.<name>saved_caches_directory</name></name> + <name><name>File</name>.<name>separator</name></name> + <name>ksName</name> + "-" + <name>cfName</name> + "-" + <name>cacheType</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getDynamicUpdateInterval</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>dynamic_snitch_update_interval_in_ms</name></name></expr>;</return>
    }</block></function>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDynamicUpdateInterval</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>dynamicUpdateInterval</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>conf</name>.<name>dynamic_snitch_update_interval_in_ms</name></name> = <name>dynamicUpdateInterval</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getDynamicResetInterval</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>dynamic_snitch_reset_interval_in_ms</name></name></expr>;</return>
    }</block></function>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDynamicResetInterval</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>dynamicResetInterval</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>conf</name>.<name>dynamic_snitch_reset_interval_in_ms</name></name> = <name>dynamicResetInterval</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getDynamicBadnessThreshold</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>dynamic_snitch_badness_threshold</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDynamicBadnessThreshold</name><parameter_list>(<param><decl><type><name>Double</name></type> <name>dynamicBadnessThreshold</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>conf</name>.<name>dynamic_snitch_badness_threshold</name></name> = <name>dynamicBadnessThreshold</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>EncryptionOptions</name></type> <name>getEncryptionOptions</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>encryption_options</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getFlushLargestMemtablesAt</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>flush_largest_memtables_at</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getReduceCacheSizesAt</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>reduce_cache_sizes_at</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getReduceCacheCapacityTo</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>reduce_cache_capacity_to</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getHintedHandoffThrottleDelay</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>hinted_handoff_throttle_delay_in_ms</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getPreheatKeyCache</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>compaction_preheat_key_cache</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isIncrementalBackupsEnabled</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>incremental_backups</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setIncrementalBackupsEnabled</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>conf</name>.<name>incremental_backups</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getFlushQueueSize</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>memtable_flush_queue_size</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getTotalMemtableSpaceInMB</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// should only be called if estimatesRealMemtableSize() is true</comment>
        <assert>assert <expr><name><name>conf</name>.<name>memtable_total_space_in_mb</name></name> &gt; 0</expr>;</assert>
        <return>return <expr><name><name>conf</name>.<name>memtable_total_space_in_mb</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getTotalCommitlogSpaceInMB</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>commitlog_total_space_in_mb</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getTrickleFsync</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>trickle_fsync</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getTrickleFsyncIntervalInKb</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>trickle_fsync_interval_in_kb</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getKeyCacheSizeInMB</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>keyCacheSizeInMB</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getKeyCacheSavePeriod</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>key_cache_save_period</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getKeyCacheKeysToSave</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>key_cache_keys_to_save</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getRowCacheSizeInMB</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>row_cache_size_in_mb</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRowCacheSavePeriod</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>row_cache_save_period</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRowCacheKeysToSave</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>row_cache_keys_to_save</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IRowCacheProvider</name></type> <name>getRowCacheProvider</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>rowCacheProvider</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getStreamingSocketTimeout</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>streaming_socket_timeout_in_ms</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>populateIOCacheOnFlush</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>conf</name>.<name>populate_io_cache_on_flush</name></name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
