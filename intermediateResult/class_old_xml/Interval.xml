<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\IntervalTree\Interval.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>IntervalTree</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Ordering</name></name>;</import>

<class><specifier>public</specifier> class <name><name>Interval</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Comparable</name></type> <name>min</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Comparable</name></type> <name>max</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T</name></type> <name>Data</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Interval</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>min</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>max</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>min</name></name> = <name>min</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>max</name></name> = <name>max</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>Data</name></name> = null</expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Interval</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>min</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>max</name></decl></param>, <param><decl><type><name>T</name></type> <name>data</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>min</name></name> = <name>min</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>max</name></name> = <name>max</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>Data</name></name> = <name>data</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>encloses</name><parameter_list>(<param><decl><type><name>Interval</name></type> <name>interval</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>(<call><name><name>this</name>.<name>min</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>min</name></name></expr></argument>)</argument_list></call> &lt;= 0
                &amp;&amp; <call><name><name>this</name>.<name>max</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>max</name></name></expr></argument>)</argument_list></call> &gt;= 0)</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>point</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>(<call><name><name>this</name>.<name>min</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call> &lt;= 0
                &amp;&amp; <call><name><name>this</name>.<name>max</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call> &gt;= 0)</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>intersects</name><parameter_list>(<param><decl><type><name>Interval</name></type> <name>interval</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>this</name>.<name>contains</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>min</name></name></expr></argument>)</argument_list></call> || <call><name><name>this</name>.<name>contains</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>max</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Ordering</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>minOrdering</name> <init>= <expr>new <class><super><name><name>Ordering</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>Interval</name></type> <name>interval</name></decl></param>, <param><decl><type><name>Interval</name></type> <name>interval1</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>interval</name>.<name>min</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>interval1</name>.<name>min</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Ordering</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>maxOrdering</name> <init>= <expr>new <class><super><name><name>Ordering</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>Interval</name></type> <name>interval</name></decl></param>, <param><decl><type><name>Interval</name></type> <name>interval1</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>interval</name>.<name>max</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>interval1</name>.<name>max</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Interval(%s, %s)"</expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
