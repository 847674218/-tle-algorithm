<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\RowMutation.java"><comment type="block" format="javadoc">/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>KSMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>Schema</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryPath</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IColumnSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FastByteArrayInputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>Message</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessageProducer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ColumnOrSuperColumn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>Deletion</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>UUIDGen</name></name>;</import>

<class><specifier>public</specifier> class <name>RowMutation</name> <super><implements>implements <name>IMutation</name>, <name>MessageProducer</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>RowMutationSerializer</name></type> <name>serializer_</name> <init>= <expr>new <call><name>RowMutationSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FORWARD_HEADER</name> <init>= <expr>"FORWARD"</expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RowMutationSerializer</name></type> <name>serializer</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>serializer_</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>table_</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>key_</name></decl>;</decl_stmt>
    <comment type="line">// map of column family id to mutations for that column family.</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></type> <name>modifications_</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>preserializedBuffers</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RowMutation</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>table_</name> = <name>table</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>key_</name> = <name>key</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>RowMutation</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>Row</name></type> <name>row</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>table_</name> = <name>table</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>key_</name> = <name><name>row</name>.<name>key</name>.<name>key</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>row</name>.<name>cf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>protected</specifier> <name>RowMutation</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></type> <name>modifications</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>table_</name> = <name>table</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>key_</name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>modifications_</name> = <name>modifications</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTable</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>table_</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getColumnFamilyIds</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>modifications_</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>key</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>key_</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></type> <name>getColumnFamilies</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>modifications_</name>.<name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnFamily</name></type> <name>getColumnFamily</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>cfId</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>modifications_</name>.<name>get</name></name><argument_list>(<argument><expr><name>cfId</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns mutation representing a Hints to be sent to &lt;code&gt;address&lt;/code&gt;
     * as soon as it becomes available.
     * The format is the following:
     *
     * HintsColumnFamily: {        // cf
     *   &lt;dest token&gt;: {           // key
     *     &lt;uuid&gt;: {               // super-column
     *       table: &lt;table&gt;        // columns
     *       key: &lt;key&gt;
     *       mutation: &lt;mutation&gt;
     *       version: &lt;version&gt;
     *     }
     *   }
     * }
     *
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RowMutation</name></type> <name>hintFor</name><parameter_list>(<param><decl><type><name>RowMutation</name></type> <name>mutation</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>token</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>hintId</name> <init>= <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>getTimeUUIDBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// determine the TTL for the RowMutation</comment>
        <comment type="line">// this is set at the smallest GCGraceSeconds for any of the CFs in the RM</comment>
        <comment type="line">// this ensures that deletes aren't "undone" by delivery of an old hint</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ttl</name> <init>= <expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ColumnFamily</name></type> <name>cf</name> <range>: <expr><call><name><name>mutation</name>.<name>getColumnFamilies</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><name>ttl</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>ttl</name></expr></argument>, <argument><expr><call><name><name>cf</name>.<name>metadata</name></name><argument_list>()</argument_list></call>.<call><name>getGcGraceSeconds</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <comment type="line">// serialized RowMutation</comment>
        <decl_stmt><decl><type><name>QueryPath</name></type> <name>path</name> <init>= <expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name><name>HintedHandOffManager</name>.<name>HINTS_CF</name></name></expr></argument>, <argument><expr><name>hintId</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"mutation"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>mutation</name>.<name>getSerializedBuffer</name></name><argument_list>(<argument><expr><name><name>MessagingService</name>.<name>version_</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// serialization version</comment>
        <expr_stmt><expr><name>path</name> = new <call><name>QueryPath</name><argument_list>(<argument><expr><name><name>HintedHandOffManager</name>.<name>HINTS_CF</name></name></expr></argument>, <argument><expr><name>hintId</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"version"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name><name>MessagingService</name>.<name>version_</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// table</comment>
        <expr_stmt><expr><name>path</name> = new <call><name>QueryPath</name><argument_list>(<argument><expr><name><name>HintedHandOffManager</name>.<name>HINTS_CF</name></name></expr></argument>, <argument><expr><name>hintId</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"table"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><call><name><name>mutation</name>.<name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// key</comment>
        <expr_stmt><expr><name>path</name> = new <call><name>QueryPath</name><argument_list>(<argument><expr><name><name>HintedHandOffManager</name>.<name>HINTS_CF</name></name></expr></argument>, <argument><expr><name>hintId</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"key"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>mutation</name>.<name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>rm</name></expr>;</return>
    }</block></function>

    <comment type="block">/*
     * Specify a column family name and the corresponding column
     * family object.
     * param @ cf - column family name
     * param @ columnFamily - the column family.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>columnFamily</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>columnFamily</name> != null</expr>;</assert>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>prev</name> <init>= <expr><call><name><name>modifications_</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>columnFamily</name>.<name>id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>prev</name> != null</expr>)</condition><then>
            <comment type="line">// developer error</comment>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"ColumnFamily " + <name>columnFamily</name> + " already has modifications in this mutation: " + <name>prev</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return the ColumnFamily in this RowMutation corresponding to @param cfName, creating an empty one if necessary.
     */</comment>
    <function><type><specifier>public</specifier> <name>ColumnFamily</name></type> <name>addOrGet</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfm</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getCFMetaData</name></name><argument_list>(<argument><expr><name>table_</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>modifications_</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>cfm</name>.<name>cfId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cf</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cf</name> = <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>modifications_</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>cfm</name>.<name>cfId</name></name></expr></argument>, <argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>cf</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>modifications_</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/*
     * Specify a column name and a corresponding value for
     * the column. Column name is specified as &lt;column family&gt;:column.
     * This will result in a ColumnFamily associated with
     * &lt;column family&gt; as name and a Column with &lt;column&gt;
     * as name. The column can be further broken up
     * as super column name : columnname  in case of super columns
     *
     * param @ cf - column name as &lt;column family&gt;:&lt;column&gt;
     * param @ value - value associated with the column
     * param @ timestamp - timestamp associated with this data.
     * param @ timeToLive - ttl for the column, 0 for standard (non expiring) columns
     *
     * @Deprecated this tends to be low-performance; we're doing two hash lookups,
     * one of which instantiates a Pair, and callers tend to instantiate new QP objects
     * for each call as well.  Use the add(ColumnFamily) overload instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>, <param><decl><type><name>int</name></type> <name>timeToLive</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Integer</name></type> <name>id</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getId</name></name><argument_list>(<argument><expr><name>table_</name></expr></argument>, <argument><expr><name><name>path</name>.<name>columnFamilyName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>modifications_</name>.<name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>columnFamily</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>columnFamily</name> = <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name>table_</name></expr></argument>, <argument><expr><name><name>path</name>.<name>columnFamilyName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>modifications_</name>.<name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>columnFamily</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>timeToLive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCounter</name><parameter_list>(<param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>long</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Integer</name></type> <name>id</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getId</name></name><argument_list>(<argument><expr><name>table_</name></expr></argument>, <argument><expr><name><name>path</name>.<name>columnFamilyName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>modifications_</name>.<name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>columnFamily</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>columnFamily</name> = <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name>table_</name></expr></argument>, <argument><expr><name><name>path</name>.<name>columnFamilyName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>modifications_</name>.<name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>columnFamily</name>.<name>addCounter</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Integer</name></type> <name>id</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getId</name></name><argument_list>(<argument><expr><name>table_</name></expr></argument>, <argument><expr><name><name>path</name>.<name>columnFamilyName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>localDeleteTime</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> / 1000</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>modifications_</name>.<name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>columnFamily</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>columnFamily</name> = <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name>table_</name></expr></argument>, <argument><expr><name><name>path</name>.<name>columnFamilyName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>modifications_</name>.<name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>path</name>.<name>superColumnName</name></name> == null &amp;&amp; <name><name>path</name>.<name>columnName</name></name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>columnFamily</name>.<name>delete</name></name><argument_list>(<argument><expr><name>localDeleteTime</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>path</name>.<name>columnName</name></name> == null</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>SuperColumn</name></type> <name>sc</name> <init>= <expr>new <call><name>SuperColumn</name><argument_list>(<argument><expr><name><name>path</name>.<name>superColumnName</name></name></expr></argument>, <argument><expr><call><name><name>columnFamily</name>.<name>getSubComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sc</name>.<name>delete</name></name><argument_list>(<argument><expr><name>localDeleteTime</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>columnFamily</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>columnFamily</name>.<name>addTombstone</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>localDeleteTime</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAll</name><parameter_list>(<param><decl><type><name>IMutation</name></type> <name>m</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!(<name>m</name> instanceof <name>RowMutation</name>)</expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>(<name>RowMutation</name>)<name>m</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>table_</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>rm</name>.<name>table_</name></name></expr></argument>)</argument_list></call> || !<call><name><name>key_</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>rm</name>.<name>key_</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>rm</name>.<name>modifications_</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <comment type="line">// It's slighty faster to assume the key wasn't present and fix if</comment>
            <comment type="line">// not in the case where it wasn't there indeed.</comment>
            <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>modifications_</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>cf</name> != null</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>resolve</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>
    }</block></function>

    <comment type="block">/*
     * This is equivalent to calling commit. Applies the changes to
     * to the table that is obtained by calling Table.open().
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>KSMetaData</name></type> <name>ksm</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getTableDefinition</name></name><argument_list>(<argument><expr><call><name>getTable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name>table_</name></expr></argument>)</argument_list></call>.<call><name>apply</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ksm</name>.<name>durableWrites</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>applyUnsafe</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name>table_</name></expr></argument>)</argument_list></call>.<call><name>apply</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Message</name></type> <name>getMessage</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name>getMessage</name><argument_list>(<argument><expr><name><name>StorageService</name>.<name>Verb</name>.<name>MUTATION</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Message</name></type> <name>getMessage</name><parameter_list>(<param><decl><type><name><name>StorageService</name>.<name>Verb</name></name></type> <name>verb</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr>new <call><name>Message</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><call><name>getSerializedBuffer</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>byte</name><index>[]</index></type> <name>getSerializedBuffer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr><call><name><name>preserializedBuffers</name>.<name>get</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>bytes</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>bytes</name> = <call><name><name>FBUtilities</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>serializer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>preserializedBuffers</name>.<name>put</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>bytes</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>toString</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>shallow</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buff</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"RowMutation("</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr>"keyspace='"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>table_</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>'\''</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr>", key='"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name>key_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>'\''</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr>", modifications=["</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>shallow</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cfnames</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>modifications_</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>Integer</name></type> <name>cfid</name> <range>: <expr><call><name><name>modifications_</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfm</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getCFMetaData</name></name><argument_list>(<argument><expr><name>cfid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cfnames</name>.<name>add</name></name><argument_list>(<argument><expr><name>cfm</name> == null ? "-dropped-" : <name><name>cfm</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><name>cfnames</name></expr></argument>, <argument><expr>", "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <expr_stmt><expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><call><name><name>modifications_</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>", "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <return>return <expr><call><name><name>buff</name>.<name>append</name></name><argument_list>(<argument><expr>"])"</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumnOrSuperColumn</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name>ColumnOrSuperColumn</name></type> <name>cosc</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>cosc</name>.<name>super_column</name></name> != null</expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>Column</name></name></type> <name>column</name> <range>: <expr><name><name>cosc</name>.<name>super_column</name>.<name>columns</name></name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr><name><name>cosc</name>.<name>super_column</name>.<name>name</name></name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>column</name>.<name>value</name></name></expr></argument>, <argument><expr><name><name>column</name>.<name>timestamp</name></name></expr></argument>, <argument><expr><name><name>column</name>.<name>ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>cosc</name>.<name>column</name></name> != null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><name><name>cosc</name>.<name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cosc</name>.<name>column</name>.<name>value</name></name></expr></argument>, <argument><expr><name><name>cosc</name>.<name>column</name>.<name>timestamp</name></name></expr></argument>, <argument><expr><name><name>cosc</name>.<name>column</name>.<name>ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>cosc</name>.<name>counter_super_column</name></name> != null</expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CounterColumn</name></name></type> <name>column</name> <range>: <expr><name><name>cosc</name>.<name>counter_super_column</name>.<name>columns</name></name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name>addCounter</name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr><name><name>cosc</name>.<name>counter_super_column</name>.<name>name</name></name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>column</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else <comment type="line">// cosc.counter_column != null</comment>
        <block>{
            <expr_stmt><expr><call><name>addCounter</name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><name><name>cosc</name>.<name>counter_column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cosc</name>.<name>counter_column</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>deleteColumnOrSuperColumn</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name>Deletion</name></type> <name>del</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>del</name>.<name>predicate</name></name> != null &amp;&amp; <name><name>del</name>.<name>predicate</name>.<name>column_names</name></name> != null</expr>)</condition><then>
        <block>{
            <for>for(<init><decl><type><name>ByteBuffer</name></type> <name>c</name> <range>: <expr><name><name>del</name>.<name>predicate</name>.<name>column_names</name></name></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr><name><name>del</name>.<name>super_column</name></name> == null &amp;&amp; <call><name><name>Schema</name>.<name>instance</name>.<name>getColumnFamilyType</name></name><argument_list>(<argument><expr><name>table_</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call> == <name><name>ColumnFamilyType</name>.<name>Super</name></name></expr>)</condition><then>
                    <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>del</name>.<name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else>else
                    <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr><name><name>del</name>.<name>super_column</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>del</name>.<name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></for>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr><name><name>del</name>.<name>super_column</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>del</name>.<name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RowMutation</name></type> <name>fromBytes</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>raw</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr><call><name><name>serializer_</name>.<name>deserialize</name></name><argument_list>(<argument><expr>new <call><name>DataInputStream</name><argument_list>(<argument><expr>new <call><name>FastByteArrayInputStream</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasCounters</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>rm</name>.<name>modifications_</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>metadata</name><argument_list>()</argument_list></call>.<call><name>getDefaultValidator</name><argument_list>()</argument_list></call>.<call><name>isCommutative</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>hasCounters</name> = true</expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>

        <comment type="line">// We need to deserialize at least once for counters to cleanup the delta</comment>
        <if>if <condition>(<expr>!<name>hasCounters</name> &amp;&amp; <name>version</name> == <name><name>MessagingService</name>.<name>version_</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>rm</name>.<name>preserializedBuffers</name>.<name>put</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>rm</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>RowMutationSerializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>RowMutation</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>RowMutation</name></type> <name>rm</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>rm</name>.<name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><call><name><name>rm</name>.<name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* serialize the modifications_ in the mutation */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>rm</name>.<name>modifications_</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <assert>assert <expr><name>size</name> &gt;= 0</expr>;</assert>
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Integer</name></argument>,<argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>rm</name>.<name>modifications_</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ColumnFamily</name>.<name>serializer</name></name><argument_list>()</argument_list></call>.<call><name>serialize</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <function><type><specifier>public</specifier> <name>RowMutation</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>, <param><decl><type><name><name>IColumnSerializer</name>.<name>Flag</name></name></type> <name>flag</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>table</name> <init>= <expr><call><name><name>dis</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>key</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></type> <name>modifications</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
            <block>{
                <decl_stmt><decl><type><name>Integer</name></type> <name>cfid</name> <init>= <expr><call><name><name>Integer</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>serializer</name></name><argument_list>()</argument_list></call>.<call><name>deserialize</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><call><name><name>TreeMapBackedSortedColumns</name>.<name>factory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>modifications</name>.<name>put</name></name><argument_list>(<argument><expr><name>cfid</name></expr></argument>, <argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>modifications</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>RowMutation</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <return>return <expr><call><name>deserialize</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>IColumnSerializer</name>.<name>Flag</name>.<name>FROM_REMOTE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>RowMutation</name></type> <name>rm</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>DBConstants</name>.<name>shortSize</name></name> + <call><name><name>FBUtilities</name>.<name>encodedUTF8Length</name></name><argument_list>(<argument><expr><call><name><name>rm</name>.<name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>shortSize</name></name> + <call><name><name>rm</name>.<name>key</name></name><argument_list>()</argument_list></call>.<call><name>remaining</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>intSize</name></name></expr>;</expr_stmt>
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Integer</name></argument>,<argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>rm</name>.<name>modifications_</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>intSize</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name> += <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>serializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <return>return <expr><name>size</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
