<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\sstable\SSTableLoader.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FilenameFilter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>CountDownLatch</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>Future</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeoutException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>Config</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Token</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>streaming</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>.*;</import>

<comment type="block" format="javadoc">/**
 * Cassandra SSTable bulk loader.
 * Load an externally created sstable into a cluster.
 */</comment>
<class><specifier>public</specifier> class <name>SSTableLoader</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>directory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Client</name></type> <name>client</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>OutputHandler</name></type> <name>outputHandler</name></decl>;</decl_stmt>

    <expr_stmt><expr>static
    <block>{
        <expr><call><name><name>Config</name>.<name>setLoadYaml</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;
    }</block>

    public <call><name>SSTableLoader</name><argument_list>(<argument><expr><name>File</name> <name>directory</name></expr></argument>, <argument><expr><name>Client</name> <name>client</name></expr></argument>, <argument><expr><name>OutputHandler</name> <name>outputHandler</name></expr></argument>)</argument_list></call>
    <block>{
        <expr><name><name>this</name>.<name>directory</name></name> = <name>directory</name></expr>;
        <expr><name><name>this</name>.<name>keyspace</name></name> = <call><name><name>directory</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;
        <expr><name><name>this</name>.<name>client</name></name> = <name>client</name></expr>;
        <expr><name><name>this</name>.<name>outputHandler</name></name> = <name>outputHandler</name></expr>;
    }</block>

    protected <name><name>Collection</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name> <call><name>openSSTables</name><argument_list>()</argument_list></call>
    <block>{
        <expr><name>final</name> <name><name>List</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name> <name>sstables</name> = new <call><name><name>LinkedList</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;

        <expr><call><name><name>directory</name>.<name>list</name></name><argument_list>(<argument><expr>new <class><super><name>FilenameFilter</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>
            <block>{
                <decl_stmt><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>Descriptor</name></argument>, <argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>p</name> <init>= <expr><call><name><name>SSTable</name>.<name>tryComponentFromFilename</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Descriptor</name></type> <name>desc</name> <init>= <expr><name>p</name> == null ? null : <name><name>p</name>.<name>left</name></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>p</name> == null || !<call><name><name>p</name>.<name>right</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>Component</name>.<name>DATA</name></name></expr></argument>)</argument_list></call> || <name><name>desc</name>.<name>temporary</name></name></expr>)</condition><then>
                    <return>return <expr>false</expr>;</return></then></if>

                <if>if <condition>(<expr>!new <call><name>File</name><argument_list>(<argument><expr><call><name><name>desc</name>.<name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name>.<name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>outputHandler</name>.<name>output</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Skipping file %s because index is missing"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>false</expr>;</return>
                <expr_stmt/></block></then></if></block></function></block></class></expr></argument></argument_list></call></expr>}</block></expr></expr_stmt>

                <if>if <condition>(<expr>!<call><name><name>client</name>.<name>validateColumnFamily</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>desc</name>.<name>cfname</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>outputHandler</name>.<name>output</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Skipping file %s: column family %s.%s doesn't exist"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>desc</name>.<name>cfname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>

                <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>Component</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <constructor_decl><name><name>components</name>.<name>add</name></name><parameter_list>(<param><decl><type><name><name>Component</name>.<name>DATA</name></name></type></decl></param>)</parameter_list>;</constructor_decl>
                <constructor_decl><name><name>components</name>.<name>add</name></name><parameter_list>(<param><decl><type><name><name>Component</name>.<name>PRIMARY_INDEX</name></name></type></decl></param>)</parameter_list>;</constructor_decl>
                <if>if <condition>(<expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>desc</name>.<name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name>.<name>COMPRESSION_INFO</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>components</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>Component</name>.<name>COMPRESSION_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <try>try
                <block>{
                    <expr_stmt><expr><call><name><name>sstables</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>SSTableReader</name>.<name>open</name></name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><call><name><name>client</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <expr_stmt><expr><call><name><name>outputHandler</name>.<name>output</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Skipping file %s, error opening it: %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
                <return>return <expr>false</expr>;</return>
            }</block></class>
        })<empty_stmt>;</empty_stmt>
        <return>return <expr><name>sstables</name></expr>;</return>
    }

    public <function><type><name>LoaderFuture</name></type> <name>stream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name>stream</name><argument_list>(<argument><expr><name><name>Collections</name>.</name>&lt;<name>InetAddress</name>&gt;<call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>LoaderFuture</name></type> <name>stream</name><parameter_list>(<param><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>toIgnore</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>client</name>.<name>init</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name> <init>= <expr><call><name>openSSTables</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>sstables</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>outputHandler</name>.<name>output</name></name><argument_list>(<argument><expr>"No sstables to stream"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>new <call><name>LoaderFuture</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name><name>Collection</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>endpointToRanges</name> <init>= <expr><call><name><name>client</name>.<name>getEndpointToRangesMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>outputHandler</name>.<name>output</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Streaming revelant part of %sto %s"</expr></argument>, <argument><expr><call><name>names</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>endpointToRanges</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// There will be one streaming session by endpoint</comment>
        <decl_stmt><decl><type><name>LoaderFuture</name></type> <name>future</name> <init>= <expr>new <call><name>LoaderFuture</name><argument_list>(<argument><expr><call><name><name>endpointToRanges</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name><name>Collection</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>endpointToRanges</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>InetAddress</name></type> <name>remote</name> <init>= <expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>toIgnore</name>.<name>contains</name></name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>future</name>.<name>latch</name>.<name>countDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StreamOutSession</name></type> <name>session</name> <init>= <expr><call><name><name>StreamOutSession</name>.<name>create</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>, <argument><expr>new <call><name>CountDownCallback</name><argument_list>(<argument><expr><name>future</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// transferSSTables assumes references have been acquired</comment>
            <expr_stmt><expr><call><name><name>SSTableReader</name>.<name>acquireReferences</name></name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>StreamOut</name>.<name>transferSSTables</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>sstables</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>, <argument><expr><name><name>OperationType</name>.<name>BULK_LOAD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>future</name>.<name>setPendings</name></name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><call><name><name>session</name>.<name>getFiles</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>future</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>LoaderFuture</name> <super><implements>implements <name><name>Future</name><argument_list>&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>CountDownLatch</name></type> <name>latch</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name><name>Collection</name><argument_list>&lt;<argument><name>PendingFile</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>pendingFiles</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>failedHosts</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>LoaderFuture</name><parameter_list>(<param><decl><type><name>int</name></type> <name>request</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name>latch</name> = new <call><name>CountDownLatch</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pendingFiles</name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name><name>Collection</name><argument_list>&lt;<argument><name>PendingFile</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>setPendings</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>remote</name></decl></param>, <param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>PendingFile</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>pendingFiles</name>.<name>put</name></name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr>new <call><name>ArrayList</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>setFailed</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>addr</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>failedHosts</name>.<name>add</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>getFailedHosts</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>failedHosts</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>cancel</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>mayInterruptIfRunning</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"Cancellation is not yet supported"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Void</name></type> <name>get</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>latch</name>.<name>await</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>null</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Void</name></type> <name>get</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timeout</name></decl></param>, <param><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>TimeoutException</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr><call><name><name>latch</name>.<name>await</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr>null</expr>;</return></then>
            <else>else
                <throw>throw <expr>new <call><name>TimeoutException</name><argument_list>()</argument_list></call></expr>;</throw></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCancelled</name><parameter_list>()</parameter_list>
        <block>{
            <comment type="line">// For now, cancellation is not supported, maybe one day...</comment>
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDone</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>latch</name>.<name>getCount</name></name><argument_list>()</argument_list></call> == 0</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hadFailures</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>failedHosts</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name><name>Collection</name><argument_list>&lt;<argument><name>PendingFile</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getPendingFiles</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>pendingFiles</name></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>names</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>sstables</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>builder</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>sstable</name>.<name>descriptor</name>.<name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name>.<name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><call><name><name>builder</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> class <name>CountDownCallback</name> <super><implements>implements <name>IStreamCallback</name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>InetAddress</name></type> <name>endpoint</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>LoaderFuture</name></type> <name>future</name></decl>;</decl_stmt>

        <constructor><name>CountDownCallback</name><parameter_list>(<param><decl><type><name>LoaderFuture</name></type> <name>future</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>future</name></name> = <name>future</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>endpoint</name></name> = <name>endpoint</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onSuccess</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>future</name>.<name>latch</name>.<name>countDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>outputHandler</name>.<name>debug</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Streaming session to %s completed (waiting on %d outstanding sessions)"</expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>future</name>.<name>latch</name>.<name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// There could be race with stop being called twice but it should be ok</comment>
            <if>if <condition>(<expr><call><name><name>future</name>.<name>latch</name>.<name>getCount</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>client</name>.<name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onFailure</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>outputHandler</name>.<name>output</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Streaming session to %s failed"</expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>future</name>.<name>setFailed</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>future</name>.<name>latch</name>.<name>countDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>client</name>.<name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>Client</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name><name>Collection</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>endpointToRanges</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name><name>Collection</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>IPartitioner</name></type> <name>partitioner</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Initialize the client.
         * Perform any step necessary so that after the call to the this
         * method:
         *   * partitioner is initialized
         *   * getEndpointToRangesMap() returns a correct map
         * This method is guaranteed to be called before any other method of a
         * client.
         */</comment>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>init</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/**
         * Stop the client.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{}</block></function>

        <comment type="block" format="javadoc">/**
         * Validate that {@code keyspace} is an existing keyspace and {@code
         * cfName} one of its existing column family.
         */</comment>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>validateColumnFamily</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>;</function_decl>

        <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>InetAddress</name></argument>, <argument><name><name>Collection</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getEndpointToRangesMap</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>endpointToRanges</name></expr>;</return>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>setPartitioner</name><parameter_list>(<param><decl><type><name>String</name></type> <name>partclass</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name>setPartitioner</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>newPartitioner</name></name><argument_list>(<argument><expr><name>partclass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>setPartitioner</name><parameter_list>(<param><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>partitioner</name></name> = <name>partitioner</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name>.<name>setPartitioner</name></name><argument_list>(<argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>IPartitioner</name></type> <name>getPartitioner</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>partitioner</name></expr>;</return>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>addRangeForEndpoint</name><parameter_list>(<param><decl><type><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><call><name><name>endpointToRanges</name>.<name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ranges</name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>ranges</name> = new <call><name><name>HashSet</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>endpointToRanges</name>.<name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>ranges</name>.<name>add</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}
</unit>
