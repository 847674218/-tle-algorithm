<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\AbstractStatsDeque.java"><comment type="block">/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractStatsDeque</name> <super><implements>implements <name><name>Iterable</name><argument_list>&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>double</name></type> <name>o</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">//</comment>
    <comment type="line">// statistical methods</comment>
    <comment type="line">//</comment>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>sum</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr>0d</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Double</name></type> <name>interval</name> <range>: <expr><name>this</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><name>sum</name> += <name>interval</name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>sum</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>sumOfDeviations</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>sumOfDeviations</name> <init>= <expr>0d</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>mean</name> <init>= <expr><call><name>mean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>Double</name></type> <name>interval</name> <range>: <expr><name>this</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><name>interval</name> - <name>mean</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>sumOfDeviations</name> += <name>v</name> * <name>v</name></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>sumOfDeviations</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>mean</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>sum</name><argument_list>()</argument_list></call> / <call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>variance</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>sumOfDeviations</name><argument_list>()</argument_list></call> / <call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>stdev</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Math</name>.<name>sqrt</name></name><argument_list>(<argument><expr><call><name>variance</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
