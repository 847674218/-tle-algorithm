<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\SystemTable.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOError</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ExecutionException</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>IdentityQueryFilter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryFilter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryPath</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AsciiType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>BytesType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Token</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>Constants</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>NodeId</name></name>;</import>

<class><specifier>public</specifier> class <name>SystemTable</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>STATUS_CF</name> <init>= <expr>"LocationInfo"</expr></init></decl>;</decl_stmt> <comment type="line">// keep the old CF string for backwards-compatibility</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INDEX_CF</name> <init>= <expr>"IndexInfo"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NODE_ID_CF</name> <init>= <expr>"NodeIdInfo"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VERSION_CF</name> <init>= <expr>"Versions"</expr></init></decl>;</decl_stmt>
    <comment type="line">// see layout description in the DefsTable class header</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SCHEMA_KEYSPACES_CF</name> <init>= <expr>"schema_keyspaces"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SCHEMA_COLUMNFAMILIES_CF</name> <init>= <expr>"schema_columnfamilies"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SCHEMA_COLUMNS_CF</name> <init>= <expr>"schema_columns"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>LOCATION_KEY</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"L"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>RING_KEY</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"Ring"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>BOOTSTRAP_KEY</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"Bootstrap"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>COOKIE_KEY</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"Cookies"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>BOOTSTRAP</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"B"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>TOKEN</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"Token"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>GENERATION</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"Generation"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>CLUSTERNAME</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"ClusterName"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>CURRENT_LOCAL_NODE_ID_KEY</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"CurrentLocal"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>ALL_LOCAL_NODE_ID_KEY</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"Local"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>BootstrapState</name>
    <block>{
        <decl><name>NEEDS_BOOTSTRAP</name></decl>, <comment type="line">// ordered for boolean backward compatibility, false</comment>
        <decl><name>COMPLETED</name></decl>, <comment type="line">// true</comment>
        <decl><name>IN_PROGRESS</name></decl>
    }</block></enum>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DecoratedKey</name></type> <name>decorate</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>decorateKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>finishStartup</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>DefsTable</name>.<name>fixSchemaNanoTimestamps</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setupVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>purgeIncompatibleHints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>setupVersion</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rm</name> = new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"build"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cf</name> = <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>VERSION_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>Column</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"version"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getReleaseVersionString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rm</name> = new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"cql"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cf</name> = <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>VERSION_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>Column</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"version"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><call><name><name>QueryProcessor</name>.<name>CQL_VERSION</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rm</name> = new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"thrift"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cf</name> = <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>VERSION_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>Column</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"version"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name><name>Constants</name>.<name>VERSION</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/** if hints become incompatible across versions of cassandra, that logic (and associated purging) is managed here. */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>purgeIncompatibleHints</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>upgradeMarker</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"Pre-1.0 hints purged"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QueryFilter</name></type> <name>filter</name> <init>= <expr><call><name><name>QueryFilter</name>.<name>getNamesFilter</name></name><argument_list>(<argument><expr><call><name>decorate</name><argument_list>(<argument><expr><name>COOKIE_KEY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>upgradeMarker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>table</name>.<name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call>.<call><name>getColumnFamily</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cf</name> != null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Pre-1.0 hints already purged"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// marker not found.  Snapshot + remove hints and add the marker</comment>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>hintsCfs</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call>.<call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>HintedHandOffManager</name>.<name>HINTS_CF</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>hintsCfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Possible old-format hints found. Truncating"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>hintsCfs</name>.<name>truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Marking pre-1.0 hints purged"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>COOKIE_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><name>upgradeMarker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"oh yes, they were purged"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Record token being used by another node
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updateToken</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>ep</name></decl></param>, <param><decl><type><name>Token</name></type> <name>token</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>ep</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>removeToken</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>IPartitioner</name></type> <name>p</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>Column</name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>toByteArray</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>ep</name>.<name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>RING_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Remove stored token being used by another node
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeToken</name><parameter_list>(<param><decl><type><name>Token</name></type> <name>token</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>IPartitioner</name></type> <name>p</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>RING_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>delete</name></name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><call><name><name>p</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>toByteArray</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * This method is used to update the System Table with the new token for this node
    */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updateToken</name><parameter_list>(<param><decl><type><name>Token</name></type> <name>token</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>IPartitioner</name></type> <name>p</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>Column</name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>TOKEN</name></name></expr></argument>, <argument><expr><call><name><name>p</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>toByteArray</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>LOCATION_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>forceBlockingFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfname</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call>.<call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name>cfname</name></expr></argument>)</argument_list></call>.<call><name>forceBlockingFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ExecutionException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return a map of stored tokens to IP addresses
     *
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>HashMap</name><argument_list>&lt;<argument><name>Token</name></argument>, <argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>loadTokens</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list>&lt;<argument><name>Token</name></argument>, <argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>tokenMap</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>Token</name></argument>, <argument><name>InetAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IPartitioner</name></type> <name>p</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QueryFilter</name></type> <name>filter</name> <init>= <expr><call><name><name>QueryFilter</name>.<name>getIdentityFilter</name></name><argument_list>(<argument><expr><call><name>decorate</name><argument_list>(<argument><expr><name>RING_KEY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>ColumnFamilyStore</name>.<name>removeDeleted</name></name><argument_list>(<argument><expr><call><name><name>table</name>.<name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call>.<call><name>getColumnFamily</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cf</name> != null</expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><call><name><name>cf</name>.<name>getSortedColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <try>try
                <block>{
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>v</name> <init>= <expr><call><name><name>column</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>addr</name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>v</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>arrayCopy</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name><name>v</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name><name>v</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>tokenMap</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>fromByteArray</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>InetAddress</name>.<name>getByAddress</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>tokenMap</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * One of three things will happen if you try to read the system table:
     * 1. files are present and you can read them: great
     * 2. no files are there: great (new node is assumed)
     * 3. files are present but you can't read them: bad
     * @throws ConfigurationException
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkHealth</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>table</name> = <call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>AssertionError</name></type> <name>err</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// this happens when a user switches from OPP to RP.</comment>
            <decl_stmt><decl><type><name>ConfigurationException</name></type> <name>ex</name> <init>= <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Could not read system table!"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ex</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        }</block></catch></try>

        <decl_stmt><decl><type><name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>cols</name> <init>= <expr>new <call><name><name>TreeSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>BytesType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cols</name>.<name>add</name></name><argument_list>(<argument><expr><name>CLUSTERNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QueryFilter</name></type> <name>filter</name> <init>= <expr><call><name><name>QueryFilter</name>.<name>getNamesFilter</name></name><argument_list>(<argument><expr><call><name>decorate</name><argument_list>(<argument><expr><name>LOCATION_KEY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>table</name>.<name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>cfs</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>cf</name> == null</expr>)</condition><then>
        <block>{
            <comment type="line">// this is a brand new node</comment>
            <if>if <condition>(<expr>!<call><name><name>cfs</name>.<name>getSSTables</name></name><argument_list>()</argument_list></call>.<call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Found system table files, but they couldn't be loaded!"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <comment type="line">// no system files.  this is a new node.</comment>
            <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>LOCATION_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>cf</name> = <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name><name>SystemTable</name>.<name>STATUS_CF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>Column</name><argument_list>(<argument><expr><name>CLUSTERNAME</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <return>return;</return>
        }</block></then></if>


        <decl_stmt><decl><type><name>IColumn</name></type> <name>clusterCol</name> <init>= <expr><call><name><name>cf</name>.<name>getColumn</name></name><argument_list>(<argument><expr><name>CLUSTERNAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>clusterCol</name> != null</expr>;</assert>
        <decl_stmt><decl><type><name>String</name></type> <name>savedClusterName</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>string</name></name><argument_list>(<argument><expr><call><name><name>clusterCol</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>DatabaseDescriptor</name>.<name>getClusterName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>savedClusterName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Saved cluster name " + <name>savedClusterName</name> + " != configured name " + <call><name><name>DatabaseDescriptor</name>.<name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Token</name></type> <name>getSavedToken</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QueryFilter</name></type> <name>filter</name> <init>= <expr><call><name><name>QueryFilter</name>.<name>getNamesFilter</name></name><argument_list>(<argument><expr><call><name>decorate</name><argument_list>(<argument><expr><name>LOCATION_KEY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TOKEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>table</name>.<name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call>.<call><name>getColumnFamily</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>cf</name> == null ? null : <call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>getTokenFactory</name><argument_list>()</argument_list></call>.<call><name>fromByteArray</name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>getColumn</name></name><argument_list>(<argument><expr><name>TOKEN</name></expr></argument>)</argument_list></call>.<call><name>value</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>incrementAndGetGeneration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QueryFilter</name></type> <name>filter</name> <init>= <expr><call><name><name>QueryFilter</name>.<name>getNamesFilter</name></name><argument_list>(<argument><expr><call><name>decorate</name><argument_list>(<argument><expr><name>LOCATION_KEY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GENERATION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>table</name>.<name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call>.<call><name>getColumnFamily</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>generation</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cf</name> == null</expr>)</condition><then>
        <block>{
            <comment type="line">// seconds-since-epoch isn't a foolproof new generation</comment>
            <comment type="line">// (where foolproof is "guaranteed to be larger than the last one seen at this ip address"),</comment>
            <comment type="line">// but it's as close as sanely possible</comment>
            <expr_stmt><expr><name>generation</name> = <call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> / 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <comment type="line">// Other nodes will ignore gossip messages about a node that have a lower generation than previously seen.</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>storedGeneration</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>toInt</name></name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>getColumn</name></name><argument_list>(<argument><expr><name>GENERATION</name></expr></argument>)</argument_list></call>.<call><name>value</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>now</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> / 1000</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>storedGeneration</name> &gt;= <name>now</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Using stored Gossip Generation {} as it is greater than current system time {}.  See CASSANDRA-3654 if you experience problems"</expr></argument>,
                            <argument><expr><name>storedGeneration</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>generation</name> = <name>storedGeneration</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>generation</name> = <name>now</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>

        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>LOCATION_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cf</name> = <call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name><name>SystemTable</name>.<name>STATUS_CF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>Column</name><argument_list>(<argument><expr><name>GENERATION</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>generation</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BootstrapState</name></type> <name>getBootstrapState</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QueryFilter</name></type> <name>filter</name> <init>= <expr><call><name><name>QueryFilter</name>.<name>getNamesFilter</name></name><argument_list>(<argument><expr><call><name>decorate</name><argument_list>(<argument><expr><name>BOOTSTRAP_KEY</name></expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr><name>BOOTSTRAP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>table</name>.<name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call>.<call><name>getColumnFamily</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cf</name> == null</expr>)</condition><then>
            <return>return <expr><name><name>BootstrapState</name>.<name>NEEDS_BOOTSTRAP</name></name></expr>;</return></then></if>
        <decl_stmt><decl><type><name>IColumn</name></type> <name>c</name> <init>= <expr><call><name><name>cf</name>.<name>getColumn</name></name><argument_list>(<argument><expr><name>BOOTSTRAP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>BootstrapState</name>.<name>values</name></name><argument_list>()</argument_list></call><index>[<expr><call><name><name>c</name>.<name>value</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><call><name><name>c</name>.<name>value</name></name><argument_list>()</argument_list></call>.<call><name>position</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>bootstrapComplete</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getBootstrapState</name><argument_list>()</argument_list></call> == <name><name>BootstrapState</name>.<name>COMPLETED</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>bootstrapInProgress</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getBootstrapState</name><argument_list>()</argument_list></call> == <name><name>BootstrapState</name>.<name>IN_PROGRESS</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setBootstrapState</name><parameter_list>(<param><decl><type><name>BootstrapState</name></type> <name>state</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>STATUS_CF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>Column</name><argument_list>(<argument><expr><name>BOOTSTRAP</name></expr></argument>,
                                <argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name> <block>{ <expr><call>(<name>byte</name>) <argument_list>(<argument><expr><call><name><name>state</name>.<name>ordinal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>BOOTSTRAP_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isIndexBuilt</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>String</name></type> <name>indexName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call>.<call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name>INDEX_CF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QueryFilter</name></type> <name>filter</name> <init>= <expr><call><name><name>QueryFilter</name>.<name>getNamesFilter</name></name><argument_list>(<argument><expr><call><name>decorate</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>INDEX_CF</name></expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>ColumnFamilyStore</name>.<name>removeDeleted</name></name><argument_list>(<argument><expr><call><name><name>cfs</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call> != null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setIndexBuilt</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>String</name></type> <name>indexName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>INDEX_CF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>Column</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>INDEX_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setIndexRemoved</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>String</name></type> <name>indexName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>delete</name></name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>INDEX_CF</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>INDEX_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Read the current local node id from the system table or null if no
     * such node id is recorded.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>NodeId</name></type> <name>getCurrentLocalNodeId</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>id</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Get the last NodeId (since NodeId are timeuuid is thus ordered from the older to the newer one)</comment>
        <decl_stmt><decl><type><name>QueryFilter</name></type> <name>filter</name> <init>= <expr><call><name><name>QueryFilter</name>.<name>getSliceFilter</name></name><argument_list>(<argument><expr><call><name>decorate</name><argument_list>(<argument><expr><name>ALL_LOCAL_NODE_ID_KEY</name></expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>NODE_ID_CF</name></expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>,
                                                        <argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>,
                                                        <argument><expr>true</expr></argument>,
                                                        <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>table</name>.<name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name>NODE_ID_CF</name></expr></argument>)</argument_list></call>.<call><name>getColumnFamily</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cf</name> != null &amp;&amp; <call><name><name>cf</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then>
            <return>return <expr><call><name><name>NodeId</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call>.<call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
        <else>else
            <return>return <expr>null</expr>;</return></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Write a new current local node id to the system table.
     *
     * @param oldNodeId the previous local node id (that {@code newNodeId}
     * replace) or null if no such node id exists (new node or removed system
     * table)
     * @param newNodeId the new current local node id to record
     * @param now microsecond time stamp.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeCurrentLocalNodeId</name><parameter_list>(<param><decl><type><name>NodeId</name></type> <name>oldNodeId</name></decl></param>, <param><decl><type><name>NodeId</name></type> <name>newNodeId</name></decl></param>, <param><decl><type><name>long</name></type> <name>now</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>ip</name> <init>= <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call>.<call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>NODE_ID_CF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr>new <call><name>Column</name><argument_list>(<argument><expr><call><name><name>newNodeId</name>.<name>bytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>ALL_LOCAL_NODE_ID_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>rm</name>.<name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>NODE_ID_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name><name>NodeId</name>.<name>NodeIdRecord</name></name></argument>&gt;</argument_list></name></type> <name>getOldLocalNodeIds</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>NodeId</name>.<name>NodeIdRecord</name></name></argument>&gt;</argument_list></name></type> <name>l</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>NodeId</name>.<name>NodeIdRecord</name></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QueryFilter</name></type> <name>filter</name> <init>= <expr><call><name><name>QueryFilter</name>.<name>getIdentityFilter</name></name><argument_list>(<argument><expr><call><name>decorate</name><argument_list>(<argument><expr><name>ALL_LOCAL_NODE_ID_KEY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>NODE_ID_CF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>table</name>.<name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name>NODE_ID_CF</name></expr></argument>)</argument_list></call>.<call><name>getColumnFamily</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>NodeId</name></type> <name>previous</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>c</name> <range>: <expr><name>cf</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><name>previous</name> != null</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>l</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name><name>NodeId</name>.<name>NodeIdRecord</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><call><name><name>c</name>.<name>timestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <comment type="line">// this will ignore the last column on purpose since it is the</comment>
            <comment type="line">// current local node id</comment>
            <expr_stmt><expr><name>previous</name> = <call><name><name>NodeId</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>c</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>l</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param cfName The name of the ColumnFamily responsible for part of the schema (keyspace, ColumnFamily, columns)
     * @return CFS responsible to hold low-level serialized schema
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFamilyStore</name></type> <name>schemaCFS</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call>.<call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>serializedSchema</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>schema</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>schema</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name>serializedSchema</name><argument_list>(<argument><expr><name>SCHEMA_KEYSPACES_CF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>schema</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name>serializedSchema</name><argument_list>(<argument><expr><name>SCHEMA_COLUMNFAMILIES_CF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>schema</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name>serializedSchema</name><argument_list>(<argument><expr><name>SCHEMA_COLUMNS_CF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>schema</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param schemaCfName The name of the ColumnFamily responsible for part of the schema (keyspace, ColumnFamily, columns)
     * @return low-level schema representation (each row represents individual Keyspace or ColumnFamily)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>serializedSchema</name><parameter_list>(<param><decl><type><name>String</name></type> <name>schemaCfName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Token</name></type> <name>minToken</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>getMinimumToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>schemaCFS</name><argument_list>(<argument><expr><name>schemaCfName</name></expr></argument>)</argument_list></call>.<call><name>getRangeSlice</name><argument_list>(<argument><expr>null</expr></argument>,
                                                     <argument><expr>new <call><name><name>Range</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>minToken</name>.<name>minKeyBound</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                            <argument><expr><call><name><name>minToken</name>.<name>maxKeyBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                     <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>,
                                                     <argument><expr>new <call><name>IdentityQueryFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                                     <argument><expr>null</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>RowMutation</name></argument>&gt;</argument_list></name></type> <name>serializeSchema</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>RowMutation</name></argument>&gt;</argument_list></name></type> <name>mutationMap</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>RowMutation</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>serializeSchema</name><argument_list>(<argument><expr><name>mutationMap</name></expr></argument>, <argument><expr><name>SCHEMA_KEYSPACES_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>serializeSchema</name><argument_list>(<argument><expr><name>mutationMap</name></expr></argument>, <argument><expr><name>SCHEMA_COLUMNFAMILIES_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>serializeSchema</name><argument_list>(<argument><expr><name>mutationMap</name></expr></argument>, <argument><expr><name>SCHEMA_COLUMNS_CF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>mutationMap</name>.<name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>serializeSchema</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>RowMutation</name></argument>&gt;</argument_list></name></type> <name>mutationMap</name></decl></param>, <param><decl><type><name>String</name></type> <name>schemaCfName</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>Row</name></type> <name>schemaRow</name> <range>: <expr><call><name>serializedSchema</name><argument_list>(<argument><expr><name>schemaCfName</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>RowMutation</name></type> <name>mutation</name> <init>= <expr><call><name><name>mutationMap</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>schemaRow</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>mutation</name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>mutationMap</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>schemaRow</name>.<name>key</name></name></expr></argument>, <argument><expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>schemaRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>mutation</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>schemaRow</name>.<name>cf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></type> <name>getSchema</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></type> <name>schema</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>Row</name></type> <name>schemaEntity</name> <range>: <expr><call><name><name>SystemTable</name>.<name>serializedSchema</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>schema</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>schemaEntity</name>.<name>key</name></name></expr></argument>, <argument><expr><name><name>schemaEntity</name>.<name>cf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <return>return <expr><name>schema</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>getSchemaKSKey</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>AsciiType</name>.<name>instance</name>.<name>fromString</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Row</name></type> <name>readSchemaRow</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>key</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>decorateKey</name><argument_list>(<argument><expr><call><name>getSchemaKSKey</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>schemaCFS</name> <init>= <expr><call><name><name>SystemTable</name>.<name>schemaCFS</name></name><argument_list>(<argument><expr><name>SCHEMA_KEYSPACES_CF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>result</name> <init>= <expr><call><name><name>schemaCFS</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><call><name><name>QueryFilter</name>.<name>getIdentityFilter</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>SCHEMA_KEYSPACES_CF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr>new <call><name>Row</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Row</name></type> <name>readSchemaRow</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ksName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>key</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>decorateKey</name><argument_list>(<argument><expr><call><name>getSchemaKSKey</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>schemaCFS</name> <init>= <expr><call><name><name>SystemTable</name>.<name>schemaCFS</name></name><argument_list>(<argument><expr><name>SCHEMA_COLUMNFAMILIES_CF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>result</name> <init>= <expr><call><name><name>schemaCFS</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>,
                                                        <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>SCHEMA_COLUMNFAMILIES_CF</name></expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr><call><name><name>DefsTable</name>.<name>searchComposite</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr><call><name><name>DefsTable</name>.<name>searchComposite</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr>false</expr></argument>,
                                                        <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr>new <call><name>Row</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
