<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\concurrent\DebuggableScheduledThreadPoolExecutor.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name></name>.*;</import>

<comment type="block" format="javadoc">/**
 * Like DebuggableThreadPoolExecutor, DebuggableScheduledThreadPoolExecutor always
 * logs exceptions from the tasks it is given, even if Future.get is never called elsewhere.
 *
 * DebuggableScheduledThreadPoolExecutor also catches exceptions during Task execution
 * so that they don't supress subsequent invocations of the task.
 */</comment>
<class><specifier>public</specifier> class <name>DebuggableScheduledThreadPoolExecutor</name> <super><extends>extends <name>ScheduledThreadPoolExecutor</name></extends></super>
<block>{
    <constructor><specifier>public</specifier> <name>DebuggableScheduledThreadPoolExecutor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>corePoolSize</name></decl></param>, <param><decl><type><name>String</name></type> <name>threadPoolName</name></decl></param>, <param><decl><type><name>int</name></type> <name>priority</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>corePoolSize</name></expr></argument>, <argument><expr>new <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><name>threadPoolName</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>DebuggableScheduledThreadPoolExecutor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>threadPoolName</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>threadPoolName</name></expr></argument>, <argument><expr><name><name>Thread</name>.<name>NORM_PRIORITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">// We need this as well as the wrapper for the benefit of non-repeating tasks</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>afterExecute</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>r</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>afterExecute</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DebuggableThreadPoolExecutor</name>.<name>logExceptionsAfterExecute</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// override scheduling to supress exceptions that would cancel future executions</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>ScheduledFuture</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>scheduleAtFixedRate</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>command</name></decl></param>, <param><decl><type><name>long</name></type> <name>initialDelay</name></decl></param>, <param><decl><type><name>long</name></type> <name>period</name></decl></param>, <param><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>super</name>.<name>scheduleAtFixedRate</name></name><argument_list>(<argument><expr>new <call><name>UncomplainingRunnable</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>initialDelay</name></expr></argument>, <argument><expr><name>period</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>ScheduledFuture</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>scheduleWithFixedDelay</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>command</name></decl></param>, <param><decl><type><name>long</name></type> <name>initialDelay</name></decl></param>, <param><decl><type><name>long</name></type> <name>delay</name></decl></param>, <param><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>super</name>.<name>scheduleWithFixedDelay</name></name><argument_list>(<argument><expr>new <call><name>UncomplainingRunnable</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>initialDelay</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>UncomplainingRunnable</name> <super><implements>implements <name>Runnable</name></implements></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Runnable</name></type> <name>runnable</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>UncomplainingRunnable</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>runnable</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>runnable</name></name> = <name>runnable</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>runnable</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Throwable</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>DebuggableThreadPoolExecutor</name>.<name>handleOrLog</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
