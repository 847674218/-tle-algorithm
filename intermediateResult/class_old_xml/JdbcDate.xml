<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\cql\jdbc\JdbcDate.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>jdbc</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>Types</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>JdbcDate</name> <super><extends>extends <name><name>AbstractJdbcType</name><argument_list>&lt;<argument><name>Date</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>iso8601Patterns</name> <init>= <expr>new <name><name>String</name><index>[]</index></name> <block>{
        <expr>"yyyy-MM-dd HH:mm"</expr>,
        <expr>"yyyy-MM-dd HH:mm:ss"</expr>,
        <expr>"yyyy-MM-dd HH:mmZ"</expr>,
        <expr>"yyyy-MM-dd HH:mm:ssZ"</expr>,
        <expr>"yyyy-MM-dd'T'HH:mm"</expr>,
        <expr>"yyyy-MM-dd'T'HH:mmZ"</expr>,
        <expr>"yyyy-MM-dd'T'HH:mm:ss"</expr>,
        <expr>"yyyy-MM-dd'T'HH:mm:ssZ"</expr>,
        <expr>"yyyy-MM-dd"</expr>,
        <expr>"yyyy-MM-ddZ"</expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_FORMAT</name> <init>= <expr><name><name>iso8601Patterns</name><index>[<expr>3</expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list>&lt;<argument><name>SimpleDateFormat</name></argument>&gt;</argument_list></name></type> <name>FORMATTER</name> <init>= <expr>new <class><super><name><name>ThreadLocal</name><argument_list>&lt;<argument><name>SimpleDateFormat</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>protected</specifier> <name>SimpleDateFormat</name></type> <name>initialValue</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>DEFAULT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>JdbcDate</name></type> <name>instance</name> <init>= <expr>new <call><name>JdbcDate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><name>JdbcDate</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCaseSensitive</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getScale</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>-1</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPrecision</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>-1</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCurrency</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSigned</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>FORMATTER</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name>format</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>needsQuotes</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
        <block>{
            <return>return <expr>""</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call> != 8</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr>"A date is exactly 8 bytes (stored as a long): " + <call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// uses ISO-8601 formatted string</comment>
        <return>return <expr><call><name><name>FORMATTER</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name>format</name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>getLong</name></name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>Date</name></argument>&gt;</argument_list></name></type> <name>getType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>Date</name>.<name>class</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getJdbcType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>Types</name>.<name>DATE</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Date</name></type> <name>compose</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0
             ? new <call><name>Date</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>toLong</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
             : null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>decompose</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
      <return>return <expr>(<name>value</name>==null) ? <name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name>
                           : <call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><call><name><name>value</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
