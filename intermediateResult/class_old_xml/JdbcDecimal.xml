<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\cql\jdbc\JdbcDecimal.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>jdbc</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>

<import>import <name><name>java</name>.<name>math</name>.<name>BigDecimal</name></name>;</import>
<import>import <name><name>java</name>.<name>math</name>.<name>BigInteger</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>Types</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>JdbcDecimal</name> <super><extends>extends <name><name>AbstractJdbcType</name><argument_list>&lt;<argument><name>BigDecimal</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>JdbcDecimal</name></type> <name>instance</name> <init>= <expr>new <call><name>JdbcDecimal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><name>JdbcDecimal</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCaseSensitive</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getScale</name><parameter_list>(<param><decl><type><name>BigDecimal</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>obj</name>.<name>scale</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPrecision</name><parameter_list>(<param><decl><type><name>BigDecimal</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>obj</name>.<name>precision</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCurrency</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSigned</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<param><decl><type><name>BigDecimal</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>obj</name>.<name>toPlainString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>needsQuotes</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>bytes</name> == null</expr>)</condition><then> <return>return <expr>"null"</expr>;</return></then></if>
        <if>if <condition>(<expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <return>return <expr>"empty"</expr>;</return></then></if>
        <return>return <expr><call><name>compose</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call>.<call><name>toPlainString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>BigDecimal</name></argument>&gt;</argument_list></name></type> <name>getType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>BigDecimal</name>.<name>class</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getJdbcType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>Types</name>.<name>DECIMAL</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>BigDecimal</name></type> <name>compose</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>bytes</name> == null</expr>)</condition><then> <return>return <expr>null</expr>;</return></then></if>

        <comment type="line">// do not consume the contents of the ByteBuffer</comment>
        <expr_stmt><expr><name>bytes</name> = <call><name><name>bytes</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><call><name><name>bytes</name>.<name>getInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bibytes</name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bytes</name>.<name>get</name></name><argument_list>(<argument><expr><name>bibytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>BigInteger</name></type> <name>bi</name> <init>= <expr>new <call><name>BigInteger</name><argument_list>(<argument><expr><name>bibytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>BigDecimal</name><argument_list>(<argument><expr><name>bi</name></expr></argument>,<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * The bytes of the ByteBuffer are made up of 4 bytes of int containing the scale
     * followed by the n bytes it takes to store a BigInteger.
     */</comment>
    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>decompose</name><parameter_list>(<param><decl><type><name>BigDecimal</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>value</name> == null</expr>)</condition><then> <return>return <expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>BigInteger</name></type> <name>bi</name> <init>= <expr><call><name><name>value</name>.<name>unscaledValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>scale</name> <init>= <expr><call><name><name>value</name>.<name>scale</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bibytes</name> <init>= <expr><call><name><name>bi</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>sbytes</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call>.<call><name>array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr>new <name><name>byte</name><index>[<expr><call><name><name>bi</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call>.<name>length</name>+4</expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl> ;</init> <condition><expr><name>i</name> &lt; 4</expr> ;</condition> <incr><expr><name>i</name>++</expr></incr>) <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>sbytes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>4</expr></init></decl> ;</init> <condition><expr><name>i</name> &lt; <name><name>bibytes</name>.<name>length</name></name>+4</expr> ;</condition> <incr><expr><name>i</name>++</expr></incr>) <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>bibytes</name><index>[<expr><name>i</name>-4</expr>]</index></name></expr>;</expr_stmt></for>

        <return>return <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
