<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\locator\SimpleSnitch.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A simple endpoint snitch implementation that treats Strategy order as proximity,
 * allowing non-read-repaired reads to prefer a single endpoint, which improves
 * cache locality.
 */</comment>
<class><specifier>public</specifier> class <name>SimpleSnitch</name> <super><extends>extends <name>AbstractEndpointSnitch</name></extends></super>
<block>{
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRack</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>"rack1"</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDatacenter</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>"datacenter1"</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>sortByProximity</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InetAddress</name></type> <name>address</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>addresses</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Optimization to avoid walking the list</comment>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareEndpoints</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>target</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>a1</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>a2</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Making all endpoints equal ensures we won't change the original ordering (since</comment>
        <comment type="line">// Collections.sort is guaranteed to be stable)</comment>
        <return>return <expr>0</expr>;</return>
    }</block></function>
}</block></class>
</unit>
