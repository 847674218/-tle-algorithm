<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\dht\LocalToken.java"><comment type="block">/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>

<class><specifier>public</specifier> class <name>LocalToken</name> <super><extends>extends <name><name>Token</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr>8437543776403014875L</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LocalToken</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>token</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>comparator</name></name> = <name>comparator</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name><name>Token</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name><name>o</name>.<name>token</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>prime</name> <init>= <expr>31</expr></init></decl>;</decl_stmt>
        <return>return <expr><name>prime</name> + <call><name><name>token</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>obj</name></expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> instanceof <name>LocalToken</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <decl_stmt><decl><type><name>LocalToken</name></type> <name>other</name> <init>= <expr>(<name>LocalToken</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>token</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>token</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
