<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\hadoop\ColumnFamilyRecordWriter.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>hadoop</name></name>;</package>

<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ArrayBlockingQueue</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>BlockingQueue</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>client</name>.<name>RingCache</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Token</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>conf</name>.<name>Configuration</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>mapreduce</name>.<name>RecordWriter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>mapreduce</name>.<name>TaskAttemptContext</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TSocket</name></name>;</import>


<comment type="block" format="javadoc">/**
 * The &lt;code&gt;ColumnFamilyRecordWriter&lt;/code&gt; maps the output &amp;lt;key, value&amp;gt;
 * pairs to a Cassandra column family. In particular, it applies all mutations
 * in the value, which it associates with the key, and in turn the responsible
 * endpoint.
 *
 * &lt;p&gt;
 * Furthermore, this writer groups the mutations by the endpoint responsible for
 * the rows being affected. This allows the mutations to be executed in parallel,
 * directly to a responsible endpoint.
 * &lt;/p&gt;
 *
 * @see ColumnFamilyOutputFormat
 * @see OutputFormat
 *
 */</comment>
<class><specifier>final</specifier> class <name>ColumnFamilyRecordWriter</name> <super><extends>extends <name><name>RecordWriter</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends>
<implements>implements <name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>mapred</name>.<name><name>RecordWriter</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></implements></super>
<block>{
    <comment type="line">// The configuration this writer is associated with.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Configuration</name></type> <name>conf</name></decl>;</decl_stmt>

    <comment type="line">// The ring cache that describes the token ranges each node in the ring is</comment>
    <comment type="line">// responsible for. This is what allows us to group the mutations by</comment>
    <comment type="line">// the endpoints they should be targeted at. The targeted endpoint</comment>
    <comment type="line">// essentially</comment>
    <comment type="line">// acts as the primary replica for the rows being affected by the mutations.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RingCache</name></type> <name>ringCache</name></decl>;</decl_stmt>

    <comment type="line">// The number of mutations to buffer per endpoint</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>queueSize</name></decl>;</decl_stmt>

    <comment type="line">// handles for clients for each range running in the threadpool</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Range</name></argument>,<argument><name>RangeClient</name></argument>&gt;</argument_list></name></type> <name>clients</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>batchThreshold</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Progressable</name></type> <name>progressable</name></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * Upon construction, obtain the map that this writer will use to collect
     * mutations, and the ring cache for the given keyspace.
     *
     * @param context the task attempt context
     * @throws IOException
     */</comment>
    <constructor><name>ColumnFamilyRecordWriter</name><parameter_list>(<param><decl><type><name>TaskAttemptContext</name></type> <name>context</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>context</name>.<name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>progressable</name></name> = new <call><name>Progressable</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><name>ColumnFamilyRecordWriter</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>, <param><decl><type><name>Progressable</name></type> <name>progressable</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>progressable</name></name> = <name>progressable</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><name>ColumnFamilyRecordWriter</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>conf</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>conf</name></name> = <name>conf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>ringCache</name></name> = new <call><name>RingCache</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>queueSize</name></name> = <call><name><name>conf</name>.<name>getInt</name></name><argument_list>(<argument><expr><name><name>ColumnFamilyOutputFormat</name>.<name>QUEUE_SIZE</name></name></expr></argument>, <argument><expr>32 * <call><name><name>FBUtilities</name>.<name>getAvailableProcessors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>clients</name></name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>Range</name></argument>,<argument><name>RangeClient</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>batchThreshold</name> = <call><name><name>conf</name>.<name>getLong</name></name><argument_list>(<argument><expr><name><name>ColumnFamilyOutputFormat</name>.<name>BATCH_THRESHOLD</name></name></expr></argument>, <argument><expr>32</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>consistencyLevel</name> = <call><name><name>ConsistencyLevel</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>ConfigHelper</name>.<name>getWriteConsistencyLevel</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * If the key is to be associated with a valid value, a mutation is created
     * for it with the given column family and columns. In the event the value
     * in the column is missing (i.e., null), then it is marked for
     * {@link Deletion}. Similarly, if the entire value for a key is missing
     * (i.e., null), then the entire key is marked for {@link Deletion}.
     * &lt;/p&gt;
     *
     * @param keybuff
     *            the key to write.
     * @param value
     *            the value to write.
     * @throws IOException
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>keybuff</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>value</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><call><name><name>ringCache</name>.<name>getRange</name></name><argument_list>(<argument><expr><name>keybuff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// get the client for the given range, or create a new one</comment>
        <decl_stmt><decl><type><name>RangeClient</name></type> <name>client</name> <init>= <expr><call><name><name>clients</name>.<name>get</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>client</name> == null</expr>)</condition><then>
        <block>{
            <comment type="line">// haven't seen keys for this range: create new client</comment>
            <expr_stmt><expr><name>client</name> = new <call><name>RangeClient</name><argument_list>(<argument><expr><call><name><name>ringCache</name>.<name>getEndpoint</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>client</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clients</name>.<name>put</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <for>for (<init><decl><type><name>Mutation</name></type> <name>amut</name> <range>: <expr><name>value</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>client</name>.<name>put</name></name><argument_list>(<argument><expr>new <call><name><name>Pair</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>Mutation</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>keybuff</name></expr></argument>, <argument><expr><name>amut</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            <expr_stmt><expr><call><name><name>progressable</name>.<name>progress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Close this &lt;code&gt;RecordWriter&lt;/code&gt; to future operations, but not before
     * flushing out the batched mutations.
     *
     * @param context the context of the task
     * @throws IOException
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>(<param><decl><type><name>TaskAttemptContext</name></type> <name>context</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/** Fills the deprecated RecordWriter interface for streaming. */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>hadoop</name>.<name>mapred</name>.<name>Reporter</name></name></type> <name>reporter</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <comment type="line">// close all the clients before throwing anything</comment>
        <decl_stmt><decl><type><name>IOException</name></type> <name>clientException</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>RangeClient</name></type> <name>client</name> <range>: <expr><call><name><name>clients</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>client</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><name>clientException</name> = <name>e</name></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></for>
        <if>if <condition>(<expr><name>clientException</name> != null</expr>)</condition><then>
            <throw>throw <expr><name>clientException</name></expr>;</throw></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * A client that runs in a threadpool and connects to the list of endpoints for a particular
     * range. Mutations for keys in that range are sent to this client via a queue.
     */</comment>
    <class><specifier>public</specifier> class <name>RangeClient</name> <super><extends>extends <name>Thread</name></extends></super>
    <block>{
        <comment type="line">// The list of endpoints for this range</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>endpoints</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>ConfigHelper</name>.<name>getOutputColumnFamily</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// A bounded queue of incoming mutations for this range</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>BlockingQueue</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>queue</name> <init>= <expr>new <call><name><name>ArrayBlockingQueue</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>queueSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>run</name> <init>= <expr>true</expr></init></decl>;</decl_stmt>
        <comment type="line">// we want the caller to know if something went wrong, so we record any unrecoverable exception while writing</comment>
        <comment type="line">// so we can throw it on the caller's stack when he calls put() again, or if there are no more put calls,</comment>
        <comment type="line">// when the client is closed.</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>IOException</name></type> <name>lastException</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Cassandra</name>.<name>Client</name></name></type> <name>thriftClient</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>TSocket</name></type> <name>thriftSocket</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Constructs an {@link RangeClient} for the given endpoints.
         * @param endpoints the possible endpoints to execute the mutations on
         */</comment>
        <constructor><specifier>public</specifier> <name>RangeClient</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>endpoints</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>"client-" + <name>endpoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>endpoints</name></name> = <name>endpoints</name></expr>;</expr_stmt>
         }</block></constructor>

        <comment type="block" format="javadoc">/**
         * enqueues the given value to Cassandra
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>put</name><parameter_list>(<param><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>value</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <while>while <condition>(<expr>true</expr>)</condition>
            <block>{
                <if>if <condition>(<expr><name>lastException</name> != null</expr>)</condition><then>
                    <throw>throw <expr><name>lastException</name></expr>;</throw></then></if>
                <try>try
                <block>{
                    <if>if <condition>(<expr><call><name><name>queue</name>.<name>offer</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>100</expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <break>break;</break></then></if>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></while>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <comment type="line">// stop the run loop.  this will result in closeInternal being called by the time join() finishes.</comment>
            <expr_stmt><expr><name>run</name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>interrupt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <if>if <condition>(<expr><name>lastException</name> != null</expr>)</condition><then>
                <throw>throw <expr><name>lastException</name></expr>;</throw></then></if>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>closeInternal</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>thriftSocket</name> != null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>thriftSocket</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>thriftSocket</name> = null</expr>;</expr_stmt>
                <expr_stmt><expr><name>thriftClient</name> = null</expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Loops collecting mutations from the queue and sending to Cassandra
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{
            <label><name>outer</name>:</label>
            <while>while <condition>(<expr><name>run</name> || !<call><name><name>queue</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutation</name></decl>;</decl_stmt>
                <try>try
                <block>{
                    <expr_stmt><expr><name>mutation</name> = <call><name><name>queue</name>.<name>take</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <comment type="line">// re-check loop condition after interrupt</comment>
                    <continue>continue;</continue>
                }</block></catch></try>

                <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>batch</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>mutation</name> != null</expr>)</condition>
                <block>{
                    <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>subBatch</name> <init>= <expr><call><name><name>batch</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>mutation</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>subBatch</name> == null</expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>subBatch</name> = <call><name><name>Collections</name>.<name>singletonMap</name></name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr>(<name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name>) new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>batch</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>mutation</name>.<name>left</name></name></expr></argument>, <argument><expr><name>subBatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><call><name><name>subBatch</name>.<name>get</name></name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name><name>mutation</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>batch</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt;= <name>batchThreshold</name></expr>)</condition><then>
                        <break>break;</break></then></if>

                    <expr_stmt><expr><name>mutation</name> = <call><name><name>queue</name>.<name>poll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></while>

                <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>endpoints</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr>true</expr>)</condition>
                <block>{
                    <comment type="line">// send the mutation to the last-used endpoint.  first time through, this will NPE harmlessly.</comment>
                    <try>try
                    <block>{
                        <expr_stmt><expr><call><name><name>thriftClient</name>.<name>batch_mutate</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block>
                    <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
                    <block>{
                        <expr_stmt><expr><call><name>closeInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr>!<call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name>lastException</name> = new <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break outer;</break>
                        }</block></then></if>
                    }</block></catch></try>

                    <comment type="line">// attempt to connect to a different endpoint</comment>
                    <try>try
                    <block>{
                        <decl_stmt><decl><type><name>InetAddress</name></type> <name>address</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>thriftSocket</name> = new <call><name>TSocket</name><argument_list>(<argument><expr><call><name><name>address</name>.<name>getHostName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ConfigHelper</name>.<name>getOutputRpcPort</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>thriftClient</name> = <call><name><name>ColumnFamilyOutputFormat</name>.<name>createAuthenticatedClient</name></name><argument_list>(<argument><expr><name>thriftSocket</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block>
                    <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
                    <block>{
                        <expr_stmt><expr><call><name>closeInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// TException means something unexpected went wrong to that endpoint, so</comment>
                        <comment type="line">// we should try again to another.  Other exceptions (auth or invalid request) are fatal.</comment>
                        <if>if <condition>(<expr>(!(<name>e</name> instanceof <name>TException</name>)) || !<call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name>lastException</name> = new <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break outer;</break>
                        }</block></then></if>
                    }</block></catch></try>
                }</block></while>
            }</block></while>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>"#&lt;Client for " + <call><name><name>endpoints</name>.<name>toString</name></name><argument_list>()</argument_list></call> + "&gt;"</expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
