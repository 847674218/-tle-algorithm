<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\util\CompressedSegmentedFile.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOError</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name>.<name>CompressedRandomAccessReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name>.<name>CompressionMetadata</name></name>;</import>

<class><specifier>public</specifier> class <name>CompressedSegmentedFile</name> <super><extends>extends <name>SegmentedFile</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>CompressionMetadata</name></type> <name>metadata</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CompressedSegmentedFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>, <param><decl><type><name>CompressionMetadata</name></type> <name>metadata</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>metadata</name>.<name>dataLength</name></name></expr></argument>, <argument><expr><name><name>metadata</name>.<name>compressedFileLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>metadata</name></name> = <name>metadata</name></expr>;</expr_stmt>
    }</block></constructor>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Builder</name> <super><extends>extends <name><name>SegmentedFile</name>.<name>Builder</name></name></extends></super>
    <block>{
        <comment type="block" format="javadoc">/**
         * Adds a position that would be a safe place for a segment boundary in the file. For a block/row based file
         * format, safe boundaries are block/row edges.
         * @param boundary The absolute position of the potential boundary in the file.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addPotentialBoundary</name><parameter_list>(<param><decl><type><name>long</name></type> <name>boundary</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// only one segment in a standard-io file</comment>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Called after all potential boundaries have been added to apply this Builder to a concrete file on disk.
         * @param path The file on disk.
         */</comment>
        <function><type><specifier>public</specifier> <name>SegmentedFile</name></type> <name>complete</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>CompressedSegmentedFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>CompressionMetadata</name>.<name>create</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name>FileDataInput</name></type> <name>getSegment</name><parameter_list>(<param><decl><type><name>long</name></type> <name>position</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>RandomAccessReader</name></type> <name>file</name> <init>= <expr><call><name><name>CompressedRandomAccessReader</name>.<name>open</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>file</name>.<name>seek</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>file</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>cleanup</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// nothing to do</comment>
    }</block></function>
}</block></class>
</unit>
