<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\compress\ICompressor.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<class type="interface"><specifier>public</specifier> interface <name>ICompressor</name>
<block>{
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>initialCompressedBufferLength</name><parameter_list>(<param><decl><type><name>int</name></type> <name>chunkLength</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>compress</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></param>, <param><decl><type><name>int</name></type> <name>inputOffset</name></decl></param>, <param><decl><type><name>int</name></type> <name>inputLength</name></decl></param>, <param><decl><type><name>WrappedArray</name></type> <name>output</name></decl></param>, <param><decl><type><name>int</name></type> <name>outputOffset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>uncompress</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></param>, <param><decl><type><name>int</name></type> <name>inputOffset</name></decl></param>, <param><decl><type><name>int</name></type> <name>inputLength</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl></param>, <param><decl><type><name>int</name></type> <name>outputOffset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>supportedOptions</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * A simple wrapper of a byte array.
     * Not all implementation allows to know what is the maximum size after
     * compression. This make it hard to size the ouput buffer for compress
     * (and we want to reuse the buffer).  Instead we use this wrapped buffer
     * so that compress can have the liberty to resize underlying array if
     * need be.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WrappedArray</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>buffer</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>WrappedArray</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>buffer</name></name> = <name>buffer</name></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>
}</block></class>
</unit>
