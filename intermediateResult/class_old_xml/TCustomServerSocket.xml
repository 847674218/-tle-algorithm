<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\thrift\TCustomServerSocket.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>;</package>

<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>ServerSocket</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>Socket</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>SocketException</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TServerTransport</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>transport</name>.<name>TTransportException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Extends Thrift's TServerSocket to allow customization of various desirable TCP properties.
 */</comment>
<class><specifier>public</specifier> class <name>TCustomServerSocket</name> <super><extends>extends <name>TServerTransport</name></extends></super>
<block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>TCustomServerSocket</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Underlying serversocket object
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ServerSocket</name></type> <name>serverSocket_</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>keepAlive</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Integer</name></type> <name>sendBufferSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Integer</name></type> <name>recvBufferSize</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Allows fine-tuning of the server socket including keep-alive, reuse of addresses, send and receive buffer sizes.
     *
     * @param bindAddr
     * @param keepAlive
     * @param sendBufferSize
     * @param recvBufferSize
     * @throws TTransportException
     */</comment>
    <constructor><specifier>public</specifier> <name>TCustomServerSocket</name><parameter_list>(<param><decl><type><name>InetSocketAddress</name></type> <name>bindAddr</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>keepAlive</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>sendBufferSize</name></decl></param>,
            <param><decl><type><name>Integer</name></type> <name>recvBufferSize</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>TTransportException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <comment type="line">// Make server socket</comment>
            <expr_stmt><expr><name>serverSocket_</name> = new <call><name>ServerSocket</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Prevent 2MSL delay problem on server restarts</comment>
            <expr_stmt><expr><call><name><name>serverSocket_</name>.<name>setReuseAddress</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Bind to listening port</comment>
            <expr_stmt><expr><call><name><name>serverSocket_</name>.<name>bind</name></name><argument_list>(<argument><expr><name>bindAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name>serverSocket_</name> = null</expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>TTransportException</name><argument_list>(<argument><expr>"Could not create ServerSocket on address " + <call><name><name>bindAddr</name>.<name>toString</name></name><argument_list>()</argument_list></call> + "."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <expr_stmt><expr><name><name>this</name>.<name>keepAlive</name></name> = <name>keepAlive</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sendBufferSize</name></name> = <name>sendBufferSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>recvBufferSize</name></name> = <name>recvBufferSize</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>TCustomSocket</name></type> <name>acceptImpl</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TTransportException</name></expr></argument></throws>
    <block>{

        <if>if <condition>(<expr><name>serverSocket_</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>TTransportException</name><argument_list>(<argument><expr><name><name>TTransportException</name>.<name>NOT_OPEN</name></name></expr></argument>, <argument><expr>"No underlying server socket."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>TCustomSocket</name></type> <name>tsocket</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Socket</name></type> <name>socket</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>socket</name> = <call><name><name>serverSocket_</name>.<name>accept</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tsocket</name> = new <call><name>TCustomSocket</name><argument_list>(<argument><expr><name>socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tsocket</name>.<name>setTimeout</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>iox</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>TTransportException</name><argument_list>(<argument><expr><name>iox</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>socket</name>.<name>setKeepAlive</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>keepAlive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>SocketException</name></type> <name>se</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Failed to set keep-alive on Thrift socket."</expr></argument>, <argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <if>if <condition>(<expr><name><name>this</name>.<name>sendBufferSize</name></name> != null</expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>socket</name>.<name>setSendBufferSize</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>sendBufferSize</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>SocketException</name></type> <name>se</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Failed to set send buffer size on Thrift socket."</expr></argument>, <argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>this</name>.<name>recvBufferSize</name></name> != null</expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>socket</name>.<name>setReceiveBufferSize</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>recvBufferSize</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>SocketException</name></type> <name>se</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Failed to set receive buffer size on Thrift socket."</expr></argument>, <argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>

        <return>return <expr><name>tsocket</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>listen</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TTransportException</name></expr></argument></throws>
    <block>{
        <comment type="line">// Make sure not to block on accept</comment>
        <if>if <condition>(<expr><name>serverSocket_</name> != null</expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>serverSocket_</name>.<name>setSoTimeout</name></name><argument_list>(<argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>SocketException</name></type> <name>sx</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Could not set socket timeout."</expr></argument>, <argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>serverSocket_</name> != null</expr>)</condition><then>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>serverSocket_</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>iox</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Could not close server socket."</expr></argument>, <argument><expr><name>iox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <expr_stmt><expr><name>serverSocket_</name> = null</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>interrupt</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// The thread-safeness of this is dubious, but Java documentation suggests</comment>
        <comment type="line">// that it is safe to do this from a different thread context</comment>
        <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
