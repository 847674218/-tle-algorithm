<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\locator\OldNetworkTopologyStrategy.java"><comment type="block">/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Token</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This Replication Strategy returns the nodes responsible for a given
 * key but respects rack awareness. It places one replica in a
 * different data center from the first (if there is any such data center),
 * the third replica in a different rack in the first datacenter, and
 * any remaining replicas on the first unused nodes on the ring.
 */</comment>
<class><specifier>public</specifier> class <name>OldNetworkTopologyStrategy</name> <super><extends>extends <name>AbstractReplicationStrategy</name></extends></super>
<block>{
    <constructor><specifier>public</specifier> <name>OldNetworkTopologyStrategy</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>TokenMetadata</name></type> <name>tokenMetadata</name></decl></param>, <param><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>configOptions</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>tokenMetadata</name></expr></argument>, <argument><expr><name>snitch</name></expr></argument>, <argument><expr><name>configOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>calculateNaturalEndpoints</name><parameter_list>(<param><decl><type><name>Token</name></type> <name>token</name></decl></param>, <param><decl><type><name>TokenMetadata</name></type> <name>metadata</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>replicas</name> <init>= <expr><call><name>getReplicationFactor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>endpoints</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>replicas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>metadata</name>.<name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>tokens</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>endpoints</name></expr>;</return></then></if>

        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>TokenMetadata</name>.<name>ringIterator</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Token</name></type> <name>primaryToken</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>endpoints</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>getEndpoint</name></name><argument_list>(<argument><expr><name>primaryToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>bDataCenter</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>bOtherRack</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>endpoints</name>.<name>size</name></name><argument_list>()</argument_list></call> &lt; <name>replicas</name> &amp;&amp; <call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{
            <comment type="line">// First try to find one in a different data center</comment>
            <decl_stmt><decl><type><name>Token</name></type> <name>t</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>getEndpoint</name></name><argument_list>(<argument><expr><name>primaryToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>getEndpoint</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <comment type="line">// If we have already found something in a diff datacenter no need to find another</comment>
                <if>if <condition>(<expr>!<name>bDataCenter</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>endpoints</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>getEndpoint</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>bDataCenter</name> = true</expr>;</expr_stmt>
                }</block></then></if>
                <continue>continue;</continue>
            }</block></then></if>
            <comment type="line">// Now  try to find one on a different rack</comment>
            <if>if <condition>(<expr>!<call><name><name>snitch</name>.<name>getRack</name></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>getEndpoint</name></name><argument_list>(<argument><expr><name>primaryToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>snitch</name>.<name>getRack</name></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>getEndpoint</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp;
                <call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>getEndpoint</name></name><argument_list>(<argument><expr><name>primaryToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>getEndpoint</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <comment type="line">// If we have already found something in a diff rack no need to find another</comment>
                <if>if <condition>(<expr>!<name>bOtherRack</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>endpoints</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>getEndpoint</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>bOtherRack</name> = true</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

        }</block></while>

        <comment type="line">// If we found N number of nodes we are good. This loop wil just exit. Otherwise just</comment>
        <comment type="line">// loop through the list and add until we have N nodes.</comment>
        <if>if <condition>(<expr><call><name><name>endpoints</name>.<name>size</name></name><argument_list>()</argument_list></call> &lt; <name>replicas</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>iter</name> = <call><name><name>TokenMetadata</name>.<name>ringIterator</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>endpoints</name>.<name>size</name></name><argument_list>()</argument_list></call> &lt; <name>replicas</name> &amp;&amp; <call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>Token</name></type> <name>t</name> <init>= <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>endpoints</name>.<name>contains</name></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>getEndpoint</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>endpoints</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>metadata</name>.<name>getEndpoint</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></while>
        }</block></then></if>

        <return>return <expr><name>endpoints</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getReplicationFactor</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>configOptions</name>.<name>get</name></name><argument_list>(<argument><expr>"replication_factor"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateOptions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>configOptions</name> == null || <call><name><name>configOptions</name>.<name>get</name></name><argument_list>(<argument><expr>"replication_factor"</expr></argument>)</argument_list></call> == null</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"SimpleStrategy requires a replication_factor strategy option."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>validateReplicationFactor</name><argument_list>(<argument><expr><call><name><name>configOptions</name>.<name>get</name></name><argument_list>(<argument><expr>"replication_factor"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
