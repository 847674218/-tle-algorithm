<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\compaction\AbstractCompactionTask.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name>.<name>CompactionManager</name>.<name>CompactionExecutorStatsCollector</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractCompactionTask</name>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AbstractCompactionTask</name><parameter_list>(<param><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></param>, <param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>cfs</name></name> = <name>cfs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sstables</name></name> = <name>sstables</name></expr>;</expr_stmt>
    }</block></constructor>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>CompactionExecutorStatsCollector</name></type> <name>collector</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <function><type><specifier>public</specifier> <name>ColumnFamilyStore</name></type> <name>getColumnFamilyStore</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>cfs</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>getSSTables</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>sstables</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Try to mark the sstable to compact as compacting.
     * It returns true if some sstables have been marked for compaction, false
     * otherwise.
     * This *must* be called before calling execute(). Moreover,
     * unmarkSSTables *must* always be called after execute() if this
     * method returns true.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>markSSTablesForCompaction</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>markSSTablesForCompaction</name><argument_list>(<argument><expr><call><name><name>cfs</name>.<name>getMinimumCompactionThreshold</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfs</name>.<name>getMaximumCompactionThreshold</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>markSSTablesForCompaction</name><parameter_list>(<param><decl><type><name>int</name></type> <name>min</name></decl></param>, <param><decl><type><name>int</name></type> <name>max</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>marked</name> <init>= <expr><call><name><name>cfs</name>.<name>getDataTracker</name></name><argument_list>()</argument_list></call>.<call><name>markCompacting</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>marked</name> == null || <call><name><name>marked</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>cancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name><name>this</name>.<name>sstables</name></name> = <name>marked</name></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unmarkSSTables</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>cfs</name>.<name>getDataTracker</name></name><argument_list>()</argument_list></call>.<call><name>unmarkCompacting</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Can be overriden for action that need to be performed if the task won't</comment>
    <comment type="line">// execute (if sstable can't be marked successfully)</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"CompactionTask(" + <name>sstables</name> + ")"</expr>;</return>
    }</block></function>
}</block></class>
</unit>
