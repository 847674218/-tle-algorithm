<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\service\WriteResponseHandler.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicInteger</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>Table</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>gms</name>.<name>FailureDetector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>Message</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>UnavailableException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Handles blocking writes for ONE, ANY, TWO, THREE, QUORUM, and ALL consistency levels.
 */</comment>
<class><specifier>public</specifier> class <name>WriteResponseHandler</name> <super><extends>extends <name>AbstractWriteResponseHandler</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>WriteResponseHandler</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>AtomicInteger</name></type> <name>responses</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>WriteResponseHandler</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>writeEndpoints</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></param>, <param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>Runnable</name></type> <name>callback</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>writeEndpoints</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>responses</name> = new <call><name>AtomicInteger</name><argument_list>(<argument><expr><call><name>determineBlockFor</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>protected</specifier> <name>WriteResponseHandler</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ConsistencyLevel</name>.<name>ALL</name></name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>responses</name> = new <call><name>AtomicInteger</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IWriteResponseHandler</name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>writeEndpoints</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></param>, <param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>Runnable</name></type> <name>callback</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>WriteResponseHandler</name><argument_list>(<argument><expr><name>writeEndpoints</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IWriteResponseHandler</name></type> <name>create</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>WriteResponseHandler</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>response</name><parameter_list>(<param><decl><type><name>Message</name></type> <name>m</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>responses</name>.<name>decrementAndGet</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr><call><name>signal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>int</name></type> <name>determineBlockFor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>)</parameter_list>
    <block>{
        <switch>switch <condition>(<expr><name>consistencyLevel</name></expr>)</condition>
        <block>{
            <case>case <expr><name>ONE</name></expr>:
                <return>return <expr>1</expr>;</return>
            </case><case>case <expr><name>ANY</name></expr>:
                <return>return <expr>1</expr>;</return>
            </case><case>case <expr><name>TWO</name></expr>:
                <return>return <expr>2</expr>;</return>
            </case><case>case <expr><name>THREE</name></expr>:
                <return>return <expr>3</expr>;</return>
            </case><case>case <expr><name>QUORUM</name></expr>:
                <return>return <expr>(<call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>.<call><name>getReplicationStrategy</name><argument_list>()</argument_list></call>.<call><name>getReplicationFactor</name><argument_list>()</argument_list></call> / 2) + 1</expr>;</return>
            </case><case>case <expr><name>ALL</name></expr>:
                <return>return <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>.<call><name>getReplicationStrategy</name><argument_list>()</argument_list></call>.<call><name>getReplicationFactor</name><argument_list>()</argument_list></call></expr>;</return>
            </case><default>default:
                <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"invalid consistency level: " + <call><name><name>consistencyLevel</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </default>}</block></switch>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>assureSufficientLiveNodes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnavailableException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>consistencyLevel</name> == <name><name>ConsistencyLevel</name>.<name>ANY</name></name></expr>)</condition><then>
        <block>{
            <comment type="line">// Ensure there are blockFor distinct living nodes (hints (local) are ok).</comment>
            <comment type="line">// Thus we include the local node (coordinator) as a valid replica if it is there already.</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>effectiveEndpoints</name> <init>= <expr><call><name><name>writeEndpoints</name>.<name>contains</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> ? <call><name><name>writeEndpoints</name>.<name>size</name></name><argument_list>()</argument_list></call> : <call><name><name>writeEndpoints</name>.<name>size</name></name><argument_list>()</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>effectiveEndpoints</name> &lt; <call><name><name>responses</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>UnavailableException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// count destinations that are part of the desired target set</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>liveNodes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>InetAddress</name></type> <name>destination</name> <range>: <expr><name>writeEndpoints</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>FailureDetector</name>.<name>instance</name>.<name>isAlive</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>liveNodes</name>++</expr>;</expr_stmt></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>liveNodes</name> &lt; <call><name><name>responses</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>UnavailableException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLatencyForSnitch</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>
}</block></class>
</unit>
