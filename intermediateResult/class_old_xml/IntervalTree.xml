<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\IntervalTree\IntervalTree.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>IntervalTree</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>LinkedList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<class><specifier>public</specifier> class <name><name>IntervalTree</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IntervalNode</name></type> <name>head</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>IntervalTree</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>head</name> = null</expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>IntervalTree</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>intervals</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>head</name> = new <call><name>IntervalNode</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>max</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>head</name>.<name>v_max</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>min</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>head</name>.<name>v_min</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>search</name><parameter_list>(<param><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>searchInterval</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>searchInternal</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>searchInterval</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>results</name></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>searchInternal</name><parameter_list>(<param><decl><type><name>IntervalNode</name></type> <name>node</name></decl></param>, <param><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>searchInterval</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>results</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>null == <name>head</name></expr>)</condition><then>
            <return>return;</return></then></if>
        <if>if <condition>(<expr>null == <name>node</name> || <name><name>node</name>.<name>v_pt</name></name> == null</expr>)</condition><then>
            <return>return;</return></then></if>
        <comment type="line">//if searchInterval.contains(node.v_pt)</comment>
        <comment type="line">//then add every interval contained in this node to the result set then search left and right for further</comment>
        <comment type="line">//overlapping intervals</comment>
        <if>if <condition>(<expr><call><name><name>searchInterval</name>.<name>contains</name></name><argument_list>(<argument><expr><name><name>node</name>.<name>v_pt</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>interval</name> <range>: <expr><name><name>node</name>.<name>intersects_left</name></name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>results</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><call><name>searchInternal</name><argument_list>(<argument><expr><name><name>node</name>.<name>left</name></name></expr></argument>, <argument><expr><name>searchInterval</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>searchInternal</name><argument_list>(<argument><expr><name><name>node</name>.<name>right</name></name></expr></argument>, <argument><expr><name>searchInterval</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">//if v.pt &lt; searchInterval.left</comment>
        <comment type="line">//add intervals in v with v[i].right &gt;= searchInterval.left</comment>
        <comment type="line">//L contains no overlaps</comment>
        <comment type="line">//R May</comment>
        <if>if <condition>(<expr><call><name><name>node</name>.<name>v_pt</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>searchInterval</name>.<name>min</name></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>interval</name> <range>: <expr><name><name>node</name>.<name>intersects_right</name></name></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr><call><name><name>interval</name>.<name>max</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>searchInterval</name>.<name>min</name></name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>results</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <break>break;</break></else></if>
            }</block></for>
            <expr_stmt><expr><call><name>searchInternal</name><argument_list>(<argument><expr><name><name>node</name>.<name>right</name></name></expr></argument>, <argument><expr><name>searchInterval</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">//if v.pt &gt; searchInterval.right</comment>
        <comment type="line">//add intervals in v with [i].left &lt;= searchInterval.right</comment>
        <comment type="line">//R contains no overlaps</comment>
        <comment type="line">//L May</comment>
        <if>if <condition>(<expr><call><name><name>node</name>.<name>v_pt</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>searchInterval</name>.<name>max</name></name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name><name>Interval</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>interval</name> <range>: <expr><name><name>node</name>.<name>intersects_left</name></name></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr><call><name><name>interval</name>.<name>min</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>searchInterval</name>.<name>max</name></name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>results</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <break>break;</break></else></if>
            }</block></for>
            <expr_stmt><expr><call><name>searchInternal</name><argument_list>(<argument><expr><name><name>node</name>.<name>left</name></name></expr></argument>, <argument><expr><name>searchInterval</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
