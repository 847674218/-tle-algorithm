<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\marshal\IntegerType.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>;</package>

<import>import <name><name>java</name>.<name>math</name>.<name>BigInteger</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>jdbc</name>.<name>JdbcInteger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>IntegerType</name> <super><extends>extends <name><name>AbstractType</name><argument_list>&lt;<argument><name>BigInteger</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IntegerType</name></type> <name>instance</name> <init>= <expr>new <call><name>IntegerType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>findMostSignificantByte</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>byte</name></type> <name>b0</name> <init>= <expr><call><name><name>bytes</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>position</name></name><argument_list>()</argument_list></call> + <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>b0</name> != 0 &amp;&amp; <name>b0</name> != -1</expr>)</condition><then>
                <break>break;</break></then></if>
            <decl_stmt><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><call><name><name>bytes</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>position</name></name><argument_list>()</argument_list></call> + <name>i</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>b0</name> == 0 &amp;&amp; <name>b1</name> != 0</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>b1</name> &gt; 0</expr>)</condition><then>
                    <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt></then></if>
                <break>break;</break>
            }</block></then></if>
            <if>if <condition>(<expr><name>b0</name> == -1 &amp;&amp; <name>b1</name> != -1</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>b1</name> &lt; 0</expr>)</condition><then>
                    <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt></then></if>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>i</name></expr>;</return>
    }</block></function>

    <constructor><name>IntegerType</name><parameter_list>()</parameter_list> <block>{<comment type="block">/* singleton */</comment>}</block></constructor>

    <function><type><specifier>public</specifier> <name>BigInteger</name></type> <name>compose</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>JdbcInteger</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>decompose</name><parameter_list>(<param><decl><type><name>BigInteger</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>JdbcInteger</name>.<name>instance</name>.<name>decompose</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>lhs</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>rhs</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>lhsLen</name> <init>= <expr><call><name><name>lhs</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rhsLen</name> <init>= <expr><call><name><name>rhs</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>lhsLen</name> == 0</expr>)</condition><then>
            <return>return <expr><name>rhsLen</name> == 0 ? 0 : -1</expr>;</return></then></if>
        <if>if <condition>(<expr><name>rhsLen</name> == 0</expr>)</condition><then>
            <return>return <expr>1</expr>;</return></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>lhsMsbIdx</name> <init>= <expr><call><name>findMostSignificantByte</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rhsMsbIdx</name> <init>= <expr><call><name>findMostSignificantByte</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//diffs contain number of "meaningful" bytes (i.e. ignore padding)</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>lhsLenDiff</name> <init>= <expr><name>lhsLen</name> - <name>lhsMsbIdx</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rhsLenDiff</name> <init>= <expr><name>rhsLen</name> - <name>rhsMsbIdx</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>byte</name></type> <name>lhsMsb</name> <init>= <expr><call><name><name>lhs</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>lhs</name>.<name>position</name></name><argument_list>()</argument_list></call> + <name>lhsMsbIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name></type> <name>rhsMsb</name> <init>= <expr><call><name><name>rhs</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>rhs</name>.<name>position</name></name><argument_list>()</argument_list></call> + <name>rhsMsbIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/*         +    -
         *      -----------
         *    + | -d |  1 |
         * LHS  -----------
         *    - | -1 |  d |
         *      -----------
         *          RHS
         *
         * d = difference of length in significant bytes
         */</comment>
        <if>if <condition>(<expr><name>lhsLenDiff</name> != <name>rhsLenDiff</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>lhsMsb</name> &lt; 0</expr>)</condition><then>
                <return>return <expr><name>rhsMsb</name> &lt; 0 ? <name>rhsLenDiff</name> - <name>lhsLenDiff</name> : -1</expr>;</return></then></if>
            <if>if <condition>(<expr><name>rhsMsb</name> &lt; 0</expr>)</condition><then>
                <return>return <expr>1</expr>;</return></then></if>
            <return>return <expr><name>lhsLenDiff</name> - <name>rhsLenDiff</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// msb uses signed comparison</comment>
        <if>if <condition>(<expr><name>lhsMsb</name> != <name>rhsMsb</name></expr>)</condition><then>
            <return>return <expr><name>lhsMsb</name> - <name>rhsMsb</name></expr>;</return></then></if>
        <expr_stmt><expr><name>lhsMsbIdx</name>++</expr>;</expr_stmt>
        <expr_stmt><expr><name>rhsMsbIdx</name>++</expr>;</expr_stmt>

        <comment type="line">// remaining bytes are compared unsigned</comment>
        <while>while <condition>(<expr><name>lhsMsbIdx</name> &lt; <name>lhsLen</name></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>lhsMsb</name> = <call><name><name>lhs</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>lhs</name>.<name>position</name></name><argument_list>()</argument_list></call> + <name>lhsMsbIdx</name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rhsMsb</name> = <call><name><name>rhs</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>rhs</name>.<name>position</name></name><argument_list>()</argument_list></call> + <name>rhsMsbIdx</name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>lhsMsb</name> != <name>rhsMsb</name></expr>)</condition><then>
                <return>return <expr>(<name>lhsMsb</name> &amp; 0xFF) - (<name>rhsMsb</name> &amp; 0xFF)</expr>;</return></then></if>
        }</block></while>

        <return>return <expr>0</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>JdbcInteger</name>.<name>instance</name>.<name>getString</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>fromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{
        <comment type="line">// Return an empty ByteBuffer for an empty string.</comment>
        <if>if <condition>(<expr><call><name><name>source</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>BigInteger</name></type> <name>integerType</name></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>integerType</name> = new <call><name>BigInteger</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"unable to make int from '%s'"</expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <return>return <expr><call><name>decompose</name><argument_list>(<argument><expr><name>integerType</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{
        <comment type="line">// no invalid integers.</comment>
    }</block></function>
}</block></class>
</unit>
