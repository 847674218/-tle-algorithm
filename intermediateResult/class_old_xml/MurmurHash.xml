<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\MurmurHash.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This is a very fast, non-cryptographic hash suitable for general hash-based
 * lookup. See http://murmurhash.googlepages.com/ for more details.
 *
 * &lt;p&gt;
 * The C version of MurmurHash 2.0 found at that site was ported to Java by
 * Andrzej Bialecki (ab at getopt org).
 * &lt;/p&gt;
 */</comment>
<class><specifier>public</specifier> class <name>MurmurHash</name>
<block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hash32</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>, <param><decl><type><name>int</name></type> <name>seed</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr>0x5bd1e995</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr>24</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>seed</name> ^ <name>length</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>len_4</name> <init>= <expr><name>length</name> &gt;&gt; 2</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>len_4</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>i_4</name> <init>= <expr><name>i</name> &lt;&lt; 2</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>i_4</name> + 3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>k</name> = <name>k</name> &lt;&lt; 8</expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> = <name>k</name> | (<call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>i_4</name> + 2</expr></argument>)</argument_list></call> &amp; 0xff)</expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> = <name>k</name> &lt;&lt; 8</expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> = <name>k</name> | (<call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>i_4</name> + 1</expr></argument>)</argument_list></call> &amp; 0xff)</expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> = <name>k</name> &lt;&lt; 8</expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> = <name>k</name> | (<call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>i_4</name> + 0</expr></argument>)</argument_list></call> &amp; 0xff)</expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> *= <name>m</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> ^= <name>k</name> &gt;&gt;&gt; <name>r</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> *= <name>m</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>h</name> *= <name>m</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>h</name> ^= <name>k</name></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// avoid calculating modulo</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>len_m</name> <init>= <expr><name>len_4</name> &lt;&lt; 2</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name>length</name> - <name>len_m</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>left</name> != 0</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>left</name> &gt;= 3</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>h</name> ^= (<name>int</name>) <call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>length</name> - 3</expr></argument>)</argument_list></call> &lt;&lt; 16</expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>left</name> &gt;= 2</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>h</name> ^= (<name>int</name>) <call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>length</name> - 2</expr></argument>)</argument_list></call> &lt;&lt; 8</expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>left</name> &gt;= 1</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>h</name> ^= (<name>int</name>) <call><name><name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>length</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name>h</name> *= <name>m</name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>h</name> ^= <name>h</name> &gt;&gt;&gt; 13</expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name> *= <name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name> ^= <name>h</name> &gt;&gt;&gt; 15</expr>;</expr_stmt>

        <return>return <expr><name>h</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>hash64</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>, <param><decl><type><name>long</name></type> <name>seed</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>m64</name> <init>= <expr>0xc6a4a7935bd1e995L</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r64</name> <init>= <expr>47</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>h64</name> <init>= <expr>(<name>seed</name> &amp; 0xffffffffL) ^ (<name>m64</name> * <name>length</name>)</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>lenLongs</name> <init>= <expr><name>length</name> &gt;&gt; 3</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>lenLongs</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>i_8</name> <init>= <expr><name>i</name> &lt;&lt; 3</expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>k64</name> <init>=  <expr>((<name>long</name>)  <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name>+<name>i_8</name>+0</expr></argument>)</argument_list></call> &amp; 0xff)      + (((<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name>+<name>i_8</name>+1</expr></argument>)</argument_list></call> &amp; 0xff)&lt;&lt;8)  +
			            (((<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name>+<name>i_8</name>+2</expr></argument>)</argument_list></call> &amp; 0xff)&lt;&lt;16) + (((<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name>+<name>i_8</name>+3</expr></argument>)</argument_list></call> &amp; 0xff)&lt;&lt;24) +
			            (((<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name>+<name>i_8</name>+4</expr></argument>)</argument_list></call> &amp; 0xff)&lt;&lt;32) + (((<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name>+<name>i_8</name>+5</expr></argument>)</argument_list></call> &amp; 0xff)&lt;&lt;40) +
			            (((<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name>+<name>i_8</name>+6</expr></argument>)</argument_list></call> &amp; 0xff)&lt;&lt;48) + (((<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name>+<name>i_8</name>+7</expr></argument>)</argument_list></call> &amp; 0xff)&lt;&lt;56)</expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>k64</name> *= <name>m64</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k64</name> ^= <name>k64</name> &gt;&gt;&gt; <name>r64</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k64</name> *= <name>m64</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>h64</name> ^= <name>k64</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>h64</name> *= <name>m64</name></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>rem</name> <init>= <expr><name>length</name> &amp; 0x7</expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name>rem</name></expr>)</condition>
        <block>{
        <case>case <expr>0</expr>:
            <break>break;</break>
        </case><case>case <expr>7</expr>:
            <expr_stmt><expr><name>h64</name> ^= (<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>length</name> - <name>rem</name> + 6</expr></argument>)</argument_list></call> &lt;&lt; 48</expr>;</expr_stmt>
        </case><case>case <expr>6</expr>:
            <expr_stmt><expr><name>h64</name> ^= (<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>length</name> - <name>rem</name> + 5</expr></argument>)</argument_list></call> &lt;&lt; 40</expr>;</expr_stmt>
        </case><case>case <expr>5</expr>:
            <expr_stmt><expr><name>h64</name> ^= (<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>length</name> - <name>rem</name> + 4</expr></argument>)</argument_list></call> &lt;&lt; 32</expr>;</expr_stmt>
        </case><case>case <expr>4</expr>:
            <expr_stmt><expr><name>h64</name> ^= (<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>length</name> - <name>rem</name> + 3</expr></argument>)</argument_list></call> &lt;&lt; 24</expr>;</expr_stmt>
        </case><case>case <expr>3</expr>:
            <expr_stmt><expr><name>h64</name> ^= (<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>length</name> - <name>rem</name> + 2</expr></argument>)</argument_list></call> &lt;&lt; 16</expr>;</expr_stmt>
        </case><case>case <expr>2</expr>:
            <expr_stmt><expr><name>h64</name> ^= (<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>length</name> - <name>rem</name> + 1</expr></argument>)</argument_list></call> &lt;&lt; 8</expr>;</expr_stmt>
        </case><case>case <expr>1</expr>:
            <expr_stmt><expr><name>h64</name> ^= (<name>long</name>) <call><name><name>key</name>.<name>get</name></name><argument_list>(<argument><expr><name>offset</name> + <name>length</name> - <name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>h64</name> *= <name>m64</name></expr>;</expr_stmt>
        </case>}</block></switch>

        <expr_stmt><expr><name>h64</name> ^= <name>h64</name> &gt;&gt;&gt; <name>r64</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> *= <name>m64</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> ^= <name>h64</name> &gt;&gt;&gt; <name>r64</name></expr>;</expr_stmt>

        <return>return <expr><name>h64</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
