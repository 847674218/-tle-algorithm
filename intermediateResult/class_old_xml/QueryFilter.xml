<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\filter\QueryFilter.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>IColumnIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>ISSTableColumnIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>IdentityQueryFilter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileDataInput</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>SlicePredicate</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>SliceRange</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>CloseableIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>MergeIterator</name></name>;</import>

<class><specifier>public</specifier> class <name>QueryFilter</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>QueryFilter</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>QueryPath</name></type> <name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>IFilter</name></type> <name>filter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IFilter</name></type> <name>superFilter</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>QueryFilter</name><parameter_list>(<param><decl><type><name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>key</name></decl></param>, <param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>IFilter</name></type> <name>filter</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>filter</name></name> = <name>filter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>superFilter</name> = <name><name>path</name>.<name>superColumnName</name></name> == null ? null : new <call><name>NamesQueryFilter</name><argument_list>(<argument><expr><name><name>path</name>.<name>superColumnName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>IColumnIterator</name></type> <name>getMemtableColumnIterator</name><parameter_list>(<param><decl><type><name>Memtable</name></type> <name>memtable</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>memtable</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cf</name> == null</expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>
        <return>return <expr><call><name>getMemtableColumnIterator</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumnIterator</name></type> <name>getMemtableColumnIterator</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>cf</name> != null</expr>;</assert>
        <if>if <condition>(<expr><name><name>path</name>.<name>superColumnName</name></name> == null</expr>)</condition><then>
            <return>return <expr><call><name><name>filter</name>.<name>getMemtableColumnIterator</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <return>return <expr><call><name><name>superFilter</name>.<name>getMemtableColumnIterator</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// TODO move gcBefore into a field</comment>
    <function><type><specifier>public</specifier> <name>ISSTableColumnIterator</name></type> <name>getSSTableColumnIterator</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>path</name>.<name>superColumnName</name></name> == null</expr>)</condition><then>
            <return>return <expr><call><name><name>filter</name>.<name>getSSTableColumnIterator</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <return>return <expr><call><name><name>superFilter</name>.<name>getSSTableColumnIterator</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ISSTableColumnIterator</name></type> <name>getSSTableColumnIterator</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>FileDataInput</name></type> <name>file</name></decl></param>, <param><decl><type><name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>path</name>.<name>superColumnName</name></name> == null</expr>)</condition><then>
            <return>return <expr><call><name><name>filter</name>.<name>getSSTableColumnIterator</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <return>return <expr><call><name><name>superFilter</name>.<name>getSSTableColumnIterator</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// TODO move gcBefore into a field</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>collateColumns</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>ColumnFamily</name></type> <name>returnCF</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>toCollate</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>gcBefore</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>IFilter</name></type> <name>topLevelFilter</name> <init>= <expr>(<name>superFilter</name> == null ? <name>filter</name> : <name>superFilter</name>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Comparator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>fcomp</name> <init>= <expr><call><name><name>topLevelFilter</name>.<name>getColumnComparator</name></name><argument_list>(<argument><expr><call><name><name>returnCF</name>.<name>getComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// define a 'reduced' iterator that merges columns w/ the same name, which</comment>
        <comment type="line">// greatly simplifies computing liveColumns in the presence of tombstones.</comment>
        <decl_stmt><decl><type><name><name>MergeIterator</name>.<name><name>Reducer</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></name></type> <name>reducer</name> <init>= <expr>new <class><super><name><name>MergeIterator</name>.<name><name>Reducer</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>curCF</name> <init>= <expr><call><name><name>returnCF</name>.<name>cloneMeShallow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>reduce</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>current</name></decl></param>)</parameter_list>
            <block>{
                <if>if <condition>(<expr><call><name><name>curCF</name>.<name>isSuper</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>curCF</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <comment type="line">// If it is the first super column we add, we must clone it since other super column may modify</comment>
                    <comment type="line">// it otherwise and it could be aliased in a memtable somewhere. We'll also don't have to care about what</comment>
                    <comment type="line">// consumers make of the result (for instance CFS.getColumnFamily() call removeDeleted() on the</comment>
                    <comment type="line">// result which removes column; which shouldn't be done on the original super column).</comment>
                    <assert>assert <expr><name>current</name> instanceof <name>SuperColumn</name></expr>;</assert>
                    <expr_stmt><expr><call><name><name>curCF</name>.<name>addColumn</name></name><argument_list>(<argument><expr>((<name>SuperColumn</name>) <name>current</name>).<call><name>cloneMe</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><call><name><name>curCF</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></function>

            <function><type><specifier>protected</specifier> <name>IColumn</name></type> <name>getReduced</name><parameter_list>()</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>IColumn</name></type> <name>c</name> <init>= <expr><call><name><name>curCF</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>superFilter</name> != null</expr>)</condition><then>
                <block>{
                    <comment type="line">// filterSuperColumn only looks at immediate parent (the supercolumn) when determining if a subcolumn</comment>
                    <comment type="line">// is still live, i.e., not shadowed by the parent's tombstone.  so, bump it up temporarily to the tombstone</comment>
                    <comment type="line">// time of the cf, if that is greater.</comment>
                    <decl_stmt><decl><type><name>long</name></type> <name>deletedAt</name> <init>= <expr><call><name><name>c</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>returnCF</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call> &gt; <name>deletedAt</name></expr>)</condition><then>
                        <expr_stmt><expr>((<name>SuperColumn</name>) <name>c</name>).<call><name>delete</name><argument_list>(<argument><expr><call><name><name>c</name>.<name>getLocalDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>returnCF</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                    <expr_stmt><expr><name>c</name> = <call><name><name>filter</name>.<name>filterSuperColumn</name></name><argument_list>(<argument><expr>(<name>SuperColumn</name>) <name>c</name></expr></argument>, <argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr>((<name>SuperColumn</name>) <name>c</name>).<call><name>delete</name><argument_list>(<argument><expr><call><name><name>c</name>.<name>getLocalDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>deletedAt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// reset sc tombstone time to what it should be</comment>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>curCF</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><name>c</name></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>reduced</name> <init>= <expr><call><name><name>MergeIterator</name>.<name>get</name></name><argument_list>(<argument><expr><name>toCollate</name></expr></argument>, <argument><expr><name>fcomp</name></expr></argument>, <argument><expr><name>reducer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>topLevelFilter</name>.<name>collectReducedColumns</name></name><argument_list>(<argument><expr><name>returnCF</name></expr></argument>, <argument><expr><name>reduced</name></expr></argument>, <argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getColumnFamilyName</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>path</name>.<name>columnFamilyName</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isRelevant</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>IColumnContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>int</name></type> <name>gcBefore</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// the column itself must be not gc-able (it is live, or a still relevant tombstone, or has live subcolumns), (1)</comment>
        <comment type="line">// and if its container is deleted, the column must be changed more recently than the container tombstone (2)</comment>
        <comment type="line">// (since otherwise, the only thing repair cares about is the container tombstone)</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>maxChange</name> <init>= <expr><call><name><name>column</name>.<name>mostRecentNonGCableChangeAt</name></name><argument_list>(<argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<call><name><name>column</name>.<name>getLocalDeletionTime</name></name><argument_list>()</argument_list></call> &gt;= <name>gcBefore</name> || <name>maxChange</name> &gt; <call><name><name>column</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call>) <comment type="line">// (1)</comment>
               &amp;&amp; (!<call><name><name>container</name>.<name>isMarkedForDelete</name></name><argument_list>()</argument_list></call> || <name>maxChange</name> &gt; <call><name><name>container</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call>)</expr>;</return> <comment type="line">// (2)</comment>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return a QueryFilter object to satisfy the given slice criteria:
     * @param key the row to slice
     * @param path path to the level to slice at (CF or SuperColumn)
     * @param start column to start slice at, inclusive; empty for "the first column"
     * @param finish column to stop slice at, inclusive; empty for "the last column"
     * @param reversed true to start with the largest column (as determined by configured sort order) instead of smallest
     * @param limit maximum number of non-deleted columns to return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>QueryFilter</name></type> <name>getSliceFilter</name><parameter_list>(<param><decl><type><name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>key</name></decl></param>, <param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>finish</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>, <param><decl><type><name>int</name></type> <name>limit</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>QueryFilter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>new <call><name>SliceQueryFilter</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><name>reversed</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * return a QueryFilter object that includes every column in the row.
     * This is dangerous on large rows; avoid except for test code.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>QueryFilter</name></type> <name>getIdentityFilter</name><parameter_list>(<param><decl><type><name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>key</name></decl></param>, <param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>QueryFilter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>new <call><name>IdentityQueryFilter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return a QueryFilter object that will return columns matching the given names
     * @param key the row to slice
     * @param path path to the level to slice at (CF or SuperColumn)
     * @param columns the column names to restrict the results to, sorted in comparator order
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>QueryFilter</name></type> <name>getNamesFilter</name><parameter_list>(<param><decl><type><name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>key</name></decl></param>, <param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>QueryFilter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>new <call><name>NamesQueryFilter</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IFilter</name></type> <name>getFilter</name><parameter_list>(<param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>predicate</name>.<name>column_names</name></name> != null</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columnNameSet</name> <init>= <expr>new <call><name><name>TreeSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>columnNameSet</name>.<name>addAll</name></name><argument_list>(<argument><expr><name><name>predicate</name>.<name>column_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>new <call><name>NamesQueryFilter</name><argument_list>(<argument><expr><name>columnNameSet</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>SliceRange</name></type> <name>range</name> <init>= <expr><name><name>predicate</name>.<name>slice_range</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>SliceQueryFilter</name><argument_list>(<argument><expr><name><name>range</name>.<name>start</name></name></expr></argument>, <argument><expr><name><name>range</name>.<name>finish</name></name></expr></argument>, <argument><expr><name><name>range</name>.<name>reversed</name></name></expr></argument>, <argument><expr><name><name>range</name>.<name>count</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * convenience method for creating a name filter matching a single column
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>QueryFilter</name></type> <name>getNamesFilter</name><parameter_list>(<param><decl><type><name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>key</name></decl></param>, <param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>QueryFilter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>new <call><name>NamesQueryFilter</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getSimpleName</name><argument_list>()</argument_list></call> + "(key=" + <name>key</name> +
               ", path=" + <name>path</name> +
               (<name>filter</name> == null ? "" : ", filter=" + <name>filter</name>) +
               (<name>superFilter</name> == null ? "" : ", superFilter=" + <name>superFilter</name>) +
               ")"</expr>;</return>
    }</block></function>
}</block></class>
</unit>
