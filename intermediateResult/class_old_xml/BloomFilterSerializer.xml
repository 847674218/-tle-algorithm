<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\BloomFilterSerializer.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DBConstants</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>obs</name>.<name>OpenBitSet</name></name>;</import>

<class><specifier>public</specifier> class <name>BloomFilterSerializer</name> <super><implements>implements <name><name>ISerializer</name><argument_list>&lt;<argument><name>BloomFilter</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>BloomFilter</name></type> <name>bf</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>bitLength</name> <init>= <expr><call><name><name>bf</name>.<name>bitset</name>.<name>getNumWords</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pageSize</name> <init>= <expr><call><name><name>bf</name>.<name>bitset</name>.<name>getPageSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pageCount</name> <init>= <expr><call><name><name>bf</name>.<name>bitset</name>.<name>getPageCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>bf</name>.<name>getHashCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name>bitLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>p</name> &lt; <name>pageCount</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>bits</name> <init>= <expr><call><name><name>bf</name>.<name>bitset</name>.<name>getPage</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name><name>i</name> <argument_list>&lt; <argument><name>pageSize</name> &amp;&amp; <name>bitLength</name>--</argument> &gt;</argument_list></name> 0</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeLong</name></name><argument_list>(<argument><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>BloomFilter</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>hashes</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>bitLength</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OpenBitSet</name></type> <name>bs</name> <init>= <expr>new <call><name>OpenBitSet</name><argument_list>(<argument><expr><name>bitLength</name> &lt;&lt; 6</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pageSize</name> <init>= <expr><call><name><name>bs</name>.<name>getPageSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pageCount</name> <init>= <expr><call><name><name>bs</name>.<name>getPageCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>p</name> &lt; <name>pageCount</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>bits</name> <init>= <expr><call><name><name>bs</name>.<name>getPage</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name><name>i</name> <argument_list>&lt; <argument><name>pageSize</name> &amp;&amp; <name>bitLength</name>--</argument> &gt;</argument_list></name> 0</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
        }</block></for>

        <return>return <expr>new <call><name>BloomFilter</name><argument_list>(<argument><expr><name>hashes</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Calculates a serialized size of the given Bloom Filter
     * @see BloomFilterSerializer#serialize(BloomFilter, DataOutput)
     *
     * @param bf Bloom filter to calculate serialized size
     *
     * @return serialized size of the given bloom filter
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>BloomFilter</name></type> <name>bf</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name><name>DBConstants</name>.<name>intSize</name></name> <comment type="line">// hash count</comment>
               + <name><name>DBConstants</name>.<name>intSize</name></name> <comment type="line">// length</comment>
               + <call><name><name>bf</name>.<name>bitset</name>.<name>getNumWords</name></name><argument_list>()</argument_list></call> * <name><name>DBConstants</name>.<name>longSize</name></name></expr>;</return> <comment type="line">// buckets</comment>
    }</block></function>
}</block></class>
</unit>
