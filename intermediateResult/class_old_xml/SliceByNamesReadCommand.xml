<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\SliceByNamesReadCommand.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryFilter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryPath</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ColumnParent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>

<class><specifier>public</specifier> class <name>SliceByNamesReadCommand</name> <super><extends>extends <name>ReadCommand</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columnNames</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SliceByNamesReadCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columnNames</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>column_parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>columnNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>SliceByNamesReadCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columnNames</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>CMD_TYPE_GET_SLICE_BY_NAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columnNames</name></name> = new <call><name><name>TreeSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>columnNames</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>columnNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ReadCommand</name></type> <name>copy</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ReadCommand</name></type> <name>readCommand</name><init>= <expr>new <call><name>SliceByNamesReadCommand</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>queryPath</name></expr></argument>, <argument><expr><name>columnNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>readCommand</name>.<name>setDigestQuery</name></name><argument_list>(<argument><expr><call><name>isDigestQuery</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>readCommand</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Row</name></type> <name>getRow</name><parameter_list>(<param><decl><type><name>Table</name></type> <name>table</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>DecoratedKey</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>dk</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>decorateKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>table</name>.<name>getRow</name></name><argument_list>(<argument><expr><call><name><name>QueryFilter</name>.<name>getNamesFilter</name></name><argument_list>(<argument><expr><name>dk</name></expr></argument>, <argument><expr><name>queryPath</name></expr></argument>, <argument><expr><name>columnNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"SliceByNamesReadCommand(" +
               "table='" + <name>table</name> + '\'' +
               ", key=" + <call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> +
               ", columnParent='" + <name>queryPath</name> + '\'' +
               ", columns=[" + <call><name>getComparator</name><argument_list>()</argument_list></call>.<call><name>getString</name><argument_list>(<argument><expr><name>columnNames</name></expr></argument>)</argument_list></call> + "]" +
               ')'</expr>;</return>
    }</block></function>

}</block></class>

<class>class <name>SliceByNamesReadCommandSerializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>ReadCommand</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>SliceByNamesReadCommand</name></type> <name>command</name> <init>= <expr>(<name>SliceByNamesReadCommand</name>) <name>cmd</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeBoolean</name></name><argument_list>(<argument><expr><call><name><name>command</name>.<name>isDigestQuery</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><name><name>command</name>.<name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name><name>command</name>.<name>key</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name>.<name>queryPath</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>command</name>.<name>columnNames</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>command</name>.<name>columnNames</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>cName</name> <range>: <expr><name><name>command</name>.<name>columnNames</name></name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithShortLength</name></name><argument_list>(<argument><expr><name>cName</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>SliceByNamesReadCommand</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>isDigest</name> <init>= <expr><call><name><name>dis</name>.<name>readBoolean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>table</name> <init>= <expr><call><name><name>dis</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>key</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QueryPath</name></type> <name>columnParent</name> <init>= <expr><call><name><name>QueryPath</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
        <block>{
            <expr_stmt><expr><call><name><name>columns</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>SliceByNamesReadCommand</name></type> <name>command</name> <init>= <expr>new <call><name>SliceByNamesReadCommand</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>columnParent</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name>.<name>setDigestQuery</name></name><argument_list>(<argument><expr><name>isDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>ReadCommand</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>SliceByNamesReadCommand</name></type> <name>command</name> <init>= <expr>(<name>SliceByNamesReadCommand</name>) <name>cmd</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>DBConstants</name>.<name>boolSize</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>shortSize</name></name> + <call><name><name>FBUtilities</name>.<name>encodedUTF8Length</name></name><argument_list>(<argument><expr><name><name>command</name>.<name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>shortSize</name></name> + <call><name><name>command</name>.<name>key</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> += <call><name><name>command</name>.<name>queryPath</name>.<name>serializedSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>intSize</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>command</name>.<name>columnNames</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>cName</name> <range>: <expr><name><name>command</name>.<name>columnNames</name></name></expr></range></decl></init>)
                <expr_stmt><expr><name>size</name> += <name><name>DBConstants</name>.<name>shortSize</name></name> + <call><name><name>cName</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
        }</block></then></if>
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
