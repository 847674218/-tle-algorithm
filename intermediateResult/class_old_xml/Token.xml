<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\dht\Token.java"><comment type="block">/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>RowPosition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>Token</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>RingPosition</name><argument_list>&lt;<argument><name><name>Token</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name>, <name>Serializable</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr>1L</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TokenSerializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>TokenSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TokenSerializer</name></type> <name>serializer</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>serializer</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T</name></type> <name>token</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>Token</name><parameter_list>(<param><decl><type><name>T</name></type> <name>token</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>token</name></name> = <name>token</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * This determines the comparison for node destination purposes.
     */</comment>
    <function_decl><type><specifier>abstract</specifier> <specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name><name>Token</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>o</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>token</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>obj</name></expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then></if>
        <if>if <condition>(<expr><name>obj</name> == null || <call><name><name>this</name>.<name>getClass</name></name><argument_list>()</argument_list></call> != <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>

        <return>return <expr><call><name><name>token</name>.<name>equals</name></name><argument_list>(<argument><expr>((<name><name>Token</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<name>obj</name>).<name>token</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>token</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name><name>TokenFactory</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>
    <block>{
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ByteBuffer</name></type> <name>toByteArray</name><parameter_list>(<param><decl><type><name><name>Token</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>token</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Token</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>fromByteArray</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<param><decl><type><name><name>Token</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>token</name></decl></param>)</parameter_list>;</function_decl> <comment type="line">// serialize as string, not necessarily human-readable</comment>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Token</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>fromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>string</name></decl></param>)</parameter_list>;</function_decl> <comment type="line">// deserialize</comment>

        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>token</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>;</function_decl>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TokenSerializer</name> <super><implements>implements <name><name>ISerializer</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>Token</name></type> <name>token</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>IPartitioner</name></type> <name>p</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>b</name> <init>= <expr><call><name><name>p</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>toByteArray</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>writeWithLength</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Token</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <decl_stmt><decl><type><name>IPartitioner</name></type> <name>p</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dis</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>p</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>fromByteArray</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>Token</name></type> <name>object</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name><name>Token</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getToken</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMinimum</name><parameter_list>(<param><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>partitioner</name>.<name>getMinimumToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMinimum</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>isMinimum</name><argument_list>(<argument><expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/*
     * A token corresponds to the range of all the keys having this token.
     * A token is thus no comparable directly to a key. But to be able to select
     * keys given tokens, we introduce two "fake" keys for each token T:
     *   - lowerBoundKey: a "fake" key representing the lower bound T represents.
     *                    In other words, lowerBoundKey is the smallest key that
     *                    have token T.
     *   - upperBoundKey: a "fake" key representing the upper bound T represents.
     *                    In other words, upperBoundKey is the largest key that
     *                    have token T.
     *
     * Note that those are "fake" keys and should only be used for comparison
     * of other keys, for selection of keys when only a token is known.
     */</comment>
    <function><type><specifier>public</specifier> <name>KeyBound</name></type> <name>minKeyBound</name><parameter_list>(<param><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>KeyBound</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>KeyBound</name></type> <name>minKeyBound</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>minKeyBound</name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>KeyBound</name></type> <name>maxKeyBound</name><parameter_list>(<param><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></param>)</parameter_list>
    <block>{
        <comment type="block">/*
         * For each token, we needs both minKeyBound and maxKeyBound
         * because a token corresponds to a range of keys. But the minimun
         * token corresponds to no key, so it is valid and actually much
         * simpler to associate the same value for minKeyBound and
         * maxKeyBound for the minimun token.
         */</comment>
        <if>if <condition>(<expr><call><name>isMinimum</name><argument_list>(<argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>minKeyBound</name><argument_list>()</argument_list></call></expr>;</return></then></if>
        <return>return <expr>new <call><name>KeyBound</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>KeyBound</name></type> <name>maxKeyBound</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>maxKeyBound</name><argument_list>(<argument><expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <argument_list>&lt;<argument><name>T</name> <extends>extends <name>RingPosition</name></extends></argument>&gt;</argument_list> <name>T</name></type> <name>upperBound</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>klass</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>klass</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr>(<name>T</name>)<name>this</name></expr>;</return></then>
        <else>else
            <return>return <expr>(<name>T</name>)<call><name>maxKeyBound</name><argument_list>()</argument_list></call></expr>;</return></else></if>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>KeyBound</name> <super><extends>extends <name>RowPosition</name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Token</name></type> <name>token</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isMinimumBound</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>KeyBound</name><parameter_list>(<param><decl><type><name>Token</name></type> <name>t</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isMinimumBound</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>token</name></name> = <name>t</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>isMinimumBound</name></name> = <name>isMinimumBound</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>Token</name></type> <name>getToken</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>token</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>RowPosition</name></type> <name>pos</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>this</name> == <name>pos</name></expr>)</condition><then>
                <return>return <expr>0</expr>;</return></then></if>

            <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>getToken</name><argument_list>()</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>pos</name>.<name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>cmp</name> != 0</expr>)</condition><then>
                <return>return <expr><name>cmp</name></expr>;</return></then></if>

            <if>if <condition>(<expr><name>isMinimumBound</name></expr>)</condition><then>
                <return>return <expr>((<name>pos</name> instanceof <name>KeyBound</name>) &amp;&amp; ((<name>KeyBound</name>)<name>pos</name>).<name>isMinimumBound</name>) ? 0 : -1</expr>;</return></then>
            <else>else
                <return>return <expr>((<name>pos</name> instanceof <name>KeyBound</name>) &amp;&amp; !((<name>KeyBound</name>)<name>pos</name>).<name>isMinimumBound</name>) ? 0 : 1</expr>;</return></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMinimum</name><parameter_list>(<param><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name>getToken</name><argument_list>()</argument_list></call>.<call><name>isMinimum</name><argument_list>(<argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>RowPosition</name>.<name>Kind</name></name></type> <name>kind</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><name>isMinimumBound</name> ? <name><name>RowPosition</name>.<name>Kind</name>.<name>MIN_BOUND</name></name> : <name><name>RowPosition</name>.<name>Kind</name>.<name>MAX_BOUND</name></name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>this</name> == <name>obj</name></expr>)</condition><then>
                <return>return <expr>true</expr>;</return></then></if>
            <if>if <condition>(<expr><name>obj</name> == null || <call><name><name>this</name>.<name>getClass</name></name><argument_list>()</argument_list></call> != <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr>false</expr>;</return></then></if>

            <decl_stmt><decl><type><name>KeyBound</name></type> <name>other</name> <init>= <expr>(<name>KeyBound</name>)<name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>token</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>token</name></name></expr></argument>)</argument_list></call> &amp;&amp; <name>isMinimumBound</name> == <name><name>other</name>.<name>isMinimumBound</name></name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name>getToken</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call> + (<name>isMinimumBound</name> ? 0 : 1)</expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s(%s)"</expr></argument>, <argument><expr><name>isMinimumBound</name> ? "min" : "max"</expr></argument>, <argument><expr><call><name>getToken</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
