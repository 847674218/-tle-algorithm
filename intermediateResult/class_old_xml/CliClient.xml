<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\cli\CliClient.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cli</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>CharacterCodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Predicate</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Collections2</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Charsets</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Joiner</name></name>;</import>

<import>import <name><name>org</name>.<name>antlr</name>.<name>runtime</name>.<name>tree</name>.<name>Tree</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>IAuthenticator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamilyStoreMBean</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name>.<name>CompactionManagerMBean</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name>.<name>OperationType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>SimpleSnitch</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageProxy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>tools</name>.<name>NodeProbe</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>UUIDGen</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TBaseHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TException</name></name>;</import>
<import>import <name><name>org</name>.<name>codehaus</name>.<name>jackson</name>.<name>JsonEncoding</name></name>;</import>
<import>import <name><name>org</name>.<name>codehaus</name>.<name>jackson</name>.<name>JsonFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>codehaus</name>.<name>jackson</name>.<name>JsonGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>codehaus</name>.<name>jackson</name>.<name>JsonParser</name></name>;</import>
<import>import <name><name>org</name>.<name>codehaus</name>.<name>jackson</name>.<name>JsonToken</name></name>;</import>
<import>import <name><name>org</name>.<name>codehaus</name>.<name>jackson</name>.<name>type</name>.<name>TypeReference</name></name>;</import>
<import>import <name><name>org</name>.<name>yaml</name>.<name>snakeyaml</name>.<name>constructor</name>.<name>Constructor</name></name>;</import>
<import>import <name><name>org</name>.<name>yaml</name>.<name>snakeyaml</name>.<name>Loader</name></name>;</import>
<import>import <name><name>org</name>.<name>yaml</name>.<name>snakeyaml</name>.<name>TypeDescription</name></name>;</import>
<import>import <name><name>org</name>.<name>yaml</name>.<name>snakeyaml</name>.<name>Yaml</name></name>;</import>

<comment type="line">// Cli Client Side Library</comment>
<class><specifier>public</specifier> class <name>CliClient</name>
<block>{
    <comment type="block" format="javadoc">/**
     * Available value conversion functions
     * Used by convertValueByFunction(Tree functionCall) method
     */</comment>
    <enum><specifier>public</specifier> enum <name>Function</name>
    <block>{
        <constructor><name>BYTES</name>         <parameter_list>(<param><decl><type><name><name>BytesType</name>.<name>instance</name></name></type></decl></param>)</parameter_list>,
        INTEGER       (IntegerType.instance</constructor>)</block>,
        <constructor><name>LONG</name>          <parameter_list>(<param><decl><type><name><name>LongType</name>.<name>instance</name></name></type></decl></param>)</parameter_list>,
        INT           (Int32Type.instance</constructor></enum>)</block>,
        <expr_stmt><expr><call><name>LEXICALUUID</name>   <argument_list>(<argument><expr><name><name>LexicalUUIDType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>TIMEUUID</name>      <argument_list>(<argument><expr><name><name>TimeUUIDType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>UTF8</name>          <argument_list>(<argument><expr><name><name>UTF8Type</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>ASCII</name>         <argument_list>(<argument><expr><name><name>AsciiType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>COUNTERCOLUMN</name> <argument_list>(<argument><expr><name><name>CounterColumnType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></class>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>Function</name><argument_list>(<argument><expr><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <name>validator</name></expr></argument>)</argument_list></call>
        <block>{
            <expr><name><name>this</name>.<name>validator</name></name> = <name>validator</name></expr>;
        }</block>

        public <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <call><name>getValidator</name><argument_list>()</argument_list></call>
        <block>{
            <return>return <expr><name><name>this</name>.<name>validator</name></name></expr>;</return>
        }</block></expr></expr_stmt>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getFunctionNames</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>Function</name><index>[]</index></type> <name>functions</name> <init>= <expr><call><name><name>Function</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>functionNames</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>functions</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <decl_stmt><decl><type><name>StringBuilder</name></type> <name>currentName</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr><name><name>functions</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>name</name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>functionNames</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>currentName</name>.<name>append</name></name><argument_list>(<argument><expr>((<name>i</name> != <name><name>functions</name>.<name>length</name></name>-1) ? ", " : ".")</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <return>return <expr><call><name><name>functionNames</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }

    <comment type="block">/*
     * the &lt;i&gt;add keyspace&lt;/i&gt; command requires a list of arguments,
     *  this enum defines which arguments are valid
     */</comment>
    private <enum>enum <name>AddKeyspaceArgument</name> <block>{
        <decl><name>PLACEMENT_STRATEGY</name></decl>,
        <decl><name>STRATEGY_OPTIONS</name></decl>,
        <decl><name>DURABLE_WRITES</name></decl>
    }</block></enum>

    <comment type="block">/*
        * the &lt;i&gt;add column family&lt;/i&gt; command requires a list of arguments,
        *  this enum defines which arguments are valid.
        */</comment>
    <enum><specifier>protected</specifier> enum <name>ColumnFamilyArgument</name>
    <block>{
        <decl><name>COLUMN_TYPE</name></decl>,
        <decl><name>COMPARATOR</name></decl>,
        <decl><name>SUBCOMPARATOR</name></decl>,
        <decl><name>COMMENT</name></decl>,
        <decl><name>READ_REPAIR_CHANCE</name></decl>,
        <decl><name>DCLOCAL_READ_REPAIR_CHANCE</name></decl>,
        <decl><name>GC_GRACE</name></decl>,
        <decl><name>COLUMN_METADATA</name></decl>,
        <decl><name>MEMTABLE_OPERATIONS</name></decl>,
        <decl><name>MEMTABLE_THROUGHPUT</name></decl>,
        <decl><name>DEFAULT_VALIDATION_CLASS</name></decl>,
        <decl><name>MIN_COMPACTION_THRESHOLD</name></decl>,
        <decl><name>MAX_COMPACTION_THRESHOLD</name></decl>,
        <decl><name>REPLICATE_ON_WRITE</name></decl>,
        <decl><name>KEY_VALIDATION_CLASS</name></decl>,
        <decl><name>COMPACTION_STRATEGY</name></decl>,
        <decl><name>COMPACTION_STRATEGY_OPTIONS</name></decl>,
        <decl><name>COMPRESSION_OPTIONS</name></decl>,
        <decl><name>BLOOM_FILTER_FP_CHANCE</name></decl>,
        <decl><name>CACHING</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_PLACEMENT_STRATEGY</name> <init>= <expr>"org.apache.cassandra.locator.NetworkTopologyStrategy"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>NEWLINE</name> <init>= <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAB</name> <init>= <expr>"  "</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Cassandra</name>.<name>Client</name></name></type> <name>thriftClient</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CliSessionState</name></type> <name>sessionState</name>  <init>= <expr>null</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>keySpace</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>username</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>KsDef</name></argument>&gt;</argument_list></name></type> <name>keyspacesMap</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>KsDef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cfKeysComparators</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ConsistencyLevel</name></type> <name>consistencyLevel</name> <init>= <expr><name><name>ConsistencyLevel</name>.<name>ONE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CfAssumptions</name></type> <name>assumptions</name> <init>= <expr>new <call><name>CfAssumptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CliUserHelp</name></type> <name>help</name></decl>;</decl_stmt>
    <constructor><specifier>public</specifier> <name>CliClient</name><parameter_list>(<param><decl><type><name>CliSessionState</name></type> <name>cliSessionState</name></decl></param>, <param><decl><type><name><name>Cassandra</name>.<name>Client</name></name></type> <name>thriftClient</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>sessionState</name></name> = <name>cliSessionState</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>thriftClient</name></name> = <name>thriftClient</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>cfKeysComparators</name></name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>assumptions</name>.<name>readAssumptions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>CliUserHelp</name></type> <name>getHelp</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>help</name> == null</expr>)</condition><then>
            <expr_stmt><expr><name>help</name> = <call><name>loadHelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>help</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>CliUserHelp</name></type> <name>loadHelp</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>CliClient</name>.<name><name>class</name>.<name>getClassLoader</name></name></name><argument_list>()</argument_list></call>.<call><name>getResourceAsStream</name><argument_list>(<argument><expr>"org/apache/cassandra/cli/CliHelp.yaml"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>is</name> != null</expr>;</assert>

        <try>try
        <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Constructor</name></type> <name>constructor</name> <init>= <expr>new <call><name>Constructor</name><argument_list>(<argument><expr><name><name>CliUserHelp</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TypeDescription</name></type> <name>desc</name> <init>= <expr>new <call><name>TypeDescription</name><argument_list>(<argument><expr><name><name>CliUserHelp</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>desc</name>.<name>putListPropertyType</name></name><argument_list>(<argument><expr>"commands"</expr></argument>, <argument><expr><name><name>CliCommandHelp</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Yaml</name></type> <name>yaml</name> <init>= <expr>new <call><name>Yaml</name><argument_list>(<argument><expr>new <call><name>Loader</name><argument_list>(<argument><expr><name>constructor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>(<name>CliUserHelp</name>) <call><name><name>yaml</name>.<name>load</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>printBanner</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Welcome to Cassandra CLI version " + <call><name><name>FBUtilities</name>.<name>getReleaseVersionString</name></name><argument_list>()</argument_list></call> + "\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name>getHelp</name><argument_list>()</argument_list></call>.<name>banner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Execute a CLI Statement</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeCLIStatement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>statement</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>CharacterCodingException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>NoSuchFieldException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>Tree</name></type> <name>tree</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>compileQuery</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <switch>switch <condition>(<expr><call><name><name>tree</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{
                <case>case <expr><name><name>CliParser</name>.<name>NODE_EXIT</name></name></expr>:
                    <expr_stmt><expr><call><name>cleanupAndExit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_THRIFT_GET</name></name></expr>:
                    <expr_stmt><expr><call><name>executeGet</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_THRIFT_GET_WITH_CONDITIONS</name></name></expr>:
                    <expr_stmt><expr><call><name>executeGetWithConditions</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_HELP</name></name></expr>:
                    <expr_stmt><expr><call><name>executeHelp</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_THRIFT_SET</name></name></expr>:
                    <expr_stmt><expr><call><name>executeSet</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_THRIFT_DEL</name></name></expr>:
                    <expr_stmt><expr><call><name>executeDelete</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_THRIFT_COUNT</name></name></expr>:
                    <expr_stmt><expr><call><name>executeCount</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_ADD_KEYSPACE</name></name></expr>:
                    <expr_stmt><expr><call><name>executeAddKeySpace</name><argument_list>(<argument><expr><call><name><name>tree</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_ADD_COLUMN_FAMILY</name></name></expr>:
                    <expr_stmt><expr><call><name>executeAddColumnFamily</name><argument_list>(<argument><expr><call><name><name>tree</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_UPDATE_KEYSPACE</name></name></expr>:
                    <expr_stmt><expr><call><name>executeUpdateKeySpace</name><argument_list>(<argument><expr><call><name><name>tree</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_UPDATE_COLUMN_FAMILY</name></name></expr>:
                    <expr_stmt><expr><call><name>executeUpdateColumnFamily</name><argument_list>(<argument><expr><call><name><name>tree</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_DEL_COLUMN_FAMILY</name></name></expr>:
                    <expr_stmt><expr><call><name>executeDelColumnFamily</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_DEL_KEYSPACE</name></name></expr>:
                    <expr_stmt><expr><call><name>executeDelKeySpace</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_SHOW_CLUSTER_NAME</name></name></expr>:
                    <expr_stmt><expr><call><name>executeShowClusterName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_SHOW_VERSION</name></name></expr>:
                    <expr_stmt><expr><call><name>executeShowVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_SHOW_KEYSPACES</name></name></expr>:
                    <expr_stmt><expr><call><name>executeShowKeySpaces</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_SHOW_SCHEMA</name></name></expr>:
                    <expr_stmt><expr><call><name>executeShowSchema</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_DESCRIBE</name></name></expr>:
                    <expr_stmt><expr><call><name>executeDescribe</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_DESCRIBE_CLUSTER</name></name></expr>:
                    <expr_stmt><expr><call><name>executeDescribeCluster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_USE_TABLE</name></name></expr>:
                    <expr_stmt><expr><call><name>executeUseKeySpace</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_CONNECT</name></name></expr>:
                    <expr_stmt><expr><call><name>executeConnect</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_LIST</name></name></expr>:
                    <expr_stmt><expr><call><name>executeList</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_TRUNCATE</name></name></expr>:
                    <expr_stmt><expr><call><name>executeTruncate</name><argument_list>(<argument><expr><call><name><name>tree</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_ASSUME</name></name></expr>:
                    <expr_stmt><expr><call><name>executeAssumeStatement</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_CONSISTENCY_LEVEL</name></name></expr>:
                    <expr_stmt><expr><call><name>executeConsistencyLevelStatement</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_THRIFT_INCR</name></name></expr>:
                    <expr_stmt><expr><call><name>executeIncr</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr>1L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_THRIFT_DECR</name></name></expr>:
                    <expr_stmt><expr><call><name>executeIncr</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr>-1L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_DROP_INDEX</name></name></expr>:
                    <expr_stmt><expr><call><name>executeDropIndex</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                </case><case>case <expr><name><name>CliParser</name>.<name>NODE_NO_OP</name></name></expr>:
                    <comment type="line">// comment lines come here; they are treated as no ops.</comment>
                    <break>break;</break>
                </case><default>default:
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Invalid Statement (Type: " + <call><name><name>tree</name>.<name>getType</name></name><argument_list>()</argument_list></call> + ")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>sessionState</name>.<name>batch</name></name></expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                    <break>break;</break>
            </default>}</block></switch>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>SchemaDisagreementException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"schema does not match across nodes, (try again later)."</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>cleanupAndExit</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>CliMain</name>.<name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>assumptions</name>.<name>writeAssumptions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>KsDef</name></type> <name>getKSMetaData</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <comment type="line">// Lazily lookup keyspace meta-data.</comment>
        <if>if <condition>(<expr>!(<call><name><name>keyspacesMap</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>keyspacesMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>thriftClient</name>.<name>describe_keyspace</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>assumptions</name>.<name>replayAssumptions</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeHelp</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>tree</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>tree</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>token</name> <init>= <expr><call><name><name>tree</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>CliCommandHelp</name></type> <name>ch</name> <range>: <expr><call><name>getHelp</name><argument_list>()</argument_list></call>.<name>commands</name></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr><call><name><name>token</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ch</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name><name>ch</name>.<name>help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name>getHelp</name><argument_list>()</argument_list></call>.<name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeCount</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>Tree</name></type> <name>columnFamilySpec</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>, <argument><expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call>.<name>cf_defs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnSpecCnt</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>numColumnSpecifiers</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ColumnParent</name></type> <name>colParent</name> <init>= <expr>new <call><name>ColumnParent</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call>.<call><name>setSuper_column</name><argument_list>(<argument><expr>(<name>ByteBuffer</name>) null</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>columnSpecCnt</name> != 0</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>Tree</name></type> <name>columnTree</name> <init>= <expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>superColumn</name> <init>= <expr>(<call><name><name>columnTree</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>FUNCTION_CALL</name></name>)
                                  ? <call><name>convertValueByFunction</name><argument_list>(<argument><expr><name>columnTree</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call>.<call><name>array</name><argument_list>()</argument_list></call>
                                  : <call><name>columnNameAsByteArray</name><argument_list>(<argument><expr><call><name><name>CliCompiler</name>.<name>getColumn</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>colParent</name> = new <call><name>ColumnParent</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call>.<call><name>setSuper_column</name><argument_list>(<argument><expr><name>superColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>SliceRange</name></type> <name>range</name> <init>= <expr>new <call><name>SliceRange</name><argument_list>(<argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>, <argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SlicePredicate</name></type> <name>predicate</name> <init>= <expr>new <call><name>SlicePredicate</name><argument_list>()</argument_list></call>.<call><name>setColumn_names</name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call>.<call><name>setSlice_range</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>thriftClient</name>.<name>get_count</name></name><argument_list>(<argument><expr><call><name>getKeyAsBytes</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>colParent</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"%d columns%n"</expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeDelete</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>Tree</name></type> <name>columnFamilySpec</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>, <argument><expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call>.<name>cf_defs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CfDef</name></type> <name>cfDef</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>key</name> <init>= <expr><call><name>getKeyAsBytes</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnSpecCnt</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>numColumnSpecifiers</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>superColumnName</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>columnName</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isSuper</name> <init>= <expr><call><name><name>cfDef</name>.<name>column_type</name>.<name>equals</name></name><argument_list>(<argument><expr>"Super"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<name>columnSpecCnt</name> &lt; 0) || (<name>columnSpecCnt</name> &gt; 2)</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Invalid row, super column, or column specification."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>Tree</name></type> <name>columnTree</name> <init>= <expr>(<name>columnSpecCnt</name> &gt;= 1)
                           ? <call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call>
                           : null</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Tree</name></type> <name>subColumnTree</name> <init>= <expr>(<name>columnSpecCnt</name> == 2)
                              ? <call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call>
                              : null</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>columnSpecCnt</name> == 1</expr>)</condition><then>
        <block>{
            <assert>assert <expr><name>columnTree</name> != null</expr>;</assert>

            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>columnNameBytes</name> <init>= <expr>(<call><name><name>columnTree</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>FUNCTION_CALL</name></name>)
                                      ? <call><name>convertValueByFunction</name><argument_list>(<argument><expr><name>columnTree</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call>.<call><name>array</name><argument_list>()</argument_list></call>
                                      : <call><name>columnNameAsByteArray</name><argument_list>(<argument><expr><call><name><name>CliCompiler</name>.<name>getColumn</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


            <if>if <condition>(<expr><name>isSuper</name></expr>)</condition><then>
                <expr_stmt><expr><name>superColumnName</name> = <name>columnNameBytes</name></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>columnName</name> = <name>columnNameBytes</name></expr>;</expr_stmt></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>columnSpecCnt</name> == 2</expr>)</condition><then>
        <block>{
            <assert>assert <expr><name>columnTree</name> != null</expr>;</assert>
            <assert>assert <expr><name>subColumnTree</name> != null</expr>;</assert>

            <comment type="line">// table.cf['key']['column']['column']</comment>
            <expr_stmt><expr><name>superColumnName</name> = (<call><name><name>columnTree</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>FUNCTION_CALL</name></name>)
                                      ? <call><name>convertValueByFunction</name><argument_list>(<argument><expr><name>columnTree</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call>.<call><name>array</name><argument_list>()</argument_list></call>
                                      : <call><name>columnNameAsByteArray</name><argument_list>(<argument><expr><call><name><name>CliCompiler</name>.<name>getColumn</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>columnName</name> = (<call><name><name>subColumnTree</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>FUNCTION_CALL</name></name>)
                                         ? <call><name>convertValueByFunction</name><argument_list>(<argument><expr><name>subColumnTree</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call>.<call><name>array</name><argument_list>()</argument_list></call>
                                         : <call><name>subColumnNameAsByteArray</name><argument_list>(<argument><expr><call><name><name>CliCompiler</name>.<name>getColumn</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <decl_stmt><decl><type><name>ColumnPath</name></type> <name>path</name> <init>= <expr>new <call><name>ColumnPath</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>superColumnName</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>path</name>.<name>setSuper_column</name></name><argument_list>(<argument><expr><name>superColumnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><name>columnName</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>path</name>.<name>setColumn</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><call><name>isCounterCF</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>thriftClient</name>.<name>remove_counter</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>thriftClient</name>.<name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s removed."</expr></argument>, <argument><expr>(<name>columnSpecCnt</name> == 0) ? "row" : "column"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doSlice</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>superColumnName</name></decl></param>, <param><decl><type><name>int</name></type> <name>limit</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>NoSuchFieldException</name></expr></argument></throws>
    <block>{

        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name>.<name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnParent</name></type> <name>parent</name> <init>= <expr>new <call><name>ColumnParent</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>superColumnName</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>parent</name>.<name>setSuper_column</name></name><argument_list>(<argument><expr><name>superColumnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>SliceRange</name></type> <name>range</name> <init>= <expr>new <call><name>SliceRange</name><argument_list>(<argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>, <argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SlicePredicate</name></type> <name>predicate</name> <init>= <expr>new <call><name>SlicePredicate</name><argument_list>()</argument_list></call>.<call><name>setColumn_names</name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call>.<call><name>setSlice_range</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>CfDef</name></type> <name>cfDef</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isSuperCF</name> <init>= <expr><call><name><name>cfDef</name>.<name>column_type</name>.<name>equals</name></name><argument_list>(<argument><expr>"Super"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><call><name><name>thriftClient</name>.<name>get_slice</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name></decl>;</decl_stmt>

        <comment type="line">// Print out super columns or columns.</comment>
        <for>for (<init><decl><type><name>ColumnOrSuperColumn</name></type> <name>cosc</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>cosc</name>.<name>isSetSuper_column</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>SuperColumn</name></type> <name>superColumn</name> <init>= <expr><name><name>cosc</name>.<name>super_column</name></name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"=&gt; (super_column=%s,"</expr></argument>, <argument><expr><call><name>formatColumnName</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name><name>superColumn</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>Column</name></type> <name>col</name> <range>: <expr><call><name><name>superColumn</name>.<name>getColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <expr_stmt><expr><name>validator</name> = <call><name>getValidatorForValue</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><call><name><name>col</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"%n     (column=%s, value=%s, timestamp=%d%s)"</expr></argument>, <argument><expr><call><name>formatSubcolumnName</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name><name>col</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name><name>validator</name>.<name>getString</name></name><argument_list>(<argument><expr><name><name>col</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>col</name>.<name>timestamp</name></name></expr></argument>,
                                                    <argument><expr><call><name><name>col</name>.<name>isSetTtl</name></name><argument_list>()</argument_list></call> ? <call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>", ttl=%d"</expr></argument>, <argument><expr><call><name><name>col</name>.<name>getTtl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>

                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>cosc</name>.<name>isSetColumn</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><name><name>cosc</name>.<name>column</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>validator</name> = <call><name>getValidatorForValue</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><call><name><name>column</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>formattedName</name> <init>= <expr><name>isSuperCF</name>
                                       ? <call><name>formatSubcolumnName</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call>
                                       : <call><name>formatColumnName</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"=&gt; (column=%s, value=%s, timestamp=%d%s)%n"</expr></argument>,
                                        <argument><expr><name>formattedName</name></expr></argument>,
                                        <argument><expr><call><name><name>validator</name>.<name>getString</name></name><argument_list>(<argument><expr><name><name>column</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name><name>column</name>.<name>timestamp</name></name></expr></argument>,
                                        <argument><expr><call><name><name>column</name>.<name>isSetTtl</name></name><argument_list>()</argument_list></call> ? <call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>", ttl=%d"</expr></argument>, <argument><expr><call><name><name>column</name>.<name>getTtl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>cosc</name>.<name>isSetCounter_super_column</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>CounterSuperColumn</name></type> <name>superColumn</name> <init>= <expr><name><name>cosc</name>.<name>counter_super_column</name></name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"=&gt; (super_column=%s,"</expr></argument>, <argument><expr><call><name>formatColumnName</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name><name>superColumn</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>CounterColumn</name></type> <name>col</name> <range>: <expr><call><name><name>superColumn</name>.<name>getColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"%n     (counter=%s, value=%s)"</expr></argument>, <argument><expr><call><name>formatSubcolumnName</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name><name>col</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>col</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <comment type="line">// cosc.isSetCounter_column()</comment>
            <block>{
                <decl_stmt><decl><type><name>CounterColumn</name></type> <name>column</name> <init>= <expr><name><name>cosc</name>.<name>counter_column</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>formattedName</name> <init>= <expr><name>isSuperCF</name>
                                       ? <call><name>formatSubcolumnName</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call>
                                       : <call><name>formatColumnName</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"=&gt; (counter=%s, value=%s)%n"</expr></argument>, <argument><expr><name>formattedName</name></expr></argument>, <argument><expr><name><name>column</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if>
        }</block></for>

        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Returned " + <call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call> + " results."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elapsedTime</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getFormatType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>compareWith</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Function</name></type> <name>function</name></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>function</name> = <call><name><name>Function</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>compareWith</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <try>try
            <block>{
                <return>return <expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name>compareWith</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>ce</name></decl></param>)</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>StringBuilder</name></type> <name>errorMessage</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"Unknown comparator '" + <name>compareWith</name> + "'. "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>errorMessage</name>.<name>append</name></name><argument_list>(<argument><expr>"Available functions: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>errorMessage</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>Function</name>.<name>getFunctionNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></catch></try>

        <return>return <expr><call><name><name>function</name>.<name>getValidator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// Execute GET statement</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeGet</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument>, <argument><expr><name>NoSuchFieldException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>
        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name>.<name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tree</name></type> <name>columnFamilySpec</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>, <argument><expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call>.<name>cf_defs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>key</name> <init>= <expr><call><name>getKeyAsBytes</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnSpecCnt</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>numColumnSpecifiers</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CfDef</name></type> <name>cfDef</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isSuper</name> <init>= <expr><call><name><name>cfDef</name>.<name>column_type</name>.<name>equals</name></name><argument_list>(<argument><expr>"Super"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>superColumnName</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Tree</name></type> <name>typeTree</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tree</name></type> <name>limitTree</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr>1000000</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>statement</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> &gt;= 2</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getType</name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>CONVERT_TO_TYPE</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>typeTree</name> = <call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getChild</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>statement</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> == 3</expr>)</condition><then>
                    <expr_stmt><expr><name>limitTree</name> = <call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call>.<call><name>getChild</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>limitTree</name> = <call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getChild</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>

        <if>if <condition>(<expr><name>limitTree</name> != null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>limit</name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>limitTree</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>limit</name> == 0</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"LIMIT should be greater than zero."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// table.cf['key'] -- row slice</comment>
        <if>if <condition>(<expr><name>columnSpecCnt</name> == 0</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>doSlice</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>superColumnName</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then>
        <comment type="line">// table.cf['key']['column'] -- slice of a super, or get of a standard</comment>
        <else>else <if>if <condition>(<expr><name>columnSpecCnt</name> == 1</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>columnName</name> = <call><name>getColumnName</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>isSuper</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>superColumnName</name> = <call><name><name>columnName</name>.<name>array</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>doSlice</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>superColumnName</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
        }</block></then>
        <comment type="line">// table.cf['key']['column']['column'] -- get of a sub-column</comment>
        <else>else <if>if <condition>(<expr><name>columnSpecCnt</name> == 2</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>superColumnName</name> = <call><name>getColumnName</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>columnName</name> = <call><name>getSubColumnName</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <comment type="line">// The parser groks an arbitrary number of these so it is possible to get here.</comment>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Invalid row, super column, or column specification."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></else></if></else></if></else></if>

        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name> <init>= <expr><call><name>getValidatorForValue</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><call><name><name>TBaseHelper</name>.<name>byteBufferToByteArray</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Perform a get()</comment>
        <decl_stmt><decl><type><name>ColumnPath</name></type> <name>path</name> <init>= <expr>new <call><name>ColumnPath</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>superColumnName</name> != null</expr>)</condition><then> <expr_stmt><expr><call><name><name>path</name>.<name>setSuper_column</name></name><argument_list>(<argument><expr><name>superColumnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name><name>path</name>.<name>setColumn</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>isCounterCF</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>doGetCounter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elapsedTime</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>Column</name></type> <name>column</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>column</name> = <call><name><name>thriftClient</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call>.<name>column</name></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NotFoundException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Value was not found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elapsedTime</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></catch></try>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>columnValue</name> <init>= <expr><call><name><name>column</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>valueAsString</name></decl>;</decl_stmt>

        <comment type="line">// we have ^(CONVERT_TO_TYPE &lt;type&gt;) inside of GET statement</comment>
        <comment type="line">// which means that we should try to represent byte[] value according</comment>
        <comment type="line">// to specified type</comment>
        <if>if <condition>(<expr><name>typeTree</name> != null</expr>)</condition><then>
        <block>{
            <comment type="line">// .getText() will give us &lt;type&gt;</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>typeName</name> <init>= <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>typeTree</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// building AbstractType from &lt;type&gt;</comment>
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>valueValidator</name> <init>= <expr><call><name>getFormatType</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// setting value for output</comment>
            <expr_stmt><expr><name>valueAsString</name> = <call><name><name>valueValidator</name>.<name>getString</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>columnValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// updating column value validator class</comment>
            <expr_stmt><expr><call><name>updateColumnMetaData</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><call><name><name>valueValidator</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>valueAsString</name> = (<name>validator</name> == null) ? new <call><name>String</name><argument_list>(<argument><expr><name>columnValue</name></expr></argument>, <argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call> : <call><name><name>validator</name>.<name>getString</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>columnValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>String</name></type> <name>formattedColumnName</name> <init>= <expr><name>isSuper</name>
                                     ? <call><name>formatSubcolumnName</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call>
                                     : <call><name>formatColumnName</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// print results</comment>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"=&gt; (column=%s, value=%s, timestamp=%d%s)%n"</expr></argument>,
                                <argument><expr><name>formattedColumnName</name></expr></argument>,
                                <argument><expr><name>valueAsString</name></expr></argument>,
                                <argument><expr><name><name>column</name>.<name>timestamp</name></name></expr></argument>,
                                <argument><expr><call><name><name>column</name>.<name>isSetTtl</name></name><argument_list>()</argument_list></call> ? <call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>", ttl=%d"</expr></argument>, <argument><expr><call><name><name>column</name>.<name>getTtl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elapsedTime</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doGetCounter</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnPath</name></type> <name>path</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument>, <argument><expr><name>NoSuchFieldException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>isSuper</name> <init>= <expr><name><name>path</name>.<name>super_column</name></name> != null</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>CounterColumn</name></type> <name>column</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>column</name> = <call><name><name>thriftClient</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call>.<name>counter_column</name></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NotFoundException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Value was not found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></catch></try>

        <decl_stmt><decl><type><name>String</name></type> <name>formattedColumnName</name> <init>= <expr><name>isSuper</name>
                                     ? <call><name>formatSubcolumnName</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name><name>path</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call>
                                     : <call><name>formatColumnName</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name><name>path</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// print results</comment>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"=&gt; (counter=%s, value=%d)%n"</expr></argument>,
                                <argument><expr><name>formattedColumnName</name></expr></argument>,
                                <argument><expr><name><name>column</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Process get operation with conditions (using Thrift get_indexed_slices method)
     * @param statement - tree representation of the current statement
     * Format: ^(NODE_THRIFT_GET_WITH_CONDITIONS cf ^(CONDITIONS ^(CONDITION &gt;= column1 value1) ...) ^(NODE_LIMIT int)*)
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeGetWithConditions</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name>.<name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>IndexClause</name></type> <name>clause</name> <init>= <expr>new <call><name>IndexClause</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call>.<name>cf_defs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// ^(CONDITIONS ^(CONDITION $column $value) ...)</comment>
        <decl_stmt><decl><type><name>Tree</name></type> <name>conditions</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// fetching column family definition</comment>
        <decl_stmt><decl><type><name>CfDef</name></type> <name>columnFamilyDef</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// fetching all columns</comment>
        <decl_stmt><decl><type><name>SlicePredicate</name></type> <name>predicate</name> <init>= <expr>new <call><name>SlicePredicate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SliceRange</name></type> <name>sliceRange</name> <init>= <expr>new <call><name>SliceRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sliceRange</name>.<name>setStart</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>.<call><name>setFinish</name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>predicate</name>.<name>setSlice_range</name></name><argument_list>(<argument><expr><name>sliceRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>conditions</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <comment type="line">// ^(CONDITION operator $column $value)</comment>
            <decl_stmt><decl><type><name>Tree</name></type> <name>condition</name> <init>= <expr><call><name><name>conditions</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// =, &gt;, &gt;=, &lt;, &lt;=</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>operator</name> <init>= <expr><call><name><name>condition</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>columnNameString</name>  <init>= <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>condition</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// it could be a basic string or function call</comment>
            <decl_stmt><decl><type><name>Tree</name></type> <name>valueTree</name> <init>= <expr><call><name><name>condition</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <try>try
            <block>{
                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>value</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>columnName</name> <init>= <expr><call><name>columnNameAsBytes</name><argument_list>(<argument><expr><name>columnNameString</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>valueTree</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>FUNCTION_CALL</name></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>value</name> = <call><name>convertValueByFunction</name><argument_list>(<argument><expr><name>valueTree</name></expr></argument>, <argument><expr><name>columnFamilyDef</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>valueString</name> <init>= <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>valueTree</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>value</name> = <call><name>columnValueAsBytes</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>valueString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <comment type="line">// index operator from string</comment>
                <decl_stmt><decl><type><name>IndexOperator</name></type> <name>idxOperator</name> <init>= <expr><call><name><name>CliUtils</name>.<name>getIndexOperator</name></name><argument_list>(<argument><expr><name>operator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// adding new index expression into index clause</comment>
                <expr_stmt><expr><call><name><name>clause</name>.<name>addToExpressions</name></name><argument_list>(<argument><expr>new <call><name>IndexExpression</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>idxOperator</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></for>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>KeySlice</name></argument>&gt;</argument_list></name></type> <name>slices</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clause</name>.<name>setStart_key</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// when we have ^(NODE_LIMIT Integer)</comment>
        <if>if <condition>(<expr><call><name><name>statement</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> == 3</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>Tree</name></type> <name>limitNode</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>limitValue</name> <init>= <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>limitNode</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>limitValue</name> == 0</expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"LIMIT should be greater than zero."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>clause</name>.<name>setCount</name></name><argument_list>(<argument><expr><name>limitValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>ColumnParent</name></type> <name>parent</name> <init>= <expr>new <call><name>ColumnParent</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>slices</name> = <call><name><name>thriftClient</name>.<name>get_indexed_slices</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printSliceList</name><argument_list>(<argument><expr><name>columnFamilyDef</name></expr></argument>, <argument><expr><name>slices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name>elapsedTime</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Execute SET statement</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeSet</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>NoSuchFieldException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name>.<name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// ^(NODE_COLUMN_ACCESS &lt;cf&gt; &lt;key&gt; &lt;column&gt;)</comment>
        <decl_stmt><decl><type><name>Tree</name></type> <name>columnFamilySpec</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tree</name></type> <name>keyTree</name> <init>= <expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// could be a function or regular text</comment>

        <decl_stmt><decl><type><name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>, <argument><expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call>.<name>cf_defs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CfDef</name></type> <name>cfDef</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnSpecCnt</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>numColumnSpecifiers</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tree</name></type> <name>valueTree</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>superColumnName</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl>;</decl_stmt>

        <comment type="line">// table.cf['key']</comment>
        <if>if <condition>(<expr><name>columnSpecCnt</name> == 0</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"No column name specified, (type 'help;' or '?' for help on syntax)."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then>
        <comment type="line">// table.cf['key']['column'] = 'value'</comment>
        <else>else <if>if <condition>(<expr><name>columnSpecCnt</name> == 1</expr>)</condition><then>
        <block>{
            <comment type="line">// get the column name</comment>
            <if>if <condition>(<expr><call><name><name>cfDef</name>.<name>column_type</name>.<name>equals</name></name><argument_list>(<argument><expr>"Super"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Column family " + <name>columnFamily</name> + " may only contain SuperColumns"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
            <expr_stmt><expr><name>columnName</name> = <call><name>getColumnName</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <comment type="line">// table.cf['key']['super_column']['column'] = 'value'</comment>
        <else>else
        <block>{
            <assert>assert <expr>(<name>columnSpecCnt</name> == 2) : "serious parsing error (this is a bug)."</expr>;</assert>

            <expr_stmt><expr><name>superColumnName</name> = <call><name>getColumnName</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>columnName</name> = <call><name>getSubColumnName</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>columnValueInBytes</name></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><call><name><name>valueTree</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{
        <case>case <expr><name><name>CliParser</name>.<name>FUNCTION_CALL</name></name></expr>:
            <expr_stmt><expr><name>columnValueInBytes</name> = <call><name>convertValueByFunction</name><argument_list>(<argument><expr><name>valueTree</name></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><default>default:
            <expr_stmt><expr><name>columnValueInBytes</name> = <call><name>columnValueAsBytes</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </default>}</block></switch>

        <decl_stmt><decl><type><name>ColumnParent</name></type> <name>parent</name> <init>= <expr>new <call><name>ColumnParent</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>superColumnName</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>parent</name>.<name>setSuper_column</name></name><argument_list>(<argument><expr><name>superColumnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>Column</name></type> <name>columnToInsert</name> <init>= <expr>new <call><name>Column</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>columnValueInBytes</name></expr></argument>)</argument_list></call>.<call><name>setTimestamp</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// children count = 3 mean that we have ttl in arguments</comment>
        <if>if <condition>(<expr><call><name><name>statement</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> == 3</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>ttl</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>columnToInsert</name>.<name>setTtl</name></name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"TTL '%s' is invalid, should be a positive integer."</expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>

        <comment type="line">// do the insert</comment>
        <expr_stmt><expr><call><name><name>thriftClient</name>.<name>insert</name></name><argument_list>(<argument><expr><call><name>getKeyAsBytes</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>keyTree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>columnToInsert</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Value inserted."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elapsedTime</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Execute INCR statement</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeIncr</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>, <param><decl><type><name>long</name></type> <name>multiplier</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument>, <argument><expr><name>NoSuchFieldException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>Tree</name></type> <name>columnFamilySpec</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>, <argument><expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call>.<name>cf_defs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>key</name> <init>= <expr><call><name>getKeyAsBytes</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnSpecCnt</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>numColumnSpecifiers</name></name><argument_list>(<argument><expr><name>columnFamilySpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>superColumnName</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl>;</decl_stmt>

        <comment type="line">// table.cf['key']['column'] -- incr standard</comment>
        <if>if <condition>(<expr><name>columnSpecCnt</name> == 1</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>columnName</name> = <call><name>getColumnName</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <comment type="line">// table.cf['key']['column']['column'] -- incr super</comment>
        <else>else <if>if <condition>(<expr><name>columnSpecCnt</name> == 2</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>superColumnName</name> = <call><name>getColumnName</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>columnName</name> = <call><name>getSubColumnName</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>columnFamilySpec</name>.<name>getChild</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <comment type="line">// The parser groks an arbitrary number of these so it is possible to get here.</comment>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Invalid row, super column, or column specification."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></else></if></else></if>

        <decl_stmt><decl><type><name>ColumnParent</name></type> <name>parent</name> <init>= <expr>new <call><name>ColumnParent</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>superColumnName</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>parent</name>.<name>setSuper_column</name></name><argument_list>(<argument><expr><name>superColumnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>value</name> <init>= <expr>1L</expr></init></decl>;</decl_stmt>

        <comment type="line">// children count = 3 mean that we have by in arguments</comment>
        <if>if <condition>(<expr><call><name><name>statement</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> == 2</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>byValue</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <try>try
            <block>{
                <expr_stmt><expr><name>value</name> = <call><name><name>Long</name>.<name>parseLong</name></name><argument_list>(<argument><expr><name>byValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"'%s' is an invalid value, should be an integer."</expr></argument>, <argument><expr><name>byValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>

        <decl_stmt><decl><type><name>CounterColumn</name></type> <name>columnToInsert</name> <init>= <expr>new <call><name>CounterColumn</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>multiplier</name> * <name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// do the insert</comment>
        <expr_stmt><expr><call><name><name>thriftClient</name>.<name>add</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>columnToInsert</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"Value %s%n"</expr></argument>, <argument><expr><name>multiplier</name> &lt; 0 ? "decremented." : "incremented."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeShowClusterName</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>thriftClient</name>.<name>describe_cluster_name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Add a keyspace
     * @param statement - a token tree representing current statement
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeAddKeySpace</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
    <block>{

        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <comment type="line">// first value is the keyspace name, after that it is all key=value</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>KsDef</name></type> <name>ksDef</name> <init>= <expr>new <call><name>KsDef</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>DEFAULT_PLACEMENT_STRATEGY</name></expr></argument>, <argument><expr>new <call><name><name>LinkedList</name><argument_list>&lt;<argument><name>CfDef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>mySchemaVersion</name> <init>= <expr><call><name><name>thriftClient</name>.<name>system_add_keyspace</name></name><argument_list>(<argument><expr><call><name>updateKsDefAttributes</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>ksDef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>mySchemaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>validateSchemaIsSettled</name><argument_list>(<argument><expr><name>mySchemaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>keyspacesMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><call><name><name>thriftClient</name>.<name>describe_keyspace</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Add a column family
     * @param statement - a token tree representing current statement
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeAddColumnFamily</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <comment type="line">// first value is the column family name, after that it is all key=value</comment>
        <decl_stmt><decl><type><name>CfDef</name></type> <name>cfDef</name> <init>= <expr>new <call><name>CfDef</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>mySchemaVersion</name> <init>= <expr><call><name><name>thriftClient</name>.<name>system_add_column_family</name></name><argument_list>(<argument><expr><call><name>updateCfDefAttributes</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>mySchemaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>validateSchemaIsSettled</name><argument_list>(<argument><expr><name>mySchemaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>keyspacesMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><call><name><name>thriftClient</name>.<name>describe_keyspace</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update existing keyspace identified by name
     * @param statement - tree represeting statement
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeUpdateKeySpace</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getKeySpace</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><call><name><name>thriftClient</name>.<name>describe_keyspaces</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>KsDef</name></type> <name>currentKsDef</name> <init>= <expr><call><name>getKSMetaData</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>KsDef</name></type> <name>updatedKsDef</name> <init>= <expr><call><name>updateKsDefAttributes</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>currentKsDef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>mySchemaVersion</name> <init>= <expr><call><name><name>thriftClient</name>.<name>system_update_keyspace</name></name><argument_list>(<argument><expr><name>updatedKsDef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>mySchemaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>validateSchemaIsSettled</name><argument_list>(<argument><expr><name>mySchemaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>keyspacesMap</name>.<name>remove</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getKSMetaData</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update existing column family identified by name
     * @param statement - tree represeting statement
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeUpdateColumnFamily</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>cfName</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call>.<name>cf_defs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <comment type="line">// request correct cfDef from the server</comment>
            <decl_stmt><decl><type><name>CfDef</name></type> <name>cfDef</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><call><name><name>thriftClient</name>.<name>describe_keyspace</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>keySpace</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>cfDef</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Column Family " + <name>cfName</name> + " was not found in the current keyspace."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>String</name></type> <name>mySchemaVersion</name> <init>= <expr><call><name><name>thriftClient</name>.<name>system_update_column_family</name></name><argument_list>(<argument><expr><call><name>updateCfDefAttributes</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>mySchemaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>validateSchemaIsSettled</name><argument_list>(<argument><expr><name>mySchemaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>keyspacesMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><call><name><name>thriftClient</name>.<name>describe_keyspace</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Used to update keyspace definition attributes
     * @param statement - ANTRL tree representing current statement
     * @param ksDefToUpdate - keyspace definition to update
     * @return ksDef - updated keyspace definition
     */</comment>
    <function><type><specifier>private</specifier> <name>KsDef</name></type> <name>updateKsDefAttributes</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>, <param><decl><type><name>KsDef</name></type> <name>ksDefToUpdate</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>KsDef</name></type> <name>ksDef</name> <init>= <expr>new <call><name>KsDef</name><argument_list>(<argument><expr><name>ksDefToUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// removing all column definitions - thrift system_update_keyspace method requires that</comment>
        <expr_stmt><expr><call><name><name>ksDef</name>.<name>setCf_defs</name></name><argument_list>(<argument><expr>new <call><name><name>LinkedList</name><argument_list>&lt;<argument><name>CfDef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>statement</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name> += 2</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>currentStatement</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AddKeyspaceArgument</name></type> <name>mArgument</name> <init>= <expr><call><name><name>AddKeyspaceArgument</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>currentStatement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>mValue</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <switch>switch<condition>(<expr><name>mArgument</name></expr>)</condition>
            <block>{
            <case>case <expr><name>PLACEMENT_STRATEGY</name></expr>:
                <expr_stmt><expr><call><name><name>ksDef</name>.<name>setStrategy_class</name></name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>STRATEGY_OPTIONS</name></expr>:
                <expr_stmt><expr><call><name><name>ksDef</name>.<name>setStrategy_options</name></name><argument_list>(<argument><expr><call><name>getStrategyOptionsFromTree</name><argument_list>(<argument><expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>DURABLE_WRITES</name></expr>:
                <expr_stmt><expr><call><name><name>ksDef</name>.<name>setDurable_writes</name></name><argument_list>(<argument><expr><call><name><name>Boolean</name>.<name>parseBoolean</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <comment type="line">//must match one of the above or we'd throw an exception at the valueOf statement above.</comment>
                <assert>assert<expr>(false)</expr>;</assert>
            </default>}</block></switch>
        }</block></for>

        <comment type="line">// using default snitch options if strategy is NetworkTopologyStrategy and no options were set.</comment>
        <if>if <condition>(<expr><call><name><name>ksDef</name>.<name>getStrategy_class</name></name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr>".NetworkTopologyStrategy"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>currentStrategyOptions</name> <init>= <expr><call><name><name>ksDef</name>.<name>getStrategy_options</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// adding default data center from SimpleSnitch</comment>
            <if>if <condition>(<expr><name>currentStrategyOptions</name> == null || <call><name><name>currentStrategyOptions</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>SimpleSnitch</name></type> <name>snitch</name> <init>= <expr>new <call><name>SimpleSnitch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try
                <block>{
                    <expr_stmt><expr><call><name><name>options</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><call><name><name>InetAddress</name>.<name>getLocalHost</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
                <expr_stmt><expr><call><name><name>ksDef</name>.<name>setStrategy_options</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <return>return <expr><name>ksDef</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update column family definition attributes
     * @param statement - ANTLR tree representing current statement
     * @param cfDefToUpdate - column family definition to apply updates on
     * @return cfDef - updated column family definition
     */</comment>
    <function><type><specifier>private</specifier> <name>CfDef</name></type> <name>updateCfDefAttributes</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>, <param><decl><type><name>CfDef</name></type> <name>cfDefToUpdate</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>CfDef</name></type> <name>cfDef</name> <init>= <expr>new <call><name>CfDef</name><argument_list>(<argument><expr><name>cfDefToUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>statement</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name> += 2</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>currentArgument</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ColumnFamilyArgument</name></type> <name>mArgument</name> <init>= <expr><call><name><name>ColumnFamilyArgument</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>currentArgument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>mValue</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <switch>switch<condition>(<expr><name>mArgument</name></expr>)</condition>
            <block>{
            <case>case <expr><name>COLUMN_TYPE</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setColumn_type</name></name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>COMPARATOR</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setComparator_type</name></name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>SUBCOMPARATOR</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setSubcomparator_type</name></name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>COMMENT</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setComment</name></name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>READ_REPAIR_CHANCE</name></expr>:
                <decl_stmt><decl><type><name>double</name></type> <name>chance</name> <init>= <expr><call><name><name>Double</name>.<name>parseDouble</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name><name>chance</name> <argument_list>&lt; <argument>0 || <name>chance</name></argument> &gt;</argument_list></name> 1</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Error: read_repair_chance must be between 0 and 1."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setRead_repair_chance</name></name><argument_list>(<argument><expr><name>chance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>DCLOCAL_READ_REPAIR_CHANCE</name></expr>:
                <decl_stmt><decl><type><name>double</name></type> <name>localChance</name> <init>= <expr><call><name><name>Double</name>.<name>parseDouble</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name><name>localChance</name> <argument_list>&lt; <argument>0 || <name>localChance</name></argument> &gt;</argument_list></name> 1</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Error: dclocal_read_repair_chance must be between 0 and 1."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setDclocal_read_repair_chance</name></name><argument_list>(<argument><expr><name>localChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>GC_GRACE</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setGc_grace_seconds</name></name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>COLUMN_METADATA</name></expr>:
                <decl_stmt><decl><type><name>Tree</name></type> <name>arrayOfMetaAttributes</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>arrayOfMetaAttributes</name>.<name>getText</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"ARRAY"</expr></argument>)</argument_list></call></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"'column_metadata' format - [{ k:v, k:v, ..}, { ... }, ...]"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setColumn_metadata</name></name><argument_list>(<argument><expr><call><name>getCFColumnMetaFromTree</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>arrayOfMetaAttributes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>MEMTABLE_OPERATIONS</name></expr>:
                <break>break;</break>
            </case><case>case <expr><name>MEMTABLE_THROUGHPUT</name></expr>:
                <break>break;</break>
            </case><case>case <expr><name>DEFAULT_VALIDATION_CLASS</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setDefault_validation_class</name></name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>MIN_COMPACTION_THRESHOLD</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setMin_compaction_threshold</name></name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>MAX_COMPACTION_THRESHOLD</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setMax_compaction_threshold</name></name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>REPLICATE_ON_WRITE</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setReplicate_on_write</name></name><argument_list>(<argument><expr><call><name><name>Boolean</name>.<name>parseBoolean</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>KEY_VALIDATION_CLASS</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setKey_validation_class</name></name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>COMPACTION_STRATEGY</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setCompaction_strategy</name></name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>COMPACTION_STRATEGY_OPTIONS</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setCompaction_strategy_options</name></name><argument_list>(<argument><expr><call><name>getStrategyOptionsFromTree</name><argument_list>(<argument><expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>i</name>+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>COMPRESSION_OPTIONS</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setCompression_options</name></name><argument_list>(<argument><expr><call><name>getStrategyOptionsFromTree</name><argument_list>(<argument><expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>i</name>+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>BLOOM_FILTER_FP_CHANCE</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setBloom_filter_fp_chance</name></name><argument_list>(<argument><expr><call><name><name>Double</name>.<name>parseDouble</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>CACHING</name></expr>:
                <expr_stmt><expr><call><name><name>cfDef</name>.<name>setCaching</name></name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <comment type="line">//must match one of the above or we'd throw an exception at the valueOf statement above.</comment>
                <assert>assert<expr>(false)</expr>;</assert>

            </default>}</block></switch>
        }</block></for>

        <return>return <expr><name>cfDef</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Delete a keyspace
     * @param statement - a token tree representing current statement
     * @throws TException - exception
     * @throws InvalidRequestException - exception
     * @throws NotFoundException - exception
     * @throws SchemaDisagreementException
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeDelKeySpace</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getKeySpace</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><call><name><name>thriftClient</name>.<name>describe_keyspaces</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>version</name> <init>= <expr><call><name><name>thriftClient</name>.<name>system_drop_keyspace</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validateSchemaIsSettled</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>keyspaceName</name>.<name>equals</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call></expr>)</condition><then> <comment type="line">//we just deleted the keyspace we were authenticated too</comment>
            <expr_stmt><expr><name>keySpace</name> = null</expr>;</expr_stmt></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Delete a column family
     * @param statement - a token tree representing current statement
     * @throws TException - exception
     * @throws InvalidRequestException - exception
     * @throws NotFoundException - exception
     * @throws SchemaDisagreementException
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeDelColumnFamily</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>cfName</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call>.<name>cf_defs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>mySchemaVersion</name> <init>= <expr><call><name><name>thriftClient</name>.<name>system_drop_column_family</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>mySchemaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validateSchemaIsSettled</name><argument_list>(<argument><expr><name>mySchemaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeList</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>NoSuchFieldException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>CharacterCodingException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name>.<name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// extract column family</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call>.<name>cf_defs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>rawStartKey</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>rawEndKey</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>limitCount</name> <init>= <expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// will reset to default later if it's not specified</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// will reset to default later if it's not specified</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>reversed</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

        <comment type="line">// optional arguments: key range and limit</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>statement</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>Tree</name></type> <name>child</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>child</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>NODE_KEY_RANGE</name></name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><call><name><name>child</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>rawStartKey</name> = <call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>child</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>child</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then>
                        <expr_stmt><expr><name>rawEndKey</name> = <call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>child</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></then></if>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>child</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>NODE_LIMIT</name></name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><call><name><name>child</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> != 1</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Invalid limit clause"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></then></if>

                <expr_stmt><expr><name>limitCount</name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>child</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>limitCount</name> &lt;= 0</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Invalid limit " + <name>limitCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></then></if>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>child</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>NODE_COLUMNS</name></name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr>(<call><name><name>child</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> &lt; 1) || (<call><name><name>child</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> &gt; 2)</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Invalid columns clause."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></then></if>

                <decl_stmt><decl><type><name>String</name></type> <name>columns</name> <init>= <expr><call><name><name>child</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <try>try
                <block>{
                    <expr_stmt><expr><name>columnCount</name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>columnCount</name> &lt; 0</expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Invalid column limit: " + <name>columnCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>
                    }</block></then></if>

                    <if>if <condition>(<expr><call><name><name>child</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> == 2</expr>)</condition><then>
                        <expr_stmt><expr><name>reversed</name> = <call><name><name>child</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getType</name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>NODE_REVERSED</name></name></expr>;</expr_stmt></then></if>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>nfe</name></decl></param>)</parameter_list>
                <block>{
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Invalid column number format: " + <name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></catch></try>
            }</block></then></if></else></if></else></if>
        }</block></for>

        <if>if <condition>(<expr><name>limitCount</name> == <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>limitCount</name> = 100</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Using default limit of 100"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>columnCount</name> == <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>columnCount</name> = 100</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Using default column limit of 100"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>


        <decl_stmt><decl><type><name>CfDef</name></type> <name>columnFamilyDef</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// read all columns and superColumns</comment>
        <decl_stmt><decl><type><name>SlicePredicate</name></type> <name>predicate</name> <init>= <expr>new <call><name>SlicePredicate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SliceRange</name></type> <name>sliceRange</name> <init>= <expr>new <call><name>SliceRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sliceRange</name>.<name>setStart</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>.<call><name>setFinish</name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sliceRange</name>.<name>setCount</name></name><argument_list>(<argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sliceRange</name>.<name>setReversed</name></name><argument_list>(<argument><expr><name>reversed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>predicate</name>.<name>setSlice_range</name></name><argument_list>(<argument><expr><name>sliceRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// set the key range</comment>
        <decl_stmt><decl><type><name>KeyRange</name></type> <name>range</name> <init>= <expr>new <call><name>KeyRange</name><argument_list>(<argument><expr><name>limitCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyComparator</name> <init>= <expr><call><name><name>this</name>.<name>cfKeysComparators</name>.<name>get</name></name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>startKey</name> <init>= <expr><call><name><name>rawStartKey</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? <name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name> : <call><name>getBytesAccordingToType</name><argument_list>(<argument><expr><name>rawStartKey</name></expr></argument>, <argument><expr><name>keyComparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>endKey</name> <init>= <expr><call><name><name>rawEndKey</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? <name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name> : <call><name>getBytesAccordingToType</name><argument_list>(<argument><expr><name>rawEndKey</name></expr></argument>, <argument><expr><name>keyComparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>range</name>.<name>setStart_key</name></name><argument_list>(<argument><expr><name>startKey</name></expr></argument>)</argument_list></call>.<call><name>setEnd_key</name><argument_list>(<argument><expr><name>endKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ColumnParent</name></type> <name>columnParent</name> <init>= <expr>new <call><name>ColumnParent</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>KeySlice</name></argument>&gt;</argument_list></name></type> <name>keySlices</name> <init>= <expr><call><name><name>thriftClient</name>.<name>get_range_slices</name></name><argument_list>(<argument><expr><name>columnParent</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printSliceList</name><argument_list>(<argument><expr><name>columnFamilyDef</name></expr></argument>, <argument><expr><name>keySlices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elapsedTime</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// DROP INDEX ON &lt;CF&gt;.&lt;COLUMN&gt;</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeDropIndex</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <comment type="line">// getColumnFamily will check if CF exists for us</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call>.<name>cf_defs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>rawColumName</name> <init>= <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>CfDef</name></type> <name>cfDef</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>columnName</name> <init>= <expr><call><name>columnNameAsBytes</name><argument_list>(<argument><expr><name>rawColumName</name></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>foundColumn</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>ColumnDef</name></type> <name>column</name> <range>: <expr><call><name><name>cfDef</name>.<name>getColumn_metadata</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>column</name>.<name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>foundColumn</name> = true</expr>;</expr_stmt>

                <if>if <condition>(<expr><call><name><name>column</name>.<name>getIndex_type</name></name><argument_list>()</argument_list></call> == null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Column '%s' does not have an index."</expr></argument>, <argument><expr><name>rawColumName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <expr_stmt><expr><call><name><name>column</name>.<name>setIndex_name</name></name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>column</name>.<name>setIndex_type</name></name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr>!<name>foundColumn</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Column '%s' definition was not found in ColumnFamily '%s'."</expr></argument>,
                                                     <argument><expr><name>rawColumName</name></expr></argument>,
                                                     <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>mySchemaVersion</name> <init>= <expr><call><name><name>thriftClient</name>.<name>system_update_column_family</name></name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>mySchemaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validateSchemaIsSettled</name><argument_list>(<argument><expr><name>mySchemaVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspacesMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><call><name><name>thriftClient</name>.<name>describe_keyspace</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// TRUNCATE &lt;columnFamily&gt;</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeTruncate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <comment type="line">// getting CfDef, it will fail if there is no such column family in current keySpace.</comment>
        <decl_stmt><decl><type><name>CfDef</name></type> <name>cfDef</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><call><name><name>CliCompiler</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call>.<name>cf_defs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>thriftClient</name>.<name>truncate</name></name><argument_list>(<argument><expr><call><name><name>cfDef</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>columnFamily</name> + " truncated."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Command: CONSISTENCYLEVEL AS (ONE | QUORUM ...)
     * Tree: ^(NODE_CONSISTENCY_LEVEL AS (ONE | QUORUM ...))
     * @param statement - tree representing current statement
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeConsistencyLevelStatement</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>userSuppliedLevel</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>consistencyLevel</name> = <call><name><name>ConsistencyLevel</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>userSuppliedLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>elements</name> <init>= <expr>"ONE, TWO, THREE, QUORUM, ALL, LOCAL_QUORUM, EACH_QUORUM, ANY"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"'%s' is invalid. Available: %s"</expr></argument>, <argument><expr><name>userSuppliedLevel</name></expr></argument>, <argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></catch></try>

        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Consistency level is set to '%s'."</expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Command: ASSUME &lt;columnFamily&gt; (VALIDATOR | COMPARATOR | KEYS | SUB_COMPARATOR) AS &lt;type&gt;
     * Tree: ^(NODE_ASSUME &lt;columnFamily&gt; (VALIDATOR | COMPARATOR | KEYS | SUB_COMPARATOR) &lt;type&gt;))
     * @param statement - tree representing current statement
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeAssumeStatement</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>cfName</name> <init>= <expr><call><name><name>CliCompiler</name>.<name>getColumnFamily</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call>.<name>cf_defs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// VALIDATOR | COMPARATOR | KEYS | SUB_COMPARATOR</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>assumptionElement</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


        <comment type="line">// Could be UTF8Type, IntegerType, LexicalUUIDType etc.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>defaultType</name> <init>= <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><call><name>applyAssumption</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>assumptionElement</name></expr></argument>, <argument><expr><name>defaultType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>assumptions</name>.<name>addAssumption</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>assumptionElement</name></expr></argument>, <argument><expr><name>defaultType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Assumption for column family '%s' added successfully."</expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>applyAssumption</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name>String</name></type> <name>assumptionElement</name></decl></param>, <param><decl><type><name>String</name></type> <name>defaultType</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>CfDef</name></type> <name>columnFamily</name></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>columnFamily</name> = <call><name>getCfDef</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>RuntimeException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>false</expr>;</return> <comment type="line">// just fail if CF does not exist</comment>
        }</block></catch></try>

        <comment type="line">// used to store in this.cfKeysComparator</comment>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl>;</decl_stmt>
        
        <try>try
        <block>{
            <expr_stmt><expr><name>comparator</name> = <call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name>defaultType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><name>comparator</name> = <call><name><name>Function</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>defaultType</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getValidator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>ne</name></decl></param>)</parameter_list>
            <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>functions</name> <init>= <expr><call><name><name>Function</name>.<name>getFunctionNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Type '" + <name>defaultType</name> + "' was not found. Available: " + <name>functions</name>
                                         + " Or any class which extends o.a.c.db.marshal.AbstractType."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>false</expr>;</return>
            }</block></catch></try>
        }</block></catch></try>

        <comment type="line">// making string representation look property e.g. o.a.c.db.marshal.UTF8Type</comment>
        <expr_stmt><expr><name>defaultType</name> = <call><name><name>comparator</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>assumptionElement</name>.<name>equals</name></name><argument_list>(<argument><expr>"COMPARATOR"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>columnFamily</name>.<name>setComparator_type</name></name><argument_list>(<argument><expr><name>defaultType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>assumptionElement</name>.<name>equals</name></name><argument_list>(<argument><expr>"SUB_COMPARATOR"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>columnFamily</name>.<name>setSubcomparator_type</name></name><argument_list>(<argument><expr><name>defaultType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>assumptionElement</name>.<name>equals</name></name><argument_list>(<argument><expr>"VALIDATOR"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>columnFamily</name>.<name>setDefault_validation_class</name></name><argument_list>(<argument><expr><name>defaultType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>assumptionElement</name>.<name>equals</name></name><argument_list>(<argument><expr>"KEYS"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>cfKeysComparators</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>columnFamily</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>elements</name> <init>= <expr>"VALIDATOR, COMPARATOR, KEYS, SUB_COMPARATOR."</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"'%s' is invalid. Available: %s"</expr></argument>, <argument><expr><name>assumptionElement</name></expr></argument>, <argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></else></if></else></if></else></if></else></if>

        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="line">// SHOW API VERSION</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeShowVersion</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>thriftClient</name>.<name>describe_version</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// SHOW KEYSPACES</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeShowKeySpaces</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>KsDef</name></argument>&gt;</argument_list></name></type> <name>keySpaces</name> <init>= <expr><call><name><name>thriftClient</name>.<name>describe_keyspaces</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>keySpaces</name></expr></argument>, <argument><expr>new <call><name>KsDefNamesComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>KsDef</name></type> <name>keySpace</name> <range>: <expr><name>keySpaces</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name>describeKeySpace</name><argument_list>(<argument><expr><name><name>keySpace</name>.<name>name</name></name></expr></argument>, <argument><expr><name>keySpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="line">// SHOW SCHEMA</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeShowSchema</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>KsDef</name></argument>&gt;</argument_list></name></type> <name>keyspaces</name> <init>= <expr><call><name><name>thriftClient</name>.<name>describe_keyspaces</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>keyspaces</name></expr></argument>, <argument><expr>new <call><name>KsDefNamesComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>keyspaceName</name> <init>= <expr>(<call><name><name>statement</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> == 0)
                                ? <name>keySpace</name>
                                : <call><name><name>CliCompiler</name>.<name>getKeySpace</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>keyspaces</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>KsDef</name></argument>&gt;</argument_list></name></type> <name>ksIter</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>keyspaceName</name> != null</expr>)</condition><then>
            <expr_stmt><expr><name>ksIter</name> = <call><name><name>Collections2</name>.<name>filter</name></name><argument_list>(<argument><expr><name>keyspaces</name></expr></argument>, <argument><expr>new <class><super><name><name>Predicate</name><argument_list>&lt;<argument><name>KsDef</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>boolean</name></type> <name>apply</name><parameter_list>(<param><decl><type><name>KsDef</name></type> <name>ksDef</name></decl></param>)</parameter_list>
                <block>{
                    <return>return <expr><call><name><name>keyspaceName</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ksDef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>ksIter</name> = <call><name><name>keyspaces</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>

        <while>while <condition>(<expr><call><name><name>ksIter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <expr_stmt><expr><call><name>showKeyspace</name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>out</name></name></expr></argument>, <argument><expr><call><name><name>ksIter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>

        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a CLI script to create the Keyspace it's Column Families
     *
     * @param output StringBuilder to write to.
     * @param ksDef KsDef to create the cli script for.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>showKeyspace</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>output</name></decl></param>, <param><decl><type><name>KsDef</name></type> <name>ksDef</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>"create keyspace "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>maybeEscapeName</name></name><argument_list>(<argument><expr><name><name>ksDef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"placement_strategy"</expr></argument>, <argument><expr><call><name>normaliseType</name><argument_list>(<argument><expr><name><name>ksDef</name>.<name>strategy_class</name></name></expr></argument>, <argument><expr>"org.apache.cassandra.locator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>ksDef</name>.<name>strategy_options</name></name> != null &amp;&amp; !<call><name><name>ksDef</name>.<name>strategy_options</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>opts</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>opts</name>.<name>append</name></name><argument_list>(<argument><expr>"{"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>opt</name> <range>: <expr><call><name><name>ksDef</name>.<name>strategy_options</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>opts</name>.<name>append</name></name><argument_list>(<argument><expr><name>prefix</name> + <call><name><name>CliUtils</name>.<name>escapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>opt</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + " : " + <call><name><name>CliUtils</name>.<name>escapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>opt</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>prefix</name> = ", "</expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>opts</name>.<name>append</name></name><argument_list>(<argument><expr>"}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeAttrRaw</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"strategy_options"</expr></argument>, <argument><expr><call><name><name>opts</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"durable_writes"</expr></argument>, <argument><expr><name><name>ksDef</name>.<name>durable_writes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>";"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>"use " + <call><name><name>CliUtils</name>.<name>maybeEscapeName</name></name><argument_list>(<argument><expr><name><name>ksDef</name>.<name>name</name></name></expr></argument>)</argument_list></call> + ";"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name><name>ksDef</name>.<name>cf_defs</name></name></expr></argument>, <argument><expr>new <call><name>CfDefNamesComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>CfDef</name></type> <name>cfDef</name> <range>: <expr><name><name>ksDef</name>.<name>cf_defs</name></name></expr></range></decl></init>)
            <expr_stmt><expr><call><name>showColumnFamily</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a CLI script for the CfDef including meta data to the supplied StringBuilder.
     *
     * @param output File to write to.
     * @param cfDef  CfDef to export attributes from.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>showColumnFamily</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>output</name></decl></param>, <param><decl><type><name>CfDef</name></type> <name>cfDef</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>"create column family "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>maybeEscapeName</name></name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"column_type"</expr></argument>, <argument><expr><name><name>cfDef</name>.<name>column_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"comparator"</expr></argument>, <argument><expr><call><name>normaliseType</name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>comparator_type</name></name></expr></argument>, <argument><expr>"org.apache.cassandra.db.marshal"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>cfDef</name>.<name>column_type</name>.<name>equals</name></name><argument_list>(<argument><expr>"Super"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"subcomparator"</expr></argument>, <argument><expr><call><name>normaliseType</name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>subcomparator_type</name></name></expr></argument>, <argument><expr>"org.apache.cassandra.db.marshal"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>!<call><name><name>StringUtils</name>.<name>isEmpty</name></name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>default_validation_class</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"default_validation_class"</expr></argument>,
                        <argument><expr><call><name>normaliseType</name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>default_validation_class</name></name></expr></argument>, <argument><expr>"org.apache.cassandra.db.marshal"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"key_validation_class"</expr></argument>,
                    <argument><expr><call><name>normaliseType</name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>key_validation_class</name></name></expr></argument>, <argument><expr>"org.apache.cassandra.db.marshal"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"read_repair_chance"</expr></argument>, <argument><expr><name><name>cfDef</name>.<name>read_repair_chance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"dclocal_read_repair_chance"</expr></argument>, <argument><expr><name><name>cfDef</name>.<name>dclocal_read_repair_chance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"gc_grace"</expr></argument>, <argument><expr><name><name>cfDef</name>.<name>gc_grace_seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"min_compaction_threshold"</expr></argument>, <argument><expr><name><name>cfDef</name>.<name>min_compaction_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"max_compaction_threshold"</expr></argument>, <argument><expr><name><name>cfDef</name>.<name>max_compaction_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"replicate_on_write"</expr></argument>, <argument><expr><name><name>cfDef</name>.<name>replicate_on_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"compaction_strategy"</expr></argument>, <argument><expr><name><name>cfDef</name>.<name>compaction_strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"caching"</expr></argument>, <argument><expr><name><name>cfDef</name>.<name>caching</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>cfDef</name>.<name>isSetBloom_filter_fp_chance</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"bloom_filter_fp_chance"</expr></argument>, <argument><expr><name><name>cfDef</name>.<name>bloom_filter_fp_chance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr>!<call><name><name>cfDef</name>.<name>compaction_strategy_options</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>cOptions</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>cOptions</name>.<name>append</name></name><argument_list>(<argument><expr>"{"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><name><name>cfDef</name>.<name>compaction_strategy_options</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>size</name> <init>= <expr><call><name><name>options</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>options</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>cOptions</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>quote</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" : "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>quote</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>i</name> != <name>size</name> - 1</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>cOptions</name>.<name>append</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><call><name><name>cOptions</name>.<name>append</name></name><argument_list>(<argument><expr>"}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>writeAttrRaw</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"compaction_strategy_options"</expr></argument>, <argument><expr><call><name><name>cOptions</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>StringUtils</name>.<name>isEmpty</name></name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>comment</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>writeAttr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"comment"</expr></argument>, <argument><expr><name><name>cfDef</name>.<name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr>!<call><name><name>cfDef</name>.<name>column_metadata</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call>
                  .<call><name>append</name><argument_list>(<argument><expr><name>TAB</name></expr></argument>)</argument_list></call>
                  .<call><name>append</name><argument_list>(<argument><expr>"and column_metadata = ["</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr>true</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>ColumnDef</name></type> <name>colDef</name> <range>: <expr><name><name>cfDef</name>.<name>column_metadata</name></name></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr>!<name>first</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name>first</name> = false</expr>;</expr_stmt>
                <expr_stmt><expr><call><name>showColumnMeta</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>colDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>"]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>cfDef</name>.<name>compression_options</name></name> != null &amp;&amp; !<call><name><name>cfDef</name>.<name>compression_options</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>compOptions</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>compOptions</name>.<name>append</name></name><argument_list>(<argument><expr>"{"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>size</name> <init>= <expr><call><name><name>cfDef</name>.<name>compression_options</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>cfDef</name>.<name>compression_options</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>compOptions</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>quote</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" : "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>quote</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>i</name> != <name>size</name> - 1</expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>compOptions</name>.<name>append</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><call><name><name>compOptions</name>.<name>append</name></name><argument_list>(<argument><expr>"}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>writeAttrRaw</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"compression_options"</expr></argument>, <argument><expr><call><name><name>compOptions</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>";"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Writes the supplied ColumnDef to the StringBuilder as a cli script.
     *
     * @param output The File to write to.
     * @param cfDef  The CfDef as a source for comparator/validator
     * @param colDef The Column Definition to export
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>showColumnMeta</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>output</name></decl></param>, <param><decl><type><name>CfDef</name></type> <name>cfDef</name></decl></param>, <param><decl><type><name>ColumnDef</name></type> <name>colDef</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>NEWLINE</name> + <name>TAB</name> + <name>TAB</name> + "{"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr><call><name>getFormatType</name><argument_list>(<argument><expr><call><name><name>cfDef</name>.<name>column_type</name>.<name>equals</name></name><argument_list>(<argument><expr>"Super"</expr></argument>)</argument_list></call>
                                                      ? <name><name>cfDef</name>.<name>subcomparator_type</name></name>
                                                      : <name><name>cfDef</name>.<name>comparator_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>"column_name : '" + <call><name><name>CliUtils</name>.<name>escapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name><name>colDef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> + "'," + <name>NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>validationClass</name> <init>= <expr><call><name>normaliseType</name><argument_list>(<argument><expr><name><name>colDef</name>.<name>validation_class</name></name></expr></argument>, <argument><expr>"org.apache.cassandra.db.marshal"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>TAB</name> + <name>TAB</name> + "validation_class : " + <call><name><name>CliUtils</name>.<name>escapeSQLString</name></name><argument_list>(<argument><expr><name>validationClass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>colDef</name>.<name>isSetIndex_name</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call>
                  .<call><name>append</name><argument_list>(<argument><expr><name>TAB</name> + <name>TAB</name> + "index_name : '" + <call><name><name>CliUtils</name>.<name>escapeSQLString</name></name><argument_list>(<argument><expr><name><name>colDef</name>.<name>index_name</name></name></expr></argument>)</argument_list></call> + "'," + <name>NEWLINE</name></expr></argument>)</argument_list></call>
                  .<call><name>append</name><argument_list>(<argument><expr><name>TAB</name> + <name>TAB</name> + "index_type : " + <call><name><name>CliUtils</name>.<name>escapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>toString</name></name><argument_list>(<argument><expr><call><name><name>colDef</name>.<name>index_type</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>colDef</name>.<name>index_options</name></name> != null &amp;&amp; !<call><name><name>colDef</name>.<name>index_options</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>TAB</name> + <name>TAB</name> + "index_options : {" + <name>NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>numOpts</name> <init>= <expr><call><name><name>colDef</name>.<name>index_options</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>colDef</name>.<name>index_options</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>option</name> <init>= <expr><call><name><name>CliUtils</name>.<name>escapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>optionValue</name> <init>= <expr><call><name><name>CliUtils</name>.<name>escapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>TAB</name> + <name>TAB</name> + <name>TAB</name></expr></argument>)</argument_list></call>
                          .<call><name>append</name><argument_list>(<argument><expr>"'" + <name>option</name> + "' : '"</expr></argument>)</argument_list></call>
                          .<call><name>append</name><argument_list>(<argument><expr><name>optionValue</name></expr></argument>)</argument_list></call>
                          .<call><name>append</name><argument_list>(<argument><expr>"'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr>--<name>numOpts</name> &gt; 0</expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></for>
                <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>"}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr>"}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>normaliseType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>, <param><decl><type><name>String</name></type> <name>expectedPackage</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>path</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>expectedPackage</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name><name>path</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>expectedPackage</name>.<name>length</name></name><argument_list>()</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</return></then></if>

        <return>return <expr><name>path</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeAttr</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>output</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>first</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>Boolean</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>writeAttrRaw</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>value</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeAttr</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>output</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>first</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>writeAttrRaw</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>value</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeAttr</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>output</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>first</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>writeAttrRaw</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"'" + <call><name><name>CliUtils</name>.<name>escapeSQLString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> + "'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeAttrRaw</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>output</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>first</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>NEWLINE</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>TAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>first</name> ? "with " : "and "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" = "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>output</name>.<name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Returns true if this.keySpace is set, false otherwise
     * @return boolean
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasKeySpace</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>printError</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasKeyspace</name> <init>= <expr><name>keySpace</name> != null</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<name>hasKeyspace</name> &amp;&amp; <name>printError</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Not authorized to a working keyspace."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <return>return <expr><name>hasKeyspace</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasKeySpace</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>hasKeySpace</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeySpace</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>keySpace</name> == null ? "unknown" : <name>keySpace</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeySpace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keySpace</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>keySpace</name></name> = <name>keySpace</name></expr>;</expr_stmt>
        <comment type="line">// We do nothing with the return value, but it hits a cache and the tab-completer.</comment>
        <expr_stmt><expr><call><name>getKSMetaData</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getUsername</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>username</name> == null ? "default" : <name>username</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUsername</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>username</name></name> = <name>username</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// USE &lt;keyspace_name&gt;</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeUseKeySpace</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>childCount</name> <init>= <expr><call><name><name>statement</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keySpaceName</name></decl>, <decl><type ref="prev"/><name>username</name> <init>= <expr>null</expr></init>, <name>password</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

        <comment type="line">// Get keyspace name</comment>
        <expr_stmt><expr><name>keySpaceName</name> = <call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>childCount</name> == 3</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>username</name>  = <call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>password</name>  = <call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>keySpaceName</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Keyspace argument required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <try>try
        <block>{
        	<decl_stmt><decl><type><name>AuthenticationRequest</name></type> <name>authRequest</name></decl>;</decl_stmt>
        	<decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>credentials</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>keySpaceName</name> = <call><name><name>CliCompiler</name>.<name>getKeySpace</name></name><argument_list>(<argument><expr><name>keySpaceName</name></expr></argument>, <argument><expr><call><name><name>thriftClient</name>.<name>describe_keyspaces</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>thriftClient</name>.<name>set_keyspace</name></name><argument_list>(<argument><expr><name>keySpaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        	<if>if <condition>(<expr><name>username</name> != null &amp;&amp; <name>password</name> != null</expr>)</condition><then>
        	<block>{
        	    <comment type="block">/* remove quotes */</comment>
        	    <expr_stmt><expr><name>password</name> = <call><name><name>password</name>.<name>replace</name></name><argument_list>(<argument><expr>"\'"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	    <expr_stmt><expr><call><name><name>credentials</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>IAuthenticator</name>.<name>USERNAME_KEY</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>credentials</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>IAuthenticator</name>.<name>PASSWORD_KEY</name></name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>authRequest</name> = new <call><name>AuthenticationRequest</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>thriftClient</name>.<name>login</name></name><argument_list>(<argument><expr><name>authRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	}</block></then></if>

            <expr_stmt><expr><name>keySpace</name> = <name>keySpaceName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>username</name></name> = <name>username</name> != null ? <name>username</name> : "default"</expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>keyspacesMap</name>.<name>remove</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>CliMain</name>.<name>updateCompletor</name></name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>getCfNamesByKeySpace</name></name><argument_list>(<argument><expr><call><name>getKSMetaData</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Authenticated to keyspace: " + <name>keySpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>AuthenticationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Exception during authentication to the cassandra node: " +
            		                 "verify keyspace exists, and you are using correct credentials."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>AuthorizationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"You are not authorized to use keyspace: " + <name>keySpaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>keySpaceName</name> + " does not exist."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>NotFoundException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>keySpaceName</name> + " does not exist."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>TException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name><name>sessionState</name>.<name>debug</name></name></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Login failure. Did you specify 'keyspace', 'username' and 'password'?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>describeKeySpace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keySpaceName</name></decl></param>, <param><decl><type><name>KsDef</name></type> <name>metadata</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>NodeProbe</name></type> <name>probe</name> <init>= <expr><call><name><name>sessionState</name>.<name>getNodeProbe</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// getting compaction manager MBean to displaying index building information</comment>
        <decl_stmt><decl><type><name>CompactionManagerMBean</name></type> <name>compactionManagerMBean</name> <init>= <expr>(<name>probe</name> == null) ? null : <call><name><name>probe</name>.<name>getCompactionManagerProxy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Describe and display</comment>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Keyspace: " + <name>keySpaceName</name> + ":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <decl_stmt><decl><type><name>KsDef</name></type> <name>ks_def</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>ks_def</name> = <name>metadata</name> == null ? <call><name><name>thriftClient</name>.<name>describe_keyspace</name></name><argument_list>(<argument><expr><name>keySpaceName</name></expr></argument>)</argument_list></call> : <name>metadata</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  Replication Strategy: " + <name><name>ks_def</name>.<name>strategy_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  Durable Writes: " + <name><name>ks_def</name>.<name>durable_writes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><name><name>ks_def</name>.<name>strategy_options</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"    Options: [" + ((<name>options</name> == null) ? "" : <call><name><name>FBUtilities</name>.<name>toString</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call>) + "]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  Column Families:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name><name>ks_def</name>.<name>cf_defs</name></name></expr></argument>, <argument><expr>new <call><name>CfDefNamesComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for (<init><decl><type><name>CfDef</name></type> <name>cf_def</name> <range>: <expr><name><name>ks_def</name>.<name>cf_defs</name></name></expr></range></decl></init>)
                <expr_stmt><expr><call><name>describeColumnFamily</name><argument_list>(<argument><expr><name>ks_def</name></expr></argument>, <argument><expr><name>cf_def</name></expr></argument>, <argument><expr><name>probe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

            <comment type="line">// compaction manager information</comment>
            <if>if <condition>(<expr><name>compactionManagerMBean</name> != null</expr>)</condition><then>
            <block>{
                <for>for (<init><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>info</name> <range>: <expr><call><name><name>compactionManagerMBean</name>.<name>getCompactions</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <comment type="line">// if ongoing compaction type is index build</comment>
                    <if>if <condition>(<expr><call><name><name>info</name>.<name>get</name></name><argument_list>(<argument><expr>"taskType"</expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>OperationType</name>.<name>INDEX_BUILD</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <continue>continue;</continue></then></if>
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"%nCurrently building index %s, completed %d of %d bytes.%n"</expr></argument>,
                                            <argument><expr><call><name><name>info</name>.<name>get</name></name><argument_list>(<argument><expr>"columnfamily"</expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>info</name>.<name>get</name></name><argument_list>(<argument><expr>"bytesComplete"</expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>info</name>.<name>get</name></name><argument_list>(<argument><expr>"totalBytes"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>

            <comment type="line">// closing JMX connection</comment>
            <if>if <condition>(<expr><name>probe</name> != null</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>probe</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Invalid request: " + <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>NotFoundException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Keyspace " + <name>keySpaceName</name> + " could not be found."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Error while closing JMX connection: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>describeColumnFamily</name><parameter_list>(<param><decl><type><name>KsDef</name></type> <name>ks_def</name></decl></param>, <param><decl><type><name>CfDef</name></type> <name>cf_def</name></decl></param>, <param><decl><type><name>NodeProbe</name></type> <name>probe</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <comment type="line">// fetching bean for current column family store</comment>
        <decl_stmt><decl><type><name>ColumnFamilyStoreMBean</name></type> <name>cfMBean</name> <init>= <expr>(<name>probe</name> == null) ? null : <call><name><name>probe</name>.<name>getCfsProxy</name></name><argument_list>(<argument><expr><call><name><name>ks_def</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cf_def</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>isSuper</name> <init>= <expr><call><name><name>cf_def</name>.<name>column_type</name>.<name>equals</name></name><argument_list>(<argument><expr>"Super"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"    ColumnFamily: %s%s%n"</expr></argument>, <argument><expr><name><name>cf_def</name>.<name>name</name></name></expr></argument>, <argument><expr><name>isSuper</name> ? " (Super)" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>cf_def</name>.<name>comment</name></name> != null &amp;&amp; !<call><name><name>cf_def</name>.<name>comment</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"    \"%s\"%n"</expr></argument>, <argument><expr><name><name>cf_def</name>.<name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><name><name>cf_def</name>.<name>key_validation_class</name></name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"      Key Validation Class: %s%n"</expr></argument>, <argument><expr><name><name>cf_def</name>.<name>key_validation_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><name><name>cf_def</name>.<name>default_validation_class</name></name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"      Default column value validator: %s%n"</expr></argument>, <argument><expr><name><name>cf_def</name>.<name>default_validation_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"      Columns sorted by: %s%s%n"</expr></argument>, <argument><expr><name><name>cf_def</name>.<name>comparator_type</name></name></expr></argument>, <argument><expr><call><name><name>cf_def</name>.<name>column_type</name>.<name>equals</name></name><argument_list>(<argument><expr>"Super"</expr></argument>)</argument_list></call> ? "/" + <name><name>cf_def</name>.<name>subcomparator_type</name></name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"      GC grace seconds: %s%n"</expr></argument>, <argument><expr><name><name>cf_def</name>.<name>gc_grace_seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"      Compaction min/max thresholds: %s/%s%n"</expr></argument>, <argument><expr><name><name>cf_def</name>.<name>min_compaction_threshold</name></name></expr></argument>, <argument><expr><name><name>cf_def</name>.<name>max_compaction_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"      Read repair chance: %s%n"</expr></argument>, <argument><expr><name><name>cf_def</name>.<name>read_repair_chance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"      DC Local Read repair chance: %s%n"</expr></argument>, <argument><expr><name><name>cf_def</name>.<name>dclocal_read_repair_chance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"      Replicate on write: %s%n"</expr></argument>, <argument><expr><name><name>cf_def</name>.<name>replicate_on_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"      Caching: %s%n"</expr></argument>, <argument><expr><name><name>cf_def</name>.<name>caching</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"      Bloom Filter FP chance: %s%n"</expr></argument>, <argument><expr><call><name><name>cf_def</name>.<name>isSetBloom_filter_fp_chance</name></name><argument_list>()</argument_list></call> ? <name><name>cf_def</name>.<name>bloom_filter_fp_chance</name></name> : "default"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// if we have connection to the cfMBean established</comment>
        <if>if <condition>(<expr><name>cfMBean</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"      Built indexes: %s%n"</expr></argument>, <argument><expr><call><name><name>cfMBean</name>.<name>getBuiltIndexes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><call><name><name>cf_def</name>.<name>getColumn_metadataSize</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>leftSpace</name> <init>= <expr>"      "</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>columnLeftSpace</name> <init>= <expr><name>leftSpace</name> + "    "</expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>compareWith</name> <init>= <expr><name>isSuper</name> ? <name><name>cf_def</name>.<name>subcomparator_type</name></name>
                    : <name><name>cf_def</name>.<name>comparator_type</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>columnNameValidator</name> <init>= <expr><call><name>getFormatType</name><argument_list>(<argument><expr><name>compareWith</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>leftSpace</name> + "Column Metadata:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>ColumnDef</name></type> <name>columnDef</name> <range>: <expr><call><name><name>cf_def</name>.<name>getColumn_metadata</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name><name>columnNameValidator</name>.<name>getString</name></name><argument_list>(<argument><expr><name><name>columnDef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>columnNameValidator</name> instanceof <name>BytesType</name></expr>)</condition><then>
                <block>{
                    <try>try
                    <block>{
                        <decl_stmt><decl><type><name>String</name></type> <name>columnString</name> <init>= <expr><call><name><name>UTF8Type</name>.<name>instance</name>.<name>getString</name></name><argument_list>(<argument><expr><name><name>columnDef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>columnName</name> = <name>columnString</name> + " (" + <name>columnName</name> + ")"</expr>;</expr_stmt>
                    }</block>
                    <catch>catch <parameter_list>(<param><decl><type><name>MarshalException</name></type> <name>e</name></decl></param>)</parameter_list>
                    <block>{
                        <comment type="line">// guess it wasn't a utf8 column name after all</comment>
                    }</block></catch></try>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>leftSpace</name> + "  Column Name: " + <name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>columnLeftSpace</name> + "Validation Class: " + <call><name><name>columnDef</name>.<name>getValidation_class</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><call><name><name>columnDef</name>.<name>isSetIndex_name</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>columnLeftSpace</name> + "Index Name: " + <call><name><name>columnDef</name>.<name>getIndex_name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <if>if <condition>(<expr><call><name><name>columnDef</name>.<name>isSetIndex_type</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>columnLeftSpace</name> + "Index Type: " + <call><name><name>columnDef</name>.<name>getIndex_type</name></name><argument_list>()</argument_list></call>.<call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <if>if <condition>(<expr><call><name><name>columnDef</name>.<name>isSetIndex_options</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>columnLeftSpace</name> + "Index Options: " + <call><name><name>columnDef</name>.<name>getIndex_options</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"      Compaction Strategy: %s%n"</expr></argument>, <argument><expr><name><name>cf_def</name>.<name>compaction_strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name><name>cf_def</name>.<name>compaction_strategy_options</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"      Compaction Strategy Options:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><call><name><name>cf_def</name>.<name>compaction_strategy_options</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"        %s: %s%n"</expr></argument>, <argument><expr><call><name><name>e</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>cf_def</name>.<name>compression_options</name></name> != null &amp;&amp; !<call><name><name>cf_def</name>.<name>compression_options</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"      Compression Options:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><call><name><name>cf_def</name>.<name>compression_options</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"        %s: %s%n"</expr></argument>, <argument><expr><call><name><name>e</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></then></if>
    }</block></function>

    <comment type="line">// DESCRIBE KEYSPACE (&lt;keyspace&gt; | &lt;column_family&gt;)?</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeDescribe</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>argCount</name> <init>= <expr><call><name><name>statement</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>keySpace</name> == null &amp;&amp; <name>argCount</name> == 0</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Authenticate to a Keyspace, before using `describe` or `describe &lt;column_family&gt;`"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>KsDef</name></type> <name>currentKeySpace</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>keySpace</name> != null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>keyspacesMap</name>.<name>remove</name></name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentKeySpace</name> = <call><name>getKSMetaData</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>argCount</name> &gt; 1</expr>)</condition><then> <comment type="line">// in case somebody changes Cli grammar</comment>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"`describe` command take maximum one argument. See `help describe;`"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <if>if <condition>(<expr><name>argCount</name> == 0</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>currentKeySpace</name> != null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>describeKeySpace</name><argument_list>(<argument><expr><name><name>currentKeySpace</name>.<name>name</name></name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Authenticate to a Keyspace, before using `describe` or `describe &lt;column_family&gt;`"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>argCount</name> == 1</expr>)</condition><then>
        <block>{
            <comment type="line">// name of the keyspace or ColumnFamily</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>entityName</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>KsDef</name></type> <name>inputKsDef</name> <init>= <expr><call><name><name>CliUtils</name>.<name>getKeySpaceDef</name></name><argument_list>(<argument><expr><name>entityName</name></expr></argument>, <argument><expr><call><name><name>thriftClient</name>.<name>describe_keyspaces</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>inputKsDef</name> == null &amp;&amp; <name>currentKeySpace</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Keyspace with name '%s' wasn't found, " +
                                                         "to lookup ColumnFamily with that name, please, authorize to one " +
                                                         "of the keyspaces first."</expr></argument>, <argument><expr><name>entityName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>CfDef</name></type> <name>inputCfDef</name> <init>= <expr>(<name>inputKsDef</name> == null)
                    ? <call><name>getCfDef</name><argument_list>(<argument><expr><name>currentKeySpace</name></expr></argument>, <argument><expr><name>entityName</name></expr></argument>)</argument_list></call>
                    : null</expr></init></decl>;</decl_stmt>  <comment type="line">// no need to lookup CfDef if we know that it was keyspace</comment>

            <if>if <condition>(<expr><name>inputKsDef</name> != null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>describeKeySpace</name><argument_list>(<argument><expr><name><name>inputKsDef</name>.<name>name</name></name></expr></argument>, <argument><expr><name>inputKsDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>inputCfDef</name> != null</expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>NodeProbe</name></type> <name>probe</name> <init>= <expr><call><name><name>sessionState</name>.<name>getNodeProbe</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <try>try
                <block>{
                    <expr_stmt><expr><call><name>describeColumnFamily</name><argument_list>(<argument><expr><name>currentKeySpace</name></expr></argument>, <argument><expr><name>inputCfDef</name></expr></argument>, <argument><expr><name>probe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr><name>probe</name> != null</expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>probe</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Error while closing JMX connection: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Sorry, no Keyspace nor ColumnFamily was found with name: " + <name>entityName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></then></if></else></if>
    }</block></function>

    <comment type="line">// ^(NODE_DESCRIBE_CLUSTER) or describe: schema_versions, partitioner, snitch</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeDescribeCluster</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Cluster Information:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"   Snitch: " + <call><name><name>thriftClient</name>.<name>describe_snitch</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"   Partitioner: " + <call><name><name>thriftClient</name>.<name>describe_partitioner</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"   Schema versions: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>versions</name> <init>= <expr><call><name><name>thriftClient</name>.<name>describe_schema_versions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name>String</name></type> <name>version</name> <range>: <expr><call><name><name>versions</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"\t%s: %s%n"</expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name><name>versions</name>.<name>get</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr>(<name>e</name> instanceof <name>InvalidRequestException</name>) ? ((<name>InvalidRequestException</name>) <name>e</name>).<call><name>getWhy</name><argument_list>()</argument_list></call> : <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Error retrieving data: " + <name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="line">// process a statement of the form: connect hostname/port</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeConnect</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>statement</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Tree</name></type> <name>idList</name> <init>= <expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>portNumber</name> <init>= <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>hostName</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>idCount</name> <init>= <expr><call><name><name>idList</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>idx</name> &lt; <name>idCount</name></expr>;</condition> <incr><expr><name>idx</name>++</expr></incr>)
        <block>{
            <expr_stmt><expr><call><name><name>hostName</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>idList</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// disconnect current connection, if any.</comment>
        <comment type="line">// This is a no-op, if you aren't currently connected.</comment>
        <expr_stmt><expr><call><name><name>CliMain</name>.<name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// now, connect to the newly specified host name and port</comment>
        <expr_stmt><expr><name><name>sessionState</name>.<name>hostName</name></name> = <call><name><name>hostName</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sessionState</name>.<name>thriftPort</name></name> = <name>portNumber</name></expr>;</expr_stmt>

        <comment type="line">// if we have user name and password</comment>
        <if>if <condition>(<expr><call><name><name>statement</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> == 4</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>sessionState</name>.<name>username</name></name> = <call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sessionState</name>.<name>password</name></name> = <call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>statement</name>.<name>getChild</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>CliMain</name>.<name>connect</name></name><argument_list>(<argument><expr><name><name>sessionState</name>.<name>hostName</name></name></expr></argument>, <argument><expr><name><name>sessionState</name>.<name>thriftPort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * To get Column Family Definition object from specified keyspace
     * @param keySpaceName key space name to search for specific column family
     * @param columnFamilyName column family name
     * @return CfDef - Column family definition object
     */</comment>
    <function><type><specifier>private</specifier> <name>CfDef</name></type> <name>getCfDef</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keySpaceName</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamilyName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>KsDef</name></type> <name>keySpaceDefinition</name> <init>= <expr><call><name><name>keyspacesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>keySpaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>CfDef</name></type> <name>columnFamilyDef</name> <range>: <expr><name><name>keySpaceDefinition</name>.<name>cf_defs</name></name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>columnFamilyDef</name>.<name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name>columnFamilyName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <return>return <expr><name>columnFamilyDef</name></expr>;</return>
            }</block></then></if>
        }</block></for>

        <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"No such column family: " + <name>columnFamilyName</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Uses getCfDef(keySpaceName, columnFamilyName) with current keyspace
     * @param columnFamilyName column family name to find in specified keyspace
     * @return CfDef - Column family definition object
     */</comment>
    <function><type><specifier>private</specifier> <name>CfDef</name></type> <name>getCfDef</name><parameter_list>(<param><decl><type><name>String</name></type> <name>columnFamilyName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getCfDef</name><argument_list>(<argument><expr><name><name>this</name>.<name>keySpace</name></name></expr></argument>, <argument><expr><name>columnFamilyName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>CfDef</name></type> <name>getCfDef</name><parameter_list>(<param><decl><type><name>KsDef</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamilyName</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>CfDef</name></type> <name>cfDef</name> <range>: <expr><name><name>keyspace</name>.<name>cf_defs</name></name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>cfDef</name>.<name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name>columnFamilyName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>cfDef</name></expr>;</return></then></if>
        }</block></for>

        <return>return <expr>null</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Used to parse meta tree and compile meta attributes into List&lt;ColumnDef&gt;
     * @param cfDef - column family definition
     * @param meta (Tree representing Array of the hashes with metadata attributes)
     * @return List&lt;ColumnDef&gt; List of the ColumnDef's
     *
     * meta is in following format - ^(ARRAY ^(HASH ^(PAIR .. ..) ^(PAIR .. ..)) ^(HASH ...))
     */</comment>
    <function><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnDef</name></argument>&gt;</argument_list></name></type> <name>getCFColumnMetaFromTree</name><parameter_list>(<param><decl><type><name>CfDef</name></type> <name>cfDef</name></decl></param>, <param><decl><type><name>Tree</name></type> <name>meta</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// this list will be returned</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnDef</name></argument>&gt;</argument_list></name></type> <name>columnDefinitions</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ColumnDef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// each child node is a ^(HASH ...)</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>meta</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>Tree</name></type> <name>metaHash</name> <init>= <expr><call><name><name>meta</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ColumnDef</name></type> <name>columnDefinition</name> <init>= <expr>new <call><name>ColumnDef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// each child node is ^(PAIR $key $value)</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <call><name><name>metaHash</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
            <block>{
                <decl_stmt><decl><type><name>Tree</name></type> <name>metaPair</name> <init>= <expr><call><name><name>metaHash</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// current $key</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>metaKey</name> <init>= <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>metaPair</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// current $value</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>metaVal</name> <init>= <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>metaPair</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>metaKey</name>.<name>equals</name></name><argument_list>(<argument><expr>"column_name"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><call><name><name>cfDef</name>.<name>column_type</name>.<name>equals</name></name><argument_list>(<argument><expr>"Super"</expr></argument>)</argument_list></call></expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>columnDefinition</name>.<name>setName</name></name><argument_list>(<argument><expr><call><name>subColumnNameAsByteArray</name><argument_list>(<argument><expr><name>metaVal</name></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else>else
                        <expr_stmt><expr><call><name><name>columnDefinition</name>.<name>setName</name></name><argument_list>(<argument><expr><call><name>columnNameAsByteArray</name><argument_list>(<argument><expr><name>metaVal</name></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                }</block></then>
                <else>else <if>if <condition>(<expr><call><name><name>metaKey</name>.<name>equals</name></name><argument_list>(<argument><expr>"validation_class"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>columnDefinition</name>.<name>setValidation_class</name></name><argument_list>(<argument><expr><name>metaVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><call><name><name>metaKey</name>.<name>equals</name></name><argument_list>(<argument><expr>"index_type"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>columnDefinition</name>.<name>setIndex_type</name></name><argument_list>(<argument><expr><call><name>getIndexTypeFromString</name><argument_list>(<argument><expr><name>metaVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><call><name><name>metaKey</name>.<name>equals</name></name><argument_list>(<argument><expr>"index_options"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>columnDefinition</name>.<name>setIndex_options</name></name><argument_list>(<argument><expr><call><name>getStrategyOptionsFromTree</name><argument_list>(<argument><expr><call><name><name>metaPair</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><call><name><name>metaKey</name>.<name>equals</name></name><argument_list>(<argument><expr>"index_name"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>columnDefinition</name>.<name>setIndex_name</name></name><argument_list>(<argument><expr><name>metaVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Unsupported column_metadata pair given =&gt; " + <name>metaKey</name> + ": " + <name>metaVal</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if></else></if></else></if></else></if></else></if>
            }</block></for>

            <comment type="line">// validating columnDef structure, 'name' and 'validation_class' must be set</comment>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>columnDefinition</name>.<name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>TException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <expr_stmt><expr><call><name><name>columnDefinitions</name>.<name>add</name></name><argument_list>(<argument><expr><name>columnDefinition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>columnDefinitions</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Getting IndexType object from indexType string
     * @param indexTypeAsString - string return by parser corresponding to IndexType
     * @return IndexType - an IndexType object
     */</comment>
    <function><type><specifier>private</specifier> <name>IndexType</name></type> <name>getIndexTypeFromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>indexTypeAsString</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>IndexType</name></type> <name>indexType</name></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>indexType</name> = <call><name><name>IndexType</name>.<name>findByValue</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>indexTypeAsString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <try>try
            <block>{
                <comment type="line">// if this is not an integer lets try to get IndexType by name</comment>
                <expr_stmt><expr><name>indexType</name> = <call><name><name>IndexType</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>indexTypeAsString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IllegalArgumentException</name></type> <name>ie</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"IndexType '" + <name>indexTypeAsString</name> + "' is unsupported."</expr></argument>, <argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></catch></try>

        <if>if <condition>(<expr><name>indexType</name> == null</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"IndexType '" + <name>indexTypeAsString</name> + "' is unsupported."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <return>return <expr><name>indexType</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Converts object represented as string into byte[] according to comparator
     * @param object - object to covert into byte array
     * @param comparator - comparator used to convert object
     * @return byte[] - object in the byte array representation
     */</comment>
    <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>getBytesAccordingToType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>object</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>comparator</name> == null</expr>)</condition><then> <comment type="line">// default comparator is BytesType</comment>
            <expr_stmt><expr><name>comparator</name> = <name><name>BytesType</name>.<name>instance</name></name></expr>;</expr_stmt></then></if>

        <try>try
        <block>{
            <return>return <expr><call><name><name>comparator</name>.<name>fromString</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>MarshalException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Converts column name into byte[] according to comparator type
     * @param column - column name from parser
     * @param columnFamily - column family name from parser
     * @return ByteBuffer - bytes into which column name was converted according to comparator type
     */</comment>
    <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>columnNameAsBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>CfDef</name></type> <name>columnFamilyDef</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>columnNameAsBytes</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>columnFamilyDef</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Converts column name into byte[] according to comparator type
     * @param column - column name from parser
     * @param columnFamilyDef - column family from parser
     * @return ByteBuffer bytes - into which column name was converted according to comparator type
     */</comment>
    <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>columnNameAsBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>, <param><decl><type><name>CfDef</name></type> <name>columnFamilyDef</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>comparatorClass</name> <init>= <expr><name><name>columnFamilyDef</name>.<name>comparator_type</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getBytesAccordingToType</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getFormatType</name><argument_list>(<argument><expr><name>comparatorClass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Converts column name into byte[] according to comparator type
     * @param column - column name from parser
     * @param columnFamily - column family name from parser
     * @return bytes[] - into which column name was converted according to comparator type
     */</comment>
    <function><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>columnNameAsByteArray</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>TBaseHelper</name>.<name>byteBufferToByteArray</name></name><argument_list>(<argument><expr><call><name>columnNameAsBytes</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Converts column name into byte[] according to comparator type
     * @param column - column name from parser
     * @param cfDef  - column family from parser
     * @return bytes[] - into which column name was converted according to comparator type
     */</comment>
    <function><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>columnNameAsByteArray</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column</name></decl></param>, <param><decl><type><name>CfDef</name></type> <name>cfDef</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>TBaseHelper</name>.<name>byteBufferToByteArray</name></name><argument_list>(<argument><expr><call><name>columnNameAsBytes</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Converts sub-column name into ByteBuffer according to comparator type
     * @param superColumn - sub-column name from parser
     * @param columnFamily - column family name from parser
     * @return ByteBuffer bytes - into which column name was converted according to comparator type
     */</comment>
    <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>subColumnNameAsBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>superColumn</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>CfDef</name></type> <name>columnFamilyDef</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>subColumnNameAsBytes</name><argument_list>(<argument><expr><name>superColumn</name></expr></argument>, <argument><expr><name>columnFamilyDef</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Converts column name into ByteBuffer according to comparator type
     * @param superColumn - sub-column name from parser
     * @param columnFamilyDef - column family from parser
     * @return ByteBuffer bytes - into which column name was converted according to comparator type
     */</comment>
    <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>subColumnNameAsBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>superColumn</name></decl></param>, <param><decl><type><name>CfDef</name></type> <name>columnFamilyDef</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>comparatorClass</name> <init>= <expr><name><name>columnFamilyDef</name>.<name>subcomparator_type</name></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>comparatorClass</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Notice: defaulting to BytesType subcomparator for '%s'"</expr></argument>, <argument><expr><call><name><name>columnFamilyDef</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>comparatorClass</name> = "BytesType"</expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><call><name>getBytesAccordingToType</name><argument_list>(<argument><expr><name>superColumn</name></expr></argument>, <argument><expr><call><name>getFormatType</name><argument_list>(<argument><expr><name>comparatorClass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Converts sub-column name into byte[] according to comparator type
     * @param superColumn - sub-column name from parser
     * @param cfDef - column family from parser
     * @return bytes[] - into which column name was converted according to comparator type
     */</comment>
    <function><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>subColumnNameAsByteArray</name><parameter_list>(<param><decl><type><name>String</name></type> <name>superColumn</name></decl></param>, <param><decl><type><name>CfDef</name></type> <name>cfDef</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>TBaseHelper</name>.<name>byteBufferToByteArray</name></name><argument_list>(<argument><expr><call><name>subColumnNameAsBytes</name><argument_list>(<argument><expr><name>superColumn</name></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Converts column value into byte[] according to validation class
     * @param columnName - column name to which value belongs
     * @param columnFamilyName - column family name
     * @param columnValue - actual column value
     * @return value in byte array representation
     */</comment>
    <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>columnValueAsBytes</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamilyName</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnValue</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>CfDef</name></type> <name>columnFamilyDef</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>columnFamilyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>defaultValidator</name> <init>= <expr><call><name>getFormatType</name><argument_list>(<argument><expr><name><name>columnFamilyDef</name>.<name>default_validation_class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>ColumnDef</name></type> <name>columnDefinition</name> <range>: <expr><call><name><name>columnFamilyDef</name>.<name>getColumn_metadata</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>currentColumnName</name> <init>= <expr><call><name><name>columnDefinition</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>ByteBufferUtil</name>.<name>compare</name></name><argument_list>(<argument><expr><name>currentColumnName</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <block>{
                <try>try
                <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>validationClass</name> <init>= <expr><call><name><name>columnDefinition</name>.<name>getValidation_class</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <return>return <expr><call><name>getBytesAccordingToType</name><argument_list>(<argument><expr><name>columnValue</name></expr></argument>, <argument><expr><call><name>getFormatType</name><argument_list>(<argument><expr><name>validationClass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then></if>
        }</block></for>

        <return>return <expr><call><name><name>defaultValidator</name>.<name>fromString</name></name><argument_list>(<argument><expr><name>columnValue</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get validator for specific column value
     * @param ColumnFamilyDef - CfDef object representing column family with metadata
     * @param columnNameInBytes - column name as byte array
     * @return AbstractType - validator for column value
     */</comment>
    <function><type><specifier>private</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getValidatorForValue</name><parameter_list>(<param><decl><type><name>CfDef</name></type> <name>ColumnFamilyDef</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>columnNameInBytes</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>defaultValidator</name> <init>= <expr><name><name>ColumnFamilyDef</name>.<name>default_validation_class</name></name></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>ColumnDef</name></type> <name>columnDefinition</name> <range>: <expr><call><name><name>ColumnFamilyDef</name>.<name>getColumn_metadata</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>nameInBytes</name> <init>= <expr><call><name><name>columnDefinition</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>nameInBytes</name></expr></argument>, <argument><expr><name>columnNameInBytes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <return>return <expr><call><name>getFormatType</name><argument_list>(<argument><expr><call><name><name>columnDefinition</name>.<name>getValidation_class</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr><name>defaultValidator</name> != null &amp;&amp; !<call><name><name>defaultValidator</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr><call><name>getFormatType</name><argument_list>(<argument><expr><name>defaultValidator</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <return>return <expr>null</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Used to get Map of the provided options by create/update keyspace commands
     * @param options - tree representing options
     * @return Map - strategy_options map
     */</comment>
    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getStrategyOptionsFromTree</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>options</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">//Check for old [{}] syntax</comment>
        <if>if <condition>(<expr><call><name><name>options</name>.<name>getText</name></name><argument_list>()</argument_list></call>.<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr>"ARRAY"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"WARNING: [{}] strategy_options syntax is deprecated, please use {}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>options</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                <return>return <expr><name><name>Collections</name>.<name>EMPTY_MAP</name></name></expr>;</return></then></if>

            <return>return <expr><call><name>getStrategyOptionsFromTree</name><argument_list>(<argument><expr><call><name><name>options</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="line">// this map will be returned</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>strategyOptions</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// each child node is ^(PAIR $key $value)</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <call><name><name>options</name>.<name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>Tree</name></type> <name>optionPair</name> <init>= <expr><call><name><name>options</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// current $key</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>optionPair</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// current $value</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>optionPair</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>strategyOptions</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>strategyOptions</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Used to convert value (function argument, string) into byte[]
     * calls convertValueByFunction method with "withUpdate" set to false
     * @param functionCall - tree representing function call ^(FUNCTION_CALL function_name value)
     * @param columnFamily - column family definition (CfDef)
     * @param columnName   - also updates column family metadata for given column
     * @return byte[] - string value as byte[]
     */</comment>
    <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>convertValueByFunction</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>functionCall</name></decl></param>, <param><decl><type><name>CfDef</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>convertValueByFunction</name><argument_list>(<argument><expr><name>functionCall</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Used to convert value (function argument, string) into byte[]
     * @param functionCall - tree representing function call ^(FUNCTION_CALL function_name value)
     * @param columnFamily - column family definition (CfDef)
     * @param columnName   - column name as byte[] (used to update CfDef)
     * @param withUpdate   - also updates column family metadata for given column
     * @return byte[] - string value as byte[]
     */</comment>
    <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>convertValueByFunction</name><parameter_list>(<param><decl><type><name>Tree</name></type> <name>functionCall</name></decl></param>, <param><decl><type><name>CfDef</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>withUpdate</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>functionName</name> <init>= <expr><call><name><name>functionCall</name>.<name>getChild</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tree</name></type> <name>argumentTree</name> <init>= <expr><call><name><name>functionCall</name>.<name>getChild</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>functionArg</name>  <init>= <expr>(<name>argumentTree</name> == null) ? "" : <call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>argumentTree</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name> <init>= <expr><call><name>getTypeByFunction</name><argument_list>(<argument><expr><name>functionName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{

            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>value</name></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>functionArg</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>validator</name> instanceof <name>TimeUUIDType</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>value</name> = <call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>getTimeUUIDBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>validator</name> instanceof <name>LexicalUUIDType</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>value</name> = <call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name>.<name>decompose</name></name><argument_list>(<argument><expr><call><name><name>UUID</name>.<name>randomUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>validator</name> instanceof <name>BytesType</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>value</name> = <call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Argument for '%s' could not be empty."</expr></argument>, <argument><expr><name>functionName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if></else></if></else></if>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>value</name> = <call><name>getBytesAccordingToType</name><argument_list>(<argument><expr><name>functionArg</name></expr></argument>, <argument><expr><name>validator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <comment type="line">// performing ColumnDef local validator update</comment>
            <if>if <condition>(<expr><name>withUpdate</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>updateColumnMetaData</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><call><name><name>validator</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return>return <expr><name>value</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get AbstractType by function name
     * @param functionName - name of the function e.g. utf8, integer, long etc.
     * @return AbstractType type corresponding to the function name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getTypeByFunction</name><parameter_list>(<param><decl><type><name>String</name></type> <name>functionName</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Function</name></type> <name>function</name></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>function</name> = <call><name><name>Function</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>functionName</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>errorMessage</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"Function '" + <name>functionName</name> + "' not found. "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>errorMessage</name>.<name>append</name></name><argument_list>(<argument><expr>"Available functions: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>errorMessage</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>Function</name>.<name>getFunctionNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <return>return <expr><call><name><name>function</name>.<name>getValidator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Used to locally update column family definition with new column metadata
     * @param columnFamily    - CfDef record
     * @param columnName      - column name represented as byte[]
     * @param validationClass - value validation class
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateColumnMetaData</name><parameter_list>(<param><decl><type><name>CfDef</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl></param>, <param><decl><type><name>String</name></type> <name>validationClass</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnDef</name></argument>&gt;</argument_list></name></type> <name>columnMetaData</name> <init>= <expr><call><name><name>columnFamily</name>.<name>getColumn_metadata</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnDef</name></type> <name>column</name> <init>= <expr><call><name>getColumnDefByName</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>column</name> != null</expr>)</condition><then>
        <block>{
            <comment type="line">// if validation class is the same - no need to modify it</comment>
            <if>if <condition>(<expr><call><name><name>column</name>.<name>getValidation_class</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>validationClass</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return;</return></then></if>

            <comment type="line">// updating column definition with new validation_class</comment>
            <expr_stmt><expr><call><name><name>column</name>.<name>setValidation_class</name></name><argument_list>(<argument><expr><name>validationClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>columnMetaData</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>ColumnDef</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>validationClass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get specific ColumnDef in column family meta data by column name
     * @param columnFamily - CfDef record
     * @param columnName   - column name represented as byte[]
     * @return ColumnDef   - found column definition
     */</comment>
    <function><type><specifier>private</specifier> <name>ColumnDef</name></type> <name>getColumnDefByName</name><parameter_list>(<param><decl><type><name>CfDef</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>ColumnDef</name></type> <name>columnDef</name> <range>: <expr><call><name><name>columnFamily</name>.<name>getColumn_metadata</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>currName</name> <init>= <expr><call><name><name>columnDef</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>ByteBufferUtil</name>.<name>compare</name></name><argument_list>(<argument><expr><name>currName</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <block>{
                <return>return <expr><name>columnDef</name></expr>;</return>
            }</block></then></if>
        }</block></for>

        <return>return <expr>null</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Prints out KeySlice list
     * @param columnFamilyDef - column family definition
     * @param slices - list of the KeySlice's to print out
     * @throws NotFoundException - column not found
     * @throws TException - transfer is broken
     * @throws IllegalAccessException - can't do operation
     * @throws InstantiationException - can't instantiate a class
     * @throws NoSuchFieldException - column not found
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>printSliceList</name><parameter_list>(<param><decl><type><name>CfDef</name></type> <name>columnFamilyDef</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>KeySlice</name></argument>&gt;</argument_list></name></type> <name>slices</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>NoSuchFieldException</name></expr></argument>, <argument><expr><name>CharacterCodingException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>validator</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>columnFamilyName</name> <init>= <expr><call><name><name>columnFamilyDef</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyComparator</name> <init>= <expr><call><name>getKeyComparatorForCF</name><argument_list>(<argument><expr><name>columnFamilyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>KeySlice</name></type> <name>ks</name> <range>: <expr><name>slices</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>keyName</name> <init>= <expr>(<name>keyComparator</name> == null) ? <call><name><name>ByteBufferUtil</name>.<name>string</name></name><argument_list>(<argument><expr><name><name>ks</name>.<name>key</name></name></expr></argument>)</argument_list></call> : <call><name><name>keyComparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name><name>ks</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"-------------------%n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"RowKey: %s%n"</expr></argument>, <argument><expr><name>keyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>ks</name>.<name>getColumnsIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>ColumnOrSuperColumn</name></type> <name>columnOrSuperColumn</name> <init>= <expr><call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name><name>columnOrSuperColumn</name>.<name>column</name></name> != null</expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>Column</name></type> <name>col</name> <init>= <expr><name><name>columnOrSuperColumn</name>.<name>column</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>validator</name> = <call><name>getValidatorForValue</name><argument_list>(<argument><expr><name>columnFamilyDef</name></expr></argument>, <argument><expr><call><name><name>col</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"=&gt; (column=%s, value=%s, timestamp=%d%s)%n"</expr></argument>,
                                    <argument><expr><call><name>formatColumnName</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name>columnFamilyName</name></expr></argument>, <argument><expr><name><name>col</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>validator</name>.<name>getString</name></name><argument_list>(<argument><expr><name><name>col</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>col</name>.<name>timestamp</name></name></expr></argument>,
                                    <argument><expr><call><name><name>col</name>.<name>isSetTtl</name></name><argument_list>()</argument_list></call> ? <call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>", ttl=%d"</expr></argument>, <argument><expr><call><name><name>col</name>.<name>getTtl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name><name>columnOrSuperColumn</name>.<name>super_column</name></name> != null</expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>SuperColumn</name></type> <name>superCol</name> <init>= <expr><name><name>columnOrSuperColumn</name>.<name>super_column</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"=&gt; (super_column=%s,"</expr></argument>, <argument><expr><call><name>formatColumnName</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name>columnFamilyName</name></expr></argument>, <argument><expr><name><name>superCol</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for>for (<init><decl><type><name>Column</name></type> <name>col</name> <range>: <expr><name><name>superCol</name>.<name>columns</name></name></expr></range></decl></init>)
                    <block>{
                        <expr_stmt><expr><name>validator</name> = <call><name>getValidatorForValue</name><argument_list>(<argument><expr><name>columnFamilyDef</name></expr></argument>, <argument><expr><call><name><name>col</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"%n     (column=%s, value=%s, timestamp=%d%s)"</expr></argument>,
                                        <argument><expr><call><name>formatSubcolumnName</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name>columnFamilyName</name></expr></argument>, <argument><expr><name><name>col</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>validator</name>.<name>getString</name></name><argument_list>(<argument><expr><name><name>col</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>col</name>.<name>timestamp</name></name></expr></argument>,
                                        <argument><expr><call><name><name>col</name>.<name>isSetTtl</name></name><argument_list>()</argument_list></call> ? <call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>", ttl=%d"</expr></argument>, <argument><expr><call><name><name>col</name>.<name>getTtl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>

                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name><name>columnOrSuperColumn</name>.<name>counter_column</name></name> != null</expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>CounterColumn</name></type> <name>col</name> <init>= <expr><name><name>columnOrSuperColumn</name>.<name>counter_column</name></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"=&gt; (counter=%s, value=%s)%n"</expr></argument>, <argument><expr><call><name>formatColumnName</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name>columnFamilyName</name></expr></argument>, <argument><expr><name><name>col</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>col</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name><name>columnOrSuperColumn</name>.<name>counter_super_column</name></name> != null</expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>CounterSuperColumn</name></type> <name>superCol</name> <init>= <expr><name><name>columnOrSuperColumn</name>.<name>counter_super_column</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"=&gt; (super_column=%s,"</expr></argument>, <argument><expr><call><name>formatColumnName</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name>columnFamilyName</name></expr></argument>, <argument><expr><name><name>superCol</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for>for (<init><decl><type><name>CounterColumn</name></type> <name>col</name> <range>: <expr><name><name>superCol</name>.<name>columns</name></name></expr></range></decl></init>)
                    <block>{
                        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"%n     (counter=%s, value=%s)"</expr></argument>, <argument><expr><call><name>formatSubcolumnName</name><argument_list>(<argument><expr><name>keySpace</name></expr></argument>, <argument><expr><name>columnFamilyName</name></expr></argument>, <argument><expr><name><name>col</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>col</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>

                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if></else></if></else></if>
            }</block></while>
        }</block></for>

        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>printf</name></name><argument_list>(<argument><expr>"%n%d Row%s Returned.%n"</expr></argument>, <argument><expr><call><name><name>slices</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<call><name><name>slices</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 1 ? "s" : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// retuns sub-column name in human-readable format</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>formatSubcolumnName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>NoSuchFieldException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name>getFormatType</name><argument_list>(<argument><expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call>.<name>subcomparator_type</name></expr></argument>)</argument_list></call>.<call><name>getString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// retuns column name in human-readable format</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>formatColumnName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>NoSuchFieldException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name>getFormatType</name><argument_list>(<argument><expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call>.<name>comparator_type</name></expr></argument>)</argument_list></call>.<call><name>getString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>getColumnName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name>Tree</name></type> <name>columnTree</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>(<call><name><name>columnTree</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>FUNCTION_CALL</name></name>)
                    ? <call><name>convertValueByFunction</name><argument_list>(<argument><expr><name>columnTree</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call>
                    : <call><name>columnNameAsBytes</name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>columnTree</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>getSubColumnName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name>Tree</name></type> <name>columnTree</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>(<call><name><name>columnTree</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>FUNCTION_CALL</name></name>)
                    ? <call><name>convertValueByFunction</name><argument_list>(<argument><expr><name>columnTree</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call>
                    : <call><name>subColumnNameAsBytes</name><argument_list>(<argument><expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>columnTree</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>getKeyAsBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name>Tree</name></type> <name>keyTree</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>keyTree</name>.<name>getType</name></name><argument_list>()</argument_list></call> == <name><name>CliParser</name>.<name>FUNCTION_CALL</name></name></expr>)</condition><then>
            <return>return <expr><call><name>convertValueByFunction</name><argument_list>(<argument><expr><name>keyTree</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr>;</return></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>CliUtils</name>.<name>unescapeSQLString</name></name><argument_list>(<argument><expr><call><name><name>keyTree</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>getBytesAccordingToType</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>getKeyComparatorForCF</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getKeyComparatorForCF</name><parameter_list>(<param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyComparator</name> <init>= <expr><call><name><name>cfKeysComparators</name>.<name>get</name></name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>keyComparator</name> == null</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>defaultValidationClass</name> <init>= <expr><call><name>getCfDef</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call>.<call><name>getKey_validation_class</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><name>defaultValidationClass</name> != null</expr>;</assert>
            <expr_stmt><expr><name>keyComparator</name> = <call><name>getFormatType</name><argument_list>(<argument><expr><name>defaultValidationClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>keyComparator</name></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>KsDefNamesComparator</name> <super><implements>implements <name><name>Comparator</name><argument_list>&lt;<argument><name>KsDef</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>KsDef</name></type> <name>a</name></decl></param>, <param><decl><type><name>KsDef</name></type> <name>b</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>a</name>.<name>name</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>b</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/** validates schema is propagated to all nodes */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>validateSchemaIsSettled</name><parameter_list>(<param><decl><type><name>String</name></type> <name>currentVersionId</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Waiting for schema agreement..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>versions</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>limit</name> <init>= <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> + <name><name>sessionState</name>.<name>schema_mwt</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>inAgreement</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
        <label><name>outer</name>:</label>
        <while>while <condition>(<expr><name>limit</name> - <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> &gt;= 0 &amp;&amp; !<name>inAgreement</name></expr>)</condition>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><name>versions</name> = <call><name><name>thriftClient</name>.<name>describe_schema_versions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// getting schema version for nodes of the ring</comment>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>(<name>e</name> instanceof <name>InvalidRequestException</name>) ? ((<name>InvalidRequestException</name>) <name>e</name>).<call><name>getWhy</name><argument_list>()</argument_list></call> : <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></catch></try>

            <for>for (<init><decl><type><name>String</name></type> <name>version</name> <range>: <expr><call><name><name>versions</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr>!<call><name><name>version</name>.<name>equals</name></name><argument_list>(<argument><expr><name>currentVersionId</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>version</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>StorageProxy</name>.<name>UNREACHABLE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <continue>continue outer;</continue></then></if>
            }</block></for>
            <expr_stmt><expr><name>inAgreement</name> = true</expr>;</expr_stmt>
        }</block></while>

        <if>if <condition>(<expr><call><name><name>versions</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name><name>StorageProxy</name>.<name>UNREACHABLE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>printf</name></name><argument_list>(<argument><expr>"Warning: unreachable nodes %s"</expr></argument>, <argument><expr><call><name><name>Joiner</name>.<name>on</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call>.<call><name>join</name><argument_list>(<argument><expr><call><name><name>versions</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>StorageProxy</name>.<name>UNREACHABLE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>!<name>inAgreement</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>printf</name></name><argument_list>(<argument><expr>"The schema has not settled in %d seconds; further migrations are ill-advised until it does.%nVersions are %s%n"</expr></argument>,
                                    <argument><expr><name><name>sessionState</name>.<name>schema_mwt</name></name> / 1000</expr></argument>, <argument><expr><call><name><name>FBUtilities</name>.<name>toString</name></name><argument_list>(<argument><expr><name>versions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"... schemas agree across the cluster"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>CfDefNamesComparator</name> <super><implements>implements <name><name>Comparator</name><argument_list>&lt;<argument><name>CfDef</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>CfDef</name></type> <name>a</name></decl></param>, <param><decl><type><name>CfDef</name></type> <name>b</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>a</name>.<name>name</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>b</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isCounterCF</name><parameter_list>(<param><decl><type><name>CfDef</name></type> <name>cfdef</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>defaultValidator</name> <init>= <expr><name><name>cfdef</name>.<name>default_validation_class</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>defaultValidator</name> != null &amp;&amp; !<call><name><name>defaultValidator</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr>(<call><name>getFormatType</name><argument_list>(<argument><expr><name>defaultValidator</name></expr></argument>)</argument_list></call> instanceof <name>CounterColumnType</name>)</expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Print elapsed time. Print 2 fraction digits if eta is under 10 ms.
     * @param startTime starting time in nanoseconds
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>elapsedTime</name><parameter_list>(<param><decl><type><name>long</name></type> <name>startTime</name></decl></param>)</parameter_list>
    <block>{
        <comment type="block" format="javadoc">/** time elapsed in nanoseconds */</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>eta</name> <init>= <expr><call><name><name>System</name>.<name>nanoTime</name></name><argument_list>()</argument_list></call> - <name>startTime</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"Elapsed time: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>eta</name> &lt; 10000000</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>eta</name>/10000.0</expr></argument>)</argument_list></call>/100.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>eta</name>/1000000.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>" msec(s)."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <class>class <name>CfAssumptions</name>
    <block>{
        <comment type="line">//Map&lt;KeySpace, Map&lt;ColumnFamily, Map&lt;Property, Value&gt;&gt;&gt;</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>assumptions</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>assumptionsChanged</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>assumptionDirectory</name></decl>;</decl_stmt>
        
        <constructor><specifier>public</specifier> <name>CfAssumptions</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><name>assumptions</name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>assumptionsChanged</name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><name>assumptionDirectory</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.home"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>".cassandra-cli"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>assumptionDirectory</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addAssumption</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name>String</name></type> <name>property</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ksAssumes</name> <init>= <expr><call><name><name>assumptions</name>.<name>get</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ksAssumes</name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>ksAssumes</name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>assumptions</name>.<name>put</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>ksAssumes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cfAssumes</name> <init>= <expr><call><name><name>ksAssumes</name>.<name>get</name></name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>cfAssumes</name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>cfAssumes</name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ksAssumes</name>.<name>put</name></name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>cfAssumes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <expr_stmt><expr><call><name><name>cfAssumes</name>.<name>put</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>assumptionsChanged</name> = true</expr>;</expr_stmt>
        }</block></function>
        
        <function><type><specifier>public</specifier> <name>void</name></type> <name>replayAssumptions</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr>!<call><name><name>CliMain</name>.<name>isConnected</name></name><argument_list>()</argument_list></call> || !<call><name>hasKeySpace</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return;</return></then></if>
            
            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cfAssumes</name> <init>= <expr><call><name><name>assumptions</name>.<name>get</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>cfAssumes</name> != null</expr>)</condition><then>
            <block>{
                <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>cfEntry</name> <range>: <expr><call><name><name>cfAssumes</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>cfEntry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>props</name> <init>= <expr><call><name><name>cfEntry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    
                    <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>propEntry</name> <range>: <expr><call><name><name>props</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                    <block>{
                        <expr_stmt><expr><call><name>applyAssumption</name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><call><name><name>propEntry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>propEntry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block></for>
            }</block></then></if>
        }</block></function>
        
        <function><type><specifier>private</specifier> <name>void</name></type> <name>readAssumptions</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>assumptionFile</name> <init>= <expr>new <call><name>File</name><argument_list>(<argument><expr><name>assumptionDirectory</name></expr></argument>, <argument><expr>"assumptions.json"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>assumptionFile</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <try>try
                <block>{
                    <decl_stmt><decl><type><name>JsonFactory</name></type> <name>f</name> <init>= <expr>new <call><name>JsonFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>JsonParser</name></type> <name>p</name> <init>= <expr><call><name><name>f</name>.<name>createJsonParser</name></name><argument_list>(<argument><expr><name>assumptionFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>JsonToken</name></type> <name>token</name> <init>= <expr><call><name><name>p</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr><name>token</name> != <name><name>JsonToken</name>.<name>END_OBJECT</name></name></expr>)</condition>
                    <block>{
                        <if>if <condition>(<expr><name>token</name> == <name><name>JsonToken</name>.<name>FIELD_NAME</name></name></expr>)</condition><then>
                        <block>{
                            <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>p</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ksAssumes</name> <init>= <expr><call><name><name>assumptions</name>.<name>get</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name>ksAssumes</name> == null</expr>)</condition><then>
                            <block>{
                                <expr_stmt><expr><name>ksAssumes</name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>assumptions</name>.<name>put</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>,  <argument><expr><name>ksAssumes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                            <expr_stmt><expr><name>token</name> = <call><name><name>p</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <while>while <condition>(<expr><name>token</name> != <name><name>JsonToken</name>.<name>END_ARRAY</name></name></expr>)</condition>
                            <block>{
                                <if>if <condition>(<expr><name>token</name> == <name><name>JsonToken</name>.<name>FIELD_NAME</name></name></expr>)</condition><then>
                                <block>{
                                    <decl_stmt><decl><type><name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>p</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cfAssumes</name> <init>= <expr><call><name><name>ksAssumes</name>.<name>get</name></name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <if>if <condition>(<expr><name>cfAssumes</name> == null</expr>)</condition><then>
                                    <block>{
                                        <expr_stmt><expr><name>cfAssumes</name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name>ksAssumes</name>.<name>put</name></name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>cfAssumes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    }</block></then></if>
                                    
                                    <expr_stmt><expr><name>token</name> = <call><name><name>p</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                    <while>while <condition>(<expr><name>token</name> != <name><name>JsonToken</name>.<name>END_ARRAY</name></name></expr>)</condition>
                                    <block>{
                                        <if>if <condition>(<expr><name>token</name> == <name><name>JsonToken</name>.<name>FIELD_NAME</name></name></expr>)</condition><then>
                                        <block>{
                                            <decl_stmt><decl><type><name>String</name></type> <name>prop</name> <init>= <expr><call><name><name>p</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                            <expr_stmt><expr><call><name><name>p</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                            <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>p</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                            <expr_stmt><expr><call><name><name>cfAssumes</name>.<name>put</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        }</block></then></if>
                                        
                                        <expr_stmt><expr><name>token</name> = <call><name><name>p</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                    }</block></while>
                                }</block></then></if>
                                <expr_stmt><expr><name>token</name> = <call><name><name>p</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            }</block></while>
                        }</block></then></if>
                        <expr_stmt><expr><name>token</name> = <call><name><name>p</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></while>
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Column Family assumptions read from " + <name>assumptionFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Failed reading " + <name>assumptionFile</name> + " file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>
        
        <function><type><specifier>private</specifier> <name>void</name></type> <name>writeAssumptions</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>assumptionsChanged</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>assumptionFile</name> <init>= <expr>new <call><name>File</name><argument_list>(<argument><expr><name>assumptionDirectory</name></expr></argument>, <argument><expr>"assumptions.json"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try
                <block>{
                    <decl_stmt><decl><type><name>JsonFactory</name></type> <name>f</name> <init>= <expr>new <call><name>JsonFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>JsonGenerator</name></type> <name>g</name> <init>= <expr><call><name><name>f</name>.<name>createJsonGenerator</name></name><argument_list>(<argument><expr><name>assumptionFile</name></expr></argument>, <argument><expr><name><name>JsonEncoding</name>.<name>UTF8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g</name>.<name>useDefaultPrettyPrinter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g</name>.<name>writeStartObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>ksEntry</name> <range>: <expr><call><name><name>assumptions</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                    <block>{
                        <expr_stmt><expr><call><name><name>g</name>.<name>writeFieldName</name></name><argument_list>(<argument><expr><call><name><name>ksEntry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g</name>.<name>writeStartArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>cfEntry</name> <range>: <expr><call><name><name>ksEntry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)
                        <block>{
                            <expr_stmt><expr><call><name><name>g</name>.<name>writeStartObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>g</name>.<name>writeFieldName</name></name><argument_list>(<argument><expr><call><name><name>cfEntry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>g</name>.<name>writeStartArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>asEntry</name> <range>: <expr><call><name><name>cfEntry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)
                            <block>{
                                <expr_stmt><expr><call><name><name>g</name>.<name>writeStartObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>g</name>.<name>writeStringField</name></name><argument_list>(<argument><expr><call><name><name>asEntry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>asEntry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>g</name>.<name>writeEndObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            }</block></for>
                            <expr_stmt><expr><call><name><name>g</name>.<name>writeEndArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>g</name>.<name>writeEndObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name><name>g</name>.<name>writeEndArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                    <expr_stmt><expr><call><name><name>g</name>.<name>writeEndObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Column Family assumptions written to " + <name>assumptionFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>assumptionsChanged</name> = false</expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
                <block>{
                    <expr_stmt><expr><call><name><name>sessionState</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Failed writing " + <name>assumptionFile</name> + " file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>
    }</block></class>
}
</unit>
