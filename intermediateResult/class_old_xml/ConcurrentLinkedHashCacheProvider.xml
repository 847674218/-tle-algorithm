<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCacheProvider.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>

<import>import <name><name>com</name>.<name>googlecode</name>.<name>concurrentlinkedhashmap</name>.<name>Weigher</name></name>;</import>
<import>import <name><name>com</name>.<name>googlecode</name>.<name>concurrentlinkedhashmap</name>.<name>Weighers</name></name>;</import>

<import>import <name><name>org</name>.<name>github</name>.<name>jamm</name>.<name>MemoryMeter</name></name>;</import>

<class><specifier>public</specifier> class <name>ConcurrentLinkedHashCacheProvider</name> <super><implements>implements <name>IRowCacheProvider</name></implements></super>
<block>{
    <function><type><specifier>public</specifier> <name><name>ICache</name><argument_list>&lt;<argument><name>RowCacheKey</name></argument>, <argument><name>IRowCacheEntry</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>(<param><decl><type><name>long</name></type> <name>capacity</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useMemoryWeigher</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>ConcurrentLinkedHashCache</name>.<name>create</name></name><argument_list>(<argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>useMemoryWeigher</name>
                                                            ? <call><name>createMemoryWeigher</name><argument_list>()</argument_list></call>
                                                            : <name><name>Weighers</name>.</name>&lt;<name>IRowCacheEntry</name>&gt;<call><name>singleton</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Weigher</name><argument_list>&lt;<argument><name>IRowCacheEntry</name></argument>&gt;</argument_list></name></type> <name>createMemoryWeigher</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <class><super><name><name>Weigher</name><argument_list>&lt;<argument><name>IRowCacheEntry</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>MemoryMeter</name></type> <name>meter</name> <init>= <expr>new <call><name>MemoryMeter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>weightOf</name><parameter_list>(<param><decl><type><name>IRowCacheEntry</name></type> <name>value</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr>(<name>int</name>) <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>meter</name>.<name>measureDeep</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>
}</block></class>
</unit>
