<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\compress\CompressionMetadata.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>Component</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>Descriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>BigLongArray</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Holds metadata about compressed file
 */</comment>
<class><specifier>public</specifier> class <name>CompressionMetadata</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>dataLength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>compressedFileLength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BigLongArray</name></type> <name>chunkOffsets</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>indexFilePath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>CompressionParameters</name></type> <name>parameters</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create metadata about given compressed file including uncompressed data length, chunk size
     * and list of the chunk offsets of the compressed data.
     *
     * This is an expensive operation! Don't create more than one for each
     * sstable.
     *
     * @param dataFilePath Path to the compressed file
     *
     * @return metadata about given compressed file.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionMetadata</name></type> <name>create</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dataFilePath</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Descriptor</name></type> <name>desc</name> <init>= <expr><call><name><name>Descriptor</name>.<name>fromFilename</name></name><argument_list>(<argument><expr><name>dataFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <return>return <expr>new <call><name>CompressionMetadata</name><argument_list>(<argument><expr><call><name><name>desc</name>.<name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name>.<name>COMPRESSION_INFO</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>dataFilePath</name></expr></argument>)</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="line">// This is package protected because of the tests.</comment>
    <constructor><name>CompressionMetadata</name><parameter_list>(<param><decl><type><name>String</name></type> <name>indexFilePath</name></decl></param>, <param><decl><type><name>long</name></type> <name>compressedLength</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>indexFilePath</name></name> = <name>indexFilePath</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DataInputStream</name></type> <name>stream</name> <init>= <expr>new <call><name>DataInputStream</name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>indexFilePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>compressorName</name> <init>= <expr><call><name><name>stream</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>optionCount</name> <init>= <expr><call><name><name>stream</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>optionCount</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>stream</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>stream</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>options</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>chunkLength</name> <init>= <expr><call><name><name>stream</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>parameters</name> = new <call><name>CompressionParameters</name><argument_list>(<argument><expr><name>compressorName</name></expr></argument>, <argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Cannot create CompressionParameters for stored parameters"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <expr_stmt><expr><name>dataLength</name> = <call><name><name>stream</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compressedFileLength</name> = <name>compressedLength</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>chunkOffsets</name> = <call><name>readChunkOffsets</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>FileUtils</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ICompressor</name></type> <name>compressor</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>parameters</name>.<name>sstableCompressor</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>chunkLength</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>parameters</name>.<name>chunkLength</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Read offsets of the individual chunks from the given input.
     *
     * @param input Source of the data.
     *
     * @return collection of the chunk offsets.
     *
     * @throws java.io.IOException on any I/O error (except EOF).
     */</comment>
    <function><type><specifier>private</specifier> <name>BigLongArray</name></type> <name>readChunkOffsets</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>input</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>chunkCount</name> <init>= <expr><call><name><name>input</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BigLongArray</name></type> <name>offsets</name> <init>= <expr>new <call><name>BigLongArray</name><argument_list>(<argument><expr><name>chunkCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>chunkCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>offsets</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>input</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>EOFException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>EOFException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Corrupted Index File %s: read %d but expected %d chunks."</expr></argument>,
                                                     <argument><expr><name>indexFilePath</name></expr></argument>,
                                                     <argument><expr><name>i</name></expr></argument>,
                                                     <argument><expr><name>chunkCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></for>

        <return>return <expr><name>offsets</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get a chunk of compressed data (offset, length) corresponding to given position
     *
     * @param position Position in the file.
     * @return pair of chunk offset and length.
     * @throws java.io.IOException on any I/O error.
     */</comment>
    <function><type><specifier>public</specifier> <name>Chunk</name></type> <name>chunkFor</name><parameter_list>(<param><decl><type><name>long</name></type> <name>position</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <comment type="line">// position of the chunk</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>position</name> / <call><name><name>parameters</name>.<name>chunkLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>idx</name> &gt;= <name><name>chunkOffsets</name>.<name>size</name></name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>EOFException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>chunkOffset</name> <init>= <expr><call><name><name>chunkOffsets</name>.<name>get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>nextChunkOffset</name> <init>= <expr>(<name>idx</name> + 1 == <name><name>chunkOffsets</name>.<name>size</name></name>)
                                ? <name>compressedFileLength</name>
                                : <call><name><name>chunkOffsets</name>.<name>get</name></name><argument_list>(<argument><expr><name>idx</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr>new <call><name>Chunk</name><argument_list>(<argument><expr><name>chunkOffset</name></expr></argument>, <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>nextChunkOffset</name> - <name>chunkOffset</name> - 4</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// "4" bytes reserved for checksum</comment>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Writer</name> <super><extends>extends <name>RandomAccessFile</name></extends></super>
    <block>{
        <comment type="line">// place for uncompressed data length in the index file</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>dataLengthOffset</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Writer</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"rw"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>writeHeader</name><parameter_list>(<param><decl><type><name>CompressionParameters</name></type> <name>parameters</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <comment type="line">// algorithm</comment>
            <expr_stmt><expr><call><name>writeUTF</name><argument_list>(<argument><expr><call><name><name>parameters</name>.<name>sstableCompressor</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeInt</name><argument_list>(<argument><expr><call><name><name>parameters</name>.<name>otherOptions</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>parameters</name>.<name>otherOptions</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name>writeUTF</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>writeUTF</name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <comment type="line">// store the length of the chunk</comment>
            <expr_stmt><expr><call><name>writeInt</name><argument_list>(<argument><expr><call><name><name>parameters</name>.<name>chunkLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// store position and reserve a place for uncompressed data length and chunks count</comment>
            <expr_stmt><expr><name>dataLengthOffset</name> = <call><name>getFilePointer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeLong</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeInt</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>finalizeHeader</name><parameter_list>(<param><decl><type><name>long</name></type> <name>dataLength</name></decl></param>, <param><decl><type><name>int</name></type> <name>chunks</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <assert>assert <expr><name>dataLengthOffset</name> != -1 : "writeHeader wasn't called"</expr>;</assert>

            <decl_stmt><decl><type><name>long</name></type> <name>currentPosition</name> <init>= <expr><call><name>getFilePointer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// seek back to the data length position</comment>
            <expr_stmt><expr><call><name>seek</name><argument_list>(<argument><expr><name>dataLengthOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// write uncompressed data length and chunks count</comment>
            <expr_stmt><expr><call><name>writeLong</name><argument_list>(<argument><expr><name>dataLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeInt</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// seek forward to the previous position</comment>
            <expr_stmt><expr><call><name>seek</name><argument_list>(<argument><expr><name>currentPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Get a chunk offset by it's index.
         *
         * @param chunkIndex Index of the chunk.
         *
         * @return offset of the chunk in the compressed file.
         *
         * @throws IOException any I/O error.
         */</comment>
        <function><type><specifier>public</specifier> <name>long</name></type> <name>chunkOffsetBy</name><parameter_list>(<param><decl><type><name>int</name></type> <name>chunkIndex</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <if>if <condition>(<expr><name>dataLengthOffset</name> == -1</expr>)</condition><then>
                <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"writeHeader wasn't called"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name>long</name></type> <name>position</name> <init>= <expr><call><name>getFilePointer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// seek to the position of the given chunk</comment>
            <expr_stmt><expr><call><name>seek</name><argument_list>(<argument><expr><name>dataLengthOffset</name>
                 + 8 <comment type="line">// size reserved for uncompressed data length</comment>
                 + 4 <comment type="line">// size reserved for chunk count</comment>
                 + (<name>chunkIndex</name> * 8L)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <try>try
            <block>{
                <return>return <expr><call><name>readLong</name><argument_list>()</argument_list></call></expr>;</return>
            }</block>
            <finally>finally
            <block>{
                <comment type="line">// back to the original position</comment>
                <expr_stmt><expr><call><name>seek</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Reset the writer so that the next chunk offset written will be the
         * one of {@code chunkIndex}.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>resetAndTruncate</name><parameter_list>(<param><decl><type><name>int</name></type> <name>chunkIndex</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name>seek</name><argument_list>(<argument><expr><name>dataLengthOffset</name>
                 + 8 <comment type="line">// size reserved for uncompressed data length</comment>
                 + 4 <comment type="line">// size reserved for chunk count</comment>
                 + (<name>chunkIndex</name> * 8L)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getChannel</name><argument_list>()</argument_list></call>.<call><name>truncate</name><argument_list>(<argument><expr><call><name>getFilePointer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Holds offset and length of the file chunk
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Chunk</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>length</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Chunk</name><parameter_list>(<param><decl><type><name>long</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>offset</name></name> = <name>offset</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>length</name></name> = <name>length</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Chunk&lt;offset: %d, length: %d&gt;"</expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
