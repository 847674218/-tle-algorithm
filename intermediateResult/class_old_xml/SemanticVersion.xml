<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\SemanticVersion.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>regex</name>.<name>Pattern</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>regex</name>.<name>Matcher</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Objects</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Implements semantic versioning as defined at http://semver.org/.
 *
 * Note: The following code uses a slight variation from the document above in
 * that it doesn't allow dashes in pre-release and build identifier.
 */</comment>
<class><specifier>public</specifier> class <name>SemanticVersion</name> <super><implements>implements <name><name>Comparable</name><argument_list>&lt;<argument><name>SemanticVersion</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VERSION_REGEXP</name> <init>= <expr>"(\\d+)\\.(\\d+)\\.(\\d+)(\\-[.\\w]+)?(\\+[.\\w]+)?"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>pattern</name> <init>= <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr><name>VERSION_REGEXP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>major</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>minor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>patch</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>preRelease</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>build</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>SemanticVersion</name><parameter_list>(<param><decl><type><name>int</name></type> <name>major</name></decl></param>, <param><decl><type><name>int</name></type> <name>minor</name></decl></param>, <param><decl><type><name>int</name></type> <name>patch</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>preRelease</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>build</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>major</name></name> = <name>major</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minor</name></name> = <name>minor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>patch</name></name> = <name>patch</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>preRelease</name></name> = <name>preRelease</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>build</name></name> = <name>build</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Parse a semantic version from a string.
     *
     * @param version the string to parse
     * @throws IllegalArgumentException if the provided string does not
     * represent a semantic version
     */</comment>
    <constructor><specifier>public</specifier> <name>SemanticVersion</name><parameter_list>(<param><decl><type><name>String</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Matcher</name></type> <name>matcher</name> <init>= <expr><call><name><name>pattern</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>matcher</name>.<name>matches</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid version value: " + <name>version</name> + " (see http://semver.org/ for details)"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <try>try
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>major</name></name> = <call><name><name>Integer</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>matcher</name>.<name>group</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>minor</name></name> = <call><name><name>Integer</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>matcher</name>.<name>group</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>patch</name></name> = <call><name><name>Integer</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>matcher</name>.<name>group</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>pr</name> <init>= <expr><call><name><name>matcher</name>.<name>group</name></name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>bld</name> <init>= <expr><call><name><name>matcher</name>.<name>group</name></name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>preRelease</name></name> = <name>pr</name> == null || <call><name><name>pr</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? null : <call><name>parseIdentifiers</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>build</name></name> = <name>bld</name> == null || <call><name><name>bld</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? null : <call><name>parseIdentifiers</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>bld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid version value: " + <name>version</name> + " (see http://semver.org/ for details)"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></constructor>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name><index>[]</index></type> <name>parseIdentifiers</name><parameter_list>(<param><decl><type><name>String</name></type> <name>version</name></decl></param>, <param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Drop initial - or +</comment>
        <expr_stmt><expr><name>str</name> = <call><name><name>str</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>parts</name> <init>= <expr><call><name><name>str</name>.<name>split</name></name><argument_list>(<argument><expr>"\\."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>String</name></type> <name>part</name> <range>: <expr><name>parts</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr>!<call><name><name>part</name>.<name>matches</name></name><argument_list>(<argument><expr>"\\w+"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid version value: " + <name>version</name> + " (see http://semver.org/ for details)"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></for>
        <return>return <expr><name>parts</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>SemanticVersion</name></type> <name>other</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>major</name> &lt; <name><name>other</name>.<name>major</name></name></expr>)</condition><then>
            <return>return <expr>-1</expr>;</return></then></if>
        <if>if <condition>(<expr><name>major</name> &gt; <name><name>other</name>.<name>major</name></name></expr>)</condition><then>
            <return>return <expr>1</expr>;</return></then></if>

        <if>if <condition>(<expr><name>minor</name> &lt; <name><name>other</name>.<name>minor</name></name></expr>)</condition><then>
            <return>return <expr>-1</expr>;</return></then></if>
        <if>if <condition>(<expr><name>minor</name> &gt; <name><name>other</name>.<name>minor</name></name></expr>)</condition><then>
            <return>return <expr>1</expr>;</return></then></if>

        <if>if <condition>(<expr><name>patch</name> &lt; <name><name>other</name>.<name>patch</name></name></expr>)</condition><then>
            <return>return <expr>-1</expr>;</return></then></if>
        <if>if <condition>(<expr><name>patch</name> &gt; <name><name>other</name>.<name>patch</name></name></expr>)</condition><then>
            <return>return <expr>1</expr>;</return></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>compareIdentifiers</name><argument_list>(<argument><expr><name>preRelease</name></expr></argument>, <argument><expr><name><name>other</name>.<name>preRelease</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>c</name> != 0</expr>)</condition><then>
            <return>return <expr><name>c</name></expr>;</return></then></if>

        <return>return <expr><call><name>compareIdentifiers</name><argument_list>(<argument><expr><name>build</name></expr></argument>, <argument><expr><name><name>other</name>.<name>build</name></name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a version that is backward compatible with this version amongst a list
     * of provided version, or null if none can be found.
     *
     * For instance:
     *   "2.0.0".findSupportingVersion("2.0.0", "3.0.0") == "2.0.0"
     *   "2.0.0".findSupportingVersion("2.1.3", "3.0.0") == "2.1.3"
     *   "2.0.0".findSupportingVersion("3.0.0") == null
     *   "2.0.3".findSupportingVersion("2.0.0") == "2.0.0"
     *   "2.1.0".findSupportingVersion("2.0.0") == null
     */</comment>
    <function><type><specifier>public</specifier> <name>SemanticVersion</name></type> <name>findSupportingVersion</name><parameter_list>(<param><decl><type><name>SemanticVersion</name>...</type> <name>versions</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>SemanticVersion</name></type> <name>version</name> <range>: <expr><name>versions</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name>isSupportedBy</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>version</name></expr>;</return></then></if>
        }</block></for>
        <return>return <expr>null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSupportedBy</name><parameter_list>(<param><decl><type><name>SemanticVersion</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>major</name> == <name><name>version</name>.<name>major</name></name> &amp;&amp; <name>minor</name> &lt;= <name><name>version</name>.<name>minor</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>compareIdentifiers</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>ids1</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>ids2</name></decl></param>, <param><decl><type><name>int</name></type> <name>defaultPred</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>ids1</name> == null</expr>)</condition><then>
            <return>return <expr><name>ids2</name> == null ? 0 : <name>defaultPred</name></expr>;</return></then>
        <else>else <if>if <condition>(<expr><name>ids2</name> == null</expr>)</condition><then>
            <return>return <expr>-<name>defaultPred</name></expr>;</return></then></if></else></if>

        <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name><name>ids1</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>ids2</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>min</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>Integer</name></type> <name>i1</name> <init>= <expr><call><name>tryParseInt</name><argument_list>(<argument><expr><name><name>ids1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Integer</name></type> <name>i2</name> <init>= <expr><call><name>tryParseInt</name><argument_list>(<argument><expr><name><name>ids2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>i1</name> != null</expr>)</condition><then>
            <block>{
                <comment type="line">// integer have precedence</comment>
                <if>if <condition>(<expr><name>i2</name> == null || <name>i1</name> &lt; <name>i2</name></expr>)</condition><then>
                    <return>return <expr>-1</expr>;</return></then>
                <else>else <if>if <condition>(<expr><name>i1</name> &gt; <name>i2</name></expr>)</condition><then>
                    <return>return <expr>1</expr>;</return></then></if></else></if>
            }</block></then>
            <else>else
            <block>{
                <comment type="line">// integer have precedence</comment>
                <if>if <condition>(<expr><name>i2</name> != null</expr>)</condition><then>
                    <return>return <expr>1</expr>;</return></then></if>

                <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>ids1</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>compareTo</name><argument_list>(<argument><expr><name><name>ids2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>c</name> != 0</expr>)</condition><then>
                    <return>return <expr><name>c</name></expr>;</return></then></if>
            }</block></else></if>
        }</block></for>

        <if>if <condition>(<expr><name><name>ids1</name>.<name>length</name></name> &lt; <name><name>ids2</name>.<name>length</name></name></expr>)</condition><then>
            <return>return <expr>-1</expr>;</return></then></if>
        <if>if <condition>(<expr><name><name>ids1</name>.<name>length</name></name> &gt; <name><name>ids2</name>.<name>length</name></name></expr>)</condition><then>
            <return>return <expr>1</expr>;</return></then></if>
        <return>return <expr>0</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>tryParseInt</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>Integer</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>null</expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if<condition>(<expr>!(<name>o</name> instanceof <name>SemanticVersion</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <decl_stmt><decl><type><name>SemanticVersion</name></type> <name>that</name> <init>= <expr>(<name>SemanticVersion</name>)<name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>major</name> == <name><name>that</name>.<name>major</name></name>
            &amp;&amp; <name>minor</name> == <name><name>that</name>.<name>minor</name></name>
            &amp;&amp; <name>patch</name> == <name><name>that</name>.<name>patch</name></name>
            &amp;&amp; <call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>preRelease</name></expr></argument>, <argument><expr><name><name>that</name>.<name>preRelease</name></name></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>build</name></expr></argument>, <argument><expr><name><name>that</name>.<name>build</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Objects</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>preRelease</name></expr></argument>, <argument><expr><name>build</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>major</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>minor</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>preRelease</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>'-'</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><name>preRelease</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name>build</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>'+'</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><name>build</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
