<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\net\AsyncResult.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeoutException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicBoolean</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>locks</name>.<name>Condition</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>locks</name>.<name>Lock</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>locks</name>.<name>ReentrantLock</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<class>class <name>AsyncResult</name> <super><implements>implements <name>IAsyncResult</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>AsyncResult</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AtomicBoolean</name></type> <name>done</name> <init>= <expr>new <call><name>AtomicBoolean</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Lock</name></type> <name>lock</name> <init>= <expr>new <call><name>ReentrantLock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Condition</name></type> <name>condition</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>startTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>InetAddress</name></type> <name>from</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AsyncResult</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>condition</name> = <call><name><name>lock</name>.<name>newCondition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>startTime</name> = <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>get</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timeout</name></decl></param>, <param><decl><type><name>TimeUnit</name></type> <name>tu</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TimeoutException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>lock</name>.<name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>bVal</name> <init>= <expr>true</expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <if>if <condition>(<expr>!<call><name><name>done</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>timeout</name> = <call><name><name>TimeUnit</name>.<name>MILLISECONDS</name>.<name>convert</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>tu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>long</name></type> <name>overall_timeout</name> <init>= <expr><name>timeout</name> - (<call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> - <name>startTime</name>)</expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>bVal</name> = <name>overall_timeout</name> &gt; 0 &amp;&amp; <call><name><name>condition</name>.<name>await</name></name><argument_list>(<argument><expr><name>overall_timeout</name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>ex</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <if>if <condition>(<expr>!<name>bVal</name> &amp;&amp; !<call><name><name>done</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>TimeoutException</name><argument_list>(<argument><expr>"Operation timed out."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>lock</name>.<name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>result</name><parameter_list>(<param><decl><type><name>Message</name></type> <name>response</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>lock</name>.<name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>done</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>from</name> = <call><name><name>response</name>.<name>getFrom</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> = <call><name><name>response</name>.<name>getMessageBody</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>done</name>.<name>set</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>condition</name>.<name>signal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>lock</name>.<name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLatencyForSnitch</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>InetAddress</name></type> <name>getFrom</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>from</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
