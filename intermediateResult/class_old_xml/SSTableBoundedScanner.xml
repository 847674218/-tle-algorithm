<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\sstable\SSTableBoundedScanner.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>IColumnIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>Token</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A SSTableScanner that only reads key in a given range (for validation compaction).
 */</comment>
<class><specifier>public</specifier> class <name>SSTableBoundedScanner</name> <super><extends>extends <name>SSTableScanner</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rangeIterator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Pair</name><argument_list>&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>currentRange</name></decl>;</decl_stmt>

    <constructor><name>SSTableBoundedScanner</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skipCache</name></decl></param>, <param><decl><type><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>skipCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeIterator</name></name> = <call><name><name>sstable</name>.<name>getPositionsForRanges</name></name><argument_list>(<argument><expr><call><name><name>Collections</name>.<name>singletonList</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>rangeIterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>currentRange</name> = <call><name><name>rangeIterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>file</name>.<name>seek</name></name><argument_list>(<argument><expr><name><name>currentRange</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>sstable</name>.<name>markSuspect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>exhausted</name> = true</expr>;</expr_stmt>
        }</block></else></if>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>iterator</name> == null</expr>)</condition><then>
            <expr_stmt><expr><name>iterator</name> = <name>exhausted</name> ? <call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr>new <name><name>IColumnIterator</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call> : new <call><name>BoundedKeyScanningIterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>IColumnIterator</name></type> <name>next</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>iterator</name> == null</expr>)</condition><then>
            <expr_stmt><expr><name>iterator</name> = <name>exhausted</name> ? <call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr>new <name><name>IColumnIterator</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call> : new <call><name>BoundedKeyScanningIterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>protected</specifier> class <name>BoundedKeyScanningIterator</name> <super><extends>extends <name>KeyScanningIterator</name></extends></super>
    <block>{
        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
        <block>{
            <if>if <condition>(<expr>!<call><name><name>super</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr>false</expr>;</return></then></if>

            <if>if <condition>(<expr><name>finishedAt</name> &lt; <name><name>currentRange</name>.<name>right</name></name></expr>)</condition><then>
                <return>return <expr>true</expr>;</return></then></if>

            <if>if <condition>(<expr><call><name><name>rangeIterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>currentRange</name> = <call><name><name>rangeIterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>finishedAt</name> = <name><name>currentRange</name>.<name>left</name></name></expr>;</expr_stmt> <comment type="line">// next() will seek for us</comment>
                <return>return <expr>true</expr>;</return>
            }</block></then>
            <else>else
            <block>{
                <return>return <expr>false</expr>;</return>
            }</block></else></if>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
