<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\marshal\UTF8Type.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>jdbc</name>.<name>JdbcUTF8</name></name>;</import>

<class><specifier>public</specifier> class <name>UTF8Type</name> <super><extends>extends <name><name>AbstractType</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UTF8Type</name></type> <name>instance</name> <init>= <expr>new <call><name>UTF8Type</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><name>UTF8Type</name><parameter_list>()</parameter_list> <block>{}</block></constructor> <comment type="line">// singleton</comment>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>compose</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>JdbcUTF8</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>decompose</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>JdbcUTF8</name>.<name>instance</name>.<name>decompose</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>o1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>o2</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>BytesType</name>.<name>bytesCompare</name></name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <return>return <expr><call><name><name>JdbcUTF8</name>.<name>instance</name>.<name>getString</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>jdbc</name>.<name>MarshalException</name></name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>fromString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>decompose</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>UTF8Validator</name>.<name>validate</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>MarshalException</name><argument_list>(<argument><expr>"String didn't validate."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <class><specifier>static</specifier> class <name>UTF8Validator</name>
    <block>{
        <enum>enum <name>State</name> <block>{
            <decl><name>START</name></decl>,
            <decl><name>TWO</name></decl>,
            <decl><name>TWO_80</name></decl>,
            <decl><name>THREE_a0bf</name></decl>,
            <decl><name>THREE_80bf_1</name></decl>,
            <decl><name>THREE_80bf_2</name></decl>,
            <decl><name>FOUR_90bf</name></decl>,
            <decl><name>FOUR_80bf_3</name></decl>,
        }</block></enum><empty_stmt>;</empty_stmt>

        <comment type="line">// since we're not converting to java strings, we don't need to worry about converting to surrogates.</comment>
        <comment type="line">// buf has already been sliced/duplicated.</comment>
        <function><type><specifier>static</specifier> <name>boolean</name></type> <name>validate</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>buf</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name>buf</name> = <call><name><name>buf</name>.<name>slice</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>State</name></type> <name>state</name> <init>= <expr><name><name>State</name>.<name>START</name></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>buf</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition>
            <block>{
                <expr_stmt><expr><name>b</name> = <call><name><name>buf</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <switch>switch <condition>(<expr><name>state</name></expr>)</condition>
                <block>{
                    <case>case <expr><name>START</name></expr>:
                        <if>if <condition>(<expr><name>b</name> &gt;= 0</expr>)</condition><then>
                        <block>{
                            <comment type="line">// ascii, state stays start.</comment>
                            <if>if <condition>(<expr><name>b</name> &gt; 127</expr>)</condition><then>
                                <return>return <expr>false</expr>;</return></then></if>
                        }</block></then>
                        <else>else <if>if <condition>(<expr>(<name>b</name> &gt;&gt; 5) == -2</expr>)</condition><then>
                        <block>{
                            <comment type="line">// validate first byte of 2-byte char, 0xc2-0xdf</comment>
                            <if>if <condition>(<expr><name>b</name> == (<name>byte</name>) 0xc0</expr>)</condition><then>
                                <comment type="line">// speical case: modified utf8 null is 0xc080.</comment>
                                <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>TWO_80</name></name></expr>;</expr_stmt></then>
                            <else>else <if>if <condition>(<expr>(<name>b</name> &amp; 0x1e) == 0</expr>)</condition><then>
                                <return>return <expr>false</expr>;</return></then></if></else></if>
                            <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>TWO</name></name></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <if>if <condition>(<expr>(<name>b</name> &gt;&gt; 4) == -2</expr>)</condition><then>
                        <block>{
                            <comment type="line">// 3 bytes. first byte will be 0xe0 or 0xe1-0xef. handling of second byte will differ.</comment>
                            <comment type="line">// so 0xe0,0xa0-0xbf,0x80-0xbf or 0xe1-0xef,0x80-0xbf,0x80-0xbf.</comment>
                            <if>if <condition>(<expr><name>b</name> == (<name>byte</name>)0xe0</expr>)</condition><then>
                                <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>THREE_a0bf</name></name></expr>;</expr_stmt></then>
                            <else>else
                                <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>THREE_80bf_2</name></name></expr>;</expr_stmt></else></if>
                            <break>break;</break>
                        }</block></then>
                        <else>else <if>if <condition>(<expr>(<name>b</name> &gt;&gt; 3) == -2</expr>)</condition><then>
                        <block>{
                            <comment type="line">// 4 bytes. this is where the fun starts.</comment>
                            <if>if <condition>(<expr><name>b</name> == (<name>byte</name>)0xf0</expr>)</condition><then>
                                <comment type="line">// 0xf0, 0x90-0xbf, 0x80-0xbf, 0x80-0xbf</comment>
                                <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>FOUR_90bf</name></name></expr>;</expr_stmt></then>
                            <else>else <if>if <condition>(<expr><name>b</name> == (<name>byte</name>)0xf4</expr>)</condition><then>
                                <comment type="line">// 0xf4, 0x80-0xbf, 0x80-0xbf, 0x80-0xbf</comment>
                                <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>FOUR_80bf_3</name></name></expr>;</expr_stmt></then>
                            <else>else
                                <comment type="line">// 0xf1-0xf3, 0x80-0xbf, 0x80-0xbf, 0x80-0xbf</comment>
                                <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>FOUR_80bf_3</name></name></expr>;</expr_stmt></else></if></else></if>
                            <break>break;</break>
                        }</block></then>
                        <else>else
                            <return>return <expr>false</expr>;</return></else></if></else></if></else></if></else></if> <comment type="line">// malformed.</comment>
                        <break>break;</break>
                    </case><case>case <expr><name>TWO</name></expr>:
                        <comment type="line">// validate second byte of 2-byte char, 0x80-0xbf</comment>
                        <if>if <condition>(<expr>(<name>b</name> &amp; 0xc0) != 0x80</expr>)</condition><then>
                            <return>return <expr>false</expr>;</return></then></if>
                        <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>START</name></name></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr><name>TWO_80</name></expr>:
                        <if>if <condition>(<expr><name>b</name> != (<name>byte</name>)0x80</expr>)</condition><then>
                            <return>return <expr>false</expr>;</return></then></if>
                        <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>START</name></name></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr><name>THREE_a0bf</name></expr>:
                        <if>if <condition>(<expr>(<name>b</name> &amp; 0xe0) == 0x80</expr>)</condition><then>
                            <return>return <expr>false</expr>;</return></then></if>
                        <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>THREE_80bf_1</name></name></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr><name>THREE_80bf_1</name></expr>:
                        <comment type="line">// expecting 0x80-0xbf</comment>
                        <if>if <condition>(<expr>(<name>b</name> &amp; 0xc0) != 0x80</expr>)</condition><then>
                            <return>return <expr>false</expr>;</return></then></if>
                        <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>START</name></name></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr><name>THREE_80bf_2</name></expr>:
                        <comment type="line">// expecting 0x80-bf and then another of the same.</comment>
                        <if>if <condition>(<expr>(<name>b</name> &amp; 0xc0) != 0x80</expr>)</condition><then>
                            <return>return <expr>false</expr>;</return></then></if>
                        <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>THREE_80bf_1</name></name></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr><name>FOUR_90bf</name></expr>:
                        <comment type="line">// expecting 0x90-bf. 2nd byte of 4byte sequence. after that it should degrade to 80-bf,80-bf (like 3byte seq).</comment>
                        <if>if <condition>(<expr>(<name>b</name> &amp; 0x30) == 0</expr>)</condition><then>
                            <return>return <expr>false</expr>;</return></then></if>
                        <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>THREE_80bf_2</name></name></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><case>case <expr><name>FOUR_80bf_3</name></expr>:
                        <comment type="line">// expecting 0x80-bf 3 times. degenerates to THREE_80bf_2.</comment>
                        <if>if <condition>(<expr>(<name>b</name> &amp; 0xc0) != 0x80</expr>)</condition><then>
                            <return>return <expr>false</expr>;</return></then></if>
                        <expr_stmt><expr><name>state</name> = <name><name>State</name>.<name>THREE_80bf_2</name></name></expr>;</expr_stmt>
                        <break>break;</break>
                    </case><default>default:
                        <return>return <expr>false</expr>;</return> <comment type="line">// invalid state.</comment>
                </default>}</block></switch>
            }</block></while>
            <comment type="line">// if state != start, we've got underflow. that's an error.</comment>
            <return>return <expr><name>state</name> == <name><name>State</name>.<name>START</name></name></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>isCompatibleWith</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>previous</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Anything that is ascii is also utf8, and they both use bytes</comment>
        <comment type="line">// comparison</comment>
        <return>return <expr><name>this</name> == <name>previous</name> || <name>previous</name> == <name><name>AsciiType</name>.<name>instance</name></name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
