<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\commitlog\ReplayPosition.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>commitlog</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>io</name>.<name>DataInput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataOutput</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Function</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Iterables</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Ordering</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>ISerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableReader</name></name>;</import>

<class><specifier>public</specifier> class <name>ReplayPosition</name> <super><implements>implements <name><name>Comparable</name><argument_list>&lt;<argument><name>ReplayPosition</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ReplayPositionSerializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>ReplayPositionSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// NONE is used for SSTables that are streamed from other nodes and thus have no relationship</comment>
    <comment type="line">// with our local commitlog. The values satisfy the critera that</comment>
    <comment type="line">//  - no real commitlog segment will have the given id</comment>
    <comment type="line">//  - it will sort before any real replayposition, so it will be effectively ignored by getReplayPosition</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ReplayPosition</name></type> <name>NONE</name> <init>= <expr>new <call><name>ReplayPosition</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Convenience method to compute the replay position for a group of SSTables.
     * @param sstables
     * @return the most recent (highest) replay position
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ReplayPosition</name></type> <name>getReplayPosition</name><parameter_list>(<param><decl><type><name><name>Iterable</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>SSTableReader</name></extends></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>Iterables</name>.<name>isEmpty</name></name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NONE</name></expr>;</return></then></if>

        <decl_stmt><decl><type><name><name>Function</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>, <argument><name>ReplayPosition</name></argument>&gt;</argument_list></name></type> <name>f</name> <init>= <expr>new <class><super><name><name>Function</name><argument_list>&lt;<argument><name>SSTableReader</name></argument>, <argument><name>ReplayPosition</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ReplayPosition</name></type> <name>apply</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>)</parameter_list>
            <block>{
                <return>return <expr><call><name><name>sstable</name>.<name>getReplayPosition</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Ordering</name><argument_list>&lt;<argument><name>ReplayPosition</name></argument>&gt;</argument_list></name></type> <name>ordering</name> <init>= <expr><call><name><name>Ordering</name>.<name>from</name></name><argument_list>(<argument><expr><name><name>ReplayPosition</name>.<name>comparator</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>ordering</name>.<name>max</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name>.<name>transform</name></name><argument_list>(<argument><expr><name>sstables</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>segment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>position</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>ReplayPosition</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr>new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>ReplayPosition</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>ReplayPosition</name></type> <name>o1</name></decl></param>, <param><decl><type><name>ReplayPosition</name></type> <name>o2</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name><name>o1</name>.<name>segment</name></name> != <name><name>o2</name>.<name>segment</name></name></expr>)</condition><then>
                <return>return <expr><call><name><name>Long</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name><name>o1</name>.<name>segment</name></name></expr></argument>)</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><name><name>o2</name>.<name>segment</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

            <return>return <expr><call><name><name>Integer</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name><name>o1</name>.<name>position</name></name></expr></argument>)</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><name><name>o2</name>.<name>position</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ReplayPosition</name><parameter_list>(<param><decl><type><name>long</name></type> <name>segment</name></decl></param>, <param><decl><type><name>int</name></type> <name>position</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>segment</name></name> = <name>segment</name></expr>;</expr_stmt>
        <assert>assert <expr><name>position</name> &gt;= 0</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>position</name></name> = <name>position</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>ReplayPosition</name></type> <name>other</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>o</name></expr>)</condition><then> <return>return <expr>true</expr>;</return></then></if>
        <if>if <condition>(<expr><name>o</name> == null || <call><name>getClass</name><argument_list>()</argument_list></call> != <call><name><name>o</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <return>return <expr>false</expr>;</return></then></if>

        <decl_stmt><decl><type><name>ReplayPosition</name></type> <name>that</name> <init>= <expr>(<name>ReplayPosition</name>) <name>o</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>position</name> != <name><name>that</name>.<name>position</name></name></expr>)</condition><then> <return>return <expr>false</expr>;</return></then></if>
        <return>return <expr><name>segment</name> == <name><name>that</name>.<name>segment</name></name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>segment</name> ^ (<name>segment</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 31 * <name>result</name> + <name>position</name></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"ReplayPosition(" +
               "segmentId=" + <name>segment</name> +
               ", position=" + <name>position</name> +
               ')'</expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ReplayPositionSerializer</name> <super><implements>implements <name><name>ISerializer</name><argument_list>&lt;<argument><name>ReplayPosition</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>ReplayPosition</name></type> <name>rp</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeLong</name></name><argument_list>(<argument><expr><name><name>rp</name>.<name>segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>rp</name>.<name>position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ReplayPosition</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{
            <return>return <expr>new <call><name>ReplayPosition</name><argument_list>(<argument><expr><call><name><name>dis</name>.<name>readLong</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>ReplayPosition</name></type> <name>object</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
