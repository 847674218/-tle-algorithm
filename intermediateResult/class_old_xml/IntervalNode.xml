<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\IntervalTree\IntervalNode.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>IntervalTree</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>IntervalNode</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>IntervalNode</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Comparable</name></type> <name>v_pt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Comparable</name></type> <name>v_min</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Comparable</name></type> <name>v_max</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>intersects_left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>intersects_right</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IntervalNode</name></type> <name>left</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IntervalNode</name></type> <name>right</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>IntervalNode</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>toBisect</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Creating IntervalNode from {}"</expr></argument>, <argument><expr><name>toBisect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>toBisect</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>findMinMedianMax</name><argument_list>(<argument><expr><name>toBisect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>intersects</name> <init>= <expr><call><name>getIntersectingIntervals</name><argument_list>(<argument><expr><name>toBisect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>intersects_left</name> = <call><name><name>Interval</name>.<name>minOrdering</name>.<name>sortedCopy</name></name><argument_list>(<argument><expr><name>intersects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>intersects_right</name> = <call><name><name>Interval</name>.<name>maxOrdering</name>.<name>reverse</name></name><argument_list>()</argument_list></call>.<call><name>sortedCopy</name><argument_list>(<argument><expr><name>intersects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//if i.max &lt; v_pt then it goes to the left subtree</comment>
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>leftSegment</name> <init>= <expr><call><name>getLeftIntervals</name><argument_list>(<argument><expr><name>toBisect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>rightSegment</name> <init>= <expr><call><name>getRightIntervals</name><argument_list>(<argument><expr><name>toBisect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr>(<call><name><name>intersects</name>.<name>size</name></name><argument_list>()</argument_list></call> + <call><name><name>leftSegment</name>.<name>size</name></name><argument_list>()</argument_list></call> + <call><name><name>rightSegment</name>.<name>size</name></name><argument_list>()</argument_list></call>) == <call><name><name>toBisect</name>.<name>size</name></name><argument_list>()</argument_list></call> :
                    "intersects (" + <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>intersects</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> +
                    ") + leftSegment (" + <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>leftSegment</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> +
                    ") + rightSegment (" + <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>rightSegment</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> +
                    ") != toBisect (" + <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>toBisect</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + ")"</expr>;</assert>
            <if>if <condition>(<expr><call><name><name>leftSegment</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
                <expr_stmt><expr><name><name>this</name>.<name>left</name></name> = new <call><name>IntervalNode</name><argument_list>(<argument><expr><name>leftSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <if>if <condition>(<expr><call><name><name>rightSegment</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
                <expr_stmt><expr><name><name>this</name>.<name>right</name></name> = new <call><name>IntervalNode</name><argument_list>(<argument><expr><name>rightSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>getLeftIntervals</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>retval</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Interval</name></type> <name>candidate</name> <range>: <expr><name>candidates</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>candidate</name>.<name>max</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>v_pt</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>retval</name>.<name>add</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>
        <return>return <expr><name>retval</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>getRightIntervals</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>retval</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Interval</name></type> <name>candidate</name> <range>: <expr><name>candidates</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>candidate</name>.<name>min</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>v_pt</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>retval</name>.<name>add</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>
        <return>return <expr><name>retval</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>getIntersectingIntervals</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>retval</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Interval</name></type> <name>candidate</name> <range>: <expr><name>candidates</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>candidate</name>.<name>min</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>v_pt</name></expr></argument>)</argument_list></call> &lt;= 0
                &amp;&amp; <call><name><name>candidate</name>.<name>max</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>v_pt</name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>retval</name>.<name>add</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>
        <return>return <expr><name>retval</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>findMinMedianMax</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>intervals</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>intervals</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Comparable</name></argument>&gt;</argument_list></name></type> <name>allEndpoints</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Comparable</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>intervals</name>.<name>size</name></name><argument_list>()</argument_list></call> * 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name>Interval</name></type> <name>interval</name> <range>: <expr><name>intervals</name></expr></range></decl></init>)
            <block>{
                <assert>assert <expr><call><name><name>interval</name>.<name>min</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>max</name></name></expr></argument>)</argument_list></call> &lt;= 0 : "Interval min &gt; max"</expr>;</assert>
                <expr_stmt><expr><call><name><name>allEndpoints</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>allEndpoints</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>interval</name>.<name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>allEndpoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v_pt</name> = <call><name><name>allEndpoints</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>intervals</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v_min</name> = <call><name><name>allEndpoints</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v_max</name> = <call><name><name>allEndpoints</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>allEndpoints</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
