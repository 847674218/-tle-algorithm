<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\config\CFMetaData.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Constructor</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>MapDifference</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Maps</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>builder</name>.<name>EqualsBuilder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>builder</name>.<name>HashCodeBuilder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>builder</name>.<name>ToStringBuilder</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>CFDefinition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>UntypedResultSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name>.<name>AbstractCompactionStrategy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>index</name>.<name>SecondaryIndex</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IColumnSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name>.<name>CompressionParameters</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name>.<name>SnappyCompressor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CfDef</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>IndexType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>.*;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>CFMetaData</name>
<block>{
    <comment type="line">//</comment>
    <comment type="line">// !! Important !!</comment>
    <comment type="line">// This class can be tricky to modify.  Please read http://wiki.apache.org/cassandra/ConfigurationNotes</comment>
    <comment type="line">// for how to do so safely.</comment>
    <comment type="line">//</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>double</name></type> <name>DEFAULT_READ_REPAIR_CHANCE</name> <init>= <expr>0.1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>double</name></type> <name>DEFAULT_DCLOCAL_READ_REPAIR_CHANCE</name> <init>= <expr>0.0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>DEFAULT_REPLICATE_ON_WRITE</name> <init>= <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>DEFAULT_GC_GRACE_SECONDS</name> <init>= <expr>864000</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>DEFAULT_MIN_COMPACTION_THRESHOLD</name> <init>= <expr>4</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>DEFAULT_MAX_COMPACTION_THRESHOLD</name> <init>= <expr>32</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>DEFAULT_COMPACTION_STRATEGY_CLASS</name> <init>= <expr>"SizeTieredCompactionStrategy"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>DEFAULT_KEY_NAME</name> <init>= <expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"KEY"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Caching</name></type> <name>DEFAULT_CACHING_STRATEGY</name> <init>= <expr><name><name>Caching</name>.<name>KEYS_ONLY</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Double</name></type> <name>DEFAULT_BF_FP_CHANCE</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

    <comment type="line">// Note that this is the default only for user created tables</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>DEFAULT_COMPRESSOR</name> <init>= <expr><call><name><name>SnappyCompressor</name>.<name>isAvailable</name></name><argument_list>()</argument_list></call> ? <call><name><name>SnappyCompressor</name>.<name><name>class</name>.<name>getCanonicalName</name></name></name><argument_list>()</argument_list></call> : null</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>StatusCf</name> <init>= <expr><call><name>newSystemMetadata</name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>STATUS_CF</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"persistent metadata for the local node"</expr></argument>, <argument><expr><name><name>BytesType</name>.<name>instance</name></name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>HintsCf</name> <init>= <expr><call><name>newSystemMetadata</name><argument_list>(<argument><expr><name><name>HintedHandOffManager</name>.<name>HINTS_CF</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"hinted handoff data"</expr></argument>, <argument><expr><name><name>BytesType</name>.<name>instance</name></name></expr></argument>, <argument><expr><name><name>BytesType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>MigrationsCf</name> <init>= <expr><call><name>newSystemMetadata</name><argument_list>(<argument><expr><name><name>DefsTable</name>.<name>OLD_MIGRATIONS_CF</name></name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"individual schema mutations"</expr></argument>, <argument><expr><name><name>TimeUUIDType</name>.<name>instance</name></name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>SchemaCf</name> <init>= <expr><call><name>newSystemMetadata</name><argument_list>(<argument><expr><name><name>DefsTable</name>.<name>OLD_SCHEMA_CF</name></name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"current state of the schema"</expr></argument>, <argument><expr><name><name>UTF8Type</name>.<name>instance</name></name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>IndexCf</name> <init>= <expr><call><name>newSystemMetadata</name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>INDEX_CF</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>"indexes that have been completed"</expr></argument>, <argument><expr><name><name>UTF8Type</name>.<name>instance</name></name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>NodeIdCf</name> <init>= <expr><call><name>newSystemMetadata</name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>NODE_ID_CF</name></name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>"nodeId and their metadata"</expr></argument>, <argument><expr><name><name>TimeUUIDType</name>.<name>instance</name></name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>VersionCf</name> <init>=
            <expr><call><name>newSystemMetadata</name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>VERSION_CF</name></name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>"server version information"</expr></argument>, <argument><expr><name><name>UTF8Type</name>.<name>instance</name></name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call>
            .<call><name>keyAlias</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"component"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            .<call><name>keyValidator</name><argument_list>(<argument><expr><name><name>UTF8Type</name>.<name>instance</name></name></expr></argument>)</argument_list></call>
            .<call><name>columnMetadata</name><argument_list>(<argument><expr><call><name><name>Collections</name>.<name>singletonMap</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"version"</expr></argument>)</argument_list></call></expr></argument>,
                                                     <argument><expr>new <call><name>ColumnDefinition</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"version"</expr></argument>)</argument_list></call></expr></argument>,
                                                                          <argument><expr><name><name>UTF8Type</name>.<name>instance</name></name></expr></argument>,
                                                                          <argument><expr>null</expr></argument>,
                                                                          <argument><expr>null</expr></argument>,
                                                                          <argument><expr>null</expr></argument>,
                                                                          <argument><expr>null</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// new-style schema</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>SchemaKeyspacesCf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>SchemaColumnFamiliesCf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>SchemaColumnsCf</name></decl>;</decl_stmt>
    <expr_stmt><expr>static
    <block>{
        <expr><name>SchemaKeyspacesCf</name> = <call><name>newSchemaMetadata</name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_KEYSPACES_CF</name></name></expr></argument>,
                                              <argument><expr>8</expr></argument>,
                                              <argument><expr>"Keyspace definitions"</expr></argument>,
                                              <argument><expr><name><name>AsciiType</name>.<name>instance</name></name></expr></argument>,
                                              <argument><expr>null</expr></argument>)</argument_list></call>
                            .<call><name>keyValidator</name><argument_list>(<argument><expr><name><name>AsciiType</name>.<name>instance</name></name></expr></argument>)</argument_list></call>
                            .<call><name>keyAlias</name><argument_list>(<argument><expr>"keyspace"</expr></argument>)</argument_list></call>
                            .<call><name>columnMetadata</name><argument_list>(<argument><expr><call><name><name>ColumnDefinition</name>.<name>utf8</name></name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>ColumnDefinition</name>.<name>bool</name></name><argument_list>(<argument><expr>"durable_writes"</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"strategy_class"</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"strategy_options"</expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <expr><name>SchemaColumnFamiliesCf</name> = <call><name>newSchemaMetadata</name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_COLUMNFAMILIES_CF</name></name></expr></argument>,
                                                   <argument><expr>9</expr></argument>,
                                                   <argument><expr>"ColumnFamily definitions"</expr></argument>,
                                                   <argument><expr><call><name><name>CompositeType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>Arrays</name>.</name>&lt;<name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name>&gt;<call><name>asList</name><argument_list>(<argument><expr><name><name>AsciiType</name>.<name>instance</name></name></expr></argument>, <argument><expr><name><name>AsciiType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                   <argument><expr>null</expr></argument>)</argument_list></call>
                                 .<call><name>keyValidator</name><argument_list>(<argument><expr><name><name>AsciiType</name>.<name>instance</name></name></expr></argument>)</argument_list></call>
                                 .<call><name>keyAlias</name><argument_list>(<argument><expr>"keyspace"</expr></argument>)</argument_list></call>
                                 .<call><name>columnAliases</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"columnfamily"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                 .<call><name>columnMetadata</name><argument_list>(<argument><expr><call><name><name>ColumnDefinition</name>.<name>int32</name></name><argument_list>(<argument><expr>"id"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"type"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"comparator"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"subcomparator"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>utf8</name></name><argument_list>(<argument><expr>"comment"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>double_</name></name><argument_list>(<argument><expr>"read_repair_chance"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>double_</name></name><argument_list>(<argument><expr>"local_read_repair_chance"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>bool</name></name><argument_list>(<argument><expr>"replicate_on_write"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>int32</name></name><argument_list>(<argument><expr>"gc_grace_seconds"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"default_validator"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"key_validator"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>int32</name></name><argument_list>(<argument><expr>"min_compaction_threshold"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>int32</name></name><argument_list>(<argument><expr>"max_compaction_threshold"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"key_alias"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>double_</name></name><argument_list>(<argument><expr>"bloom_filter_fp_chance"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"caching"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"compaction_strategy_class"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"compression_parameters"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>utf8</name></name><argument_list>(<argument><expr>"value_alias"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>utf8</name></name><argument_list>(<argument><expr>"column_aliases"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"compaction_strategy_options"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <expr><name>SchemaColumnsCf</name> = <call><name>newSchemaMetadata</name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_COLUMNS_CF</name></name></expr></argument>,
                                            <argument><expr>10</expr></argument>,
                                            <argument><expr>"ColumnFamily column attributes"</expr></argument>,
                                            <argument><expr><call><name><name>CompositeType</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>Arrays</name>.</name>&lt;<name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name>&gt;<call><name>asList</name><argument_list>(<argument><expr><name><name>AsciiType</name>.<name>instance</name></name></expr></argument>,
                                                                                                     <argument><expr><name><name>AsciiType</name>.<name>instance</name></name></expr></argument>,
                                                                                                     <argument><expr><name><name>AsciiType</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr>null</expr></argument>)</argument_list></call>
                          .<call><name>keyValidator</name><argument_list>(<argument><expr><name><name>AsciiType</name>.<name>instance</name></name></expr></argument>)</argument_list></call>
                          .<call><name>keyAlias</name><argument_list>(<argument><expr>"keyspace"</expr></argument>)</argument_list></call>
                          .<call><name>columnAliases</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"columnfamily"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr>"column"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          .<call><name>columnMetadata</name><argument_list>(<argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"validator"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></argument>,
                                          <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"index_type"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></argument>,
                                          <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"index_options"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></argument>,
                                          <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"index_name"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></argument>,
                                          <argument><expr><call><name><name>ColumnDefinition</name>.<name>ascii</name></name><argument_list>(<argument><expr>"component_index"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    public enum <name>Caching</name>
    <block>{
        <expr><name>ALL</name></expr>, <expr><name>KEYS_ONLY</name></expr>, <expr><name>ROWS_ONLY</name></expr>, <expr><name>NONE</name></expr>;

        <expr>public static <name>Caching</name> <call><name>fromString</name><argument_list>(<argument><expr><name>String</name> <name>cache</name></expr></argument>)</argument_list></call> throws <name>ConfigurationException</name>
        <block>{
            <try>try
            <block>{
                <return>return <expr><call><name>valueOf</name><argument_list>(<argument><expr><call><name><name>cache</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            <expr_stmt/></block></try>}</block></expr>
            <catch>catch <parameter_list>(<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s not found, available types: %s."</expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><call><name>values</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>", "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            <expr_stmt/></block></catch>}</block></expr></expr_stmt>
        }</block></class>
    }

    <comment type="line">//REQUIRED</comment>
    public <decl_stmt><decl><type><specifier>final</specifier> <name>Integer</name></type> <name>cfId</name></decl>;</decl_stmt>                        <comment type="line">// internal id, never exposed to user</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>ksName</name></decl>;</decl_stmt>                       <comment type="line">// name of keyspace</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>cfName</name></decl>;</decl_stmt>                       <comment type="line">// name of this column family</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ColumnFamilyType</name></type> <name>cfType</name></decl>;</decl_stmt>             <comment type="line">// standard, super</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl>;</decl_stmt>          <comment type="line">// bytes, long, timeuuid, utf8, etc.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>subcolumnComparator</name></decl>;</decl_stmt> <comment type="line">// like comparator, for supercolumns</comment>

    <comment type="line">//OPTIONAL</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>comment</name></decl>;</decl_stmt>                           <comment type="line">// default none, for humans only</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>readRepairChance</name></decl>;</decl_stmt>                  <comment type="line">// default 1.0 (always), chance [0.0,1.0] of read repair</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>dcLocalReadRepairChance</name></decl>;</decl_stmt>           <comment type="line">// default 0.0</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>replicateOnWrite</name></decl>;</decl_stmt>                 <comment type="line">// default false</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>gcGraceSeconds</name></decl>;</decl_stmt>                       <comment type="line">// default 864000 (ten days)</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>defaultValidator</name></decl>;</decl_stmt>         <comment type="line">// default BytesType (no-op), use comparator types</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyValidator</name></decl>;</decl_stmt>             <comment type="line">// default BytesType (no-op), use comparator types</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minCompactionThreshold</name></decl>;</decl_stmt>               <comment type="line">// default 4</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxCompactionThreshold</name></decl>;</decl_stmt>               <comment type="line">// default 32</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>keyAlias</name></decl>;</decl_stmt>                      <comment type="line">// default NULL</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columnAliases</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>valueAlias</name></decl>;</decl_stmt>                    <comment type="line">// default NULL</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Double</name></type> <name>bloomFilterFpChance</name></decl>;</decl_stmt>               <comment type="line">// default NULL</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Caching</name></type> <name>caching</name></decl>;</decl_stmt>                          <comment type="line">// default KEYS_ONLY (possible: all, key_only, row_only, none)</comment>

    <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></type> <name>column_metadata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>compactionStrategyClass</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compactionStrategyOptions</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>CompressionParameters</name></type> <name>compressionParameters</name></decl>;</decl_stmt>

    <comment type="line">// Processed infos used by CQL. This can be fully reconstructed from the CFMedata,</comment>
    <comment type="line">// so it's not saved on disk. It is however costlyish to recreate for each query</comment>
    <comment type="line">// so we cache it here (and update on each relevant CFMetadata change)</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CFDefinition</name></type> <name>cqlCfDef</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>comment</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prop</name></decl></param>)</parameter_list> <block>{ <expr_stmt><expr><name>comment</name> = <call><name>enforceCommentNotNull</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>readRepairChance</name><parameter_list>(<param><decl><type><name>double</name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>readRepairChance</name> = <name>prop</name></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>dcLocalReadRepairChance</name><parameter_list>(<param><decl><type><name>double</name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>dcLocalReadRepairChance</name> = <name>prop</name></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>replicateOnWrite</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>replicateOnWrite</name> = <name>prop</name></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>gcGraceSeconds</name><parameter_list>(<param><decl><type><name>int</name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>gcGraceSeconds</name> = <name>prop</name></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>defaultValidator</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>defaultValidator</name> = <name>prop</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>updateCfDef</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>keyValidator</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>keyValidator</name> = <name>prop</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>updateCfDef</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>minCompactionThreshold</name><parameter_list>(<param><decl><type><name>int</name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>minCompactionThreshold</name> = <name>prop</name></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>maxCompactionThreshold</name><parameter_list>(<param><decl><type><name>int</name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>maxCompactionThreshold</name> = <name>prop</name></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>keyAlias</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>keyAlias</name> = <name>prop</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>updateCfDef</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>keyAlias</name><parameter_list>(<param><decl><type><name>String</name></type> <name>alias</name></decl></param>)</parameter_list> <block>{ <return>return <expr><call><name>keyAlias</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytes</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>columnAliases</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>columnAliases</name> = <name>prop</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>updateCfDef</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>valueAlias</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>valueAlias</name> = <name>prop</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>updateCfDef</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>columnMetadata</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>column_metadata</name> = <name>prop</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>updateCfDef</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>columnMetadata</name><parameter_list>(<param><decl><type><name>ColumnDefinition</name>...</type> <name>cds</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <range>: <expr><name>cds</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>cd</name>.<name>name</name></name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <return>return <expr><call><name>columnMetadata</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>compactionStrategyClass</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>compactionStrategyClass</name> = <name>prop</name></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>compactionStrategyOptions</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>compactionStrategyOptions</name> = <name>prop</name></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>compressionParameters</name><parameter_list>(<param><decl><type><name>CompressionParameters</name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>compressionParameters</name> = <name>prop</name></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>bloomFilterFpChance</name><parameter_list>(<param><decl><type><name>Double</name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>bloomFilterFpChance</name> = <name>prop</name></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>caching</name><parameter_list>(<param><decl><type><name>Caching</name></type> <name>prop</name></decl></param>)</parameter_list> <block>{<expr_stmt><expr><name>caching</name> = <name>prop</name></expr>;</expr_stmt> <return>return <expr><name>this</name></expr>;</return>}</block></function>

    <constructor><specifier>public</specifier> <name>CFMetaData</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>ColumnFamilyType</name></type> <name>type</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comp</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>subcc</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>subcc</name></expr></argument>, <argument><expr><call><name><name>Schema</name>.<name>instance</name>.<name>nextCFId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <expr_stmt><expr><call><name>CFMetaData</name><argument_list>(<argument><expr><name>String</name> <name>keyspace</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name>ColumnFamilyType</name> <name>type</name></expr></argument>, <argument><expr><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <name>comp</name></expr></argument>, <argument><expr><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <name>subcc</name></expr></argument>, <argument><expr><name>int</name> <name>id</name></expr></argument>)</argument_list></call>
    <block>{
        <comment type="line">// Final fields must be set in constructor</comment>
        <expr><name>ksName</name> = <name>keyspace</name></expr>;
        <expr><name>cfName</name> = <name>name</name></expr>;
        <expr><name>cfType</name> = <name>type</name></expr>;
        <expr><name>comparator</name> = <name>comp</name></expr>;
        <expr><name>subcolumnComparator</name> = <call><name>enforceSubccDefault</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>subcc</name></expr></argument>)</argument_list></call></expr>;

        <comment type="line">// System cfs have specific ids, and copies of old CFMDs need</comment>
        <comment type="line">//  to copy over the old id.</comment>
        <expr><name>cfId</name> = <name>id</name></expr>;

        <expr><call><name><name>this</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;
    }</block>

    private <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <call><name>enforceSubccDefault</name><argument_list>(<argument><expr><name>ColumnFamilyType</name> <name>cftype</name></expr></argument>, <argument><expr><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <name>subcc</name></expr></argument>)</argument_list></call>
    <block>{
        <return>return <expr>(<name>subcc</name> == null) &amp;&amp; (<name>cftype</name> == <name><name>ColumnFamilyType</name>.<name>Super</name></name>) ? <name><name>BytesType</name>.<name>instance</name></name> : <name>subcc</name></expr>;</return>
    }</block></expr></expr_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>enforceCommentNotNull</name> <parameter_list>(<param><decl><type><name>CharSequence</name></type> <name>comment</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>(<name>comment</name> == null) ? "" : <call><name><name>comment</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// Set a bunch of defaults</comment>
        <expr_stmt><expr><name>readRepairChance</name>             = <name>DEFAULT_READ_REPAIR_CHANCE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dcLocalReadRepairChance</name>      = <name>DEFAULT_DCLOCAL_READ_REPAIR_CHANCE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>replicateOnWrite</name>             = <name>DEFAULT_REPLICATE_ON_WRITE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>gcGraceSeconds</name>               = <name>DEFAULT_GC_GRACE_SECONDS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>minCompactionThreshold</name>       = <name>DEFAULT_MIN_COMPACTION_THRESHOLD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxCompactionThreshold</name>       = <name>DEFAULT_MAX_COMPACTION_THRESHOLD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>caching</name>                      = <name>DEFAULT_CACHING_STRATEGY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bloomFilterFpChance</name>          = <name>DEFAULT_BF_FP_CHANCE</name></expr>;</expr_stmt>

        <comment type="line">// Defaults strange or simple enough to not need a DEFAULT_T for</comment>
        <expr_stmt><expr><name>defaultValidator</name> = <name><name>BytesType</name>.<name>instance</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>keyValidator</name> = <name><name>BytesType</name>.<name>instance</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>comment</name> = ""</expr>;</expr_stmt>
        <expr_stmt><expr><name>keyAlias</name> = null</expr>;</expr_stmt> <comment type="line">// This qualifies as a 'strange default'.</comment>
        <expr_stmt><expr><name>valueAlias</name> = null</expr>;</expr_stmt>
        <expr_stmt><expr><name>column_metadata</name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>compactionStrategyClass</name> = <call><name>createCompactionStrategy</name><argument_list>(<argument><expr><name>DEFAULT_COMPACTION_STRATEGY_CLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><name>compactionStrategyOptions</name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>compressionParameters</name> = new <call><name>CompressionParameters</name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateCfDef</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// init cqlCfDef</comment>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>CFMetaData</name></type> <name>newSystemMetadata</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name>int</name></type> <name>cfId</name></decl></param>, <param><decl><type><name>String</name></type> <name>comment</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>subcc</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ColumnFamilyType</name></type> <name>type</name> <init>= <expr><name>subcc</name> == null ? <name><name>ColumnFamilyType</name>.<name>Standard</name></name> : <name><name>ColumnFamilyType</name>.<name>Super</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>newCFMD</name> <init>= <expr>new <call><name>CFMetaData</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>,  <argument><expr><name>subcc</name></expr></argument>, <argument><expr><name>cfId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>newCFMD</name>.<name>comment</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call>
                      .<call><name>readRepairChance</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>
                      .<call><name>dcLocalReadRepairChance</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>
                      .<call><name>gcGraceSeconds</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>CFMetaData</name></type> <name>newSchemaMetadata</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name>int</name></type> <name>cfId</name></decl></param>, <param><decl><type><name>String</name></type> <name>comment</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>subcc</name></decl></param>)</parameter_list>
    <block>{
        <comment type="block">/*
         * Schema column families needs a gc_grace (since they are replicated
         * on every node). That gc_grace should be high enough that no node
         * could be dead for that long a time.
         */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>gcGrace</name> <init>= <expr>120 * 24 * 3600</expr></init></decl>;</decl_stmt> <comment type="line">// 3 months</comment>
        <return>return <expr><call><name>newSystemMetadata</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>cfId</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr><name>subcc</name></expr></argument>)</argument_list></call>.<call><name>gcGraceSeconds</name><argument_list>(<argument><expr><name>gcGrace</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CFMetaData</name></type> <name>newIndexMetadata</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>parent</name></decl></param>, <param><decl><type><name>ColumnDefinition</name></type> <name>info</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>columnComparator</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Depends on parent's cache setting, turn on its index CF's cache.</comment>
        <comment type="line">// Here, only key cache is enabled, but later (in KeysIndex) row cache will be turned on depending on cardinality.</comment>
        <decl_stmt><decl><type><name>Caching</name></type> <name>indexCaching</name> <init>= <expr><call><name><name>parent</name>.<name>getCaching</name></name><argument_list>()</argument_list></call> == <name><name>Caching</name>.<name>ALL</name></name> || <call><name><name>parent</name>.<name>getCaching</name></name><argument_list>()</argument_list></call> == <name><name>Caching</name>.<name>KEYS_ONLY</name></name>
                             ? <name><name>Caching</name>.<name>KEYS_ONLY</name></name>
                             : <name><name>Caching</name>.<name>NONE</name></name></expr></init></decl>;</decl_stmt>

        <return>return <expr>new <call><name>CFMetaData</name><argument_list>(<argument><expr><name><name>parent</name>.<name>ksName</name></name></expr></argument>, <argument><expr><call><name><name>parent</name>.<name>indexColumnFamilyName</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ColumnFamilyType</name>.<name>Standard</name></name></expr></argument>, <argument><expr><name>columnComparator</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call>
                             .<call><name>keyValidator</name><argument_list>(<argument><expr><call><name><name>info</name>.<name>getValidator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                             .<call><name>readRepairChance</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call>
                             .<call><name>dcLocalReadRepairChance</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call>
                             .<call><name>gcGraceSeconds</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>
                             .<call><name>caching</name><argument_list>(<argument><expr><name>indexCaching</name></expr></argument>)</argument_list></call>
                             .<call><name>compactionStrategyClass</name><argument_list>(<argument><expr><name><name>parent</name>.<name>compactionStrategyClass</name></name></expr></argument>)</argument_list></call>
                             .<call><name>compactionStrategyOptions</name><argument_list>(<argument><expr><name><name>parent</name>.<name>compactionStrategyOptions</name></name></expr></argument>)</argument_list></call>
                             .<call><name>reloadSecondaryIndexMetadata</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>reloadSecondaryIndexMetadata</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>parent</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>minCompactionThreshold</name><argument_list>(<argument><expr><name><name>parent</name>.<name>minCompactionThreshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maxCompactionThreshold</name><argument_list>(<argument><expr><name><name>parent</name>.<name>maxCompactionThreshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compactionStrategyClass</name><argument_list>(<argument><expr><name><name>parent</name>.<name>compactionStrategyClass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compactionStrategyOptions</name><argument_list>(<argument><expr><name><name>parent</name>.<name>compactionStrategyOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compressionParameters</name><argument_list>(<argument><expr><name><name>parent</name>.<name>compressionParameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>clone</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>copyOpts</name><argument_list>(<argument><expr>new <call><name>CFMetaData</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>cfType</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr><name>subcolumnComparator</name></expr></argument>, <argument><expr><name>cfId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// Create a new CFMD by changing just the cfName</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CFMetaData</name></type> <name>rename</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>, <param><decl><type><name>String</name></type> <name>newName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>copyOpts</name><argument_list>(<argument><expr>new <call><name>CFMetaData</name><argument_list>(<argument><expr><name><name>cfm</name>.<name>ksName</name></name></expr></argument>, <argument><expr><name>newName</name></expr></argument>, <argument><expr><name><name>cfm</name>.<name>cfType</name></name></expr></argument>, <argument><expr><name><name>cfm</name>.<name>comparator</name></name></expr></argument>, <argument><expr><name><name>cfm</name>.<name>subcolumnComparator</name></name></expr></argument>, <argument><expr><name><name>cfm</name>.<name>cfId</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>static</specifier> <name>CFMetaData</name></type> <name>copyOpts</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>newCFMD</name></decl></param>, <param><decl><type><name>CFMetaData</name></type> <name>oldCFMD</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></type> <name>clonedColumns</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <range>: <expr><call><name><name>oldCFMD</name>.<name>column_metadata</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>cloned</name> <init>= <expr><call><name><name>cd</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>clonedColumns</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>cloned</name>.<name>name</name></name></expr></argument>, <argument><expr><name>cloned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>newCFMD</name>.<name>comment</name></name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>comment</name></name></expr></argument>)</argument_list></call>
                      .<call><name>readRepairChance</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>readRepairChance</name></name></expr></argument>)</argument_list></call>
                      .<call><name>dcLocalReadRepairChance</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>dcLocalReadRepairChance</name></name></expr></argument>)</argument_list></call>
                      .<call><name>replicateOnWrite</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>replicateOnWrite</name></name></expr></argument>)</argument_list></call>
                      .<call><name>gcGraceSeconds</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>gcGraceSeconds</name></name></expr></argument>)</argument_list></call>
                      .<call><name>defaultValidator</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>defaultValidator</name></name></expr></argument>)</argument_list></call>
                      .<call><name>keyValidator</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>keyValidator</name></name></expr></argument>)</argument_list></call>
                      .<call><name>minCompactionThreshold</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>minCompactionThreshold</name></name></expr></argument>)</argument_list></call>
                      .<call><name>maxCompactionThreshold</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>maxCompactionThreshold</name></name></expr></argument>)</argument_list></call>
                      .<call><name>keyAlias</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>keyAlias</name></name></expr></argument>)</argument_list></call>
                      .<call><name>columnAliases</name><argument_list>(<argument><expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>columnAliases</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                      .<call><name>valueAlias</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>valueAlias</name></name></expr></argument>)</argument_list></call>
                      .<call><name>columnMetadata</name><argument_list>(<argument><expr><name>clonedColumns</name></expr></argument>)</argument_list></call>
                      .<call><name>compactionStrategyClass</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>compactionStrategyClass</name></name></expr></argument>)</argument_list></call>
                      .<call><name>compactionStrategyOptions</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>compactionStrategyOptions</name></name></expr></argument>)</argument_list></call>
                      .<call><name>compressionParameters</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>compressionParameters</name></name></expr></argument>)</argument_list></call>
                      .<call><name>bloomFilterFpChance</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>bloomFilterFpChance</name></name></expr></argument>)</argument_list></call>
                      .<call><name>caching</name><argument_list>(<argument><expr><name><name>oldCFMD</name>.<name>caching</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * generate a column family name for an index corresponding to the given column.
     * This is NOT the same as the index's name! This is only used in sstable filenames and is not exposed to users.
     *
     * @param info A definition of the column with index
     *
     * @return name of the index ColumnFamily
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>indexColumnFamilyName</name><parameter_list>(<param><decl><type><name>ColumnDefinition</name></type> <name>info</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// TODO simplify this when info.index_name is guaranteed to be set</comment>
        <return>return <expr><name>cfName</name> + <name><name>Directories</name>.<name>SECONDARY_INDEX_NAME_SEPARATOR</name></name> + (<call><name><name>info</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call> == null ? <call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name><name>info</name>.<name>name</name></name></expr></argument>)</argument_list></call> : <call><name><name>info</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call>)</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getComment</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>comment</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getReadRepairChance</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>readRepairChance</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDcLocalReadRepair</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>dcLocalReadRepairChance</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getReplicateOnWrite</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>replicateOnWrite</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getGcGraceSeconds</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>gcGraceSeconds</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getDefaultValidator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>defaultValidator</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getKeyValidator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>keyValidator</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Integer</name></type> <name>getMinCompactionThreshold</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>minCompactionThreshold</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Integer</name></type> <name>getMaxCompactionThreshold</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>maxCompactionThreshold</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>getKeyName</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>keyAlias</name> == null ? <name>DEFAULT_KEY_NAME</name> : <name>keyAlias</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>getKeyAlias</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>keyAlias</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>getColumnAliases</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>columnAliases</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>getValueAlias</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>valueAlias</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CompressionParameters</name></type> <name>compressionParameters</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>compressionParameters</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></type> <name>getColumn_metadata</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>column_metadata</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getComparatorFor</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>superColumnName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>superColumnName</name> == null ? <name>comparator</name> : <name>subcolumnComparator</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Double</name></type> <name>getBloomFilterFpChance</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>bloomFilterFpChance</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Caching</name></type> <name>getCaching</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>caching</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then>
        <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>obj</name> == null || <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call> != <call><name>getClass</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if></else></if>

        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>rhs</name> <init>= <expr>(<name>CFMetaData</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>EqualsBuilder</name><argument_list>()</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>ksName</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>cfName</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>cfType</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>cfType</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>comparator</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>subcolumnComparator</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>subcolumnComparator</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>comment</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>readRepairChance</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>readRepairChance</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>dcLocalReadRepairChance</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>dcLocalReadRepairChance</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>replicateOnWrite</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>replicateOnWrite</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>gcGraceSeconds</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>gcGraceSeconds</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>defaultValidator</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>defaultValidator</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>keyValidator</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>keyValidator</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>minCompactionThreshold</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>minCompactionThreshold</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>maxCompactionThreshold</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>maxCompactionThreshold</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><call><name><name>cfId</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rhs</name>.<name>cfId</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>column_metadata</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>column_metadata</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>keyAlias</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>keyAlias</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>columnAliases</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>columnAliases</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>valueAlias</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>valueAlias</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>compactionStrategyClass</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>compactionStrategyClass</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>compactionStrategyOptions</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>compactionStrategyOptions</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>compressionParameters</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>compressionParameters</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>bloomFilterFpChance</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>bloomFilterFpChance</name></name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>caching</name></expr></argument>, <argument><expr><name><name>rhs</name>.<name>caching</name></name></expr></argument>)</argument_list></call>
            .<call><name>isEquals</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>HashCodeBuilder</name><argument_list>(<argument><expr>29</expr></argument>, <argument><expr>1597</expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>cfType</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>subcolumnComparator</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>readRepairChance</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>dcLocalReadRepairChance</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>replicateOnWrite</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>gcGraceSeconds</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>defaultValidator</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>keyValidator</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>minCompactionThreshold</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>maxCompactionThreshold</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>cfId</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>column_metadata</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>keyAlias</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>columnAliases</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>valueAlias</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>compactionStrategyClass</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>compactionStrategyOptions</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>compressionParameters</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>bloomFilterFpChance</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr><name>caching</name></expr></argument>)</argument_list></call>
            .<call><name>toHashCode</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getValueValidator</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getValueValidator</name><argument_list>(<argument><expr><call><name><name>column_metadata</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getValueValidator</name><parameter_list>(<param><decl><type><name>ColumnDefinition</name></type> <name>columnDefinition</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>columnDefinition</name> == null
               ? <name>defaultValidator</name>
               : <call><name><name>columnDefinition</name>.<name>getValidator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** applies implicit defaults to cf definition. useful in updates */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>applyImplicitDefaults</name><parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CfDef</name></name></type> <name>cf_def</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>cf_def</name>.<name>isSetComment</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cf_def</name>.<name>setComment</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>!<call><name><name>cf_def</name>.<name>isSetReplicate_on_write</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cf_def</name>.<name>setReplicate_on_write</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>DEFAULT_REPLICATE_ON_WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>!<call><name><name>cf_def</name>.<name>isSetMin_compaction_threshold</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cf_def</name>.<name>setMin_compaction_threshold</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>DEFAULT_MIN_COMPACTION_THRESHOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>!<call><name><name>cf_def</name>.<name>isSetMax_compaction_threshold</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cf_def</name>.<name>setMax_compaction_threshold</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>DEFAULT_MAX_COMPACTION_THRESHOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>null == <name><name>cf_def</name>.<name>compaction_strategy</name></name></expr>)</condition><then>
            <expr_stmt><expr><name><name>cf_def</name>.<name>compaction_strategy</name></name> = <name>DEFAULT_COMPACTION_STRATEGY_CLASS</name></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>null == <name><name>cf_def</name>.<name>compaction_strategy_options</name></name></expr>)</condition><then>
            <expr_stmt><expr><name><name>cf_def</name>.<name>compaction_strategy_options</name></name> = <call><name><name>Collections</name>.<name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>!<call><name><name>cf_def</name>.<name>isSetCompression_options</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>cf_def</name>.<name>setCompression_options</name></name><argument_list>(<argument><expr>new <class><super><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{<block>{
                <if>if <condition>(<expr><name>DEFAULT_COMPRESSOR</name> != null</expr>)</condition><then>
                    <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><name><name>CompressionParameters</name>.<name>SSTABLE_COMPRESSION</name></name></expr></argument>, <argument><expr><name>DEFAULT_COMPRESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block>}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>cf_def</name>.<name>isSetDclocal_read_repair_chance</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cf_def</name>.<name>setDclocal_read_repair_chance</name></name><argument_list>(<argument><expr><name><name>CFMetaData</name>.<name>DEFAULT_DCLOCAL_READ_REPAIR_CHANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CFMetaData</name></type> <name>fromThrift</name><parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CfDef</name></name></type> <name>cf_def</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ColumnFamilyType</name></type> <name>cfType</name> <init>= <expr><call><name><name>ColumnFamilyType</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>column_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cfType</name> == null</expr>)</condition><then>
        <block>{
          <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Invalid column type " + <name><name>cf_def</name>.<name>column_type</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name>applyImplicitDefaults</name><argument_list>(<argument><expr><name>cf_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>newCFMD</name> <init>= <expr>new <call><name>CFMetaData</name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>keyspace</name></name></expr></argument>,
                                            <argument><expr><name><name>cf_def</name>.<name>name</name></name></expr></argument>,
                                            <argument><expr><name>cfType</name></expr></argument>,
                                            <argument><expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>comparator_type</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><name><name>cf_def</name>.<name>subcomparator_type</name></name> == null ? null : <call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>subcomparator_type</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>cf_def</name>.<name>isSetId</name></name><argument_list>()</argument_list></call> ? <name><name>cf_def</name>.<name>id</name></name> : <call><name><name>Schema</name>.<name>instance</name>.<name>nextCFId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>cf_def</name>.<name>isSetGc_grace_seconds</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>newCFMD</name>.<name>gcGraceSeconds</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>gc_grace_seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
        <if>if <condition>(<expr><call><name><name>cf_def</name>.<name>isSetMin_compaction_threshold</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>newCFMD</name>.<name>minCompactionThreshold</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>min_compaction_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
        <if>if <condition>(<expr><call><name><name>cf_def</name>.<name>isSetMax_compaction_threshold</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>newCFMD</name>.<name>maxCompactionThreshold</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>max_compaction_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
        <if>if <condition>(<expr><call><name><name>cf_def</name>.<name>isSetKey_alias</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>newCFMD</name>.<name>keyAlias</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>key_alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
        <if>if <condition>(<expr><call><name><name>cf_def</name>.<name>isSetKey_validation_class</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>newCFMD</name>.<name>keyValidator</name></name><argument_list>(<argument><expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>key_validation_class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
        <if>if <condition>(<expr><call><name><name>cf_def</name>.<name>isSetCompaction_strategy</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name><name>newCFMD</name>.<name>compactionStrategyClass</name></name> = <call><name>createCompactionStrategy</name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>compaction_strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><call><name><name>cf_def</name>.<name>isSetCompaction_strategy_options</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>newCFMD</name>.<name>compactionStrategyOptions</name></name><argument_list>(<argument><expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>compaction_strategy_options</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><call><name><name>cf_def</name>.<name>isSetBloom_filter_fp_chance</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>newCFMD</name>.<name>bloomFilterFpChance</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>bloom_filter_fp_chance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><call><name><name>cf_def</name>.<name>isSetCaching</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>newCFMD</name>.<name>caching</name></name><argument_list>(<argument><expr><call><name><name>Caching</name>.<name>fromString</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>caching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><call><name><name>cf_def</name>.<name>isSetRead_repair_chance</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>newCFMD</name>.<name>readRepairChance</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>read_repair_chance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><call><name><name>cf_def</name>.<name>isSetDclocal_read_repair_chance</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>newCFMD</name>.<name>dcLocalReadRepairChance</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>dclocal_read_repair_chance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>CompressionParameters</name></type> <name>cp</name> <init>= <expr><call><name><name>CompressionParameters</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>compression_options</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <return>return <expr><call><name><name>newCFMD</name>.<name>comment</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>comment</name></name></expr></argument>)</argument_list></call>
                          .<call><name>replicateOnWrite</name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>replicate_on_write</name></name></expr></argument>)</argument_list></call>
                          .<call><name>defaultValidator</name><argument_list>(<argument><expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>default_validation_class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          .<call><name>keyValidator</name><argument_list>(<argument><expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>key_validation_class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          .<call><name>columnMetadata</name><argument_list>(<argument><expr><call><name><name>ColumnDefinition</name>.<name>fromThrift</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>column_metadata</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          .<call><name>compressionParameters</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>MarshalException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reload</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>Row</name></type> <name>cfDefRow</name> <init>= <expr><call><name><name>SystemTable</name>.<name>readSchemaRow</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>cfDefRow</name>.<name>cf</name></name> == null || <call><name><name>cfDefRow</name>.<name>cf</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s not found in the schema definitions table."</expr></argument>, <argument><expr><name>ksName</name> + ":" + <name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <try>try
        <block>{
            <expr_stmt><expr><call><name>apply</name><argument_list>(<argument><expr><call><name>fromSchema</name><argument_list>(<argument><expr><name>cfDefRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Updates CFMetaData in-place to match cf_def
     *
     * *Note*: This method left public only for DefsTest, don't use directly!
     *
     * @throws ConfigurationException if ks/cf names or cf ids didn't match
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"applying {} to {}"</expr></argument>, <argument><expr><name>cfm</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// validate</comment>
        <if>if <condition>(<expr>!<call><name><name>cfm</name>.<name>ksName</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Keyspace mismatch (found %s; expected %s)"</expr></argument>,
                                                           <argument><expr><name><name>cfm</name>.<name>ksName</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <if>if <condition>(<expr>!<call><name><name>cfm</name>.<name>cfName</name>.<name>equals</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Column family mismatch (found %s; expected %s)"</expr></argument>,
                                                           <argument><expr><name><name>cfm</name>.<name>cfName</name></name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <if>if <condition>(<expr>!<call><name><name>cfm</name>.<name>cfId</name>.<name>equals</name></name><argument_list>(<argument><expr><name>cfId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Column family ID mismatch (found %s; expected %s)"</expr></argument>,
                                                           <argument><expr><name><name>cfm</name>.<name>cfId</name></name></expr></argument>, <argument><expr><name>cfId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <if>if <condition>(<expr>!<call><name><name>cfm</name>.<name>cfType</name>.<name>equals</name></name><argument_list>(<argument><expr><name>cfType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"types do not match."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <if>if <condition>(<expr>!<call><name><name>cfm</name>.<name>comparator</name>.<name>isCompatibleWith</name></name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"comparators do not match or are not compatible."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <if>if <condition>(<expr><name><name>cfm</name>.<name>subcolumnComparator</name></name> == null</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>subcolumnComparator</name> != null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"subcolumncomparators do not match."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <comment type="line">// else, it's null and we're good.</comment>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<call><name><name>cfm</name>.<name>subcolumnComparator</name>.<name>isCompatibleWith</name></name><argument_list>(<argument><expr><name>subcolumnComparator</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"subcolumncomparators do not match or are note compatible."</expr></argument>)</argument_list></call></expr>;</throw></then></if></else></if>

        <comment type="line">// TODO: this method should probably return a new CFMetaData so that</comment>
        <comment type="line">// 1) we can keep comparator and subcolumnComparator final</comment>
        <comment type="line">// 2) updates are applied atomically</comment>
        <expr_stmt><expr><name>comparator</name> = <name><name>cfm</name>.<name>comparator</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>subcolumnComparator</name> = <name><name>cfm</name>.<name>subcolumnComparator</name></name></expr>;</expr_stmt>

        <comment type="line">// compaction thresholds are checked by ThriftValidation. We shouldn't be doing</comment>
        <comment type="line">// validation on the apply path; it's too late for that.</comment>

        <expr_stmt><expr><name>comment</name> = <call><name>enforceCommentNotNull</name><argument_list>(<argument><expr><name><name>cfm</name>.<name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>readRepairChance</name> = <name><name>cfm</name>.<name>readRepairChance</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dcLocalReadRepairChance</name> = <name><name>cfm</name>.<name>dcLocalReadRepairChance</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>replicateOnWrite</name> = <name><name>cfm</name>.<name>replicateOnWrite</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>gcGraceSeconds</name> = <name><name>cfm</name>.<name>gcGraceSeconds</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>defaultValidator</name> = <name><name>cfm</name>.<name>defaultValidator</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>keyValidator</name> = <name><name>cfm</name>.<name>keyValidator</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>minCompactionThreshold</name> = <name><name>cfm</name>.<name>minCompactionThreshold</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxCompactionThreshold</name> = <name><name>cfm</name>.<name>maxCompactionThreshold</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>keyAlias</name> = <name><name>cfm</name>.<name>keyAlias</name></name></expr>;</expr_stmt>

        <comment type="line">// We don't want updates coming from thrift to erase columnAliases/valuAlias, which would be wrong, but those are not exposed throught thrift. So</comment>
        <comment type="line">// we just only override the value when the new has those set.</comment>
        <comment type="line">// Note that this doesn't remove feature on the CQL side since removing columnAliases/valuAlias is non-sensical and not allowed (actually, updating</comment>
        <comment type="line">// those is not allowed either but it would be possible to allow it through some ALTER RENAME later).</comment>
        <if>if <condition>(<expr>!<call><name><name>cfm</name>.<name>columnAliases</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>columnAliases</name> = <name><name>cfm</name>.<name>columnAliases</name></name></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name><name>cfm</name>.<name>valueAlias</name></name> != null</expr>)</condition><then>
            <expr_stmt><expr><name>valueAlias</name> = <name><name>cfm</name>.<name>valueAlias</name></name></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>bloomFilterFpChance</name> = <name><name>cfm</name>.<name>bloomFilterFpChance</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>caching</name> = <name><name>cfm</name>.<name>caching</name></name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>MapDifference</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></type> <name>columnDiff</name> <init>= <expr><call><name><name>Maps</name>.<name>difference</name></name><argument_list>(<argument><expr><name>column_metadata</name></expr></argument>, <argument><expr><name><name>cfm</name>.<name>column_metadata</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// columns that are no longer needed</comment>
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <range>: <expr><call><name><name>columnDiff</name>.<name>entriesOnlyOnLeft</name></name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>column_metadata</name>.<name>remove</name></name><argument_list>(<argument><expr><name><name>cd</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <comment type="line">// newly added columns</comment>
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <range>: <expr><call><name><name>columnDiff</name>.<name>entriesOnlyOnRight</name></name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>column_metadata</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>cd</name>.<name>name</name></name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <comment type="line">// old columns with updated attributes</comment>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>name</name> <range>: <expr><call><name><name>columnDiff</name>.<name>entriesDiffering</name></name><argument_list>()</argument_list></call>.<call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>oldDef</name> <init>= <expr><call><name><name>column_metadata</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>cfm</name>.<name>column_metadata</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>oldDef</name>.<name>apply</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><call><name>getColumnDefinitionComparator</name><argument_list>(<argument><expr><name>oldDef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><name>compactionStrategyClass</name> = <name><name>cfm</name>.<name>compactionStrategyClass</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>compactionStrategyOptions</name> = <name><name>cfm</name>.<name>compactionStrategyOptions</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>compressionParameters</name> = <call><name><name>cfm</name>.<name>compressionParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateCfDef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"application result is {}"</expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>createCompactionStrategy</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><name>className</name> = <call><name><name>className</name>.<name>contains</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call> ? <name>className</name> : "org.apache.cassandra.db.compaction." + <name>className</name></expr>;</expr_stmt>
        <return>return <expr><call><name><name>FBUtilities</name>.<name>classForName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr>"compaction strategy"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>AbstractCompactionStrategy</name></type> <name>createCompactionStrategyInstance</name><parameter_list>(<param><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name><name>Constructor</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>constructor</name> <init>= <expr><call><name><name>compactionStrategyClass</name>.<name>getConstructor</name></name><argument_list>(<argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{
                <expr><name><name>ColumnFamilyStore</name>.<name>class</name></name></expr>,
                <expr><name><name>Map</name>.<name>class</name></name></expr> <comment type="line">// options</comment>
            }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>constructor</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>compactionStrategyOptions</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>InstantiationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="line">// converts CFM to thrift CfDef</comment>
    <function><type><specifier>public</specifier> <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CfDef</name></name></type> <name>toThrift</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CfDef</name></name></type> <name>def</name> <init>= <expr>new <call><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>CfDef</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setId</name></name><argument_list>(<argument><expr><name>cfId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setColumn_type</name></name><argument_list>(<argument><expr><call><name><name>cfType</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setComparator_type</name></name><argument_list>(<argument><expr><call><name><name>comparator</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>subcolumnComparator</name> != null</expr>)</condition><then>
        <block>{
            <assert>assert <expr><name>cfType</name> == <name><name>ColumnFamilyType</name>.<name>Super</name></name>
                   : <call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s CF %s should not have subcomparator %s defined"</expr></argument>, <argument><expr><name>cfType</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>subcolumnComparator</name></expr></argument>)</argument_list></call></expr>;</assert>
            <expr_stmt><expr><call><name><name>def</name>.<name>setSubcomparator_type</name></name><argument_list>(<argument><expr><call><name><name>subcolumnComparator</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>def</name>.<name>setComment</name></name><argument_list>(<argument><expr><call><name>enforceCommentNotNull</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setRead_repair_chance</name></name><argument_list>(<argument><expr><name>readRepairChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setDclocal_read_repair_chance</name></name><argument_list>(<argument><expr><name>dcLocalReadRepairChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setReplicate_on_write</name></name><argument_list>(<argument><expr><name>replicateOnWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setGc_grace_seconds</name></name><argument_list>(<argument><expr><name>gcGraceSeconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setDefault_validation_class</name></name><argument_list>(<argument><expr><name>defaultValidator</name> == null ? null : <call><name><name>defaultValidator</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setKey_validation_class</name></name><argument_list>(<argument><expr><call><name><name>keyValidator</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setMin_compaction_threshold</name></name><argument_list>(<argument><expr><name>minCompactionThreshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setMax_compaction_threshold</name></name><argument_list>(<argument><expr><name>maxCompactionThreshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setKey_alias</name></name><argument_list>(<argument><expr><name>keyAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ColumnDef</name></name></argument>&gt;</argument_list></name></type> <name>column_meta</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ColumnDef</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>column_metadata</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <range>: <expr><call><name><name>column_metadata</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <comment type="line">// Non-null componentIndex are only used by CQL (so far) so we don't expose</comment>
            <comment type="line">// them through thrift</comment>
            <if>if <condition>(<expr><name><name>cd</name>.<name>componentIndex</name></name> == null</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>column_meta</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>cd</name>.<name>toThrift</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>def</name>.<name>setColumn_metadata</name></name><argument_list>(<argument><expr><name>column_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setCompaction_strategy</name></name><argument_list>(<argument><expr><call><name><name>compactionStrategyClass</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setCompaction_strategy_options</name></name><argument_list>(<argument><expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>compactionStrategyOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setCompression_options</name></name><argument_list>(<argument><expr><call><name><name>compressionParameters</name>.<name>asThriftOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>bloomFilterFpChance</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>def</name>.<name>setBloom_filter_fp_chance</name></name><argument_list>(<argument><expr><name>bloomFilterFpChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name><name>def</name>.<name>setCaching</name></name><argument_list>(<argument><expr><call><name><name>caching</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>def</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnDefinition</name></type> <name>getColumnDefinition</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>column_metadata</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnDefinition</name></type> <name>getColumnDefinitionForIndex</name><parameter_list>(<param><decl><type><name>String</name></type> <name>indexName</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>def</name> <range>: <expr><call><name><name>column_metadata</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>indexName</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>def</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>def</name></expr>;</return></then></if>
        }</block></for>
        <return>return <expr>null</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a null index_name to appropriate default name according to column status
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDefaultIndexNames</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <comment type="line">// if this is ColumnFamily update we need to add previously defined index names to the existing columns first</comment>
        <decl_stmt><decl><type><name>Integer</name></type> <name>cfId</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getId</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cfId</name> != null</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfm</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getCFMetaData</name></name><argument_list>(<argument><expr><name>cfId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>column_metadata</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>newDef</name> <init>= <expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr>!<call><name><name>cfm</name>.<name>column_metadata</name>.<name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> || <call><name><name>newDef</name>.<name>getIndexType</name></name><argument_list>()</argument_list></call> == null</expr>)</condition><then>
                    <continue>continue;</continue></then></if>

                <decl_stmt><decl><type><name>String</name></type> <name>oldIndexName</name> <init>= <expr><call><name><name>cfm</name>.<name>column_metadata</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getIndexName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>oldIndexName</name> == null</expr>)</condition><then>
                    <continue>continue;</continue></then></if>

                <if>if <condition>(<expr><call><name><name>newDef</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call> != null &amp;&amp; !<call><name><name>oldIndexName</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>newDef</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Can't modify index name: was '" + <name>oldIndexName</name> + "' changed to '" + <call><name><name>newDef</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call> + "'."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <expr_stmt><expr><call><name><name>newDef</name>.<name>setIndexName</name></name><argument_list>(<argument><expr><name>oldIndexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>existingNames</name> <init>= <expr><call><name>existingIndexNames</name><argument_list>(<argument><expr>null</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>column</name> <range>: <expr><call><name><name>column_metadata</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>column</name>.<name>getIndexType</name></name><argument_list>()</argument_list></call> != null &amp;&amp; <call><name><name>column</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call> == null</expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>baseName</name> <init>= <expr><call><name>getDefaultIndexName</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>indexName</name> <init>= <expr><name>baseName</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>existingNames</name>.<name>contains</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <expr_stmt><expr><name>indexName</name> = <name>baseName</name> + '_' + (++<name>i</name>)</expr>;</expr_stmt></while>
                <expr_stmt><expr><call><name><name>column</name>.<name>setIndexName</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDefaultIndexName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>columnName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>(<name>cfName</name> + "_" + <call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call> + "_idx").<call><name>replaceAll</name><argument_list>(<argument><expr>"\\W"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumnSerializer</name></type> <name>getColumnSerializer</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>cfType</name> == <name><name>ColumnFamilyType</name>.<name>Standard</name></name></expr>)</condition><then>
            <return>return <expr><call><name><name>Column</name>.<name>serializer</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>
        <return>return <expr><call><name><name>SuperColumn</name>.<name>serializer</name></name><argument_list>(<argument><expr><name>subcolumnComparator</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isNameValid</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>name</name> != null &amp;&amp; !<call><name><name>name</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call> &lt;= <name><name>Schema</name>.<name>NAME_LENGTH</name></name> &amp;&amp; <call><name><name>name</name>.<name>matches</name></name><argument_list>(<argument><expr>"\\w+"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isIndexNameValid</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>name</name> != null &amp;&amp; !<call><name><name>name</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>name</name>.<name>matches</name></name><argument_list>(<argument><expr>"\\w+"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr>!<call><name>isNameValid</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Keyspace name must not be empty, more than %s characters long, or contain non-alphanumeric-underscore characters (got \"%s\")"</expr></argument>, <argument><expr><name><name>Schema</name>.<name>NAME_LENGTH</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <if>if <condition>(<expr>!<call><name>isNameValid</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"ColumnFamily name must not be empty, more than %s characters long, or contain non-alphanumeric-underscore characters (got \"%s\")"</expr></argument>, <argument><expr><name><name>Schema</name>.<name>NAME_LENGTH</name></name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <if>if <condition>(<expr><name>cfType</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Invalid column family type for %s"</expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <if>if <condition>(<expr><name>cfType</name> == <name><name>ColumnFamilyType</name>.<name>Super</name></name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>subcolumnComparator</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Missing subcolumn comparator for super column family %s"</expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></then>
        <else>else
        <block>{
            <if>if <condition>(<expr><name>subcolumnComparator</name> != null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Subcolumn comparator (%s) is invalid for standard column family %s"</expr></argument>, <argument><expr><name>subcolumnComparator</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></else></if>


        <if>if <condition>(<expr><name>comparator</name> instanceof <name>CounterColumnType</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"CounterColumnType is not a valid comparator"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <if>if <condition>(<expr><name>subcolumnComparator</name> instanceof <name>CounterColumnType</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"CounterColumnType is not a valid sub-column comparator"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <if>if <condition>(<expr><name>keyValidator</name> instanceof <name>CounterColumnType</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"CounterColumnType is not a valid key validator"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <comment type="line">// Mixing counter with non counter columns is not supported (#2614)</comment>
        <if>if <condition>(<expr><name>defaultValidator</name> instanceof <name>CounterColumnType</name></expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>def</name> <range>: <expr><call><name><name>column_metadata</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <if>if <condition>(<expr>!(<call><name><name>def</name>.<name>getValidator</name></name><argument_list>()</argument_list></call> instanceof <name>CounterColumnType</name>)</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Cannot add a non counter column (" + <call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name><name>def</name>.<name>name</name></name></expr></argument>)</argument_list></call> + ") in a counter column family"</expr></argument>)</argument_list></call></expr>;</throw></then></if></for>
        }</block></then>
        <else>else
        <block>{
            <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>def</name> <range>: <expr><call><name><name>column_metadata</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <if>if <condition>(<expr><call><name><name>def</name>.<name>getValidator</name></name><argument_list>()</argument_list></call> instanceof <name>CounterColumnType</name></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Cannot add a counter column (" + <call><name><name>comparator</name>.<name>getString</name></name><argument_list>(<argument><expr><name><name>def</name>.<name>name</name></name></expr></argument>)</argument_list></call> + ") in a non counter column family"</expr></argument>)</argument_list></call></expr>;</throw></then></if></for>
        }</block></else></if>

        <comment type="line">// check if any of the columns has name equal to the cf.key_alias</comment>
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>columndef</name> <range>: <expr><call><name><name>column_metadata</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><name>keyAlias</name> != null &amp;&amp; <call><name><name>keyAlias</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>columndef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Cannot have key alias equals to a column name: " + <call><name><name>UTF8Type</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><name>keyAlias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>alias</name> <range>: <expr><name>columnAliases</name></expr></range></decl></init>)
                <if>if <condition>(<expr><call><name><name>alias</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>columndef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Cannot have column alias equals to a column name: " + <call><name><name>UTF8Type</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if></for>

            <if>if <condition>(<expr><name>valueAlias</name> != null &amp;&amp; <call><name><name>valueAlias</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>columndef</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Cannot have value alias equals to a column name: " + <call><name><name>UTF8Type</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><name>valueAlias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></for>

        <expr_stmt><expr><call><name>validateAlias</name><argument_list>(<argument><expr><name>keyAlias</name></expr></argument>, <argument><expr>"Key"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>alias</name> <range>: <expr><name>columnAliases</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name>validateAlias</name><argument_list>(<argument><expr><name>alias</name></expr></argument>, <argument><expr>"Column"</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <expr_stmt><expr><call><name>validateAlias</name><argument_list>(<argument><expr><name>valueAlias</name></expr></argument>, <argument><expr>"Value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// initialize a set of names NOT in the CF under consideration</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>indexNames</name> <init>= <expr><call><name>existingIndexNames</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>c</name> <range>: <expr><call><name><name>column_metadata</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr><call><name>getColumnDefinitionComparator</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>comparator</name>.<name>validate</name></name><argument_list>(<argument><expr><name><name>c</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>MarshalException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Column name %s is not valid for comparator %s"</expr></argument>,
                                                               <argument><expr><call><name><name>ByteBufferUtil</name>.<name>bytesToHex</name></name><argument_list>(<argument><expr><name><name>c</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <if>if <condition>(<expr><call><name><name>c</name>.<name>getIndexType</name></name><argument_list>()</argument_list></call> == null</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><call><name><name>c</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call> != null</expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Index name cannot be set without index type"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            }</block></then>
            <else>else
            <block>{
                <if>if <condition>(<expr><name>cfType</name> == <name><name>ColumnFamilyType</name>.<name>Super</name></name></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Secondary indexes are not supported on super column families"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <if>if <condition>(<expr>!<call><name>isIndexNameValid</name><argument_list>(<argument><expr><call><name><name>c</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Illegal index name " + <call><name><name>c</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <comment type="line">// check index names against this CF _and_ globally</comment>
                <if>if <condition>(<expr><call><name><name>indexNames</name>.<name>contains</name></name><argument_list>(<argument><expr><call><name><name>c</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Duplicate index name " + <call><name><name>c</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <expr_stmt><expr><call><name><name>indexNames</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>c</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><call><name><name>c</name>.<name>getIndexType</name></name><argument_list>()</argument_list></call> == <name><name>IndexType</name>.<name>CUSTOM</name></name></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><call><name><name>c</name>.<name>getIndexOptions</name></name><argument_list>()</argument_list></call> == null || !<call><name><name>c</name>.<name>getIndexOptions</name></name><argument_list>()</argument_list></call>.<call><name>containsKey</name><argument_list>(<argument><expr><name><name>SecondaryIndex</name>.<name>CUSTOM_INDEX_OPTION_NAME</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Required index option missing: " + <name><name>SecondaryIndex</name>.<name>CUSTOM_INDEX_OPTION_NAME</name></name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                }</block></then></if>

                <comment type="line">// This method validates the column metadata but does not intialize the index</comment>
                <expr_stmt><expr><call><name><name>SecondaryIndex</name>.<name>createInstance</name></name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>

        <expr_stmt><expr><call><name>validateCompactionThresholds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>existingIndexNames</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfToExclude</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>indexNames</name> <init>= <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name><name>ColumnFamilyStore</name>.<name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><name>cfToExclude</name> == null || !<call><name><name>cfs</name>.<name>getColumnFamilyName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>cfToExclude</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <range>: <expr><call><name><name>cfs</name>.<name>metadata</name>.<name>getColumn_metadata</name></name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
                    <expr_stmt><expr><call><name><name>indexNames</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>cd</name>.<name>getIndexName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for></then></if>
        }</block></for>
        <return>return <expr><name>indexNames</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateAlias</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>alias</name></decl></param>, <param><decl><type><name>String</name></type> <name>msg</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>alias</name> != null</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr>!<call><name><name>alias</name>.<name>hasRemaining</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><name>msg</name> + " alias may not be empty"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>UTF8Type</name>.<name>instance</name>.<name>validate</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>MarshalException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><name>msg</name> + " alias must be UTF8"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validateCompactionThresholds</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>maxCompactionThreshold</name> == 0</expr>)</condition><then>
            <return>return;</return></then></if>

        <if>if <condition>(<expr><name>minCompactionThreshold</name> &lt;= 1</expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Min compaction threshold cannot be less than 2 (got %d)."</expr></argument>, <argument><expr><name>minCompactionThreshold</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <if>if <condition>(<expr><name>minCompactionThreshold</name> &gt; <name>maxCompactionThreshold</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Min compaction threshold (got %d) cannot be greater than max compaction threshold (got %d)"</expr></argument>,
                                                            <argument><expr><name>minCompactionThreshold</name></expr></argument>, <argument><expr><name>maxCompactionThreshold</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Create schema mutations to update this metadata to provided new state.
     *
     * @param newState The new metadata (for the same CF)
     * @param modificationTimestamp Timestamp to use for mutation
     *
     * @return Difference between attributes in form of schema mutation
     */</comment>
    <function><type><specifier>public</specifier> <name>RowMutation</name></type> <name>toSchemaUpdate</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>newState</name></decl></param>, <param><decl><type><name>long</name></type> <name>modificationTimestamp</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><call><name><name>SystemTable</name>.<name>getSchemaKSKey</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>newState</name>.<name>toSchemaNoColumns</name></name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>modificationTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>MapDifference</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnDefinition</name></argument>&gt;</argument_list></name></type> <name>columnDiff</name> <init>= <expr><call><name><name>Maps</name>.<name>difference</name></name><argument_list>(<argument><expr><name>column_metadata</name></expr></argument>, <argument><expr><name><name>newState</name>.<name>column_metadata</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// columns that are no longer needed</comment>
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <range>: <expr><call><name><name>columnDiff</name>.<name>entriesOnlyOnLeft</name></name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>cd</name>.<name>deleteFromSchema</name></name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name>getColumnDefinitionComparator</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>modificationTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <comment type="line">// newly added columns</comment>
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <range>: <expr><call><name><name>columnDiff</name>.<name>entriesOnlyOnRight</name></name><argument_list>()</argument_list></call>.<call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>cd</name>.<name>toSchema</name></name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name>getColumnDefinitionComparator</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>modificationTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <comment type="line">// old columns with updated attributes</comment>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>name</name> <range>: <expr><call><name><name>columnDiff</name>.<name>entriesDiffering</name></name><argument_list>()</argument_list></call>.<call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <init>= <expr><call><name><name>newState</name>.<name>getColumnDefinition</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cd</name>.<name>toSchema</name></name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name>getColumnDefinitionComparator</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>modificationTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>rm</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Remove all CF attributes from schema
     *
     * @param timestamp Timestamp to use
     *
     * @return RowMutation to use to completely remove cf from schema
     */</comment>
    <function><type><specifier>public</specifier> <name>RowMutation</name></type> <name>dropFromSchema</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><call><name><name>SystemTable</name>.<name>getSchemaKSKey</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>rm</name>.<name>addOrGet</name></name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_COLUMNFAMILIES_CF</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ldt</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> / 1000</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"id"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"type"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"comparator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"subcomparator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"comment"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"read_repair_chance"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"local_read_repair_chance"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"replicate_on_write"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"gc_grace_seconds"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"default_validator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"key_validator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"min_compaction_threshold"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"max_compaction_threshold"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"key_alias"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"bloom_filter_fp_chance"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"caching"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"compaction_strategy_class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"compression_parameters"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"value_alias"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"column_aliases"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"compaction_strategy_options"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <range>: <expr><call><name><name>column_metadata</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>cd</name>.<name>deleteFromSchema</name></name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name>getColumnDefinitionComparator</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <return>return <expr><name>rm</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>toSchema</name><parameter_list>(<param><decl><type><name>RowMutation</name></type> <name>rm</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>toSchemaNoColumns</name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <range>: <expr><call><name><name>column_metadata</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>cd</name>.<name>toSchema</name></name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><call><name>getColumnDefinitionComparator</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>toSchemaNoColumns</name><parameter_list>(<param><decl><type><name>RowMutation</name></type> <name>rm</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// For property that can be null (and can be changed), we insert tombstones, to make sure</comment>
        <comment type="line">// we don't keep a property the user has removed</comment>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>rm</name>.<name>addOrGet</name></name><argument_list>(<argument><expr><name><name>SystemTable</name>.<name>SCHEMA_COLUMNFAMILIES_CF</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ldt</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> / 1000</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>cfId</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"id"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>cfType</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"type"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>comparator</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"comparator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>subcolumnComparator</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>subcolumnComparator</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"subcomparator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>comment</name> == null ? <call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"comment"</expr></argument>)</argument_list></call>
                                     : <call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"comment"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>readRepairChance</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"read_repair_chance"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>dcLocalReadRepairChance</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"local_read_repair_chance"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>replicateOnWrite</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"replicate_on_write"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>gcGraceSeconds</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"gc_grace_seconds"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>defaultValidator</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"default_validator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>keyValidator</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"key_validator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>minCompactionThreshold</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"min_compaction_threshold"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>maxCompactionThreshold</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"max_compaction_threshold"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>keyAlias</name> == null ? <call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"key_alias"</expr></argument>)</argument_list></call>
                                      : <call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>keyAlias</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"key_alias"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>bloomFilterFpChance</name> == null ? <call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"bloomFilterFpChance"</expr></argument>)</argument_list></call>
                                                 : <call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>bloomFilterFpChance</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"bloom_filter_fp_chance"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>caching</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"caching"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name><name>compactionStrategyClass</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"compaction_strategy_class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name>json</name><argument_list>(<argument><expr><call><name><name>compressionParameters</name>.<name>asThriftOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"compression_parameters"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>valueAlias</name> == null ? <call><name><name>DeletedColumn</name>.<name>create</name></name><argument_list>(<argument><expr><name>ldt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"value_alias"</expr></argument>)</argument_list></call>
                                        : <call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><name>valueAlias</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"value_alias"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name>json</name><argument_list>(<argument><expr><call><name>columnAliasesAsStrings</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"column_aliases"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>addColumn</name></name><argument_list>(<argument><expr><call><name><name>Column</name>.<name>create</name></name><argument_list>(<argument><expr><call><name>json</name><argument_list>(<argument><expr><name>compactionStrategyOptions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr>"compaction_strategy_options"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Package protected for use by tests</comment>
    <function><type><specifier>static</specifier> <name>CFMetaData</name></type> <name>fromSchemaNoColumns</name><parameter_list>(<param><decl><type><name><name>UntypedResultSet</name>.<name>Row</name></name></type> <name>result</name></decl></param>)</parameter_list>
    <block>{
        <try>try
        <block>{
            <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfm</name> <init>= <expr>new <call><name>CFMetaData</name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"keyspace"</expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"columnfamily"</expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>ColumnFamilyType</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"type"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"comparator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>result</name>.<name>has</name></name><argument_list>(<argument><expr>"subcomparator"</expr></argument>)</argument_list></call> ? <call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"subcomparator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> : null</expr></argument>,
                                            <argument><expr><call><name><name>result</name>.<name>getInt</name></name><argument_list>(<argument><expr>"id"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>readRepairChance</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getDouble</name></name><argument_list>(<argument><expr>"read_repair_chance"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>dcLocalReadRepairChance</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getDouble</name></name><argument_list>(<argument><expr>"local_read_repair_chance"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>replicateOnWrite</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getBoolean</name></name><argument_list>(<argument><expr>"replicate_on_write"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>gcGraceSeconds</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getInt</name></name><argument_list>(<argument><expr>"gc_grace_seconds"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>defaultValidator</name></name><argument_list>(<argument><expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"default_validator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>keyValidator</name></name><argument_list>(<argument><expr><call><name><name>TypeParser</name>.<name>parse</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"key_validator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>minCompactionThreshold</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getInt</name></name><argument_list>(<argument><expr>"min_compaction_threshold"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>maxCompactionThreshold</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getInt</name></name><argument_list>(<argument><expr>"max_compaction_threshold"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>result</name>.<name>has</name></name><argument_list>(<argument><expr>"comment"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>cfm</name>.<name>comment</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"comment"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <if>if <condition>(<expr><call><name><name>result</name>.<name>has</name></name><argument_list>(<argument><expr>"key_alias"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>cfm</name>.<name>keyAlias</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getBytes</name></name><argument_list>(<argument><expr>"key_alias"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <if>if <condition>(<expr><call><name><name>result</name>.<name>has</name></name><argument_list>(<argument><expr>"bloom_filter_fp_chance"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>cfm</name>.<name>bloomFilterFpChance</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getDouble</name></name><argument_list>(<argument><expr>"bloom_filter_fp_chance"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>caching</name></name><argument_list>(<argument><expr><call><name><name>Caching</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"caching"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>compactionStrategyClass</name></name><argument_list>(<argument><expr><call><name>createCompactionStrategy</name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"compaction_strategy_class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>compressionParameters</name></name><argument_list>(<argument><expr><call><name><name>CompressionParameters</name>.<name>create</name></name><argument_list>(<argument><expr><call><name>fromJsonMap</name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"compression_parameters"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>result</name>.<name>has</name></name><argument_list>(<argument><expr>"value_alias"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>cfm</name>.<name>valueAlias</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getBytes</name></name><argument_list>(<argument><expr>"value_alias"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>columnAliases</name></name><argument_list>(<argument><expr><call><name>columnAliasesFromStrings</name><argument_list>(<argument><expr><call><name>fromJsonList</name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"column_aliases"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>compactionStrategyOptions</name></name><argument_list>(<argument><expr><call><name>fromJsonMap</name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getString</name></name><argument_list>(<argument><expr>"compaction_strategy_options"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>cfm</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Deserialize CF metadata from low-level representation
     *
     * @return Thrift-based metadata deserialized from schema
     *
     * @throws IOException on any I/O related error
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CFMetaData</name></type> <name>fromSchema</name><parameter_list>(<param><decl><type><name><name>UntypedResultSet</name>.<name>Row</name></name></type> <name>result</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfDef</name> <init>= <expr><call><name>fromSchemaNoColumns</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Row</name></type> <name>serializedColumnDefinitions</name> <init>= <expr><call><name><name>ColumnDefinition</name>.<name>readSchema</name></name><argument_list>(<argument><expr><name><name>cfDef</name>.<name>ksName</name></name></expr></argument>, <argument><expr><name><name>cfDef</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>addColumnDefinitionSchema</name><argument_list>(<argument><expr><name>cfDef</name></expr></argument>, <argument><expr><name>serializedColumnDefinitions</name></expr></argument>)</argument_list></call>.<call><name>updateCfDef</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>CFMetaData</name></type> <name>fromSchema</name><parameter_list>(<param><decl><type><name>Row</name></type> <name>row</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>UntypedResultSet</name>.<name>Row</name></name></type> <name>result</name> <init>= <expr><call><name><name>QueryProcessor</name>.<name>resultify</name></name><argument_list>(<argument><expr>"SELECT * FROM system.schema_columnfamilies"</expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call>.<call><name>one</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>fromSchema</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>columnAliasesAsStrings</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>aliases</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>columnAliases</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>rawAlias</name> <range>: <expr><name>columnAliases</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>aliases</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>UTF8Type</name>.<name>instance</name>.<name>compose</name></name><argument_list>(<argument><expr><name>rawAlias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><name>aliases</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columnAliasesFromStrings</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>aliases</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>rawAliases</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>aliases</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>String</name></type> <name>alias</name> <range>: <expr><name>aliases</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>rawAliases</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>UTF8Type</name>.<name>instance</name>.<name>decompose</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><name>rawAliases</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Convert current metadata into schema mutation
     *
     * @param timestamp Timestamp to use
     *
     * @return Low-level representation of the CF
     *
     * @throws ConfigurationException if any of the attributes didn't pass validation
     */</comment>
    <function><type><specifier>public</specifier> <name>RowMutation</name></type> <name>toSchema</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>, <argument><expr><call><name><name>SystemTable</name>.<name>getSchemaKSKey</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>toSchema</name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rm</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getColumnDefinitionComparator</name><parameter_list>(<param><decl><type><name>ColumnDefinition</name></type> <name>def</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>getColumnDefinitionComparator</name><argument_list>(<argument><expr><name><name>def</name>.<name>componentIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getColumnDefinitionComparator</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>componentIndex</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>cfComparator</name> <init>= <expr><name>cfType</name> == <name><name>ColumnFamilyType</name>.<name>Super</name></name> ? <name>subcolumnComparator</name> : <name>comparator</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cfComparator</name> instanceof <name>CompositeType</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>componentIndex</name> == null</expr>)</condition><then>
                <return>return <expr><name>cfComparator</name></expr>;</return></then></if>

            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>types</name> <init>= <expr>((<name>CompositeType</name>)<name>cfComparator</name>).<name>types</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>t</name> <init>= <expr><call><name><name>types</name>.<name>get</name></name><argument_list>(<argument><expr><name>componentIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><name>t</name> != null : "Non-sensical component index"</expr>;</assert>
            <return>return <expr><name>t</name></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <return>return <expr><name>cfComparator</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="line">// Package protected for use by tests</comment>
    <function><type><specifier>static</specifier> <name>CFMetaData</name></type> <name>addColumnDefinitionSchema</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfDef</name></decl></param>, <param><decl><type><name>Row</name></type> <name>serializedColumnDefinitions</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>ColumnDefinition</name></type> <name>cd</name> <range>: <expr><call><name><name>ColumnDefinition</name>.<name>fromSchema</name></name><argument_list>(<argument><expr><name>serializedColumnDefinitions</name></expr></argument>, <argument><expr><name>cfDef</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>cfDef</name>.<name>column_metadata</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>cd</name>.<name>name</name></name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><name>cfDef</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumnDefinition</name><parameter_list>(<param><decl><type><name>ColumnDefinition</name></type> <name>def</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>column_metadata</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>def</name>.<name>name</name></name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeColumnDefinition</name><parameter_list>(<param><decl><type><name>ColumnDefinition</name></type> <name>def</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>column_metadata</name>.<name>remove</name></name><argument_list>(<argument><expr><name><name>def</name>.<name>name</name></name></expr></argument>)</argument_list></call> != null</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>CFMetaData</name></type> <name>updateCfDef</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>cqlCfDef</name> = new <call><name>CFDefinition</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CFDefinition</name></type> <name>getCfDef</name><parameter_list>()</parameter_list>
    <block>{
        <assert>assert <expr><name>cqlCfDef</name> != null</expr>;</assert>
        <return>return <expr><name>cqlCfDef</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>ToStringBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"cfId"</expr></argument>, <argument><expr><name>cfId</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"ksName"</expr></argument>, <argument><expr><name>ksName</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"cfName"</expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"cfType"</expr></argument>, <argument><expr><name>cfType</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"comparator"</expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"subcolumncomparator"</expr></argument>, <argument><expr><name>subcolumnComparator</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"comment"</expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"readRepairChance"</expr></argument>, <argument><expr><name>readRepairChance</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"dclocalReadRepairChance"</expr></argument>, <argument><expr><name>dcLocalReadRepairChance</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"replicateOnWrite"</expr></argument>, <argument><expr><name>replicateOnWrite</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"gcGraceSeconds"</expr></argument>, <argument><expr><name>gcGraceSeconds</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"defaultValidator"</expr></argument>, <argument><expr><name>defaultValidator</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"keyValidator"</expr></argument>, <argument><expr><name>keyValidator</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"minCompactionThreshold"</expr></argument>, <argument><expr><name>minCompactionThreshold</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"maxCompactionThreshold"</expr></argument>, <argument><expr><name>maxCompactionThreshold</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"keyAlias"</expr></argument>, <argument><expr><name>keyAlias</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"columnAliases"</expr></argument>, <argument><expr><name>columnAliases</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"valueAlias"</expr></argument>, <argument><expr><name>valueAlias</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"column_metadata"</expr></argument>, <argument><expr><name>column_metadata</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"compactionStrategyClass"</expr></argument>, <argument><expr><name>compactionStrategyClass</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"compactionStrategyOptions"</expr></argument>, <argument><expr><name>compactionStrategyOptions</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"compressionOptions"</expr></argument>, <argument><expr><call><name><name>compressionParameters</name>.<name>asThriftOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"bloomFilterFpChance"</expr></argument>, <argument><expr><name>bloomFilterFpChance</name></expr></argument>)</argument_list></call>
            .<call><name>append</name><argument_list>(<argument><expr>"caching"</expr></argument>, <argument><expr><name>caching</name></expr></argument>)</argument_list></call>
            .<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}
</unit>
