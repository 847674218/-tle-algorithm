<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\util\AbstractDataInput.java"><comment type="block" format="javadoc">/**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractDataInput</name> <super><extends>extends <name>InputStream</name></extends> <implements>implements <name>DataInput</name></implements></super>
<block>{
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>seekInternal</name><parameter_list>(<param><decl><type><name>int</name></type> <name>position</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>getPosition</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/*
     !! DataInput methods below are copied from the implementation in Apache Harmony RandomAccessFile.
     */</comment>

    <comment type="block" format="javadoc">/**
     * Reads a boolean from the current position in this file. Blocks until one
     * byte has been read, the end of the file is reached or an exception is
     * thrown.
     *
     * @return the next boolean value from this file.
     * @throws java.io.EOFException
     *             if the end of this file is detected.
     * @throws java.io.IOException
     *             if this file is closed or another I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>readBoolean</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name><name>this</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>temp</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EOFException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>temp</name> != 0</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads an 8-bit byte from the current position in this file. Blocks until
     * one byte has been read, the end of the file is reached or an exception is
     * thrown.
     *
     * @return the next signed 8-bit byte value from this file.
     * @throws EOFException
     *             if the end of this file is detected.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>byte</name></type> <name>readByte</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name><name>this</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>temp</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EOFException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>(<name>byte</name>) <name>temp</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads a 16-bit character from the current position in this file. Blocks until
     * two bytes have been read, the end of the file is reached or an exception is
     * thrown.
     *
     * @return the next char value from this file.
     * @throws EOFException
     *             if the end of this file is detected.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>char</name></type> <name>readChar</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> <init>= <expr>new <name><name>byte</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buffer</name>.<name>length</name></name></expr></argument>)</argument_list></call> != <name><name>buffer</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EOFException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call>(<name>char</name>) <argument_list>(<argument><expr>((<name><name>buffer</name><index>[<expr>0</expr>]</index></name> &amp; 0xff) &lt;&lt; 8) + (<name><name>buffer</name><index>[<expr>1</expr>]</index></name> &amp; 0xff)</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads a 64-bit double from the current position in this file. Blocks
     * until eight bytes have been read, the end of the file is reached or an
     * exception is thrown.
     *
     * @return the next double value from this file.
     * @throws EOFException
     *             if the end of this file is detected.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>double</name></type> <name>readDouble</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>Double</name>.<name>longBitsToDouble</name></name><argument_list>(<argument><expr><call><name>readLong</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads a 32-bit float from the current position in this file. Blocks
     * until four bytes have been read, the end of the file is reached or an
     * exception is thrown.
     *
     * @return the next float value from this file.
     * @throws EOFException
     *             if the end of this file is detected.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>readFloat</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>Float</name>.<name>intBitsToFloat</name></name><argument_list>(<argument><expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads bytes from this file into {@code buffer}. Blocks until {@code
     * buffer.length} number of bytes have been read, the end of the file is
     * reached or an exception is thrown.
     *
     * @param buffer
     *            the buffer to read bytes into.
     * @throws EOFException
     *             if the end of this file is detected.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     * @throws NullPointerException
     *             if {@code buffer} is {@code null}.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>readFully</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>readFully</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buffer</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Read bytes from this file into {@code buffer} starting at offset {@code
     * offset}. This method blocks until {@code count} number of bytes have been
     * read.
     *
     * @param buffer
     *            the buffer to read bytes into.
     * @param offset
     *            the initial position in {@code buffer} to store the bytes read
     *            from this file.
     * @param count
     *            the maximum number of bytes to store in {@code buffer}.
     * @throws EOFException
     *             if the end of this file is detected.
     * @throws IndexOutOfBoundsException
     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if {@code
     *             offset + count} is greater than the length of {@code buffer}.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     * @throws NullPointerException
     *             if {@code buffer} is {@code null}.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>readFully</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>buffer</name> == null</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">// avoid int overflow</comment>
        <if>if <condition>(<expr><name><name>offset</name> <argument_list>&lt; <argument>0 || <name>offset</name></argument> &gt;</argument_list></name> <name><name>buffer</name>.<name>length</name></name> || <name><name>count</name> <argument_list>&lt; <argument>0
                || <name>count</name></argument> &gt;</argument_list></name> <name><name>buffer</name>.<name>length</name></name> - <name>offset</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <while>while <condition>(<expr><name>count</name> &gt; 0</expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>result</name> &lt; 0</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>EOFException</name><argument_list>()</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><name>offset</name> += <name>result</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>count</name> -= <name>result</name></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads a 32-bit integer from the current position in this file. Blocks
     * until four bytes have been read, the end of the file is reached or an
     * exception is thrown.
     *
     * @return the next int value from this file.
     * @throws EOFException
     *             if the end of this file is detected.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>readInt</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> <init>= <expr>new <name><name>byte</name><index>[<expr>4</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buffer</name>.<name>length</name></name></expr></argument>)</argument_list></call> != <name><name>buffer</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EOFException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>((<name><name>buffer</name><index>[<expr>0</expr>]</index></name> &amp; 0xff) &lt;&lt; 24) + ((<name><name>buffer</name><index>[<expr>1</expr>]</index></name> &amp; 0xff) &lt;&lt; 16)
                + ((<name><name>buffer</name><index>[<expr>2</expr>]</index></name> &amp; 0xff) &lt;&lt; 8) + (<name><name>buffer</name><index>[<expr>3</expr>]</index></name> &amp; 0xff)</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads a line of text form the current position in this file. A line is
     * represented by zero or more characters followed by {@code '\n'}, {@code
     * '\r'}, {@code "\r\n"} or the end of file marker. The string does not
     * include the line terminating sequence.
     * &lt;p&gt;
     * Blocks until a line terminating sequence has been read, the end of the
     * file is reached or an exception is thrown.
     *
     * @return the contents of the line or {@code null} if no characters have
     *         been read before the end of the file has been reached.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>readLine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>line</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>80</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Typical line length</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>foundTerminator</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>unreadPosition</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>true</expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nextByte</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>nextByte</name></expr>)</condition> <block>{
                <case>case <expr>-1</expr>:
                    <return>return <expr><call><name><name>line</name>.<name>length</name></name><argument_list>()</argument_list></call> != 0 ? <call><name><name>line</name>.<name>toString</name></name><argument_list>()</argument_list></call> : null</expr>;</return>
                </case><case>case <expr>(<name>byte</name>) '\r'</expr>:
                    <if>if <condition>(<expr><name>foundTerminator</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>seekInternal</name><argument_list>(<argument><expr><name>unreadPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><call><name><name>line</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
                    }</block></then></if>
                    <expr_stmt><expr><name>foundTerminator</name> = true</expr>;</expr_stmt>
                    <comment type="block">/* Have to be able to peek ahead one byte */</comment>
                    <expr_stmt><expr><name>unreadPosition</name> = <call><name>getPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr>(<name>byte</name>) '\n'</expr>:
                    <return>return <expr><call><name><name>line</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
                </case><default>default:
                    <if>if <condition>(<expr><name>foundTerminator</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>seekInternal</name><argument_list>(<argument><expr><name>unreadPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><call><name><name>line</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>line</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>char</name>) <name>nextByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </default>}</block></switch>
        }</block></while>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads a 64-bit long from the current position in this file. Blocks until
     * eight bytes have been read, the end of the file is reached or an
     * exception is thrown.
     *
     * @return the next long value from this file.
     * @throws EOFException
     *             if the end of this file is detected.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>readLong</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> <init>= <expr>new <name><name>byte</name><index>[<expr>8</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buffer</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>n</name> != <name><name>buffer</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EOFException</name><argument_list>(<argument><expr>"expected 8 bytes; read " + <name>n</name> + " at final position " + <call><name>getPosition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>(<call>(<name>long</name>) <argument_list>(<argument><expr>((<name><name>buffer</name><index>[<expr>0</expr>]</index></name> &amp; 0xff) &lt;&lt; 24) + ((<name><name>buffer</name><index>[<expr>1</expr>]</index></name> &amp; 0xff) &lt;&lt; 16)
                + ((<name><name>buffer</name><index>[<expr>2</expr>]</index></name> &amp; 0xff) &lt;&lt; 8) + (<name><name>buffer</name><index>[<expr>3</expr>]</index></name> &amp; 0xff)</expr></argument>)</argument_list></call> &lt;&lt; 32)
                + (<call>(<name>long</name>) <argument_list>(<argument><expr><name><name>buffer</name><index>[<expr>4</expr>]</index></name> &amp; 0xff</expr></argument>)</argument_list></call> &lt;&lt; 24)
                + ((<name><name>buffer</name><index>[<expr>5</expr>]</index></name> &amp; 0xff) &lt;&lt; 16)
                + ((<name><name>buffer</name><index>[<expr>6</expr>]</index></name> &amp; 0xff) &lt;&lt; 8)
                + (<name><name>buffer</name><index>[<expr>7</expr>]</index></name> &amp; 0xff)</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads a 16-bit short from the current position in this file. Blocks until
     * two bytes have been read, the end of the file is reached or an exception
     * is thrown.
     *
     * @return the next short value from this file.
     * @throws EOFException
     *             if the end of this file is detected.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>short</name></type> <name>readShort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> <init>= <expr>new <name><name>byte</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buffer</name>.<name>length</name></name></expr></argument>)</argument_list></call> != <name><name>buffer</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EOFException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call>(<name>short</name>) <argument_list>(<argument><expr>((<name><name>buffer</name><index>[<expr>0</expr>]</index></name> &amp; 0xff) &lt;&lt; 8) + (<name><name>buffer</name><index>[<expr>1</expr>]</index></name> &amp; 0xff)</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads an unsigned 8-bit byte from the current position in this file and
     * returns it as an integer. Blocks until one byte has been read, the end of
     * the file is reached or an exception is thrown.
     *
     * @return the next unsigned byte value from this file as an int.
     * @throws EOFException
     *             if the end of this file is detected.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>readUnsignedByte</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name><name>this</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>temp</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EOFException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>temp</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads an unsigned 16-bit short from the current position in this file and
     * returns it as an integer. Blocks until two bytes have been read, the end of
     * the file is reached or an exception is thrown.
     *
     * @return the next unsigned short value from this file as an int.
     * @throws EOFException
     *             if the end of this file is detected.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>readUnsignedShort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> <init>= <expr>new <name><name>byte</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buffer</name>.<name>length</name></name></expr></argument>)</argument_list></call> != <name><name>buffer</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EOFException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>((<name><name>buffer</name><index>[<expr>0</expr>]</index></name> &amp; 0xff) &lt;&lt; 8) + (<name><name>buffer</name><index>[<expr>1</expr>]</index></name> &amp; 0xff)</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Reads a string that is encoded in {@link java.io.DataInput modified UTF-8} from
     * this file. The number of bytes that must be read for the complete string
     * is determined by the first two bytes read from the file. Blocks until all
     * required bytes have been read, the end of the file is reached or an
     * exception is thrown.
     *
     * @return the next string encoded in {@link java.io.DataInput modified UTF-8} from
     *         this file.
     * @throws EOFException
     *             if the end of this file is detected.
     * @throws IOException
     *             if this file is closed or another I/O error occurs.
     * @throws java.io.UTFDataFormatException
     *             if the bytes read cannot be decoded into a character string.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>readUTF</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>DataInputStream</name>.<name>readUTF</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
