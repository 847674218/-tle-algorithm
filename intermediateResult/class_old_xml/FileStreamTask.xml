<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\streaming\FileStreamTask.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>streaming</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>Socket</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>gms</name>.<name>Gossiper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>compress</name>.<name>CompressedRandomAccessReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>RandomAccessReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>Header</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>Message</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Throttle</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>WrappedRunnable</name></name>;</import>

<import>import <name><name>com</name>.<name>ning</name>.<name>compress</name>.<name>lzf</name>.<name>LZFOutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>FileStreamTask</name> <super><extends>extends <name>WrappedRunnable</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>FileStreamTask</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CHUNK_SIZE</name> <init>= <expr>64 * 1024</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_CONNECT_ATTEMPTS</name> <init>= <expr>4</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>StreamHeader</name></type> <name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>InetAddress</name></type> <name>to</name></decl>;</decl_stmt>

    <comment type="line">// communication socket</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Socket</name></type> <name>socket</name></decl>;</decl_stmt>
    <comment type="line">// socket's output/input stream</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>output</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>compressedoutput</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DataInputStream</name></type> <name>input</name></decl>;</decl_stmt>
    <comment type="line">// allocate buffer to use for transfers only once</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>transferBuffer</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>CHUNK_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// outbound global throughput limiter</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Throttle</name></type> <name>throttle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>StreamReplyVerbHandler</name></type> <name>handler</name> <init>= <expr>new <call><name>StreamReplyVerbHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FileStreamTask</name><parameter_list>(<param><decl><type><name>StreamHeader</name></type> <name>header</name></decl></param>, <param><decl><type><name>InetAddress</name></type> <name>to</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>header</name></name> = <name>header</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>to</name></name> = <name>to</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>throttle</name></name> = new <call><name>Throttle</name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <class><super><name><name>Throttle</name>.<name>ThroughputFunction</name></name></super><argument_list>()</argument_list>
        <block>{
            <comment type="block" format="javadoc">/** @return Instantaneous throughput target in bytes per millisecond. */</comment>
            <function><type><specifier>public</specifier> <name>int</name></type> <name>targetThroughput</name><parameter_list>()</parameter_list>
            <block>{
                <if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name>.<name>getStreamThroughputOutboundMegabitsPerSec</name></name><argument_list>()</argument_list></call> &lt; 1</expr>)</condition><then>
                    <comment type="line">// throttling disabled</comment>
                    <return>return <expr>0</expr>;</return></then></if>
                <comment type="line">// total throughput</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>totalBytesPerMS</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getStreamThroughputOutboundMegabitsPerSec</name></name><argument_list>()</argument_list></call> * 1024 * 1024 / 8 / 1000</expr></init></decl>;</decl_stmt>
                <comment type="line">// per stream throughput (target bytes per MS)</comment>
                <return>return <expr><name>totalBytesPerMS</name> / <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>getActiveStreamsOutbound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name>connectAttempt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// successfully connected: stream.</comment>
            <comment type="line">// (at this point, if we fail, it is the receiver's job to re-request)</comment>
            <expr_stmt><expr><call><name>stream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>StreamOutSession</name></type> <name>session</name> <init>= <expr><call><name><name>StreamOutSession</name>.<name>get</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>header</name>.<name>sessionId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>session</name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Found no stream out session at end of file stream task - this is expected if the receiver went down"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>session</name>.<name>getFiles</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
            <block>{
                <comment type="line">// we are the last of our kind, receive the final confirmation before closing</comment>
                <expr_stmt><expr><call><name>receiveReply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Finished streaming session to {}"</expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>StreamOutSession</name></type> <name>session</name> <init>= <expr><call><name><name>StreamOutSession</name>.<name>get</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>header</name>.<name>sessionId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>session</name> != null</expr>)</condition><then>
                <expr_stmt><expr><call><name><name>session</name>.<name>close</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch>
        <finally>finally
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"error closing socket"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></catch></try>
        }</block></finally></try>
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Done streaming " + <name><name>header</name>.<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Stream file by it's sections specified by this.header
     * @throws IOException on any I/O error
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>stream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>HeaderBuffer</name> <init>= <expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>constructStreamHeader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><call><name><name>Gossiper</name>.<name>instance</name>.<name>getVersion</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// write header (this should not be compressed for compatibility with other messages)</comment>
        <expr_stmt><expr><call><name><name>output</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name>.<name>getArray</name></name><argument_list>(<argument><expr><name>HeaderBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>header</name>.<name>file</name></name> == null</expr>)</condition><then>
            <return>return;</return></then></if>

        <comment type="line">// TODO just use a raw RandomAccessFile since we're managing our own buffer here</comment>
        <decl_stmt><decl><type><name>RandomAccessReader</name></type> <name>file</name> <init>= <expr>(<name><name>header</name>.<name>file</name>.<name>sstable</name>.<name>compression</name></name>) <comment type="line">// try to skip kernel page cache if possible</comment>
                                ? <call><name><name>CompressedRandomAccessReader</name>.<name>open</name></name><argument_list>(<argument><expr><call><name><name>header</name>.<name>file</name>.<name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>header</name>.<name>file</name>.<name>sstable</name>.<name>getCompressionMetadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call>
                                : <call><name><name>RandomAccessReader</name>.<name>open</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>header</name>.<name>file</name>.<name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// setting up data compression stream</comment>
        <expr_stmt><expr><name>compressedoutput</name> = new <call><name>LZFOutputStream</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>incrementActiveStreamsOutbound</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <comment type="line">// stream each of the required sections of the file</comment>
            <for>for (<init><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>section</name> <range>: <expr><name><name>header</name>.<name>file</name>.<name>sections</name></name></expr></range></decl></init>)
            <block>{
                <comment type="line">// seek to the beginning of the section</comment>
                <expr_stmt><expr><call><name><name>file</name>.<name>seek</name></name><argument_list>(<argument><expr><name><name>section</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// length of the section to stream</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>length</name> <init>= <expr><name><name>section</name>.<name>right</name></name> - <name><name>section</name>.<name>left</name></name></expr></init></decl>;</decl_stmt>
                <comment type="line">// tracks write progress</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>bytesTransferred</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

                <while>while <condition>(<expr><name>bytesTransferred</name> &lt; <name>length</name></expr>)</condition>
                <block>{
                    <decl_stmt><decl><type><name>long</name></type> <name>lastWrite</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>bytesTransferred</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>bytesTransferred</name> += <name>lastWrite</name></expr>;</expr_stmt>
                    <comment type="line">// store streaming progress</comment>
                    <expr_stmt><expr><name><name>header</name>.<name>file</name>.<name>progress</name></name> += <name>lastWrite</name></expr>;</expr_stmt>
                }</block></while>

                <comment type="line">// make sure that current section is send</comment>
                <expr_stmt><expr><call><name><name>compressedoutput</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"Bytes transferred " + <name>bytesTransferred</name> + "/" + <name><name>header</name>.<name>file</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>
            <comment type="line">// receive reply confirmation</comment>
            <expr_stmt><expr><call><name>receiveReply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>decrementActiveStreamsOutbound</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// no matter what happens close file</comment>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>receiveReply</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>MessagingService</name>.<name>validateMagic</name></name><argument_list>(<argument><expr><call><name><name>input</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>msheader</name> <init>= <expr><call><name><name>input</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><call><name><name>MessagingService</name>.<name>getBits</name></name><argument_list>(<argument><expr><name>msheader</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> == 0 : "Stream received before stream reply"</expr>;</assert>
        <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name><name>MessagingService</name>.<name>getBits</name></name><argument_list>(<argument><expr><name>msheader</name></expr></argument>, <argument><expr>15</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>input</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Read total size</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><call><name><name>input</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Header</name></type> <name>header</name> <init>= <expr><call><name><name>Header</name>.<name>serializer</name></name><argument_list>()</argument_list></call>.<call><name>deserialize</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>bodySize</name> <init>= <expr><call><name><name>input</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>body</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>bodySize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>input</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Message</name></type> <name>message</name> <init>= <expr>new <call><name>Message</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><call><name><name>message</name>.<name>getVerb</name></name><argument_list>()</argument_list></call> == <name><name>StorageService</name>.<name>Verb</name>.<name>STREAM_REPLY</name></name> : "Non-reply message received on stream socket"</expr>;</assert>
        <expr_stmt><expr><call><name><name>handler</name>.<name>doVerb</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Sequentially read bytes from the file and write them to the output stream
     *
     * @param reader The file reader to read from
     * @param length The full length that should be transferred
     * @param bytesTransferred Number of bytes remaining to transfer
     *
     * @return Number of bytes transferred
     *
     * @throws IOException on any I/O error
     */</comment>
    <function><type><specifier>protected</specifier> <name>long</name></type> <name>write</name><parameter_list>(<param><decl><type><name>RandomAccessReader</name></type> <name>reader</name></decl></param>, <param><decl><type><name>long</name></type> <name>length</name></decl></param>, <param><decl><type><name>long</name></type> <name>bytesTransferred</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>toTransfer</name> <init>= <expr>(<name>int</name>) <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>CHUNK_SIZE</name></expr></argument>, <argument><expr><name>length</name> - <name>bytesTransferred</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>reader</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>transferBuffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>toTransfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>compressedoutput</name>.<name>write</name></name><argument_list>(<argument><expr><name>transferBuffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>toTransfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>throttle</name>.<name>throttleDelta</name></name><argument_list>(<argument><expr><name>toTransfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>toTransfer</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Connects to the destination, with backoff for failed attempts.
     * TODO: all nodes on a cluster must currently use the same storage port
     * @throws IOException If all attempts fail.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>connectAttempt</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>attempts</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>true</expr>)</condition>
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><name>socket</name> = <call><name><name>MessagingService</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>getConnectionPool</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call>.<call><name>newSocket</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>socket</name>.<name>setSoTimeout</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getStreamingSocketTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>output</name> = <call><name><name>socket</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>input</name> = new <call><name>DataInputStream</name><argument_list>(<argument><expr><call><name><name>socket</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <if>if <condition>(<expr>++<name>attempts</name> &gt;= <name>MAX_CONNECT_ATTEMPTS</name></expr>)</condition><then>
                    <throw>throw <expr><name>e</name></expr>;</throw></then></if>

                <decl_stmt><decl><type><name>long</name></type> <name>waitms</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getRpcTimeout</name></name><argument_list>()</argument_list></call> * (<name>long</name>)<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>attempts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Failed attempt " + <name>attempts</name> + " to connect to " + <name>to</name> + " to stream " + <name><name>header</name>.<name>file</name></name> + ". Retrying in " + <name>waitms</name> + " ms. (" + <name>e</name> + ")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try>try
                <block>{
                    <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>waitms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>wtf</name></decl></param>)</parameter_list>
                <block>{
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>wtf</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></catch></try>
        }</block></while>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>output</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>output</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"FileStreamTask(session=%s, to=%s)"</expr></argument>, <argument><expr><name><name>header</name>.<name>sessionId</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
