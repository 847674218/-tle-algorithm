<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\dht\ExcludingBounds.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>RowPosition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>

<comment type="block" format="javadoc">/**
 * AbstractBounds containing neither of its endpoints: (left, right).  Used by CQL key &gt; X AND key &lt; Y range scans.
 */</comment>
<class><specifier>public</specifier> class <name><name>ExcludingBounds</name><argument_list>&lt;<argument><name>T</name> <extends>extends <name>RingPosition</name></extends></argument>&gt;</argument_list></name> <super><extends>extends <name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super>
<block>{
    <constructor><specifier>public</specifier> <name>ExcludingBounds</name><parameter_list>(<param><decl><type><name>T</name></type> <name>left</name></decl></param>, <param><decl><type><name>T</name></type> <name>right</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><name>ExcludingBounds</name><parameter_list>(<param><decl><type><name>T</name></type> <name>left</name></decl></param>, <param><decl><type><name>T</name></type> <name>right</name></decl></param>, <param><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// unlike a Range, an ExcludingBounds may not wrap, nor be empty</comment>
        <assert>assert <expr><call><name><name>left</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call> &lt; 0 || <call><name><name>right</name>.<name>isMinimum</name></name><argument_list>(<argument><expr><name>partitioner</name></expr></argument>)</argument_list></call> : "(" + <name>left</name> + "," + <name>right</name> + ")"</expr>;</assert>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name>T</name></type> <name>position</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>Range</name>.<name>contains</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>right</name>.<name>equals</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Pair</name><argument_list>&lt;<argument><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>split</name><parameter_list>(<param><decl><type><name>T</name></type> <name>position</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><call><name>contains</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call> || <call><name><name>left</name>.<name>equals</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</assert>
        <if>if <condition>(<expr><call><name><name>left</name>.<name>equals</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr>null</expr>;</return></then></if>
        <decl_stmt><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>lb</name> <init>= <expr>new <call><name><name>Range</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>rb</name> <init>= <expr>new <call><name><name>ExcludingBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name><name>Pair</name><argument_list>&lt;<argument><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lb</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>unwrap</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// ExcludingBounds objects never wrap</comment>
        <return>return <expr><name><name>Collections</name>.</name>&lt;<name><name>AbstractBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>&gt;<call><name>singletonList</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!(<name>o</name> instanceof <name>ExcludingBounds</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <decl_stmt><decl><type><name><name>ExcludingBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>rhs</name> <init>= <expr>(<name><name>ExcludingBounds</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>left</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>rhs</name>.<name>left</name></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>right</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>rhs</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"(" + <name>left</name> + "," + <name>right</name> + ")"</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Compute a bounds of keys corresponding to a given bounds of token.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>ExcludingBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>makeRowBounds</name><parameter_list>(<param><decl><type><name>Token</name></type> <name>left</name></decl></param>, <param><decl><type><name>Token</name></type> <name>right</name></decl></param>, <param><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name><name>ExcludingBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>left</name>.<name>maxKeyBound</name></name><argument_list>(<argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>right</name>.<name>minKeyBound</name></name><argument_list>(<argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>toRowBounds</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>(<name>left</name> instanceof <name>Token</name>) ? <call><name>makeRowBounds</name><argument_list>(<argument><expr>(<name>Token</name>)<name>left</name></expr></argument>, <argument><expr>(<name>Token</name>)<name>right</name></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call> : (<name><name>ExcludingBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name>)<name>this</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractBounds</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>toTokenBounds</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>(<name>left</name> instanceof <name>RowPosition</name>) ? new <call><name><name>ExcludingBounds</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>((<name>RowPosition</name>)<name>left</name>).<call><name>getToken</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>((<name>RowPosition</name>)<name>right</name>).<call><name>getToken</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call> : (<name><name>ExcludingBounds</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name>)<name>this</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
