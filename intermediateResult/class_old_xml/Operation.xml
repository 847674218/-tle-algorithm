<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\cql3\Operation.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name></name>;</package>

<class><specifier>public</specifier> class <name>Operation</name>
<block>{
    <enum><specifier>public</specifier> <specifier>static</specifier> enum <name>Type</name> <block>{ <decl><name>PLUS</name></decl>, <decl><name>MINUS</name></decl> }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Type</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ColumnIdentifier</name></type> <name>ident</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Term</name></type> <name>value</name></decl>;</decl_stmt>

    <comment type="line">// unary operation</comment>
    <constructor><specifier>public</specifier> <name>Operation</name><parameter_list>(<param><decl><type><name>Term</name></type> <name>a</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">// binary operation</comment>
    <constructor><specifier>public</specifier> <name>Operation</name><parameter_list>(<param><decl><type><name>ColumnIdentifier</name></type> <name>a</name></decl></param>, <param><decl><type><name>Type</name></type> <name>type</name></decl></param>, <param><decl><type><name>Term</name></type> <name>b</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ident</name></name> = <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>b</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isUnary</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>type</name> == null &amp;&amp; <name>ident</name> == null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>(<call><name>isUnary</name><argument_list>()</argument_list></call>)
                ? <call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"UnaryOperation(%s)"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call>
                : <call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"BinaryOperation(%s, %s, %s)"</expr></argument>, <argument><expr><name>ident</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
