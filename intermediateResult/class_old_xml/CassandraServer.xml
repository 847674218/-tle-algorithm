<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\thrift\CassandraServer.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>SocketAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>CharacterCodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeoutException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>DataFormatException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>Inflater</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Predicates</name></name>;</import>
<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Maps</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>antlr</name>.<name>runtime</name>.<name>RecognitionException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>Permission</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>PermissionDenied</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>CQLStatement</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>context</name>.<name>CounterContext</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryPath</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>MarshalException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>DataOutputBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>DynamicEndpointSnitch</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>scheduler</name>.<name>IRequestScheduler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Pair</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TException</name></name>;</import>

<class><specifier>public</specifier> class <name>CassandraServer</name> <super><implements>implements <name><name>Cassandra</name>.<name>Iface</name></name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>CassandraServer</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>COUNT_PAGE_SIZE</name> <init>= <expr>1024</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>EMPTY_COLUMNS</name> <init>= <expr><call><name><name>Collections</name>.<name>emptyList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>EMPTY_SUBCOLUMNS</name> <init>= <expr><call><name><name>Collections</name>.<name>emptyList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>CounterColumn</name></argument>&gt;</argument_list></name></type> <name>EMPTY_COUNTER_SUBCOLUMNS</name> <init>= <expr><call><name><name>Collections</name>.<name>emptyList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// thread local state containing session information</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list>&lt;<argument><name>ClientState</name></argument>&gt;</argument_list></name></type> <name>clientState</name> <init>= <expr>new <class><super><name><name>ThreadLocal</name><argument_list>&lt;<argument><name>ClientState</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>ClientState</name></type> <name>initialValue</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>new <call><name>ClientState</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * RequestScheduler to perform the scheduling of incoming requests
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IRequestScheduler</name></type> <name>requestScheduler</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CassandraServer</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>requestScheduler</name> = <call><name><name>DatabaseDescriptor</name>.<name>getRequestScheduler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ClientState</name></type> <name>state</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>SocketAddress</name></type> <name>remoteSocket</name> <init>= <expr><call><name><name>SocketSessionManagementService</name>.<name>remoteSocket</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>remoteSocket</name> == null</expr>)</condition><then>
            <return>return <expr><call><name><name>clientState</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name><name>SocketSessionManagementService</name>.<name>instance</name>.<name>get</name></name><argument_list>(<argument><expr><name>remoteSocket</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cState</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cState</name> = new <call><name>ClientState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>SocketSessionManagementService</name>.<name>instance</name>.<name>put</name></name><argument_list>(<argument><expr><name>remoteSocket</name></expr></argument>, <argument><expr><name>cState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>cState</name></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></type> <name>readColumnFamily</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></type> <name>commands</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <comment type="line">// TODO - Support multiple column families per row, right now row only contains 1 column family</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></type> <name>columnFamilyKeyMap</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name>schedule</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getRpcTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name>rows</name> = <call><name><name>StorageProxy</name>.<name>read</name></name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally>finally
            <block>{
                <expr_stmt><expr><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>TimeoutException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"... timed out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	<throw>throw <expr>new <call><name>TimedOutException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <for>for (<init><decl><type><name>Row</name></type> <name>row</name><range>: <expr><name>rows</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>columnFamilyKeyMap</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>row</name>.<name>key</name></name></expr></argument>, <argument><expr><name><name>row</name>.<name>cf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>columnFamilyKeyMap</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>thriftifySubColumns</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>columns</name> == null || <call><name><name>columns</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr><name>EMPTY_SUBCOLUMNS</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list>&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>thriftColumns</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Column</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>column</name>.<name>isMarkedForDelete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>Column</name></type> <name>thrift_column</name> <init>= <expr>new <call><name>Column</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>setTimestamp</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>timestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>column</name> instanceof <name>ExpiringColumn</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>thrift_column</name>.<name>setTtl</name></name><argument_list>(<argument><expr>((<name>ExpiringColumn</name>) <name>column</name>).<call><name>getTimeToLive</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>thriftColumns</name>.<name>add</name></name><argument_list>(<argument><expr><name>thrift_column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>thriftColumns</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>CounterColumn</name></argument>&gt;</argument_list></name></type> <name>thriftifyCounterSubColumns</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>columns</name> == null || <call><name><name>columns</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <return>return <expr><name>EMPTY_COUNTER_SUBCOLUMNS</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list>&lt;<argument><name>CounterColumn</name></argument>&gt;</argument_list></name></type> <name>thriftColumns</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>CounterColumn</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>column</name>.<name>isMarkedForDelete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <assert>assert <expr><name>column</name> instanceof <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>CounterColumn</name></name></expr>;</assert>
            <decl_stmt><decl><type><name>CounterColumn</name></type> <name>thrift_column</name> <init>= <expr>new <call><name>CounterColumn</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>CounterContext</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>total</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>thriftColumns</name>.<name>add</name></name><argument_list>(<argument><expr><name>thrift_column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>thriftColumns</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>thriftifyColumns</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reverseOrder</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>thriftColumns</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>column</name>.<name>isMarkedForDelete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr><name>column</name> instanceof <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>CounterColumn</name></name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>CounterColumn</name></type> <name>thrift_column</name> <init>= <expr>new <call><name>CounterColumn</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>CounterContext</name>.<name>instance</name></name><argument_list>()</argument_list></call>.<call><name>total</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>thriftColumns</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>ColumnOrSuperColumn</name><argument_list>()</argument_list></call>.<call><name>setCounter_column</name><argument_list>(<argument><expr><name>thrift_column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name>Column</name></type> <name>thrift_column</name> <init>= <expr>new <call><name>Column</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>setTimestamp</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>timestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>column</name> instanceof <name>ExpiringColumn</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>thrift_column</name>.<name>setTtl</name></name><argument_list>(<argument><expr>((<name>ExpiringColumn</name>) <name>column</name>).<call><name>getTimeToLive</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>thriftColumns</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>ColumnOrSuperColumn</name><argument_list>()</argument_list></call>.<call><name>setColumn</name><argument_list>(<argument><expr><name>thrift_column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>

        <comment type="line">// we have to do the reversing here, since internally we pass results around in ColumnFamily</comment>
        <comment type="line">// objects, which always sort their columns in the "natural" order</comment>
        <comment type="line">// TODO this is inconvenient for direct users of StorageProxy</comment>
        <if>if <condition>(<expr><name>reverseOrder</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>Collections</name>.<name>reverse</name></name><argument_list>(<argument><expr><name>thriftColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>thriftColumns</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>thriftifySuperColumns</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reverseOrder</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isCounterCF</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>isCounterCF</name></expr>)</condition><then>
            <return>return <expr><call><name>thriftifyCounterSuperColumns</name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><name>reverseOrder</name></expr></argument>)</argument_list></call></expr>;</return></then>
        <else>else
            <return>return <expr><call><name>thriftifySuperColumns</name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><name>reverseOrder</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>thriftifySuperColumns</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reverseOrder</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>thriftSuperColumns</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>subcolumns</name> <init>= <expr><call><name>thriftifySubColumns</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>getSubColumns</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>subcolumns</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>SuperColumn</name></type> <name>superColumn</name> <init>= <expr>new <call><name>SuperColumn</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>subcolumns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>thriftSuperColumns</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>ColumnOrSuperColumn</name><argument_list>()</argument_list></call>.<call><name>setSuper_column</name><argument_list>(<argument><expr><name>superColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <if>if <condition>(<expr><name>reverseOrder</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>Collections</name>.<name>reverse</name></name><argument_list>(<argument><expr><name>thriftSuperColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <return>return <expr><name>thriftSuperColumns</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>thriftifyCounterSuperColumns</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reverseOrder</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>thriftSuperColumns</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>CounterColumn</name></argument>&gt;</argument_list></name></type> <name>subcolumns</name> <init>= <expr><call><name>thriftifyCounterSubColumns</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>getSubColumns</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>subcolumns</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>CounterSuperColumn</name></type> <name>superColumn</name> <init>= <expr>new <call><name>CounterSuperColumn</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>subcolumns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>thriftSuperColumns</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>ColumnOrSuperColumn</name><argument_list>()</argument_list></call>.<call><name>setCounter_super_column</name><argument_list>(<argument><expr><name>superColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <if>if <condition>(<expr><name>reverseOrder</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>Collections</name>.<name>reverse</name></name><argument_list>(<argument><expr><name>thriftSuperColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <return>return <expr><name>thriftSuperColumns</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getSlice</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></type> <name>commands</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></type> <name>columnFamilies</name> <init>= <expr><call><name>readColumnFamily</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>columnFamiliesMap</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ReadCommand</name></type> <name>command</name><range>: <expr><name>commands</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>columnFamilies</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>decorateKey</name><argument_list>(<argument><expr><name><name>command</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>reverseOrder</name> <init>= <expr><name>command</name> instanceof <name>SliceFromReadCommand</name> &amp;&amp; ((<name>SliceFromReadCommand</name>)<name>command</name>).<name>reversed</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>thriftifiedColumns</name> <init>= <expr><call><name>thriftifyColumnFamily</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name><name>command</name>.<name>queryPath</name>.<name>superColumnName</name></name> != null</expr></argument>, <argument><expr><name>reverseOrder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>columnFamiliesMap</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>command</name>.<name>key</name></name></expr></argument>, <argument><expr><name>thriftifiedColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>columnFamiliesMap</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>thriftifyColumnFamily</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>subcolumnsOnly</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reverseOrder</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>cf</name> == null || <call><name><name>cf</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>EMPTY_COLUMNS</name></expr>;</return></then></if>
        <if>if <condition>(<expr><name>subcolumnsOnly</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>IColumn</name></type> <name>column</name> <init>= <expr><call><name><name>cf</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>subcolumns</name> <init>= <expr><call><name><name>column</name>.<name>getSubColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>subcolumns</name> == null || <call><name><name>subcolumns</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>EMPTY_COLUMNS</name></expr>;</return></then>
            <else>else
                <return>return <expr><call><name>thriftifyColumns</name><argument_list>(<argument><expr><name>subcolumns</name></expr></argument>, <argument><expr><name>reverseOrder</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>cf</name>.<name>isSuper</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>isCounterCF</name> <init>= <expr><call><name><name>cf</name>.<name>metadata</name></name><argument_list>()</argument_list></call>.<call><name>getDefaultValidator</name><argument_list>()</argument_list></call>.<call><name>isCommutative</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>thriftifySuperColumns</name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>getSortedColumns</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>reverseOrder</name></expr></argument>, <argument><expr><name>isCounterCF</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <return>return <expr><call><name>thriftifyColumns</name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>getSortedColumns</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>reverseOrder</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>get_slice</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"get_slice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>multigetSliceInternal</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>Collections</name>.<name>singletonList</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>multiget_slice</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>keys</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"multiget_slice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>multigetSliceInternal</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>multigetSliceInternal</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>keys</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>metadata</name> <init>= <expr><call><name><name>ThriftValidation</name>.<name>validateColumnFamily</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateColumnParent</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validatePredicate</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateConsistencyLevel</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>, <argument><expr><name><name>RequestType</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></type> <name>commands</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>keys</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>predicate</name>.<name>column_names</name></name> != null</expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>key</name><range>: <expr><name>keys</name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKey</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>commands</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>SliceByNamesReadCommand</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name><name>predicate</name>.<name>column_names</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>SliceRange</name></type> <name>range</name> <init>= <expr><name><name>predicate</name>.<name>slice_range</name></name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>ByteBuffer</name></type> <name>key</name><range>: <expr><name>keys</name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKey</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>commands</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>SliceFromReadCommand</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name><name>range</name>.<name>start</name></name></expr></argument>, <argument><expr><name><name>range</name>.<name>finish</name></name></expr></argument>, <argument><expr><name><name>range</name>.<name>reversed</name></name></expr></argument>, <argument><expr><name><name>range</name>.<name>count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>

        <return>return <expr><call><name>getSlice</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>ColumnOrSuperColumn</name></type> <name>internal_get</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnPath</name></type> <name>column_path</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_path</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>metadata</name> <init>= <expr><call><name><name>ThriftValidation</name>.<name>validateColumnFamily</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_path</name>.<name>column_family</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateColumnPath</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateConsistencyLevel</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>, <argument><expr><name><name>RequestType</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>QueryPath</name></type> <name>path</name> <init>= <expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name><name>column_path</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>column_path</name>.<name>column</name></name> == null ? null : <name><name>column_path</name>.<name>super_column</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>nameAsList</name> <init>= <expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name><name>column_path</name>.<name>column</name></name> == null ? <name><name>column_path</name>.<name>super_column</name></name> : <name><name>column_path</name>.<name>column</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKey</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ReadCommand</name></type> <name>command</name> <init>= <expr>new <call><name>SliceByNamesReadCommand</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>nameAsList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>DecoratedKey</name></argument>, <argument><name>ColumnFamily</name></argument>&gt;</argument_list></name></type> <name>cfamilies</name> <init>= <expr><call><name>readColumnFamily</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>cfamilies</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>decorateKey</name><argument_list>(<argument><expr><name><name>command</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>cf</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>NotFoundException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>tcolumns</name> <init>= <expr><call><name>thriftifyColumnFamily</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name><name>command</name>.<name>queryPath</name>.<name>superColumnName</name></name> != null</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>tcolumns</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>NotFoundException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>
        <assert>assert <expr><call><name><name>tcolumns</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1</expr>;</assert>
        <return>return <expr><call><name><name>tcolumns</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnOrSuperColumn</name></type> <name>get</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnPath</name></type> <name>column_path</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"get"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name>internal_get</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>column_path</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>get_count</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"get_count"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>table</name>.<name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>predicate</name>.<name>column_names</name></name> != null</expr>)</condition><then>
            <return>return <expr><call><name>get_slice</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>pageSize</name></decl>;</decl_stmt>
        <comment type="line">// request by page if this is a large row</comment>
        <if>if <condition>(<expr><call><name><name>cfs</name>.<name>getMeanColumns</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>averageColumnSize</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>cfs</name>.<name>getMeanRowSize</name></name><argument_list>()</argument_list></call> / <call><name><name>cfs</name>.<name>getMeanColumns</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>pageSize</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>COUNT_PAGE_SIZE</name></expr></argument>,
                                <argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getInMemoryCompactionLimit</name></name><argument_list>()</argument_list></call> / <name>averageColumnSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pageSize</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>pageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"average row column size is {}; using pageSize of {}"</expr></argument>, <argument><expr><name>averageColumnSize</name></expr></argument>, <argument><expr><name>pageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>pageSize</name> = <name>COUNT_PAGE_SIZE</name></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>int</name></type> <name>totalCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>predicate</name>.<name>slice_range</name></name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>predicate</name>.<name>slice_range</name></name> = new <call><name>SliceRange</name><argument_list>(<argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>,
                                                   <argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>,
                                                   <argument><expr>false</expr></argument>,
                                                   <argument><expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestedCount</name> <init>= <expr><name><name>predicate</name>.<name>slice_range</name>.<name>count</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>remaining</name> <init>= <expr><name>requestedCount</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pages</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>true</expr>)</condition>
        <block>{
            <expr_stmt><expr><name><name>predicate</name>.<name>slice_range</name>.<name>count</name></name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>pageSize</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// fetch at least two columns</comment>
            <expr_stmt><expr><name>columns</name> = <call><name>get_slice</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>columns</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <break>break;</break></then></if>

            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>firstName</name> <init>= <expr><call><name>getName</name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>newColumns</name> <init>= <expr><name>pages</name> == 0 || !<call><name><name>firstName</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>predicate</name>.<name>slice_range</name>.<name>start</name></name></expr></argument>)</argument_list></call> ? <call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call> : <call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>totalCount</name> += <name>newColumns</name></expr>;</expr_stmt>
            <comment type="line">// if we over-counted, just return original limit</comment>
            <if>if <condition>(<expr><name>totalCount</name> &gt; <name>requestedCount</name></expr>)</condition><then>
                <return>return <expr><name>requestedCount</name></expr>;</return></then></if>
            <expr_stmt><expr><name>remaining</name> -= <name>newColumns</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pages</name>++</expr>;</expr_stmt>
            <comment type="line">// We're done if either:</comment>
            <comment type="line">//   - We've querying the number of columns requested by the user</comment>
            <comment type="line">//   - last fetched page only contains the column we already fetched</comment>
            <if>if <condition>(<expr><name>remaining</name> == 0 || ((<call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1) &amp;&amp; (<call><name><name>firstName</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>predicate</name>.<name>slice_range</name>.<name>start</name></name></expr></argument>)</argument_list></call>))</expr>)</condition><then>
                <break>break;</break></then>
            <else>else
                <expr_stmt><expr><name><name>predicate</name>.<name>slice_range</name>.<name>start</name></name> = <call><name>getName</name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></while>

        <return>return <expr><name>totalCount</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>getName</name><parameter_list>(<param><decl><type><name>ColumnOrSuperColumn</name></type> <name>cosc</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>cosc</name>.<name>isSetSuper_column</name></name><argument_list>()</argument_list></call> ? <name><name>cosc</name>.<name>super_column</name>.<name>name</name></name> :
                   (<call><name><name>cosc</name>.<name>isSetColumn</name></name><argument_list>()</argument_list></call> ? <name><name>cosc</name>.<name>column</name>.<name>name</name></name> :
                       (<call><name><name>cosc</name>.<name>isSetCounter_column</name></name><argument_list>()</argument_list></call> ? <name><name>cosc</name>.<name>counter_column</name>.<name>name</name></name> : <name><name>cosc</name>.<name>counter_super_column</name>.<name>name</name></name>))</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>multiget_count</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>keys</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"multiget_count"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>counts</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>columnFamiliesMap</name> <init>= <expr><call><name>multigetSliceInternal</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>cf</name> <range>: <expr><call><name><name>columnFamiliesMap</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
          <expr_stmt><expr><call><name><name>counts</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>cf</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cf</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>counts</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>internal_insert</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>Column</name></type> <name>column</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>metadata</name> <init>= <expr><call><name><name>ThriftValidation</name>.<name>validateColumnFamily</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKey</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateColumnParent</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// SuperColumn field is usually optional, but not when we're inserting</comment>
        <if>if <condition>(<expr><name><name>metadata</name>.<name>cfType</name></name> == <name><name>ColumnFamilyType</name>.<name>Super</name></name> &amp;&amp; <name><name>column_parent</name>.<name>super_column</name></name> == null</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"missing mandatory super column name for super CF " + <name><name>column_parent</name>.<name>column_family</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateColumnNames</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateColumnData</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>super_column</name></name> != null</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>rm</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>super_column</name></name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>column</name>.<name>value</name></name></expr></argument>, <argument><expr><name><name>column</name>.<name>timestamp</name></name></expr></argument>, <argument><expr><name><name>column</name>.<name>ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>MarshalException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name>doInsert</name><argument_list>(<argument><expr><name>consistency_level</name></expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>insert</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>Column</name></type> <name>column</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"insert"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>internal_insert</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>internal_batch_mutate</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>mutation_map</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cfamsSeen</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>rowMutations</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>mutationEntry</name><range>: <expr><call><name><name>mutation_map</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>key</name> <init>= <expr><call><name><name>mutationEntry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// We need to separate row mutation for standard cf and counter cf (that will be encapsulated in a</comment>
            <comment type="line">// CounterMutation) because it doesn't follow the same code path</comment>
            <decl_stmt><decl><type><name>RowMutation</name></type> <name>rmStandard</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RowMutation</name></type> <name>rmCounter</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>columnFamilyToMutations</name> <init>= <expr><call><name><name>mutationEntry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>columnFamilyMutations</name> <range>: <expr><call><name><name>columnFamilyToMutations</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>cfName</name> <init>= <expr><call><name><name>columnFamilyMutations</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Avoid unneeded authorizations</comment>
                <if>if <condition>(<expr>!(<call><name><name>cfamsSeen</name>.<name>contains</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>cfamsSeen</name>.<name>add</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name>CFMetaData</name></type> <name>metadata</name> <init>= <expr><call><name><name>ThriftValidation</name>.<name>validateColumnFamily</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKey</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>metadata</name>.<name>getDefaultValidator</name></name><argument_list>()</argument_list></call>.<call><name>isCommutative</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateCommutativeForWrite</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rmCounter</name> = <name>rmCounter</name> == null ? new <call><name>RowMutation</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> : <name>rmCounter</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rm</name> = <name>rmCounter</name></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><name>rmStandard</name> = <name>rmStandard</name> == null ? new <call><name>RowMutation</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> : <name>rmStandard</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rm</name> = <name>rmStandard</name></expr>;</expr_stmt>
                }</block></else></if>

                <for>for (<init><decl><type><name>Mutation</name></type> <name>mutation</name> <range>: <expr><call><name><name>columnFamilyMutations</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
                <block>{
                    <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateMutation</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>mutation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr><name><name>mutation</name>.<name>deletion</name></name> != null</expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>rm</name>.<name>deleteColumnOrSuperColumn</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr><name><name>mutation</name>.<name>deletion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><name><name>mutation</name>.<name>column_or_supercolumn</name></name> != null</expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>rm</name>.<name>addColumnOrSuperColumn</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr><name><name>mutation</name>.<name>column_or_supercolumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></for>
            <if>if <condition>(<expr><name>rmStandard</name> != null &amp;&amp; !<call><name><name>rmStandard</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>rowMutations</name>.<name>add</name></name><argument_list>(<argument><expr><name>rmStandard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <if>if <condition>(<expr><name>rmCounter</name> != null &amp;&amp; !<call><name><name>rmCounter</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>rowMutations</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>CounterMutation</name></name><argument_list>(<argument><expr><name>rmCounter</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>

        <expr_stmt><expr><call><name>doInsert</name><argument_list>(<argument><expr><name>consistency_level</name></expr></argument>, <argument><expr><name>rowMutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>batch_mutate</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>,<argument><name><name>List</name><argument_list>&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>mutation_map</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"batch_mutate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>internal_batch_mutate</name><argument_list>(<argument><expr><name>mutation_map</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>internal_remove</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnPath</name></type> <name>column_path</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isCommutativeOp</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_path</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>metadata</name> <init>= <expr><call><name><name>ThriftValidation</name>.<name>validateColumnFamily</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_path</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name>isCommutativeOp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKey</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateColumnPathOrParent</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isCommutativeOp</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateCommutativeForWrite</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rm</name>.<name>delete</name></name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name>column_path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>isCommutativeOp</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>doInsert</name><argument_list>(<argument><expr><name>consistency_level</name></expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr>new <call><name>CounterMutation</name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>doInsert</name><argument_list>(<argument><expr><name>consistency_level</name></expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnPath</name></type> <name>column_path</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"remove"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>internal_remove</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>column_path</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doInsert</name><parameter_list>(<param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>IMutation</name></extends></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateConsistencyLevel</name></name><argument_list>(<argument><expr><call><name>state</name><argument_list>()</argument_list></call>.<call><name>getKeyspace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>, <argument><expr><name><name>RequestType</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>mutations</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>
        <try>try
        <block>{
            <expr_stmt><expr><call><name>schedule</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getRpcTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>StorageProxy</name>.<name>mutate</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally>finally
            <block>{
                <expr_stmt><expr><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>TimeoutException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"... timed out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>TimedOutException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>KsDef</name></type> <name>describe_keyspace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>NotFoundException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>state</name><argument_list>()</argument_list></call>.<call><name>hasKeyspaceAccess</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>KSMetaData</name></type> <name>ksm</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getTableDefinition</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ksm</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>NotFoundException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

        <return>return <expr><call><name><name>ksm</name>.<name>toThrift</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>KeySlice</name></argument>&gt;</argument_list></name></type> <name>get_range_slices</name><parameter_list>(<param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name>KeyRange</name></type> <name>range</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"range_slice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>metadata</name> <init>= <expr><call><name><name>ThriftValidation</name>.<name>validateColumnFamily</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateColumnParent</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validatePredicate</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKeyRange</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>super_column</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateConsistencyLevel</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>, <argument><expr><name><name>RequestType</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <decl_stmt><decl><type><name><name>IPartitioner</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>p</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>bounds</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>range</name>.<name>start_key</name></name> == null</expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name><name>Token</name>.<name><name>TokenFactory</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>tokenFactory</name> <init>= <expr><call><name><name>p</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Token</name></type> <name>left</name> <init>= <expr><call><name><name>tokenFactory</name>.<name>fromString</name></name><argument_list>(<argument><expr><name><name>range</name>.<name>start_token</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Token</name></type> <name>right</name> <init>= <expr><call><name><name>tokenFactory</name>.<name>fromString</name></name><argument_list>(<argument><expr><name><name>range</name>.<name>end_token</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>bounds</name> = <call><name><name>Range</name>.<name>makeRowRange</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name>RowPosition</name></type> <name>end</name> <init>= <expr><name><name>range</name>.<name>end_key</name></name> == null
                                ? <call><name><name>p</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>fromString</name><argument_list>(<argument><expr><name><name>range</name>.<name>end_token</name></name></expr></argument>)</argument_list></call>.<call><name>maxKeyBound</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>
                                : <call><name><name>RowPosition</name>.<name>forKey</name></name><argument_list>(<argument><expr><name><name>range</name>.<name>end_key</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>bounds</name> = new <call><name><name>Bounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>RowPosition</name>.<name>forKey</name></name><argument_list>(<argument><expr><name><name>range</name>.<name>start_key</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>schedule</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getRpcTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name>rows</name> = <call><name><name>StorageProxy</name>.<name>getRangeSlice</name></name><argument_list>(<argument><expr>new <call><name>RangeSliceCommand</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>, <argument><expr><name><name>range</name>.<name>row_filter</name></name></expr></argument>, <argument><expr><name><name>range</name>.<name>count</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally>finally
            <block>{
                <expr_stmt><expr><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
            <assert>assert <expr><name>rows</name> != null</expr>;</assert>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>TimeoutException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"... timed out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	<throw>throw <expr>new <call><name>TimedOutException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <return>return <expr><call><name>thriftifyKeySlices</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>KeySlice</name></argument>&gt;</argument_list></name></type> <name>get_paged_slice</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column_family</name></decl></param>, <param><decl><type><name>KeyRange</name></type> <name>range</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>start_column</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"get_paged_slice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>column_family</name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>metadata</name> <init>= <expr><call><name><name>ThriftValidation</name>.<name>validateColumnFamily</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>column_family</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKeyRange</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateConsistencyLevel</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>, <argument><expr><name><name>RequestType</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SlicePredicate</name></type> <name>predicate</name> <init>= <expr>new <call><name>SlicePredicate</name><argument_list>()</argument_list></call>.<call><name>setSlice_range</name><argument_list>(<argument><expr>new <call><name>SliceRange</name><argument_list>(<argument><expr><name>start_column</name></expr></argument>, <argument><expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>IPartitioner</name></type> <name>p</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>bounds</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>range</name>.<name>start_key</name></name> == null</expr>)</condition><then>
        <block>{
            <comment type="line">// (token, key) is unsupported, assume (token, token)</comment>
            <decl_stmt><decl><type><name><name>Token</name>.<name>TokenFactory</name></name></type> <name>tokenFactory</name> <init>= <expr><call><name><name>p</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Token</name></type> <name>left</name> <init>= <expr><call><name><name>tokenFactory</name>.<name>fromString</name></name><argument_list>(<argument><expr><name><name>range</name>.<name>start_token</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Token</name></type> <name>right</name> <init>= <expr><call><name><name>tokenFactory</name>.<name>fromString</name></name><argument_list>(<argument><expr><name><name>range</name>.<name>end_token</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>bounds</name> = <call><name><name>Range</name>.<name>makeRowRange</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>RowPosition</name></type> <name>end</name> <init>= <expr><name><name>range</name>.<name>end_key</name></name> == null
                            ? <call><name><name>p</name>.<name>getTokenFactory</name></name><argument_list>()</argument_list></call>.<call><name>fromString</name><argument_list>(<argument><expr><name><name>range</name>.<name>end_token</name></name></expr></argument>)</argument_list></call>.<call><name>maxKeyBound</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>
                            : <call><name><name>RowPosition</name>.<name>forKey</name></name><argument_list>(<argument><expr><name><name>range</name>.<name>end_key</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>bounds</name> = new <call><name><name>Bounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>RowPosition</name>.<name>forKey</name></name><argument_list>(<argument><expr><name><name>range</name>.<name>start_key</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name>schedule</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getRpcTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name>rows</name> = <call><name><name>StorageProxy</name>.<name>getRangeSlice</name></name><argument_list>(<argument><expr>new <call><name>RangeSliceCommand</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>column_family</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>, <argument><expr><name><name>range</name>.<name>row_filter</name></name></expr></argument>, <argument><expr><name><name>range</name>.<name>count</name></name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally>finally
            <block>{
                <expr_stmt><expr><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
            <assert>assert <expr><name>rows</name> != null</expr>;</assert>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>TimeoutException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"... timed out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	<throw>throw <expr>new <call><name>TimedOutException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <return>return <expr><call><name>thriftifyKeySlices</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr>new <call><name>ColumnParent</name><argument_list>(<argument><expr><name>column_family</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>KeySlice</name></argument>&gt;</argument_list></name></type> <name>thriftifyKeySlices</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>KeySlice</name></argument>&gt;</argument_list></name></type> <name>keySlices</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>KeySlice</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>reversed</name> <init>= <expr><name><name>predicate</name>.<name>slice_range</name></name> != null &amp;&amp; <name><name>predicate</name>.<name>slice_range</name>.<name>reversed</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Row</name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ColumnOrSuperColumn</name></argument>&gt;</argument_list></name></type> <name>thriftifiedColumns</name> <init>= <expr><call><name>thriftifyColumnFamily</name><argument_list>(<argument><expr><name><name>row</name>.<name>cf</name></name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>super_column</name></name> != null</expr></argument>, <argument><expr><name>reversed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>keySlices</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>KeySlice</name><argument_list>(<argument><expr><name><name>row</name>.<name>key</name>.<name>key</name></name></expr></argument>, <argument><expr><name>thriftifiedColumns</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>keySlices</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>KeySlice</name></argument>&gt;</argument_list></name></type> <name>get_indexed_slices</name><parameter_list>(<param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>IndexClause</name></type> <name>index_clause</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>column_predicate</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"scan"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>metadata</name> <init>= <expr><call><name><name>ThriftValidation</name>.<name>validateColumnFamily</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateColumnParent</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validatePredicate</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name>column_predicate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateIndexClauses</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>index_clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateConsistencyLevel</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>, <argument><expr><name><name>RequestType</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>IPartitioner</name></type> <name>p</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>bounds</name> <init>= <expr>new <call><name><name>Bounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>RowPosition</name>.<name>forKey</name></name><argument_list>(<argument><expr><name><name>index_clause</name>.<name>start_key</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
                                                                     <argument><expr><call><name><name>p</name>.<name>getMinimumToken</name></name><argument_list>()</argument_list></call>.<call><name>minKeyBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RangeSliceCommand</name></type> <name>command</name> <init>= <expr>new <call><name>RangeSliceCommand</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>,
                                                          <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>,
                                                          <argument><expr>null</expr></argument>,
                                                          <argument><expr><name>column_predicate</name></expr></argument>,
                                                          <argument><expr><name>bounds</name></expr></argument>,
                                                          <argument><expr><name><name>index_clause</name>.<name>expressions</name></name></expr></argument>,
                                                          <argument><expr><name><name>index_clause</name>.<name>count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>rows</name> = <call><name><name>StorageProxy</name>.<name>getRangeSlice</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>TimeoutException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"... timed out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>TimedOutException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <return>return <expr><call><name>thriftifyKeySlices</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><name>column_predicate</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>KsDef</name></argument>&gt;</argument_list></name></type> <name>describe_keyspaces</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keyspaces</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getTables</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>KsDef</name></argument>&gt;</argument_list></name></type> <name>ksset</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>KsDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>keyspaces</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>String</name></type> <name>ks</name> <range>: <expr><name>keyspaces</name></expr></range></decl></init>)
        <block>{
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>ksset</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>describe_keyspace</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>PermissionDenied</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"PermissionDenied: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></catch>
            <catch>catch <parameter_list>(<param><decl><type><name>NotFoundException</name></type> <name>nfe</name></decl></param>)</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Failed to find metadata for keyspace '" + <name>ks</name> + "'. Continuing... "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></for>
        <return>return <expr><name>ksset</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>describe_cluster_name</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>DatabaseDescriptor</name>.<name>getClusterName</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>describe_version</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <return>return <expr><name><name>Constants</name>.<name>VERSION</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>TokenRange</name></argument>&gt;</argument_list></name></type> <name>describe_ring</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list><throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>StorageService</name>.<name>instance</name>.<name>describeRing</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>describe_token_map</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>StorageService</name>.<name>instance</name>.<name>getTokenToEndpointMap</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>describe_partitioner</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>describe_snitch</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name>.<name>getEndpointSnitch</name></name><argument_list>()</argument_list></call> instanceof <name>DynamicEndpointSnitch</name></expr>)</condition><then>
            <return>return <expr>((<name>DynamicEndpointSnitch</name>)<call><name><name>DatabaseDescriptor</name>.<name>getEndpointSnitch</name></name><argument_list>()</argument_list></call>).<call><name><name>subsnitch</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</return></then></if>
        <return>return <expr><call><name><name>DatabaseDescriptor</name>.<name>getEndpointSnitch</name></name><argument_list>()</argument_list></call>.<call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>describe_splits</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name>String</name></type> <name>start_token</name></decl></param>, <param><decl><type><name>String</name></type> <name>end_token</name></decl></param>, <param><decl><type><name>int</name></type> <name>keys_per_split</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>CfSplit</name></argument>&gt;</argument_list></name></type> <name>splits</name> <init>= <expr><call><name>describe_splits_ex</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>start_token</name></expr></argument>, <argument><expr><name>end_token</name></expr></argument>, <argument><expr><name>keys_per_split</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>splits</name>.<name>size</name></name><argument_list>()</argument_list></call> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>splits</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getStart_token</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>CfSplit</name></type> <name>cfSplit</name> <range>: <expr><name>splits</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>cfSplit</name>.<name>getEnd_token</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>CfSplit</name></argument>&gt;</argument_list></name></type> <name>describe_splits_ex</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfName</name></decl></param>, <param><decl><type><name>String</name></type> <name>start_token</name></decl></param>, <param><decl><type><name>String</name></type> <name>end_token</name></decl></param>, <param><decl><type><name>int</name></type> <name>keys_per_split</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <comment type="line">// TODO: add keyspace authorization call post CASSANDRA-1425</comment>
        <decl_stmt><decl><type><name><name>Token</name>.<name>TokenFactory</name></name></type> <name>tf</name> <init>= <expr><call><name><name>StorageService</name>.<name>getPartitioner</name></name><argument_list>()</argument_list></call>.<call><name>getTokenFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tr</name> <init>= <expr>new <call><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tf</name>.<name>fromString</name></name><argument_list>(<argument><expr><name>start_token</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>tf</name>.<name>fromString</name></name><argument_list>(<argument><expr><name>end_token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name><name>Pair</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>splits</name> <init>=
                <expr><call><name><name>StorageService</name>.<name>instance</name>.<name>getSplits</name></name><argument_list>(<argument><expr><call><name>state</name><argument_list>()</argument_list></call>.<call><name>getKeyspace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>keys_per_split</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>CfSplit</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>CfSplit</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>splits</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Pair</name><argument_list>&lt;<argument><name><name>Range</name><argument_list>&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>split</name> <range>: <expr><name>splits</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>CfSplit</name><argument_list>(<argument><expr><call><name><name>split</name>.<name>left</name>.<name>left</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>split</name>.<name>left</name>.<name>right</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>split</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>login</name><parameter_list>(<param><decl><type><name>AuthenticationRequest</name></type> <name>auth_request</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>AuthenticationException</name></expr></argument>, <argument><expr><name>AuthorizationException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
         <expr_stmt><expr><call><name>state</name><argument_list>()</argument_list></call>.<call><name>login</name><argument_list>(<argument><expr><call><name><name>auth_request</name>.<name>getCredentials</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Schedule the current thread for access to the required services
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>schedule</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timeoutMS</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>TimeoutException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>requestScheduler</name>.<name>queue</name></name><argument_list>(<argument><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>state</name><argument_list>()</argument_list></call>.<call><name>getSchedulingValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeoutMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Release count for the used up resources
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>release</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>requestScheduler</name>.<name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>system_add_column_family</name><parameter_list>(<param><decl><type><name>CfDef</name></type> <name>cf_def</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"add_column_family"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>state</name><argument_list>()</argument_list></call>.<call><name>hasColumnFamilyAccess</name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>keyspace</name></name></expr></argument>, <argument><expr><name><name>cf_def</name>.<name>name</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>validateSchemaAgreement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>cf_def</name>.<name>unsetId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// explicitly ignore any id set by client (Hector likes to set zero)</comment>
            <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfm</name> <init>= <expr><call><name><name>CFMetaData</name>.<name>fromThrift</name></name><argument_list>(<argument><expr><name>cf_def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>addDefaultIndexNames</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>MigrationManager</name>.<name>announceNewColumnFamily</name></name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getVersion</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>InvalidRequestException</name></type> <name>ex</name> <init>= <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ex</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>system_drop_column_family</name><parameter_list>(<param><decl><type><name>String</name></type> <name>column_family</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"drop_column_family"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>column_family</name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validateSchemaAgreement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>MigrationManager</name>.<name>announceColumnFamilyDrop</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>column_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getVersion</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>InvalidRequestException</name></type> <name>ex</name> <init>= <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ex</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>system_add_keyspace</name><parameter_list>(<param><decl><type><name>KsDef</name></type> <name>ks_def</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"add_keyspace"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKeyspaceNotSystem</name></name><argument_list>(<argument><expr><name><name>ks_def</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>state</name><argument_list>()</argument_list></call>.<call><name>hasKeyspaceAccess</name><argument_list>(<argument><expr><name><name>ks_def</name>.<name>name</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validateSchemaAgreement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKeyspaceNotYetExisting</name></name><argument_list>(<argument><expr><name><name>ks_def</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// generate a meaningful error if the user setup keyspace and/or column definition incorrectly</comment>
        <for>for (<init><decl><type><name>CfDef</name></type> <name>cf</name> <range>: <expr><name><name>ks_def</name>.<name>cf_defs</name></name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr>!<call><name><name>cf</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>ks_def</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"CfDef (" + <call><name><name>cf</name>.<name>getName</name></name><argument_list>()</argument_list></call> +") had a keyspace definition that did not match KsDef"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></for>

        <try>try
        <block>{
            <decl_stmt><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>CFMetaData</name></argument>&gt;</argument_list></name></type> <name>cfDefs</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>CFMetaData</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ks_def</name>.<name>cf_defs</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>CfDef</name></type> <name>cf_def</name> <range>: <expr><name><name>ks_def</name>.<name>cf_defs</name></name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>cf_def</name>.<name>unsetId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// explicitly ignore any id set by client (same as system_add_column_family)</comment>
                <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfm</name> <init>= <expr><call><name><name>CFMetaData</name>.<name>fromThrift</name></name><argument_list>(<argument><expr><name>cf_def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cfm</name>.<name>addDefaultIndexNames</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cfDefs</name>.<name>add</name></name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>MigrationManager</name>.<name>announceNewKeyspace</name></name><argument_list>(<argument><expr><call><name><name>KSMetaData</name>.<name>fromThrift</name></name><argument_list>(<argument><expr><name>ks_def</name></expr></argument>, <argument><expr><call><name><name>cfDefs</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>CFMetaData</name><index>[<expr><call><name><name>cfDefs</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getVersion</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>InvalidRequestException</name></type> <name>ex</name> <init>= <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ex</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>system_drop_keyspace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"drop_keyspace"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKeyspaceNotSystem</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>state</name><argument_list>()</argument_list></call>.<call><name>hasKeyspaceAccess</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validateSchemaAgreement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>MigrationManager</name>.<name>announceKeyspaceDrop</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getVersion</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>InvalidRequestException</name></type> <name>ex</name> <init>= <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ex</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/** update an existing keyspace, but do not allow column family modifications.
     * @throws SchemaDisagreementException
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>system_update_keyspace</name><parameter_list>(<param><decl><type><name>KsDef</name></type> <name>ks_def</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"update_keyspace"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKeyspaceNotSystem</name></name><argument_list>(<argument><expr><name><name>ks_def</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>state</name><argument_list>()</argument_list></call>.<call><name>hasKeyspaceAccess</name><argument_list>(<argument><expr><name><name>ks_def</name>.<name>name</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateTable</name></name><argument_list>(<argument><expr><name><name>ks_def</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>ks_def</name>.<name>getCf_defs</name></name><argument_list>()</argument_list></call> != null &amp;&amp; <call><name><name>ks_def</name>.<name>getCf_defs</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Keyspace update must not contain any column family definitions."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <expr_stmt><expr><call><name>validateSchemaAgreement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>MigrationManager</name>.<name>announceKeyspaceUpdate</name></name><argument_list>(<argument><expr><call><name><name>KSMetaData</name>.<name>fromThrift</name></name><argument_list>(<argument><expr><name>ks_def</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getVersion</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>InvalidRequestException</name></type> <name>ex</name> <init>= <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ex</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>system_update_column_family</name><parameter_list>(<param><decl><type><name>CfDef</name></type> <name>cf_def</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"update_column_family"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>cf_def</name>.<name>keyspace</name></name> == null || <name><name>cf_def</name>.<name>name</name></name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Keyspace and CF name must be set."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <expr_stmt><expr><call><name>state</name><argument_list>()</argument_list></call>.<call><name>hasColumnFamilyAccess</name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>keyspace</name></name></expr></argument>, <argument><expr><name><name>cf_def</name>.<name>name</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>oldCfm</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getCFMetaData</name></name><argument_list>(<argument><expr><name><name>cf_def</name>.<name>keyspace</name></name></expr></argument>, <argument><expr><name><name>cf_def</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>oldCfm</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Could not find column family definition to modify."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <expr_stmt><expr><call><name>validateSchemaAgreement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>CFMetaData</name>.<name>applyImplicitDefaults</name></name><argument_list>(<argument><expr><name>cf_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfm</name> <init>= <expr><call><name><name>CFMetaData</name>.<name>fromThrift</name></name><argument_list>(<argument><expr><name>cf_def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cfm</name>.<name>addDefaultIndexNames</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>MigrationManager</name>.<name>announceColumnFamilyUpdate</name></name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getVersion</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>InvalidRequestException</name></type> <name>ex</name> <init>= <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ex</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validateSchemaAgreement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SchemaDisagreementException</name></expr></argument></throws>
    <block>{
        <comment type="line">// unreachable hosts don't count towards disagreement</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>versions</name> <init>= <expr><call><name><name>Maps</name>.<name>filterKeys</name></name><argument_list>(<argument><expr><call><name><name>StorageProxy</name>.<name>describeSchemaVersions</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                             <argument><expr><call><name><name>Predicates</name>.<name>not</name></name><argument_list>(<argument><expr><call><name><name>Predicates</name>.<name>equalTo</name></name><argument_list>(<argument><expr><name><name>StorageProxy</name>.<name>UNREACHABLE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>versions</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then>
            <throw>throw <expr>new <call><name>SchemaDisagreementException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>truncate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfname</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"truncating {} in {}"</expr></argument>, <argument><expr><name>cfname</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>cfname</name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name>schedule</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name>.<name>getRpcTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>StorageProxy</name>.<name>truncateBlocking</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>cfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally>finally
            <block>{
                <expr_stmt><expr><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>TimeoutException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"... timed out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>TimedOutException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>(<name>UnavailableException</name>) new <call><name>UnavailableException</name><argument_list>()</argument_list></call>.<call><name>initCause</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>set_keyspace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateTable</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>state</name><argument_list>()</argument_list></call>.<call><name>setKeyspace</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>describe_schema_versions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"checking schema agreement"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>StorageProxy</name>.<name>describeSchemaVersions</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// counter methods</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>CounterColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"add"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>cState</name>.<name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cState</name>.<name>hasColumnFamilyAccess</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>Permission</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>metadata</name> <init>= <expr><call><name><name>ThriftValidation</name>.<name>validateColumnFamily</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateKey</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateCommutativeForWrite</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateColumnParent</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// SuperColumn field is usually optional, but not when we're adding</comment>
        <if>if <condition>(<expr><name><name>metadata</name>.<name>cfType</name></name> == <name><name>ColumnFamilyType</name>.<name>Super</name></name> &amp;&amp; <name><name>column_parent</name>.<name>super_column</name></name> == null</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"missing mandatory super column name for super CF " + <name><name>column_parent</name>.<name>column_family</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>ThriftValidation</name>.<name>validateColumnNames</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>column_parent</name></expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RowMutation</name></type> <name>rm</name> <init>= <expr>new <call><name>RowMutation</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>rm</name>.<name>addCounter</name></name><argument_list>(<argument><expr>new <call><name>QueryPath</name><argument_list>(<argument><expr><name><name>column_parent</name>.<name>column_family</name></name></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>super_column</name></name></expr></argument>, <argument><expr><name><name>column</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>column</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>MarshalException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name>doInsert</name><argument_list>(<argument><expr><name>consistency_level</name></expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr>new <call><name>CounterMutation</name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove_counter</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>, <param><decl><type><name>ColumnPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"remove_counter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>internal_remove</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>consistency_level</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>uncompress</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>query</name></decl></param>, <param><decl><type><name>Compression</name></type> <name>compression</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>queryString</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>

        <comment type="line">// Decompress the query string.</comment>
        <try>try
        <block>{
            <switch>switch <condition>(<expr><name>compression</name></expr>)</condition>
            <block>{
                <case>case <expr><name>GZIP</name></expr>:
                    <decl_stmt><decl><type><name>DataOutputBuffer</name></type> <name>decompressed</name> <init>= <expr>new <call><name>DataOutputBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>outBuffer</name> <init>= <expr>new <name><name>byte</name><index>[<expr>1024</expr>]</index></name></expr></init>, <name>inBuffer</name> <init>= <expr>new <name><name>byte</name><index>[<expr>1024</expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>Inflater</name></type> <name>decompressor</name> <init>= <expr>new <call><name>Inflater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>lenRead</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr>true</expr>)</condition>
                    <block>{
                        <if>if <condition>(<expr><call><name><name>decompressor</name>.<name>needsInput</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                            <expr_stmt><expr><name>lenRead</name> = <call><name><name>query</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &lt; 1024 ? <call><name><name>query</name>.<name>remaining</name></name><argument_list>()</argument_list></call> : 1024</expr>;</expr_stmt></then></if>
                            <expr_stmt><expr><call><name><name>query</name>.<name>get</name></name><argument_list>(<argument><expr><name>inBuffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>lenRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>decompressor</name>.<name>setInput</name></name><argument_list>(<argument><expr><name>inBuffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>lenRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name>int</name></type> <name>lenWrite</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                        <while>while <condition>(<expr>(<name>lenWrite</name> = <call><name><name>decompressor</name>.<name>inflate</name></name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call>) !=0</expr>)</condition>
                            <expr_stmt><expr><call><name><name>decompressed</name>.<name>write</name></name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>lenWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>

                        <if>if <condition>(<expr><call><name><name>decompressor</name>.<name>finished</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                            <break>break;</break></then></if>
                    }</block></while>

                    <expr_stmt><expr><call><name><name>decompressor</name>.<name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>queryString</name> = new <call><name>String</name><argument_list>(<argument><expr><call><name><name>decompressed</name>.<name>getData</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name><name>decompressed</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>NONE</name></expr>:
                    <try>try
                    <block>{
                        <expr_stmt><expr><name>queryString</name> = <call><name><name>ByteBufferUtil</name>.<name>string</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block>
                    <catch>catch <parameter_list>(<param><decl><type><name>CharacterCodingException</name></type> <name>ex</name></decl></param>)</parameter_list>
                    <block>{
                        <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></catch></try>
                    <break>break;</break>
            </case>}</block></switch>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>DataFormatException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Error deflating query string."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Unknown query string encoding."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>queryString</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CqlResult</name></type> <name>execute_cql_query</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>query</name></decl></param>, <param><decl><type><name>Compression</name></type> <name>compression</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"execute_cql_query"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>queryString</name> <init>= <expr><call><name>uncompress</name><argument_list>(<argument><expr><name>query</name></expr></argument>,<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>cState</name>.<name>getCQLVersion</name></name><argument_list>()</argument_list></call>.<name>major</name> == 2</expr>)</condition><then>
                <return>return <expr><call><name><name>QueryProcessor</name>.<name>process</name></name><argument_list>(<argument><expr><name>queryString</name></expr></argument>, <argument><expr><call><name>state</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
            <else>else
                <return>return <expr><call><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>QueryProcessor</name>.<name>process</name></name><argument_list>(<argument><expr><name>queryString</name></expr></argument>, <argument><expr><name>cState</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>RecognitionException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>InvalidRequestException</name></type> <name>ire</name> <init>= <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Invalid or malformed CQL query string"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ire</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ire</name></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CqlPreparedResult</name></type> <name>prepare_cql_query</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>query</name></decl></param>, <param><decl><type><name>Compression</name></type> <name>compression</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"prepare_cql_query"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>queryString</name> <init>= <expr><call><name>uncompress</name><argument_list>(<argument><expr><name>query</name></expr></argument>,<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>cState</name>.<name>getCQLVersion</name></name><argument_list>()</argument_list></call>.<name>major</name> == 2</expr>)</condition><then>
                <return>return <expr><call><name><name>QueryProcessor</name>.<name>prepare</name></name><argument_list>(<argument><expr><name>queryString</name></expr></argument>, <argument><expr><name>cState</name></expr></argument>)</argument_list></call></expr>;</return></then>
            <else>else
                <return>return <expr><call><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>QueryProcessor</name>.<name>prepare</name></name><argument_list>(<argument><expr><name>queryString</name></expr></argument>, <argument><expr><name>cState</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>RecognitionException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>InvalidRequestException</name></type> <name>ire</name> <init>= <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Invalid or malformed CQL query string"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ire</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ire</name></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>CqlResult</name></type> <name>execute_prepared_cql_query</name><parameter_list>(<param><decl><type><name>int</name></type> <name>itemId</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>bindVariables</name></decl></param>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimedOutException</name></expr></argument>, <argument><expr><name>SchemaDisagreementException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"execute_prepared_cql_query"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>ClientState</name></type> <name>cState</name> <init>= <expr><call><name>state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>cState</name>.<name>getCQLVersion</name></name><argument_list>()</argument_list></call>.<name>major</name> == 2</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>CQLStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>cState</name>.<name>getPrepared</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>itemId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>statement</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Prepared query with ID %d not found"</expr></argument>, <argument><expr><name>itemId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr>"Retrieved prepared statement #{} with {} bind markers"</expr></argument>, <argument><expr><name>itemId</name></expr></argument>, <argument><expr><name><name>statement</name>.<name>boundTerms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><call><name><name>QueryProcessor</name>.<name>processPrepared</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>cState</name></expr></argument>, <argument><expr><name>bindVariables</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>CQLStatement</name></name></type> <name>statement</name> <init>= <expr><call><name><name>cState</name>.<name>getCQL3Prepared</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>itemId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>statement</name> == null</expr>)</condition><then>
                <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Prepared query with ID %d not found"</expr></argument>, <argument><expr><name>itemId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr>"Retrieved prepared statement #{} with {} bind markers"</expr></argument>, <argument><expr><name>itemId</name></expr></argument>, <argument><expr><call><name><name>statement</name>.<name>getBoundsTerms</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><call><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>QueryProcessor</name>.<name>processPrepared</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>cState</name></expr></argument>, <argument><expr><name>bindVariables</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>set_cql_version</name><parameter_list>(<param><decl><type><name>String</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"set_cql_version: " + <name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>state</name><argument_list>()</argument_list></call>.<call><name>setCQLVersion</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// main method moved to CassandraDaemon</comment>
}</block></class>
</unit>
