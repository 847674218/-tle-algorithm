<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\net\Message.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name>.<name>Stage</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>

<class><specifier>public</specifier> class <name>Message</name>
<block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Header</name></type> <name>header_</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>body_</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>transient</specifier> <name>int</name></type> <name>version</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Message</name><parameter_list>(<param><decl><type><name>Header</name></type> <name>header</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>body</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>header</name> != null</expr>;</assert>
        <assert>assert <expr><name>body</name> != null</expr>;</assert>

        <expr_stmt><expr><name>header_</name> = <name>header</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>body_</name> = <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>version</name></name> = <name>version</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Message</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>from</name></decl></param>, <param><decl><type><name><name>StorageService</name>.<name>Verb</name></name></type> <name>verb</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>body</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Header</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>getHeader</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>header_</name>.<name>getDetail</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Message</name></type> <name>withHeaderAdded</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>Message</name><argument_list>(<argument><expr><call><name><name>header_</name>.<name>withDetailsAdded</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>body_</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Message</name></type> <name>withHeaderRemoved</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>Message</name><argument_list>(<argument><expr><call><name><name>header_</name>.<name>withDetailsRemoved</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>body_</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>getMessageBody</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>body_</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getVersion</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>version</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>InetAddress</name></type> <name>getFrom</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>header_</name>.<name>getFrom</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Stage</name></type> <name>getMessageType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>StorageService</name>.<name>verbStages</name>.<name>get</name></name><argument_list>(<argument><expr><call><name>getVerb</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>StorageService</name>.<name>Verb</name></name></type> <name>getVerb</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>header_</name>.<name>getVerb</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// TODO should take byte[] + length so we don't have to copy to a byte[] of exactly the right len</comment>
    <comment type="line">// TODO make static</comment>
    <function><type><specifier>public</specifier> <name>Message</name></type> <name>getReply</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>from</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>body</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Header</name></type> <name>header</name> <init>= <expr>new <call><name>Header</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name><name>StorageService</name>.<name>Verb</name>.<name>REQUEST_RESPONSE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Message</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Message</name></type> <name>getInternalReply</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>body</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Header</name></type> <name>header</name> <init>= <expr>new <call><name>Header</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StorageService</name>.<name>Verb</name>.<name>INTERNAL_RESPONSE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Message</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sbuf</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>separator</name> <init>= <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sbuf</name>.<name>append</name></name><argument_list>(<argument><expr>"FROM:" + <call><name>getFrom</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        	.<call><name>append</name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call>
        	.<call><name>append</name><argument_list>(<argument><expr>"TYPE:" + <call><name>getMessageType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        	.<call><name>append</name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call>
        	.<call><name>append</name><argument_list>(<argument><expr>"VERB:" + <call><name>getVerb</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        	.<call><name>append</name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sbuf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
