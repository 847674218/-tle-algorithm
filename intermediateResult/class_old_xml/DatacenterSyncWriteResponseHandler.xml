<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\service\DatacenterSyncWriteResponseHandler.java"><comment type="block" format="javadoc">/**
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicInteger</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>Table</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>gms</name>.<name>FailureDetector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>IEndpointSnitch</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name>.<name>NetworkTopologyStrategy</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>Message</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>UnavailableException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class blocks for a quorum of responses _in all datacenters_ (CL.EACH_QUORUM).
 */</comment>
<class><specifier>public</specifier> class <name>DatacenterSyncWriteResponseHandler</name> <super><extends>extends <name>AbstractWriteResponseHandler</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>localdc</name></decl>;</decl_stmt>
    <expr_stmt><expr>static
    <block>{
        <expr><name>localdc</name> = <call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

	private <name>final</name> <name>NetworkTopologyStrategy</name> <name>strategy</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>AtomicInteger</name></argument>&gt;</argument_list></name></type> <name>responses</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>AtomicInteger</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>DatacenterSyncWriteResponseHandler</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>writeEndpoints</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></param>, <param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>Runnable</name></type> <name>callback</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Response is been managed by the map so make it 1 for the superclass.</comment>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>writeEndpoints</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><name>consistencyLevel</name> == <name><name>ConsistencyLevel</name>.<name>EACH_QUORUM</name></name></expr>;</assert>

        <expr_stmt><expr><name>strategy</name> = (<name>NetworkTopologyStrategy</name>) <call><name><name>Table</name>.<name>open</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>.<call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>String</name></type> <name>dc</name> <range>: <expr><call><name><name>strategy</name>.<name>getDatacenters</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>rf</name> <init>= <expr><call><name><name>strategy</name>.<name>getReplicationFactor</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>responses</name>.<name>put</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr>new <call><name>AtomicInteger</name><argument_list>(<argument><expr>(<name>rf</name> / 2) + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IWriteResponseHandler</name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>writeEndpoints</name></decl></param>, <param><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></param>, <param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>Runnable</name></type> <name>callback</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>DatacenterSyncWriteResponseHandler</name><argument_list>(<argument><expr><name>writeEndpoints</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>response</name><parameter_list>(<param><decl><type><name>Message</name></type> <name>message</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>dataCenter</name> <init>= <expr><name>message</name> == null
                            ? <name>localdc</name>
                            : <call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><call><name><name>message</name>.<name>getFrom</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>responses</name>.<name>get</name></name><argument_list>(<argument><expr><name>dataCenter</name></expr></argument>)</argument_list></call>.<call><name>getAndDecrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>AtomicInteger</name></type> <name>i</name> <range>: <expr><call><name><name>responses</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr>0 &lt; <call><name><name>i</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return;</return></then></if>
        }</block></for>

        <comment type="line">// all the quorum conditions are met</comment>
        <expr_stmt><expr><call><name>signal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>assureSufficientLiveNodes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnavailableException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>AtomicInteger</name></argument>&gt;</argument_list></name></type> <name>dcEndpoints</name> <init>= <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>AtomicInteger</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>String</name></type> <name>dc</name><range>: <expr><call><name><name>strategy</name>.<name>getDatacenters</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>dcEndpoints</name>.<name>put</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr>new <call><name>AtomicInteger</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <for>for (<init><decl><type><name>InetAddress</name></type> <name>destination</name> <range>: <expr><name>writeEndpoints</name></expr></range></decl></init>)
        <block>{
            <if>if <condition>(<expr><call><name><name>FailureDetector</name>.<name>instance</name>.<name>isAlive</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <comment type="line">// figure out the destination dc</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>destinationDC</name> <init>= <expr><call><name><name>snitch</name>.<name>getDatacenter</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dcEndpoints</name>.<name>get</name></name><argument_list>(<argument><expr><name>destinationDC</name></expr></argument>)</argument_list></call>.<call><name>incrementAndGet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <comment type="line">// Throw exception if any of the DC doesn't have livenodes to accept write.</comment>
        <for>for (<init><decl><type><name>String</name></type> <name>dc</name><range>: <expr><call><name><name>strategy</name>.<name>getDatacenters</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)
        <block>{
        	<if>if <condition>(<expr><call><name><name>dcEndpoints</name>.<name>get</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call> &lt; <call><name><name>responses</name>.<name>get</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>UnavailableException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLatencyForSnitch</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>
}</block></class>
</unit>
