<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\CLibrary.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileDescriptor</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Field</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name>.<name>sun</name>.<name>jna</name>.<name>LastErrorException</name></name>;</import>
<import>import <name><name>com</name>.<name>sun</name>.<name>jna</name>.<name>Native</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>CLibrary</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>CLibrary</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MCL_CURRENT</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MCL_FUTURE</name> <init>= <expr>2</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ENOMEM</name> <init>= <expr>12</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>F_GETFL</name>   <init>= <expr>3</expr></init></decl>;</decl_stmt>  <comment type="block">/* get file status flags */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>F_SETFL</name>   <init>= <expr>4</expr></init></decl>;</decl_stmt>  <comment type="block">/* set file status flags */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>F_NOCACHE</name> <init>= <expr>48</expr></init></decl>;</decl_stmt> <comment type="block">/* Mac OS X specific flag, turns cache on/off */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>O_DIRECT</name>  <init>= <expr>040000</expr></init></decl>;</decl_stmt> <comment type="block">/* fcntl.h */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>O_RDONLY</name>  <init>= <expr>00000000</expr></init></decl>;</decl_stmt> <comment type="block">/* fcntl.h */</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSIX_FADV_NORMAL</name>     <init>= <expr>0</expr></init></decl>;</decl_stmt> <comment type="block">/* fadvise.h */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSIX_FADV_RANDOM</name>     <init>= <expr>1</expr></init></decl>;</decl_stmt> <comment type="block">/* fadvise.h */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSIX_FADV_SEQUENTIAL</name> <init>= <expr>2</expr></init></decl>;</decl_stmt> <comment type="block">/* fadvise.h */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSIX_FADV_WILLNEED</name>   <init>= <expr>3</expr></init></decl>;</decl_stmt> <comment type="block">/* fadvise.h */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSIX_FADV_DONTNEED</name>   <init>= <expr>4</expr></init></decl>;</decl_stmt> <comment type="block">/* fadvise.h */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSIX_FADV_NOREUSE</name>    <init>= <expr>5</expr></init></decl>;</decl_stmt> <comment type="block">/* fadvise.h */</comment>

    <expr_stmt><expr>static
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>Native</name>.<name>register</name></name><argument_list>(<argument><expr>"c"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block></try>}</block></expr></expr_stmt>
        <catch>catch <parameter_list>(<param><decl><type><name>NoClassDefFoundError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"JNA not found. Native methods will be disabled."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"JNA link failure, one or more native method will be unavailable."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"JNA link failure details: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>NoSuchMethodError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Obsolete version of JNA present; unable to register C library. Upgrade to JNA 3.2.7 or later"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
    }</block></class>

    <function_decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>native</specifier> <name>int</name></type> <name>mlockall</name><parameter_list>(<param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>LastErrorException</name></expr></argument></throws>;</function_decl>
    <function_decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>native</specifier> <name>int</name></type> <name>munlockall</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>LastErrorException</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>native</specifier> <name>int</name></type> <name>link</name><parameter_list>(<param><decl><type><name>String</name></type> <name>from</name></decl></param>, <param><decl><type><name>String</name></type> <name>to</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>LastErrorException</name></expr></argument></throws>;</function_decl>

    <comment type="line">// fcntl - manipulate file descriptor, `man 2 fcntl`</comment>
    <function_decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>native</specifier> <name>int</name></type> <name>fcntl</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>, <param><decl><type><name>int</name></type> <name>command</name></decl></param>, <param><decl><type><name>long</name></type> <name>flags</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>LastErrorException</name></expr></argument></throws>;</function_decl>

    <comment type="line">// fadvice</comment>
    <function_decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>native</specifier> <name>int</name></type> <name>posix_fadvise</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>, <param><decl><type><name>long</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>LastErrorException</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>native</specifier> <name>int</name></type> <name>open</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>LastErrorException</name></expr></argument></throws>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>native</specifier> <name>int</name></type> <name>fsync</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>LastErrorException</name></expr></argument></throws>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>native</specifier> <name>int</name></type> <name>close</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>LastErrorException</name></expr></argument></throws>;</function_decl>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>errno</name><parameter_list>(<param><decl><type><name>RuntimeException</name></type> <name>e</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>e</name> instanceof <name>LastErrorException</name></expr>;</assert>
        <try>try
        <block>{
            <return>return <expr>((<name>LastErrorException</name>) <name>e</name>).<call><name>getErrorCode</name><argument_list>()</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>NoSuchMethodError</name></type> <name>x</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Obsolete version of JNA present; unable to read errno. Upgrade to JNA 3.2.7 or later"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></catch></try>
    }</block></function>

    <constructor><specifier>private</specifier> <name>CLibrary</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>tryMlockall</name><parameter_list>()</parameter_list>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name>mlockall</name><argument_list>(<argument><expr><name>MCL_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"JNA mlockall successful"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// this will have already been logged by CLibrary, no need to repeat it</comment>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>RuntimeException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr>!(<name>e</name> instanceof <name>LastErrorException</name>)</expr>)</condition><then>
                <throw>throw <expr><name>e</name></expr>;</throw></then></if>
            <if>if <condition>(<expr><call><name>errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> == <name>ENOMEM</name> &amp;&amp; <call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.name"</expr></argument>)</argument_list></call>.<call><name>toLowerCase</name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr>"linux"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Unable to lock JVM memory (ENOMEM)."
                             + " This can result in part of the JVM being swapped out, especially with mmapped I/O enabled."
                             + " Increase RLIMIT_MEMLOCK or run Cassandra as root."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr>!<call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.name"</expr></argument>)</argument_list></call>.<call><name>toLowerCase</name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr>"mac"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <comment type="line">// OS X allows mlockall to be called, but always returns an error</comment>
                <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"Unknown mlockall error " + <call><name>errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Create a hard link for a given file.
     *
     * @param sourceFile      The name of the source file.
     * @param destinationFile The name of the destination file.
     *
     * @throws java.io.IOException if an error has occurred while creating the link.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>createHardLink</name><parameter_list>(<param><decl><type><name>File</name></type> <name>sourceFile</name></decl></param>, <param><decl><type><name>File</name></type> <name>destinationFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <try>try
        <block>{
            <expr_stmt><expr><call><name>link</name><argument_list>(<argument><expr><call><name><name>sourceFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>destinationFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>createHardLinkWithExec</name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>RuntimeException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Unable to create hard link"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!(<name>e</name> instanceof <name>LastErrorException</name>)</expr>)</condition><then>
                <throw>throw <expr><name>e</name></expr>;</throw></then></if>
            <comment type="line">// there are 17 different error codes listed on the man page.  punt until/unless we find which</comment>
            <comment type="line">// ones actually turn up in practice.</comment>
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Unable to create hard link from %s to %s (errno %d)"</expr></argument>,
                                                <argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>, <argument><expr><call><name>errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>createHardLinkWithExec</name><parameter_list>(<param><decl><type><name>File</name></type> <name>sourceFile</name></decl></param>, <param><decl><type><name>File</name></type> <name>destinationFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>osname</name> <init>= <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.name"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ProcessBuilder</name></type> <name>pb</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>osname</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"Windows"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>float</name></type> <name>osversion</name> <init>= <expr><call><name><name>Float</name>.<name>parseFloat</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.version"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>osversion</name> &gt;= 6.0f</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>pb</name> = new <call><name>ProcessBuilder</name><argument_list>(<argument><expr>"cmd"</expr></argument>, <argument><expr>"/c"</expr></argument>, <argument><expr>"mklink"</expr></argument>, <argument><expr>"/H"</expr></argument>, <argument><expr><call><name><name>destinationFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sourceFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>pb</name> = new <call><name>ProcessBuilder</name><argument_list>(<argument><expr>"fsutil"</expr></argument>, <argument><expr>"hardlink"</expr></argument>, <argument><expr>"create"</expr></argument>, <argument><expr><call><name><name>destinationFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sourceFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>pb</name> = new <call><name>ProcessBuilder</name><argument_list>(<argument><expr>"ln"</expr></argument>, <argument><expr><call><name><name>sourceFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>destinationFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pb</name>.<name>redirectErrorStream</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>FBUtilities</name>.<name>exec</name></name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>st</name> <init>= <expr><call><name><name>osname</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"Windows"</expr></argument>)</argument_list></call>
                      ? "Unable to create hard link.  This probably means your data directory path is too long.  Exception follows:"
                      : "Unable to create hard link with exec.  Suggest installing JNA to avoid the need to exec entirely.  Exception follows: "</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trySkipCache</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>, <param><decl><type><name>long</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>fd</name> &lt; 0</expr>)</condition><then>
            <return>return;</return></then></if>

        <try>try
        <block>{
            <if>if <condition>(<expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.name"</expr></argument>)</argument_list></call>.<call><name>toLowerCase</name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr>"linux"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>posix_fadvise</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>POSIX_FADV_DONTNEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// if JNA is unavailable just skipping Direct I/O</comment>
            <comment type="line">// instance of this class will act like normal RandomAccessFile</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>tryFcntl</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>, <param><decl><type><name>int</name></type> <name>command</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// fcntl return value may or may not be useful, depending on the command</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>CLibrary</name>.<name>fcntl</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>RuntimeException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr>!(<name>e</name> instanceof <name>LastErrorException</name>)</expr>)</condition><then>
                <throw>throw <expr><name>e</name></expr>;</throw></then></if>

            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"fcntl(%d, %d, %d) failed, errno (%d)."</expr></argument>,
                                      <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name><name>CLibrary</name>.<name>errno</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>tryOpenDirectory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// JNA is unavailable just skipping Direct I/O</comment>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>RuntimeException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr>!(<name>e</name> instanceof <name>LastErrorException</name>)</expr>)</condition><then>
                <throw>throw <expr><name>e</name></expr>;</throw></then></if>

            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"open(%s, O_RDONLY) failed, errno (%d)."</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>CLibrary</name>.<name>errno</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr><name>fd</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trySync</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>fd</name> == -1</expr>)</condition><then>
            <return>return;</return></then></if>

        <try>try
        <block>{
            <expr_stmt><expr><call><name>fsync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// JNA is unavailable just skipping Direct I/O</comment>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>RuntimeException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr>!(<name>e</name> instanceof <name>LastErrorException</name>)</expr>)</condition><then>
                <throw>throw <expr><name>e</name></expr>;</throw></then></if>

            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"fsync(%d) failed, errno (%d)."</expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name><name>CLibrary</name>.<name>errno</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>tryCloseFD</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>fd</name> == -1</expr>)</condition><then>
            <return>return;</return></then></if>

        <try>try
        <block>{
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// JNA is unavailable just skipping Direct I/O</comment>
        }</block></catch>
        <catch>catch <parameter_list>(<param><decl><type><name>RuntimeException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr>!(<name>e</name> instanceof <name>LastErrorException</name>)</expr>)</condition><then>
                <throw>throw <expr><name>e</name></expr>;</throw></then></if>

            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"close(%d) failed, errno (%d)."</expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name><name>CLibrary</name>.<name>errno</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get system file descriptor from FileDescriptor object.
     * @param descriptor - FileDescriptor objec to get fd from
     * @return file descriptor, -1 or error
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getfd</name><parameter_list>(<param><decl><type><name>FileDescriptor</name></type> <name>descriptor</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Field</name></type> <name>field</name> <init>= <expr><call><name><name>FBUtilities</name>.<name>getProtectedField</name></name><argument_list>(<argument><expr><call><name><name>descriptor</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"fd"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>field</name> == null</expr>)</condition><then>
            <return>return <expr>-1</expr>;</return></then></if>

        <try>try
        <block>{
            <return>return <expr><call><name><name>field</name>.<name>getInt</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr>"unable to read fd field from FileDescriptor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr>-1</expr>;</return>
    }</block></function>
}
</unit>
