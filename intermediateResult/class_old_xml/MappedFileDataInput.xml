<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\util\MappedFileDataInput.java"><comment type="block" format="javadoc">/**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>MappedByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>channels</name>.<name>FileChannel</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>MappedFileDataInput</name> <super><extends>extends <name>AbstractDataInput</name></extends> <implements>implements <name>FileDataInput</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>MappedByteBuffer</name></type> <name>buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>position</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MappedFileDataInput</name><parameter_list>(<param><decl><type><name>FileInputStream</name></type> <name>stream</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>, <param><decl><type><name>int</name></type> <name>position</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>FileChannel</name></type> <name>channel</name> <init>= <expr><call><name><name>stream</name>.<name>getChannel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>buffer</name> = <call><name><name>channel</name>.<name>map</name></name><argument_list>(<argument><expr><name><name>FileChannel</name>.<name>MapMode</name>.<name>READ_ONLY</name></name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><call><name><name>channel</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>filename</name></name> = <name>filename</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>position</name></name> = <name>position</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>MappedFileDataInput</name><parameter_list>(<param><decl><type><name>MappedByteBuffer</name></type> <name>buffer</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>, <param><decl><type><name>int</name></type> <name>position</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>buffer</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>buffer</name></name> = <name>buffer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>filename</name></name> = <name>filename</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>position</name></name> = <name>position</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">// don't make this public, this is only for seeking WITHIN the current mapped segment</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>seekInternal</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>position</name> = <name>pos</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>int</name></type> <name>getPosition</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>position</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>markSupported</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>(<param><decl><type><name>FileMark</name></type> <name>mark</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <assert>assert <expr><name>mark</name> instanceof <name>MappedFileDataInputMark</name></expr>;</assert>
        <expr_stmt><expr><call><name>seekInternal</name><argument_list>(<argument><expr>((<name>MappedFileDataInputMark</name>) <name>mark</name>).<name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>FileMark</name></type> <name>mark</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>MappedFileDataInputMark</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>bytesPastMark</name><parameter_list>(<param><decl><type><name>FileMark</name></type> <name>mark</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>mark</name> instanceof <name>MappedFileDataInputMark</name></expr>;</assert>
        <assert>assert <expr><name>position</name> &gt;= ((<name>MappedFileDataInputMark</name>) <name>mark</name>).<name>position</name></expr>;</assert>
        <return>return <expr><name>position</name> - ((<name>MappedFileDataInputMark</name>) <name>mark</name>).<name>position</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEOF</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><name>position</name> == <call><name><name>buffer</name>.<name>capacity</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>bytesRemaining</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <return>return <expr><call><name><name>buffer</name>.<name>capacity</name></name><argument_list>()</argument_list></call> - <name>position</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPath</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>filename</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name>isEOF</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>-1</expr>;</return></then></if>
        <return>return <expr><call><name><name>buffer</name>.<name>get</name></name><argument_list>(<argument><expr><name>position</name>++</expr></argument>)</argument_list></call> &amp; 0xFF</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Does the same thing as &lt;code&gt;readFully&lt;/code&gt; do but without copying data (thread safe)
     * @param length length of the bytes to read
     * @return buffer with portion of file content
     * @throws IOException on any fail of I/O operation
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>ByteBuffer</name></type> <name>readBytes</name><parameter_list>(<param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>remaining</name> <init>= <expr><call><name><name>buffer</name>.<name>remaining</name></name><argument_list>()</argument_list></call> - <name>position</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>length</name> &gt; <name>remaining</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"mmap segment underflow; remaining is %d but %d requested"</expr></argument>,
                                                <argument><expr><name>remaining</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <if>if <condition>(<expr><name>length</name> == 0</expr>)</condition><then>
            <return>return <expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bytes</name> <init>= <expr><call><name><name>buffer</name>.<name>duplicate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bytes</name>.<name>position</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>position</name></name><argument_list>()</argument_list></call> + <name>position</name></expr></argument>)</argument_list></call>.<call><name>limit</name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>position</name></name><argument_list>()</argument_list></call> + <name>position</name> + <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>position</name> += <name>length</name></expr>;</expr_stmt>

        <comment type="line">// we have to copy the data in case we unreference the underlying sstable.  See CASSANDRA-3179</comment>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>clone</name> <init>= <expr><call><name><name>ByteBuffer</name>.<name>allocate</name></name><argument_list>(<argument><expr><call><name><name>bytes</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clone</name>.<name>put</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clone</name>.<name>flip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>readFully</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"use readBytes instead"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>readFully</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"use readBytes instead"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>skipBytes</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <assert>assert <expr><name>n</name> &gt;= 0 : "skipping negative bytes is illegal: " + <name>n</name></expr>;</assert>
        <if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>oldPosition</name> <init>= <expr><name>position</name></expr></init></decl>;</decl_stmt>
        <assert>assert <expr>((<name>long</name>)<name>oldPosition</name>) + <name>n</name> &lt;= <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>;</assert>
        <expr_stmt><expr><name>position</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>capacity</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>position</name> + <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>position</name> - <name>oldPosition</name></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>MappedFileDataInputMark</name> <super><implements>implements <name>FileMark</name></implements></super>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>

        <constructor><name>MappedFileDataInputMark</name><parameter_list>(<param><decl><type><name>int</name></type> <name>position</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>position</name></name> = <name>position</name></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getSimpleName</name><argument_list>()</argument_list></call> + "(" +
               "filename='" + <name>filename</name> + "'" +
               ", position=" + <name>position</name> +
               ")"</expr>;</return>
    }</block></function>
}</block></class>
</unit>
