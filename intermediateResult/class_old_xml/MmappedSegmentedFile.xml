<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\io\util\MmappedSegmentedFile.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOError</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>RandomAccessFile</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>MappedByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>channels</name>.<name>FileChannel</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>MmappedSegmentedFile</name> <super><extends>extends <name>SegmentedFile</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>MmappedSegmentedFile</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// in a perfect world, MAX_SEGMENT_SIZE would be final, but we need to test with a smaller size to stay sane.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>MAX_SEGMENT_SIZE</name> <init>= <expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sorted array of segment offsets and MappedByteBuffers for segments. If mmap is completely disabled, or if the
     * segment would be too long to mmap, the value for an offset will be null, indicating that we need to fall back
     * to a RandomAccessFile.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Segment</name><index>[]</index></type> <name>segments</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MmappedSegmentedFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>, <param><decl><type><name>long</name></type> <name>length</name></decl></param>, <param><decl><type><name><name>Segment</name><index>[]</index></name></type> <name>segments</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>segments</name></name> = <name>segments</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return The segment entry for the given position.
     */</comment>
    <function><type><specifier>private</specifier> <name>Segment</name></type> <name>floor</name><parameter_list>(<param><decl><type><name>long</name></type> <name>position</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr>0 &lt;= <name>position</name> &amp;&amp; <name>position</name> &lt; <name>length</name>: <name>position</name> + " vs " + <name>length</name></expr>;</assert>
        <decl_stmt><decl><type><name>Segment</name></type> <name>seg</name> <init>= <expr>new <call><name>Segment</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr>null</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>Arrays</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>idx</name> != -1 : "Bad position " + <name>position</name> + " in segments " + <call><name><name>Arrays</name>.<name>toString</name></name><argument_list>(<argument><expr><name>segments</name></expr></argument>)</argument_list></call></expr>;</assert>
        <if>if <condition>(<expr><name>idx</name> &lt; 0</expr>)</condition><then>
            <comment type="line">// round down to entry at insertion point</comment>
            <expr_stmt><expr><name>idx</name> = -(<name>idx</name> + 2)</expr>;</expr_stmt></then></if>
        <return>return <expr><name><name>segments</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return The segment containing the given position: must be closed after use.
     */</comment>
    <function><type><specifier>public</specifier> <name>FileDataInput</name></type> <name>getSegment</name><parameter_list>(<param><decl><type><name>long</name></type> <name>position</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Segment</name></type> <name>segment</name> <init>= <expr><call><name>floor</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>segment</name>.<name>right</name></name> != null</expr>)</condition><then>
        <block>{
            <comment type="line">// segment is mmap'd</comment>
            <return>return <expr>new <call><name>MappedFileDataInput</name><argument_list>(<argument><expr><name><name>segment</name>.<name>right</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>position</name> - <name><name>segment</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="line">// not mmap'd: open a braf covering the segment</comment>
        <try>try
        <block>{
            <comment type="line">// FIXME: brafs are unbounded, so this segment will cover the rest of the file, rather than just the row</comment>
            <decl_stmt><decl><type><name>RandomAccessReader</name></type> <name>file</name> <init>= <expr><call><name><name>RandomAccessReader</name>.<name>open</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>file</name>.<name>seek</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>file</name></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>cleanup</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>FileUtils</name>.<name>isCleanerAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <comment type="block">/*
         * Try forcing the unmapping of segments using undocumented unsafe sun APIs.
         * If this fails (non Sun JVM), we'll have to wait for the GC to finalize the mapping.
         * If this works and a thread tries to access any segment, hell will unleash on earth.
         */</comment>
        <try>try
        <block>{
            <for>for (<init><decl><type><name>Segment</name></type> <name>segment</name> <range>: <expr><name>segments</name></expr></range></decl></init>)
            <block>{
                <if>if <condition>(<expr><name><name>segment</name>.<name>right</name></name> == null</expr>)</condition><then>
                    <continue>continue;</continue></then></if>
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>clean</name></name><argument_list>(<argument><expr><name><name>segment</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"All segments have been unmapped successfully"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <comment type="line">// This is not supposed to happen</comment>
            <expr_stmt><expr><call><name><name>logger</name>.<name>error</name></name><argument_list>(<argument><expr>"Error while unmapping segments"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Overrides the default behaviour to create segments of a maximum size.
     */</comment>
    <class><specifier>static</specifier> class <name>Builder</name> <super><extends>extends <name><name>SegmentedFile</name>.<name>Builder</name></name></extends></super>
    <block>{
        <comment type="line">// planned segment boundaries</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>boundaries</name></decl>;</decl_stmt>

        <comment type="line">// offset of the open segment (first segment begins at 0).</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>currentStart</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

        <comment type="line">// current length of the open segment.</comment>
        <comment type="line">// used to allow merging multiple too-large-to-mmap segments, into a single buffered segment.</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>currentSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Builder</name><parameter_list>()</parameter_list>
        <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>boundaries</name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>boundaries</name>.<name>add</name></name><argument_list>(<argument><expr>0L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>addPotentialBoundary</name><parameter_list>(<param><decl><type><name>long</name></type> <name>boundary</name></decl></param>)</parameter_list>
        <block>{
            <if>if <condition>(<expr><name>boundary</name> - <name>currentStart</name> &lt;= <name>MAX_SEGMENT_SIZE</name></expr>)</condition><then>
            <block>{
                <comment type="line">// boundary fits into current segment: expand it</comment>
                <expr_stmt><expr><name>currentSize</name> = <name>boundary</name> - <name>currentStart</name></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>

            <comment type="line">// close the current segment to try and make room for the boundary</comment>
            <if>if <condition>(<expr><name>currentSize</name> &gt; 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>currentStart</name> += <name>currentSize</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>boundaries</name>.<name>add</name></name><argument_list>(<argument><expr><name>currentStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>currentSize</name> = <name>boundary</name> - <name>currentStart</name></expr>;</expr_stmt>

            <comment type="line">// if we couldn't make room, the boundary needs its own segment</comment>
            <if>if <condition>(<expr><name>currentSize</name> &gt; <name>MAX_SEGMENT_SIZE</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>currentStart</name> = <name>boundary</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>boundaries</name>.<name>add</name></name><argument_list>(<argument><expr><name>currentStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>currentSize</name> = 0</expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>SegmentedFile</name></type> <name>complete</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>length</name> <init>= <expr>new <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// add a sentinel value == length</comment>
            <expr_stmt><expr><call><name><name>boundaries</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>Long</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// create the segments</comment>
            <return>return <expr>new <call><name>MmappedSegmentedFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><call><name>createSegments</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>private</specifier> <name>Segment</name><index>[]</index></type> <name>createSegments</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>segcount</name> <init>= <expr><call><name><name>boundaries</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Segment</name><index>[]</index></type> <name>segments</name> <init>= <expr>new <name><name>Segment</name><index>[<expr><name>segcount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RandomAccessFile</name></type> <name>raf</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
            <try>try
            <block>{
                <expr_stmt><expr><name>raf</name> = new <call><name>RandomAccessFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>segcount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <block>{
                    <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>boundaries</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>boundaries</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call> - <name>start</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>MappedByteBuffer</name></type> <name>segment</name> <init>= <expr><name>size</name> &lt;= <name>MAX_SEGMENT_SIZE</name>
                                               ? <call><name><name>raf</name>.<name>getChannel</name></name><argument_list>()</argument_list></call>.<call><name>map</name><argument_list>(<argument><expr><name><name>FileChannel</name>.<name>MapMode</name>.<name>READ_ONLY</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call>
                                               : null</expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>segments</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>Segment</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block>
            <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
            <block>{
                <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch>
            <finally>finally
            <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>raf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
            <return>return <expr><name>segments</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
