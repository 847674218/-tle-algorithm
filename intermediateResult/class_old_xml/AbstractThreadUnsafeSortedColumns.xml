<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\AbstractThreadUnsafeSortedColumns.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Function</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Allocator</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractThreadUnsafeSortedColumns</name> <super><implements>implements <name>ISortedColumns</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>DeletionInfo</name></type> <name>deletionInfo</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AbstractThreadUnsafeSortedColumns</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>deletionInfo</name> = new <call><name>DeletionInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>DeletionInfo</name></type> <name>getDeletionInfo</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>deletionInfo</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<param><decl><type><name>DeletionInfo</name></type> <name>newInfo</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>deletionInfo</name>.<name>markedForDeleteAt</name></name> &lt; <name><name>newInfo</name>.<name>markedForDeleteAt</name></name></expr>)</condition><then>
            <comment type="line">// since deletion info is immutable, aliasing it is fine</comment>
            <expr_stmt><expr><name>deletionInfo</name> = <name>newInfo</name></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>maybeResetDeletionTimes</name><parameter_list>(<param><decl><type><name>int</name></type> <name>gcBefore</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Update if it's not MIN_VALUE anymore and it has expired</comment>
        <if>if <condition>(<expr><name><name>deletionInfo</name>.<name>localDeletionTime</name></name> &lt;= <name>gcBefore</name></expr>)</condition><then>
            <expr_stmt><expr><name>deletionInfo</name> = new <call><name>DeletionInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>retainAll</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>columns</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>toRetain</name> <init>= <expr><call><name><name>columns</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IColumn</name></type> <name>current</name> <init>= <expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IColumn</name></type> <name>retain</name> <init>= <expr><call><name><name>toRetain</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>toRetain</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr><call><name>getComparator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>current</name> != null &amp;&amp; <name>retain</name> != null</expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>current</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retain</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>c</name> == 0</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>current</name> instanceof <name>SuperColumn</name></expr>)</condition><then>
                <block>{
                    <assert>assert <expr><name>retain</name> instanceof <name>SuperColumn</name></expr>;</assert>
                    <expr_stmt><expr>((<name>SuperColumn</name>)<name>current</name>).<call><name>retainAll</name><argument_list>(<argument><expr>(<name>SuperColumn</name>)<name>retain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>current</name> = <call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
                <expr_stmt><expr><name>retain</name> = <call><name><name>toRetain</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>toRetain</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>c</name> &lt; 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>iter</name>.<name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>current</name> = <call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
            }</block></then>
            <else>else <comment type="line">// c &gt; 0</comment>
            <block>{
                <expr_stmt><expr><name>retain</name> = <call><name><name>toRetain</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>toRetain</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></while>
        <while>while <condition>(<expr><name>current</name> != null</expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name><name>iter</name>.<name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>current</name> = <call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>addAllWithSizeDelta</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>cm</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>, <param><decl><type><name><name>Function</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>transformation</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// sizeDelta is only needed by memtable updates which should not be using thread-unsafe containers</comment>
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>addAll</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>columns</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>, <param><decl><type><name><name>Function</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>transformation</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>size</name><argument_list>()</argument_list></call> == 0</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getEstimatedColumnCount</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
