<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\ColumnFamily.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import static <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DBConstants</name></name>.*;</import>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>MessageDigest</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>builder</name>.<name>HashCodeBuilder</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cache</name>.<name>IRowCacheEntry</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>Schema</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>filter</name>.<name>QueryPath</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>MarshalException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IColumnSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Allocator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>HeapAllocator</name></name>;</import>

<class><specifier>public</specifier> class <name>ColumnFamily</name> <super><extends>extends <name>AbstractColumnContainer</name></extends> <implements>implements <name>IRowCacheEntry</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ColumnFamilySerializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>ColumnFamilySerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CFMetaData</name></type> <name>cfm</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFamilySerializer</name></type> <name>serializer</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>serializer</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFamily</name></type> <name>create</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>cfId</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><call><name><name>Schema</name>.<name>instance</name>.<name>getCFMetaData</name></name><argument_list>(<argument><expr><name>cfId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFamily</name></type> <name>create</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>cfId</name></decl></param>, <param><decl><type><name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>factory</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><call><name><name>Schema</name>.<name>instance</name>.<name>getCFMetaData</name></name><argument_list>(<argument><expr><name>cfId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFamily</name></type> <name>create</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>String</name></type> <name>cfName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><call><name><name>Schema</name>.<name>instance</name>.<name>getCFMetaData</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFamily</name></type> <name>create</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>cfm</name></expr></argument>, <argument><expr><call><name><name>TreeMapBackedSortedColumns</name>.<name>factory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFamily</name></type> <name>create</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>, <param><decl><type><name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>factory</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>cfm</name></expr></argument>, <argument><expr><name>factory</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFamily</name></type> <name>create</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>, <param><decl><type><name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>factory</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversedInsertOrder</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>ColumnFamily</name><argument_list>(<argument><expr><name>cfm</name></expr></argument>, <argument><expr><call><name><name>factory</name>.<name>create</name></name><argument_list>(<argument><expr><name><name>cfm</name>.<name>comparator</name></name></expr></argument>, <argument><expr><name>reversedInsertOrder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <constructor><specifier>protected</specifier> <name>ColumnFamily</name><parameter_list>(<param><decl><type><name>CFMetaData</name></type> <name>cfm</name></decl></param>, <param><decl><type><name>ISortedColumns</name></type> <name>map</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><name>cfm</name> != null</expr>;</assert>
        <expr_stmt><expr><name><name>this</name>.<name>cfm</name></name> = <name>cfm</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>ColumnFamily</name></type> <name>cloneMeShallow</name><parameter_list>(<param><decl><type><name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>factory</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversedInsertOrder</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name>cfm</name></expr></argument>, <argument><expr><name>factory</name></expr></argument>, <argument><expr><name>reversedInsertOrder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>delete</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cf</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnFamily</name></type> <name>cloneMeShallow</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>cloneMeShallow</name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>getFactory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>columns</name>.<name>isInsertReversed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getSubComparator</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>IColumnSerializer</name></type> <name>s</name> <init>= <expr><call><name>getColumnSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name>s</name> instanceof <name>SuperColumnSerializer</name>) ? ((<name>SuperColumnSerializer</name>) <name>s</name>).<call><name>getComparator</name><argument_list>()</argument_list></call> : null</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnFamilyType</name></type> <name>getType</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>cfm</name>.<name>cfType</name></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnFamily</name></type> <name>cloneMe</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cf</name> <init>= <expr>new <call><name>ColumnFamily</name><argument_list>(<argument><expr><name>cfm</name></expr></argument>, <argument><expr><call><name><name>columns</name>.<name>cloneMe</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cf</name>.<name>delete</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cf</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Integer</name></type> <name>id</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name><name>cfm</name>.<name>cfId</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return The CFMetaData for this row
     */</comment>
    <function><type><specifier>public</specifier> <name>CFMetaData</name></type> <name>metadata</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>cfm</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumnSerializer</name></type> <name>getColumnSerializer</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>cfm</name>.<name>getColumnSerializer</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSuper</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>getType</name><argument_list>()</argument_list></call> == <name><name>ColumnFamilyType</name>.<name>Super</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Same as addAll() but do a cloneMe of SuperColumn if necessary to
     * avoid keeping references to the structure (see #3957).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAllWithSCCopy</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>cf</name>.<name>isSuper</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <for>for (<init><decl><type><name>IColumn</name></type> <name>c</name> <range>: <expr><name>cf</name></expr></range></decl></init>)
            <block>{
                <expr_stmt><expr><call><name><name>columns</name>.<name>addColumn</name></name><argument_list>(<argument><expr>((<name>SuperColumn</name>)<name>c</name>).<call><name>cloneMe</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name>addAll</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>, <param><decl><type><name>int</name></type> <name>timeToLive</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name><name>path</name>.<name>columnName</name></name> != null : <name>path</name></expr>;</assert>
        <assert>assert <expr>!<call><name>metadata</name><argument_list>()</argument_list></call>.<call><name>getDefaultValidator</name><argument_list>()</argument_list></call>.<call><name>isCommutative</name><argument_list>()</argument_list></call></expr>;</assert>
        <decl_stmt><decl><type><name>Column</name></type> <name>column</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>timeToLive</name> &gt; 0</expr>)</condition><then>
            <expr_stmt><expr><name>column</name> = new <call><name>ExpiringColumn</name><argument_list>(<argument><expr><name><name>path</name>.<name>columnName</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>timeToLive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>column</name> = new <call><name>Column</name><argument_list>(<argument><expr><name><name>path</name>.<name>columnName</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name><name>path</name>.<name>superColumnName</name></name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCounter</name><parameter_list>(<param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>long</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name><name>path</name>.<name>columnName</name></name> != null : <name>path</name></expr>;</assert>
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name><name>path</name>.<name>superColumnName</name></name></expr></argument>, <argument><expr>new <call><name>CounterUpdateColumn</name><argument_list>(<argument><expr><name><name>path</name>.<name>columnName</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTombstone</name><parameter_list>(<param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>localDeletionTime</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name><name>path</name>.<name>columnName</name></name> != null : <name>path</name></expr>;</assert>
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name><name>path</name>.<name>superColumnName</name></name></expr></argument>, <argument><expr>new <call><name>DeletedColumn</name><argument_list>(<argument><expr><name><name>path</name>.<name>columnName</name></name></expr></argument>, <argument><expr><name>localDeletionTime</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTombstone</name><parameter_list>(<param><decl><type><name>QueryPath</name></type> <name>path</name></decl></param>, <param><decl><type><name>int</name></type> <name>localDeletionTime</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name><name>path</name>.<name>columnName</name></name> != null : <name>path</name></expr>;</assert>
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name><name>path</name>.<name>superColumnName</name></name></expr></argument>, <argument><expr>new <call><name>DeletedColumn</name><argument_list>(<argument><expr><name><name>path</name>.<name>columnName</name></name></expr></argument>, <argument><expr><name>localDeletionTime</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTombstone</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>, <param><decl><type><name>int</name></type> <name>localDeletionTime</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr>null</expr></argument>, <argument><expr>new <call><name>DeletedColumn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>localDeletionTime</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>superColumnName</name></decl></param>, <param><decl><type><name>Column</name></type> <name>column</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>IColumn</name></type> <name>c</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>superColumnName</name> == null</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>c</name> = <name>column</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <assert>assert <expr><call><name>isSuper</name><argument_list>()</argument_list></call></expr>;</assert>
            <expr_stmt><expr><name>c</name> = new <call><name>SuperColumn</name><argument_list>(<argument><expr><name>superColumnName</name></expr></argument>, <argument><expr><call><name>getSubComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>c</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// checks subcolumn name</comment>
        }</block></else></if>
        <expr_stmt><expr><call><name>addColumn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>columns</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/*
     * This function will calculate the difference between 2 column families.
     * The external input is assumed to be a superset of internal.
     */</comment>
    <function><type><specifier>public</specifier> <name>ColumnFamily</name></type> <name>diff</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cfComposite</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><call><name><name>cfComposite</name>.<name>id</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>id</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</assert>
        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>cfDiff</name> <init>= <expr><call><name><name>ColumnFamily</name>.<name>create</name></name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>cfComposite</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call> &gt; <call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>cfDiff</name>.<name>delete</name></name><argument_list>(<argument><expr><call><name><name>cfComposite</name>.<name>getLocalDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfComposite</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// (don't need to worry about cfNew containing IColumns that are shadowed by</comment>
        <comment type="line">// the delete tombstone, since cfNew was generated by CF.resolve, which</comment>
        <comment type="line">// takes care of those for us.)</comment>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>columnExternal</name> <range>: <expr><name>cfComposite</name></expr></range></decl></init>)
        <block>{
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>cName</name> <init>= <expr><call><name><name>columnExternal</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>IColumn</name></type> <name>columnInternal</name> <init>= <expr><call><name><name>this</name>.<name>columns</name>.<name>getColumn</name></name><argument_list>(<argument><expr><name>cName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>columnInternal</name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>cfDiff</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>columnExternal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name>IColumn</name></type> <name>columnDiff</name> <init>= <expr><call><name><name>columnInternal</name>.<name>diff</name></name><argument_list>(<argument><expr><name>columnExternal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>columnDiff</name> != null</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>cfDiff</name>.<name>addColumn</name></name><argument_list>(<argument><expr><name>columnDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></for>

        <if>if <condition>(<expr>!<call><name><name>cfDiff</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> || <call><name><name>cfDiff</name>.<name>isMarkedForDelete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>cfDiff</name></expr>;</return></then></if>
        <return>return <expr>null</expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>DBConstants</name>.<name>longSize</name></name> + <name><name>DBConstants</name>.<name>intSize</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// tombstone tracking</comment>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><name>size</name> += <call><name><name>column</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>maxTimestamp</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>maxTimestamp</name> <init>= <expr><call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
            <expr_stmt><expr><name>maxTimestamp</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxTimestamp</name></expr></argument>, <argument><expr><call><name><name>column</name>.<name>maxTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><name>maxTimestamp</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>HashCodeBuilder</name><argument_list>(<argument><expr>373</expr></argument>, <argument><expr>75437</expr></argument>)</argument_list></call>
                    .<call><name>append</name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call>
                    .<call><name>append</name><argument_list>(<argument><expr><call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    .<call><name>append</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call>.<call><name>toHashCode</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>this</name> == <name>o</name></expr>)</condition><then>
            <return>return <expr>true</expr>;</return></then></if>
        <if>if <condition>(<expr><name>o</name> == null || <call><name><name>this</name>.<name>getClass</name></name><argument_list>()</argument_list></call> != <call><name><name>o</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>

        <decl_stmt><decl><type><name>ColumnFamily</name></type> <name>comparison</name> <init>= <expr>(<name>ColumnFamily</name>) <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>cfm</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>comparison</name>.<name>cfm</name></name></expr></argument>)</argument_list></call>
                &amp;&amp; <call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call> == <call><name><name>comparison</name>.<name>getMarkedForDeleteAt</name></name><argument_list>()</argument_list></call>
                &amp;&amp; <call><name><name>ByteBufferUtil</name>.<name>compareUnsigned</name></name><argument_list>(<argument><expr><call><name>digest</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>digest</name><argument_list>(<argument><expr><name>comparison</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"ColumnFamily("</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfm</name> <init>= <expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>cfm</name> == null ? "&lt;anonymous&gt;" : <name><name>cfm</name>.<name>cfName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>isMarkedForDelete</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" -deleted at "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name>getMarkedForDeleteAt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"-"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" ["</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name>getComparator</name><argument_list>()</argument_list></call>.<call><name>getColumnsString</name><argument_list>(<argument><expr><call><name>getSortedColumns</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"])"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>digest</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>digest</name> <init>= <expr><call><name><name>FBUtilities</name>.<name>threadLocalMD5Digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cf</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cf</name>.<name>updateDigest</name></name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>digest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateDigest</name><parameter_list>(<param><decl><type><name>MessageDigest</name></type> <name>digest</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
            <expr_stmt><expr><call><name><name>column</name>.<name>updateDigest</name></name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getComparatorFor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>table</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamilyName</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>superColumnName</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><name>superColumnName</name> == null
               ? <call><name><name>Schema</name>.<name>instance</name>.<name>getComparator</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>columnFamilyName</name></expr></argument>)</argument_list></call>
               : <call><name><name>Schema</name>.<name>instance</name>.<name>getSubComparator</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>columnFamilyName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFamily</name></type> <name>diff</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf1</name></decl></param>, <param><decl><type><name>ColumnFamily</name></type> <name>cf2</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>cf1</name> == null</expr>)</condition><then>
            <return>return <expr><name>cf2</name></expr>;</return></then></if>
        <return>return <expr><call><name><name>cf1</name>.<name>diff</name></name><argument_list>(<argument><expr><name>cf2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>resolve</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>resolve</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name><name>HeapAllocator</name>.<name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>resolve</name><parameter_list>(<param><decl><type><name>ColumnFamily</name></type> <name>cf</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// Row _does_ allow null CF objects :(  seems a necessary evil for efficiency</comment>
        <if>if <condition>(<expr><name>cf</name> == null</expr>)</condition><then>
            <return>return;</return></then></if>
        <expr_stmt><expr><call><name>addAll</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>boolSize</name> <comment type="line">// nullness bool</comment>
               + <name>intSize</name> <comment type="line">// id</comment>
               + <call><name>serializedSizeForSSTable</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSizeForSSTable</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>intSize</name> <comment type="line">// local deletion time</comment>
                 + <name>longSize</name> <comment type="line">// client deletion time</comment>
                 + <name>intSize</name></expr></init></decl>;</decl_stmt> <comment type="line">// column count</comment>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)
            <expr_stmt><expr><name>size</name> += <call><name><name>column</name>.<name>serializedSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Goes over all columns and check the fields are valid (as far as we can
     * tell).
     * This is used to detect corruption after deserialization.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateColumnFields</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>metadata</name> <init>= <expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>IColumn</name></type> <name>column</name> <range>: <expr><name>this</name></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>column</name>.<name>validateFields</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class>
</unit>
