<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\service\SocketSessionManagementService.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>net</name>.<name>SocketAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ConcurrentHashMap</name></name>;</import>

<class><specifier>public</specifier> class <name>SocketSessionManagementService</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>SocketSessionManagementService</name></type> <name>instance</name> <init>= <expr>new <call><name>SocketSessionManagementService</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>ThreadLocal</name><argument_list>&lt;<argument><name>SocketAddress</name></argument>&gt;</argument_list></name></type> <name>remoteSocket</name> <init>= <expr>new <call><name><name>ThreadLocal</name><argument_list>&lt;<argument><name>SocketAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>SocketAddress</name></argument>, <argument><name>ClientState</name></argument>&gt;</argument_list></name></type> <name>activeSocketSessions</name> <init>= <expr>new <call><name><name>ConcurrentHashMap</name><argument_list>&lt;<argument><name>SocketAddress</name></argument>, <argument><name>ClientState</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>ClientState</name></type> <name>get</name><parameter_list>(<param><decl><type><name>SocketAddress</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>ClientState</name></type> <name>retval</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>null != <name>key</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>retval</name> = <call><name><name>activeSocketSessions</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>retval</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>put</name><parameter_list>(<param><decl><type><name>SocketAddress</name></type> <name>key</name></decl></param>, <param><decl><type><name>ClientState</name></type> <name>value</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>null != <name>key</name> &amp;&amp; null != <name>value</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>activeSocketSessions</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>SocketAddress</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr>null != <name>key</name></expr>;</assert>
        <decl_stmt><decl><type><name>boolean</name></type> <name>retval</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>null != <call><name><name>activeSocketSessions</name>.<name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>retval</name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>retval</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>activeSocketSessions</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
