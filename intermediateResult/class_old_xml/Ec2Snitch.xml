<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\locator\Ec2Snitch.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>locator</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FilterInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Charsets</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>gms</name>.<name>ApplicationState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>gms</name>.<name>EndpointState</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>gms</name>.<name>Gossiper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A snitch that assumes an EC2 region is a DC and an EC2 availability_zone
 *  is a rack. This information is available in the config for the node.
 */</comment>
<class><specifier>public</specifier> class <name>Ec2Snitch</name> <super><extends>extends <name>AbstractNetworkTopologySnitch</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>Ec2Snitch</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZONE_NAME_QUERY_URL</name> <init>= <expr>"http://169.254.169.254/latest/meta-data/placement/availability-zone"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_DC</name> <init>= <expr>"UNKNOWN-DC"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_RACK</name> <init>= <expr>"UNKNOWN-RACK"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>ec2zone</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>ec2region</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Ec2Snitch</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>az</name> <init>= <expr><call><name>awsApiCall</name><argument_list>(<argument><expr><name>ZONE_NAME_QUERY_URL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Split "us-east-1a" or "asia-1a" into "us-east"/"1a" and "asia"/"1a".</comment>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>splits</name> <init>= <expr><call><name><name>az</name>.<name>split</name></name><argument_list>(<argument><expr>"-"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ec2zone</name> = <name><name>splits</name><index>[<expr><name><name>splits</name>.<name>length</name></name> - 1</expr>]</index></name></expr>;</expr_stmt>

        <comment type="line">// hack for CASSANDRA-4026</comment>
        <expr_stmt><expr><name>ec2region</name> = <call><name><name>az</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>az</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>ec2region</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"1"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>ec2region</name> = <call><name><name>az</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>az</name>.<name>length</name></name><argument_list>()</argument_list></call> - 3</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>datacenterSuffix</name> <init>= <expr><call><name><name>SnitchProperties</name>.<name>get</name></name><argument_list>(<argument><expr>"dc_suffix"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ec2region</name> = <call><name><name>ec2region</name>.<name>concat</name></name><argument_list>(<argument><expr><name>datacenterSuffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"EC2Snitch using region: " + <name>ec2region</name> + ", zone: " + <name>ec2zone</name> + "."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>String</name></type> <name>awsApiCall</name><parameter_list>(<param><decl><type><name>String</name></type> <name>url</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{
        <comment type="line">// Populate the region and zone by introspection, fail if 404 on metadata</comment>
        <decl_stmt><decl><type><name>HttpURLConnection</name></type> <name>conn</name> <init>= <expr>(<name>HttpURLConnection</name>) new <call><name>URL</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call>.<call><name>openConnection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><call><name><name>conn</name>.<name>setRequestMethod</name></name><argument_list>(<argument><expr>"GET"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>conn</name>.<name>getResponseCode</name></name><argument_list>()</argument_list></call> != 200</expr>)</condition><then>
                <throw>throw <expr>new <call><name>ConfigurationException</name><argument_list>(<argument><expr>"Ec2Snitch was unable to execute the API call. Not an ec2 node?"</expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <comment type="line">// Read the information. I wish I could say (String) conn.getContent() here...</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>cl</name> <init>= <expr><call><name><name>conn</name>.<name>getContentLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>b</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>cl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DataInputStream</name></type> <name>d</name> <init>= <expr>new <call><name>DataInputStream</name><argument_list>(<argument><expr>(<name>FilterInputStream</name>) <call><name><name>conn</name>.<name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>d</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <finally>finally
        <block>{
            <expr_stmt><expr><call><name><name>conn</name>.<name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRack</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>endpoint</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>ec2zone</name></expr>;</return></then></if>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><call><name><name>Gossiper</name>.<name>instance</name>.<name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>null == <name>state</name> || null == <call><name><name>state</name>.<name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name>.<name>RACK</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>DEFAULT_RACK</name></expr>;</return></then></if>
        <return>return <expr><call><name><name>state</name>.<name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name>.<name>RACK</name></name></expr></argument>)</argument_list></call>.<name>value</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDatacenter</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>endpoint</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>endpoint</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>ec2region</name></expr>;</return></then></if>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><call><name><name>Gossiper</name>.<name>instance</name>.<name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>null == <name>state</name> || null == <call><name><name>state</name>.<name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name>.<name>DC</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>DEFAULT_DC</name></expr>;</return></then></if>
        <return>return <expr><call><name><name>state</name>.<name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name>.<name>DC</name></name></expr></argument>)</argument_list></call>.<name>value</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>gossiperStarting</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// Share EC2 info via gossip.  We have to wait until Gossiper is initialized though.</comment>
        <expr_stmt><expr><call><name><name>logger</name>.<name>info</name></name><argument_list>(<argument><expr>"Ec2Snitch adding ApplicationState ec2region=" + <name>ec2region</name> + " ec2zone=" + <name>ec2zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Gossiper</name>.<name>instance</name>.<name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name>.<name>DC</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name>.<name>instance</name>.<name>valueFactory</name>.<name>datacenter</name></name><argument_list>(<argument><expr><name>ec2region</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Gossiper</name>.<name>instance</name>.<name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name>.<name>RACK</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name>.<name>instance</name>.<name>valueFactory</name>.<name>rack</name></name><argument_list>(<argument><expr><name>ec2zone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
