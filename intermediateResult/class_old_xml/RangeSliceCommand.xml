<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\RangeSliceCommand.java"><comment type="block">/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/</comment>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>CFMetaData</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>Schema</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>dht</name>.<name>AbstractBounds</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>DataOutputBuffer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FastByteArrayInputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>Message</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessageProducer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>net</name>.<name>MessagingService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>IReadCommand</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name>.<name>StorageService</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ColumnParent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>IndexClause</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>IndexExpression</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>SlicePredicate</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>TBinaryProtocol</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>ThriftValidation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TDeserializer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>thrift</name>.<name>TSerializer</name></name>;</import>

<class><specifier>public</specifier> class <name>RangeSliceCommand</name> <super><implements>implements <name>MessageProducer</name>, <name>IReadCommand</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RangeSliceCommandSerializer</name></type> <name>serializer</name> <init>= <expr>new <call><name>RangeSliceCommandSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>column_family</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>super_column</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>SlicePredicate</name></type> <name>predicate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>IndexExpression</name></argument>&gt;</argument_list></name></type> <name>row_filter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>range</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxResults</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>maxIsColumns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isPaging</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RangeSliceCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>column_family</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>super_column</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxResults</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>column_family</name></expr></argument>, <argument><expr><name>super_column</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><name>maxResults</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>RangeSliceCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>column_family</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>super_column</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxResults</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>maxIsColumns</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isPaging</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>column_family</name></expr></argument>, <argument><expr><name>super_column</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr>null</expr></argument>, <argument><expr><name>maxResults</name></expr></argument>, <argument><expr><name>maxIsColumns</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>RangeSliceCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>IndexExpression</name></argument>&gt;</argument_list></name></type> <name>row_filter</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxResults</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>column_parent</name>.<name>getColumn_family</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>super_column</name></name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>row_filter</name></expr></argument>, <argument><expr><name>maxResults</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>RangeSliceCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>ColumnParent</name></type> <name>column_parent</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>IndexExpression</name></argument>&gt;</argument_list></name></type> <name>row_filter</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxResults</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>maxIsColumns</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isPaging</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>column_parent</name>.<name>getColumn_family</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>column_parent</name>.<name>super_column</name></name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>row_filter</name></expr></argument>, <argument><expr><name>maxResults</name></expr></argument>, <argument><expr><name>maxIsColumns</name></expr></argument>, <argument><expr><name>isPaging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>RangeSliceCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>column_family</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>super_column</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>IndexExpression</name></argument>&gt;</argument_list></name></type> <name>row_filter</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxResults</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>column_family</name></expr></argument>, <argument><expr><name>super_column</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>row_filter</name></expr></argument>, <argument><expr><name>maxResults</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>RangeSliceCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>column_family</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>super_column</name></decl></param>, <param><decl><type><name>SlicePredicate</name></type> <name>predicate</name></decl></param>, <param><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>IndexExpression</name></argument>&gt;</argument_list></name></type> <name>row_filter</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxResults</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>maxIsColumns</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isPaging</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>keyspace</name></name> = <name>keyspace</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>column_family</name></name> = <name>column_family</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>super_column</name></name> = <name>super_column</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>predicate</name></name> = <name>predicate</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>range</name></name> = <name>range</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>row_filter</name></name> = <name>row_filter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxResults</name></name> = <name>maxResults</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxIsColumns</name></name> = <name>maxIsColumns</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>isPaging</name></name> = <name>isPaging</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>Message</name></type> <name>getMessage</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>version</name> &lt; <name><name>MessagingService</name>.<name>VERSION_11</name></name> &amp;&amp; <name>row_filter</name> != null &amp;&amp; !<call><name><name>row_filter</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <comment type="line">// pre-1.1 versions use IndexScanCommand for index queries, so generate that instead</comment>
            <return>return <expr><call><name>toIndexScanCommand</name><argument_list>()</argument_list></call>.<call><name>getMessage</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>DataOutputBuffer</name></type> <name>dob</name> <init>= <expr>new <call><name>DataOutputBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>serializer</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>dob</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <call><name>Message</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>,
                           <argument><expr><name><name>StorageService</name>.<name>Verb</name>.<name>RANGE_SLICE</name></name></expr></argument>,
                           <argument><expr><call><name><name>Arrays</name>.<name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>dob</name>.<name>getData</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dob</name>.<name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"RangeSliceCommand{" +
               "keyspace='" + <name>keyspace</name> + '\'' +
               ", column_family='" + <name>column_family</name> + '\'' +
               ", super_column=" + <name>super_column</name> +
               ", predicate=" + <name>predicate</name> +
               ", range=" + <name>range</name> +
               ", row_filter =" + <name>row_filter</name> +
               ", maxResults=" + <name>maxResults</name> +
               ", maxIsColumns=" + <name>maxIsColumns</name> +
               '}'</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RangeSliceCommand</name></type> <name>read</name><parameter_list>(<param><decl><type><name>Message</name></type> <name>message</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> <init>= <expr><call><name><name>message</name>.<name>getMessageBody</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FastByteArrayInputStream</name></type> <name>bis</name> <init>= <expr>new <call><name>FastByteArrayInputStream</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>serializer</name>.<name>deserialize</name></name><argument_list>(<argument><expr>new <call><name>DataInputStream</name><argument_list>(<argument><expr><name>bis</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name>.<name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeyspace</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>keyspace</name></expr>;</return>
    }</block></function>

    <comment type="line">// Convert to a equivalent IndexScanCommand for backward compatibility sake</comment>
    <function><type><specifier>public</specifier> <name>IndexScanCommand</name></type> <name>toIndexScanCommand</name><parameter_list>()</parameter_list>
    <block>{
        <assert>assert <expr><name>row_filter</name> != null &amp;&amp; !<call><name><name>row_filter</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <if>if <condition>(<expr><name>maxIsColumns</name> || <name>isPaging</name></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Cannot proceed with range query as the remote end has a version &lt; 1.1. Please update the full cluster first."</expr></argument>)</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>CFMetaData</name></type> <name>cfm</name> <init>= <expr><call><name><name>Schema</name>.<name>instance</name>.<name>getCFMetaData</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>column_family</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <if>if <condition>(<expr>!<call><name><name>ThriftValidation</name>.<name>validateFilterClauses</name></name><argument_list>(<argument><expr><name>cfm</name></expr></argument>, <argument><expr><name>row_filter</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Cannot proceed with non-indexed query as the remote end has a version &lt; 1.1. Please update the full cluster first."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <decl_stmt><decl><type><name>RowPosition</name></type> <name>start</name> <init>= <expr><name><name>range</name>.<name>left</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>startKey</name> <init>= <expr><name><name>ByteBufferUtil</name>.<name>EMPTY_BYTE_BUFFER</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>start</name> instanceof <name>DecoratedKey</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>startKey</name> = ((<name>DecoratedKey</name>)<name>start</name>).<name>key</name></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>IndexClause</name></type> <name>clause</name> <init>= <expr>new <call><name>IndexClause</name><argument_list>(<argument><expr><name>row_filter</name></expr></argument>, <argument><expr><name>startKey</name></expr></argument>, <argument><expr><name>maxResults</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>IndexScanCommand</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>column_family</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<class>class <name>RangeSliceCommandSerializer</name> <super><implements>implements <name><name>IVersionedSerializer</name><argument_list>&lt;<argument><name>RangeSliceCommand</name></argument>&gt;</argument_list></name></implements></super>
<block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<param><decl><type><name>RangeSliceCommand</name></type> <name>sliceCommand</name></decl></param>, <param><decl><type><name>DataOutput</name></type> <name>dos</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><name><name>sliceCommand</name>.<name>keyspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeUTF</name></name><argument_list>(<argument><expr><name><name>sliceCommand</name>.<name>column_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>sc</name> <init>= <expr><name><name>sliceCommand</name>.<name>super_column</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name>sc</name> == null ? 0 : <call><name><name>sc</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>sc</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name>.<name>write</name></name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>TSerializer</name></type> <name>ser</name> <init>= <expr>new <call><name>TSerializer</name><argument_list>(<argument><expr>new <call><name><name>TBinaryProtocol</name>.<name>Factory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>FBUtilities</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>ser</name></expr></argument>, <argument><expr><name><name>sliceCommand</name>.<name>predicate</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>version</name> &gt;= <name><name>MessagingService</name>.<name>VERSION_11</name></name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name><name>sliceCommand</name>.<name>row_filter</name></name> == null</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>sliceCommand</name>.<name>row_filter</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>IndexExpression</name></type> <name>expr</name> <range>: <expr><name><name>sliceCommand</name>.<name>row_filter</name></name></expr></range></decl></init>)
                    <expr_stmt><expr><call><name><name>FBUtilities</name>.<name>serialize</name></name><argument_list>(<argument><expr><name>ser</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            }</block></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>AbstractBounds</name>.<name>serializer</name></name><argument_list>()</argument_list></call>.<call><name>serialize</name><argument_list>(<argument><expr><name><name>sliceCommand</name>.<name>range</name></name></expr></argument>, <argument><expr><name>dos</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dos</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name><name>sliceCommand</name>.<name>maxResults</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>version</name> &gt;= <name><name>MessagingService</name>.<name>VERSION_11</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeBoolean</name></name><argument_list>(<argument><expr><name><name>sliceCommand</name>.<name>maxIsColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name>.<name>writeBoolean</name></name><argument_list>(<argument><expr><name><name>sliceCommand</name>.<name>isPaging</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>RangeSliceCommand</name></type> <name>deserialize</name><parameter_list>(<param><decl><type><name>DataInput</name></type> <name>dis</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>dis</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>columnFamily</name> <init>= <expr><call><name><name>dis</name>.<name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>scLength</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>superColumn</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>scLength</name> &gt; 0</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buf</name> <init>= <expr>new <name><name>byte</name><index>[<expr><name>scLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dis</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>superColumn</name> = <call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>TDeserializer</name></type> <name>dser</name> <init>= <expr>new <call><name>TDeserializer</name><argument_list>(<argument><expr>new <call><name><name>TBinaryProtocol</name>.<name>Factory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SlicePredicate</name></type> <name>pred</name> <init>= <expr>new <call><name>SlicePredicate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>FBUtilities</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dser</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>, <argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>IndexExpression</name></argument>&gt;</argument_list></name></type> <name>rowFilter</name> <init>= <expr>null</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>version</name> &gt;= <name><name>MessagingService</name>.<name>VERSION_11</name></name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>filterCount</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>rowFilter</name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>IndexExpression</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>filterCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>filterCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <decl_stmt><decl><type><name>IndexExpression</name></type> <name>expr</name> <init>= <expr>new <call><name>IndexExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>FBUtilities</name>.<name>deserialize</name></name><argument_list>(<argument><expr><name>dser</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>rowFilter</name>.<name>add</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>AbstractBounds</name><argument_list>&lt;<argument><name>RowPosition</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><call><name><name>AbstractBounds</name>.<name>serializer</name></name><argument_list>()</argument_list></call>.<call><name>deserialize</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call>.<call><name>toRowBounds</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>maxResults</name> <init>= <expr><call><name><name>dis</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>maxIsColumns</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isPaging</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>version</name> &gt;= <name><name>MessagingService</name>.<name>VERSION_11</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>maxIsColumns</name> = <call><name><name>dis</name>.<name>readBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isPaging</name> = <call><name><name>dis</name>.<name>readBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>new <call><name>RangeSliceCommand</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>columnFamily</name></expr></argument>, <argument><expr><name>superColumn</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>rowFilter</name></expr></argument>, <argument><expr><name>maxResults</name></expr></argument>, <argument><expr><name>maxIsColumns</name></expr></argument>, <argument><expr><name>isPaging</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<param><decl><type><name>RangeSliceCommand</name></type> <name>rangeSliceCommand</name></decl></param>, <param><decl><type><name>int</name></type> <name>version</name></decl></param>)</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>
}</block></class>
</unit>
