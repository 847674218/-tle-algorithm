<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\Pair.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Objects</name></name>;</import>

<class><specifier>public</specifier> class <name><name>Pair</name><argument_list>&lt;<argument><name>T1</name></argument>, <argument><name>T2</name></argument>&gt;</argument_list></name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T1</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T2</name></type> <name>right</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Pair</name><parameter_list>(<param><decl><type><name>T1</name></type> <name>left</name></decl></param>, <param><decl><type><name>T2</name></type> <name>right</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>left</name></name> = <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>right</name></name> = <name>right</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>hashCode</name> <init>= <expr>31 + (<name>left</name> == null ? 0 : <call><name><name>left</name>.<name>hashCode</name></name><argument_list>()</argument_list></call>)</expr></init></decl>;</decl_stmt>
        <return>return <expr>31*<name>hashCode</name> + (<name>right</name> == null ? 0 : <call><name><name>right</name>.<name>hashCode</name></name><argument_list>()</argument_list></call>)</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list>
    <block>{
        <if>if<condition>(<expr>!(<name>o</name> instanceof <name>Pair</name>)</expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <decl_stmt><decl><type><name>Pair</name></type> <name>that</name> <init>= <expr>(<name>Pair</name>)<name>o</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// handles nulls properly</comment>
        <return>return <expr><call><name><name>Objects</name>.<name>equal</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>that</name>.<name>left</name></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>Objects</name>.<name>equal</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name><name>that</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>"(" + <name>left</name> + "," + <name>right</name> + ")"</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>X</name></argument>, <argument><name>Y</name></argument>&gt;</argument_list> <name><name>Pair</name><argument_list>&lt;<argument><name>X</name></argument>, <argument><name>Y</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>(<param><decl><type><name>X</name></type> <name>x</name></decl></param>, <param><decl><type><name>Y</name></type> <name>y</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name><name>Pair</name><argument_list>&lt;<argument><name>X</name></argument>, <argument><name>Y</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
