<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\GuidGenerator.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Random</name></name>;</import>

<class><specifier>public</specifier> class <name>GuidGenerator</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Random</name></type> <name>myRand</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>SecureRandom</name></type> <name>mySecureRand</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>s_id</name></decl>;</decl_stmt>

    <expr_stmt><expr>static <block>{
        <if>if <condition>(<expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.security.egd"</expr></argument>)</argument_list></call> == null</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"java.security.egd"</expr></argument>, <argument><expr>"file:/dev/urandom"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block></then></if>}</block>
        <name>mySecureRand</name> = new <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>secureInitializer</name> <init>= <expr><call><name><name>mySecureRand</name>.<name>nextLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>myRand</name> = new <call><name>Random</name><argument_list>(<argument><expr><name>secureInitializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>s_id</name> = <call><name><name>InetAddress</name>.<name>getLocalHost</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
            <throw>throw <expr>new <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>guid</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>array</name> <init>= <expr><call><name>guidAsBytes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>array</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <call><name><name>array</name>.<name>limit</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name><name>array</name>.<name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> &amp; 0xFF</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>b</name> &lt; 0x10</expr>)</condition><then> <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>'0'</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>toHexString</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><call><name>convertToStandardFormat</name><argument_list>( <argument><expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>guidToString</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>bytes</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>bytes</name><index>[<expr><name>j</name></expr>]</index></name> &amp; 0xFF</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>b</name> &lt; 0x10</expr>)</condition><then> <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>'0'</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>toHexString</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><call><name>convertToStandardFormat</name><argument_list>( <argument><expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>guidAsBytes</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sbValueBeforeMD5</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>time</name> <init>= <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>rand</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rand</name> = <call><name><name>myRand</name>.<name>nextLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sbValueBeforeMD5</name>.<name>append</name></name><argument_list>(<argument><expr><name>s_id</name></expr></argument>)</argument_list></call>
        				.<call><name>append</name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call>
        				.<call><name>append</name><argument_list>(<argument><expr><call><name><name>Long</name>.<name>toString</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        				.<call><name>append</name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call>
        				.<call><name>append</name><argument_list>(<argument><expr><call><name><name>Long</name>.<name>toString</name></name><argument_list>(<argument><expr><name>rand</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>valueBeforeMD5</name> <init>= <expr><call><name><name>sbValueBeforeMD5</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name>.<name>threadLocalMD5Digest</name></name><argument_list>()</argument_list></call>.<call><name>digest</name><argument_list>(<argument><expr><call><name><name>valueBeforeMD5</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/*
        * Convert to the standard format for GUID
        * Example: C2FEEEAC-CFCD-11D1-8B05-00600806D9B6
    */</comment>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>convertToStandardFormat</name><parameter_list>(<param><decl><type><name>String</name></type> <name>valueAfterMD5</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>raw</name> <init>= <expr><call><name><name>valueAfterMD5</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>raw</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr>"-"</expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr><call><name><name>raw</name>.<name>substring</name></name><argument_list>(<argument><expr>8</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr>"-"</expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr><call><name><name>raw</name>.<name>substring</name></name><argument_list>(<argument><expr>12</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr>"-"</expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr><call><name><name>raw</name>.<name>substring</name></name><argument_list>(<argument><expr>16</expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr>"-"</expr></argument>)</argument_list></call>
          .<call><name>append</name><argument_list>(<argument><expr><call><name><name>raw</name>.<name>substring</name></name><argument_list>(<argument><expr>20</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}






</unit>
