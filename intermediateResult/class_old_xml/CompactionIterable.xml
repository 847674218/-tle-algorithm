<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\compaction\CompactionIterable.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>compaction</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name>.<name>IColumnIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableIdentityIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>CloseableIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>MergeIterator</name></name>;</import>

<class><specifier>public</specifier> class <name>CompactionIterable</name> <super><extends>extends <name>AbstractCompactionIterable</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>CompactionIterable</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>row</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>IColumnIterator</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr>new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>IColumnIterator</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>IColumnIterator</name></type> <name>i1</name></decl></param>, <param><decl><type><name>IColumnIterator</name></type> <name>i2</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr><call><name><name>i1</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>i2</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CompactionIterable</name><parameter_list>(<param><decl><type><name>OperationType</name></type> <name>type</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>ICompactionScanner</name></argument>&gt;</argument_list></name></type> <name>scanners</name></decl></param>, <param><decl><type><name>CompactionController</name></type> <name>controller</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>controller</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>scanners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>row</name> = 0</expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>CloseableIterator</name><argument_list>&lt;<argument><name>AbstractCompactedRow</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>MergeIterator</name>.<name>get</name></name><argument_list>(<argument><expr><name>scanners</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr>new <call><name>Reducer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>this</name>.<name>getCompactionInfo</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>protected</specifier> class <name>Reducer</name> <super><extends>extends <name><name>MergeIterator</name>.<name><name>Reducer</name><argument_list>&lt;<argument><name>IColumnIterator</name></argument>, <argument><name>AbstractCompactedRow</name></argument>&gt;</argument_list></name></name></extends></super>
    <block>{
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>SSTableIdentityIterator</name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>SSTableIdentityIterator</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>reduce</name><parameter_list>(<param><decl><type><name>IColumnIterator</name></type> <name>current</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>rows</name>.<name>add</name></name><argument_list>(<argument><expr>(<name>SSTableIdentityIterator</name>) <name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>AbstractCompactedRow</name></type> <name>getReduced</name><parameter_list>()</parameter_list>
        <block>{
            <assert>assert <expr>!<call><name><name>rows</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</assert>

            <try>try
            <block>{
                <decl_stmt><decl><type><name>AbstractCompactedRow</name></type> <name>compactedRow</name> <init>= <expr><call><name><name>controller</name>.<name>getCompactedRow</name></name><argument_list>(<argument><expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>SSTableIdentityIterator</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>compactedRow</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>controller</name>.<name>invalidateCachedRow</name></name><argument_list>(<argument><expr><name><name>compactedRow</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>null</expr>;</return>
                }</block></then></if>

                <comment type="line">// If the row is cached, we call removeDeleted on at read time it to have coherent query returns,</comment>
                <comment type="line">// but if the row is not pushed out of the cache, obsolete tombstones will persist indefinitely.</comment>
                <expr_stmt><expr><call><name><name>controller</name>.<name>removeDeletedInCache</name></name><argument_list>(<argument><expr><name><name>compactedRow</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>compactedRow</name></expr>;</return>
            }</block>
            <finally>finally
            <block>{
                <expr_stmt><expr><call><name><name>rows</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>(<name>row</name>++ % 1000) == 0</expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                    <for>for (<init><decl><type><name>ICompactionScanner</name></type> <name>scanner</name> <range>: <expr><name>scanners</name></expr></range></decl></init>)
                        <expr_stmt><expr><name>n</name> += <call><name><name>scanner</name>.<name>getCurrentPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for>
                    <expr_stmt><expr><name>bytesRead</name> = <name>n</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>controller</name>.<name>mayThrottle</name></name><argument_list>(<argument><expr><name>bytesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></finally></try>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
