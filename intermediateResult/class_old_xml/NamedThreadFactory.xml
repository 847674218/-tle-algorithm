<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\concurrent\NamedThreadFactory.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>concurrent</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ThreadFactory</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>AtomicInteger</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is an implementation of the &lt;i&gt;ThreadFactory&lt;/i&gt; interface. This
 * is useful to give Java threads meaningful names which is useful when using
 * a tool like JConsole.
 */</comment>

<class><specifier>public</specifier> class <name>NamedThreadFactory</name> <super><implements>implements <name>ThreadFactory</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>priority</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>AtomicInteger</name></type> <name>n</name> <init>= <expr>new <call><name>AtomicInteger</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>NamedThreadFactory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>id</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Thread</name>.<name>NORM_PRIORITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>NamedThreadFactory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>id</name></decl></param>, <param><decl><type><name>int</name></type> <name>priority</name></decl></param>)</parameter_list>
    <block>{

        <expr_stmt><expr><name><name>this</name>.<name>id</name></name> = <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>priority</name></name> = <name>priority</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>Thread</name></type> <name>newThread</name><parameter_list>(<param><decl><type><name>Runnable</name></type> <name>runnable</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name>id</name> + ":" + <call><name><name>n</name>.<name>getAndIncrement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Thread</name></type> <name>thread</name> <init>= <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>runnable</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>thread</name>.<name>setPriority</name></name><argument_list>(<argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>thread</name>.<name>setDaemon</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>thread</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
