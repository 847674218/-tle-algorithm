<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\SimpleCondition.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>locks</name>.<name>Condition</name></name>;</import>

<comment type="line">// fulfils the Condition interface without spurious wakeup problems</comment>
<comment type="line">// (or lost notify problems either: that is, even if you call await()</comment>
<comment type="line">// _after_ signal(), it will work as desired.)</comment>
<class><specifier>public</specifier> class <name>SimpleCondition</name> <super><implements>implements <name>Condition</name></implements></super>
<block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>set</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>await</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{
        <while>while <condition>(<expr>!<name>set</name></expr>)</condition>
            <expr_stmt><expr><call><name>wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></while>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>set</name> = false</expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>await</name><parameter_list>(<param><decl><type><name>long</name></type> <name>time</name></decl></param>, <param><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{
        <comment type="line">// micro/nanoseconds not supported</comment>
        <assert>assert <expr><name>unit</name> == <name><name>TimeUnit</name>.<name>DAYS</name></name> || <name>unit</name> == <name><name>TimeUnit</name>.<name>HOURS</name></name> || <name>unit</name> == <name><name>TimeUnit</name>.<name>MINUTES</name></name> || <name>unit</name> == <name><name>TimeUnit</name>.<name>SECONDS</name></name> || <name>unit</name> == <name><name>TimeUnit</name>.<name>MILLISECONDS</name></name></expr>;</assert>

        <decl_stmt><decl><type><name>long</name></type> <name>end</name> <init>= <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> + <call><name><name>unit</name>.<name>convert</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name><name>TimeUnit</name>.<name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>!<name>set</name> &amp;&amp; <name>end</name> &gt; <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name><name>TimeUnit</name>.<name>MILLISECONDS</name>.<name>timedWait</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>end</name> - <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>set</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>signal</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>set</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>signalAll</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>set</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>isSignaled</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>set</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>awaitUninterruptibly</name><parameter_list>()</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>awaitNanos</name><parameter_list>(<param><decl><type><name>long</name></type> <name>nanosTimeout</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>awaitUntil</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>deadline</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>
}</block></class>
</unit>
