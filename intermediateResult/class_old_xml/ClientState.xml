<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\service\ClientState.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>service</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>AuthenticatedUser</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>Permission</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>PermissionDenied</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>auth</name>.<name>Resources</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>Schema</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>CQLStatement</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>Table</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>AuthenticationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>thrift</name>.<name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>SemanticVersion</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A container for per-client, thread-local state that Avro/Thrift threads must hold.
 * TODO: Kill thrift exceptions
 */</comment>
<class><specifier>public</specifier> class <name>ClientState</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_CACHE_PREPARED</name> <init>= <expr>10000</expr></init></decl>;</decl_stmt>    <comment type="line">// Enough to keep buggy clients from OOM'ing us</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>ClientState</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SemanticVersion</name></type> <name>DEFAULT_CQL_VERSION</name> <init>= <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>QueryProcessor</name>.<name>CQL_VERSION</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Current user for the session</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AuthenticatedUser</name></type> <name>user</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>
    <comment type="line">// Reusable array for authorization</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>resource</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SemanticVersion</name></type> <name>cqlVersion</name> <init>= <expr><name>DEFAULT_CQL_VERSION</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// An LRU map of prepared statements</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>CQLStatement</name></argument>&gt;</argument_list></name></type> <name>prepared</name> <init>= <expr>new <class><super><name><name>LinkedHashMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>CQLStatement</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr>16</expr></argument>, <argument><expr>0.75f</expr></argument>, <argument><expr>true</expr></argument>)</argument_list> <block>{
        <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>removeEldestEntry</name><parameter_list>(<param><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>CQLStatement</name></argument>&gt;</argument_list></name></name></type> <name>eldest</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name>size</name><argument_list>()</argument_list></call> &gt; <name>MAX_CACHE_PREPARED</name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>CQLStatement</name></name></argument>&gt;</argument_list></name></type> <name>cql3Prepared</name> <init>= <expr>new <class><super><name><name>LinkedHashMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>CQLStatement</name></name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr>16</expr></argument>, <argument><expr>0.75f</expr></argument>, <argument><expr>true</expr></argument>)</argument_list> <block>{
        <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>removeEldestEntry</name><parameter_list>(<param><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>CQLStatement</name></name></argument>&gt;</argument_list></name></name></type> <name>eldest</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name>size</name><argument_list>()</argument_list></call> &gt; <name>MAX_CACHE_PREPARED</name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>clock</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Construct a new, empty ClientState: can be reused after logout() or reset().
     */</comment>
    <constructor><specifier>public</specifier> <name>ClientState</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>CQLStatement</name></argument>&gt;</argument_list></name></type> <name>getPrepared</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>prepared</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>CQLStatement</name></name></argument>&gt;</argument_list></name></type> <name>getCQL3Prepared</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>cql3Prepared</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRawKeyspace</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>keyspace</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeyspace</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>keyspace</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"no keyspace has been specified"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <return>return <expr><name>keyspace</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeyspace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ks</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name><name>Schema</name>.<name>instance</name>.<name>getKSMetaData</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"Keyspace '" + <name>ks</name> + "' does not exist"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
        <expr_stmt><expr><name>keyspace</name> = <name>ks</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSchedulingValue</name><parameter_list>()</parameter_list>
    <block>{
        <switch>switch<condition>(<expr><call><name><name>DatabaseDescriptor</name>.<name>getRequestSchedulerId</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{
            <case>case <expr><name>keyspace</name></expr>: <return>return <expr><name>keyspace</name></expr>;</return>
        </case>}</block></switch>
        <return>return <expr>"default"</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Attempts to login this client with the given credentials map.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>login</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>CharSequence</name></extends></argument>,<argument><name>?</name> <extends>extends <name>CharSequence</name></extends></argument>&gt;</argument_list></name></type> <name>credentials</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>AuthenticationException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>AuthenticatedUser</name></type> <name>user</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getAuthenticator</name></name><argument_list>()</argument_list></call>.<call><name>authenticate</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"logged in: {}"</expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>user</name></name> = <name>user</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>logout</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>debug</name></name><argument_list>(<argument><expr>"logged out: {}"</expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>resourceClear</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>resource</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>resource</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>Resources</name>.<name>ROOT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>resource</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>Resources</name>.<name>KEYSPACES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>user</name> = <call><name><name>DatabaseDescriptor</name>.<name>getAuthenticator</name></name><argument_list>()</argument_list></call>.<call><name>defaultUser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>keyspace</name> = null</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>resourceClear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prepared</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cql3Prepared</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cqlVersion</name> = <name>DEFAULT_CQL_VERSION</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>hasKeyspaceAccess</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>Permission</name></type> <name>perm</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>validateLogin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validateKeyspace</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>preventSystemKSSchemaModification</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>resourceClear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>resource</name>.<name>add</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>perms</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getAuthority</name></name><argument_list>()</argument_list></call>.<call><name>authorize</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>hasAccess</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>preventSystemKSSchemaModification</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>Permission</name></type> <name>perm</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name><name>keyspace</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name><name>Table</name>.<name>SYSTEM_TABLE</name></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>perm</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>Permission</name>.<name>WRITE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"system keyspace is not user-modifiable."</expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Confirms that the client thread has the given Permission in the context of the given
     * ColumnFamily and the current keyspace.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>hasColumnFamilyAccess</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>, <param><decl><type><name>String</name></type> <name>columnFamily</name></decl></param>, <param><decl><type><name>Permission</name></type> <name>perm</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>validateLogin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validateKeyspace</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>resourceClear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>resource</name>.<name>add</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>preventSystemKSSchemaModification</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check if the user has the perm on the keyspace (which means same permission on the contained cfs).</comment>
        <if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name>.<name>getAuthority</name></name><argument_list>()</argument_list></call>.<call><name>authorize</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <expr_stmt><expr><call><name><name>resource</name>.<name>add</name></name><argument_list>(<argument><expr><name>columnFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>perms</name> <init>= <expr><call><name><name>DatabaseDescriptor</name>.<name>getAuthority</name></name><argument_list>()</argument_list></call>.<call><name>authorize</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>hasAccess</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validateLogin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>user</name> == null</expr>)</condition><then>
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"You have not logged in"</expr></argument>)</argument_list></call></expr>;</throw></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateKeyspace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyspace</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>keyspace</name> == null</expr>)</condition><then>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr>"You have not set a keyspace for this session"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>hasAccess</name><parameter_list>(<param><decl><type><name>AuthenticatedUser</name></type> <name>user</name></decl></param>, <param><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>perms</name></decl></param>, <param><decl><type><name>Permission</name></type> <name>perm</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>resource</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>PermissionDenied</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><call><name><name>perms</name>.<name>contains</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <throw>throw <expr>new <call><name>PermissionDenied</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s does not have permission %s for %s"</expr></argument>,
                                                  <argument><expr><name>user</name></expr></argument>,
                                                  <argument><expr><name>perm</name></expr></argument>,
                                                  <argument><expr><call><name><name>Resources</name>.<name>toString</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * This clock guarantees that updates from a given client will be ordered in the sequence seen,
     * even if multiple updates happen in the same millisecond.  This can be useful when a client
     * wants to perform multiple updates to a single column.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTimestamp</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>current</name> <init>= <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> * 1000</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>clock</name> = <name>clock</name> &gt;= <name>current</name> ? <name>clock</name> + 1 : <name>current</name></expr>;</expr_stmt>
        <return>return <expr><name>clock</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCQLVersion</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>SemanticVersion</name></type> <name>version</name></decl>;</decl_stmt>
        <try>try
        <block>{
            <expr_stmt><expr><name>version</name> = new <call><name>SemanticVersion</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <decl_stmt><decl><type><name>SemanticVersion</name></type> <name>cql</name> <init>= <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>QueryProcessor</name>.<name>CQL_VERSION</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SemanticVersion</name></type> <name>cql3</name> <init>= <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>QueryProcessor</name>.<name>CQL_VERSION</name></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>version</name>.<name>isSupportedBy</name></name><argument_list>(<argument><expr><name>cql</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>cqlVersion</name> = <name>cql</name></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><call><name><name>version</name>.<name>isSupportedBy</name></name><argument_list>(<argument><expr><name>cql3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>cqlVersion</name> = <name>cql3</name></expr>;</expr_stmt></then>
        <else>else
            <throw>throw <expr>new <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Provided version %s is not supported by this server (supported: %s)"</expr></argument>,
                                                            <argument><expr><name>version</name></expr></argument>,
                                                            <argument><expr><call><name><name>StringUtils</name>.<name>join</name></name><argument_list>(<argument><expr><call><name>getCQLSupportedVersion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>", "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></else></if></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>SemanticVersion</name></type> <name>getCQLVersion</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>cqlVersion</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SemanticVersion</name><index>[]</index></type> <name>getCQLSupportedVersion</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>SemanticVersion</name></type> <name>cql</name> <init>= <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql</name>.<name>QueryProcessor</name>.<name>CQL_VERSION</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SemanticVersion</name></type> <name>cql3</name> <init>= <expr><name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>cql3</name>.<name>QueryProcessor</name>.<name>CQL_VERSION</name></name></expr></init></decl>;</decl_stmt>

        <return>return <expr>new <name><name>SemanticVersion</name><index>[]</index></name><block>{ <expr><name>cql</name></expr>, <expr><name>cql3</name></expr> }</block></expr>;</return>
    }</block></function>
}</block></class>
</unit>
