<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\utils\BloomFilter.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>slf4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>slf4j</name>.<name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>obs</name>.<name>OpenBitSet</name></name>;</import>

<class><specifier>public</specifier> class <name>BloomFilter</name> <super><extends>extends <name>Filter</name></extends></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>BloomFilter</name>.<name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EXCESS</name> <init>= <expr>20</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>BloomFilterSerializer</name></type> <name>serializer_</name> <init>= <expr>new <call><name>BloomFilterSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>OpenBitSet</name></type> <name>bitset</name></decl>;</decl_stmt>

    <constructor><name>BloomFilter</name><parameter_list>(<param><decl><type><name>int</name></type> <name>hashes</name></decl></param>, <param><decl><type><name>OpenBitSet</name></type> <name>bs</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>hashCount</name> = <name>hashes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitset</name> = <name>bs</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BloomFilter</name></type> <name>emptyFilter</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>BloomFilter</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>bucketsFor</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BloomFilterSerializer</name></type> <name>serializer</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>serializer_</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>OpenBitSet</name></type> <name>bucketsFor</name><parameter_list>(<param><decl><type><name>long</name></type> <name>numElements</name></decl></param>, <param><decl><type><name>int</name></type> <name>bucketsPer</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>new <call><name>OpenBitSet</name><argument_list>(<argument><expr><name>numElements</name> * <name>bucketsPer</name> + <name>EXCESS</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
    * @return A BloomFilter with the lowest practical false positive probability
    * for the given number of elements.
    */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BloomFilter</name></type> <name>getFilter</name><parameter_list>(<param><decl><type><name>long</name></type> <name>numElements</name></decl></param>, <param><decl><type><name>int</name></type> <name>targetBucketsPerElem</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>maxBucketsPerElement</name> <init>= <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>BloomCalculations</name>.<name>maxBucketsPerElement</name></name><argument_list>(<argument><expr><name>numElements</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bucketsPerElement</name> <init>= <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>targetBucketsPerElem</name></expr></argument>, <argument><expr><name>maxBucketsPerElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>bucketsPerElement</name> &lt; <name>targetBucketsPerElem</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>logger</name>.<name>warn</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"Cannot provide an optimal BloomFilter for %d elements (%d/%d buckets per element)."</expr></argument>,
                                      <argument><expr><name>numElements</name></expr></argument>, <argument><expr><name>bucketsPerElement</name></expr></argument>, <argument><expr><name>targetBucketsPerElem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>BloomCalculations</name>.<name>BloomSpecification</name></name></type> <name>spec</name> <init>= <expr><call><name><name>BloomCalculations</name>.<name>computeBloomSpec</name></name><argument_list>(<argument><expr><name>bucketsPerElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>logger</name>.<name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>logger</name>.<name>trace</name></name><argument_list>(<argument><expr>"Creating bloom filter for {} elements and spec {}"</expr></argument>, <argument><expr><name>numElements</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr>new <call><name>BloomFilter</name><argument_list>(<argument><expr><name><name>spec</name>.<name>K</name></name></expr></argument>, <argument><expr><call><name>bucketsFor</name><argument_list>(<argument><expr><name>numElements</name></expr></argument>, <argument><expr><name><name>spec</name>.<name>bucketsPerElement</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
    * @return The smallest BloomFilter that can provide the given false positive
    * probability rate for the given number of elements.
    *
    * Asserts that the given probability can be satisfied using this filter.
    */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BloomFilter</name></type> <name>getFilter</name><parameter_list>(<param><decl><type><name>long</name></type> <name>numElements</name></decl></param>, <param><decl><type><name>double</name></type> <name>maxFalsePosProbability</name></decl></param>)</parameter_list>
    <block>{
        <assert>assert <expr><name>maxFalsePosProbability</name> &lt;= 1.0 : "Invalid probability"</expr>;</assert>
        <decl_stmt><decl><type><name>int</name></type> <name>bucketsPerElement</name> <init>= <expr><call><name><name>BloomCalculations</name>.<name>maxBucketsPerElement</name></name><argument_list>(<argument><expr><name>numElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>BloomCalculations</name>.<name>BloomSpecification</name></name></type> <name>spec</name> <init>= <expr><call><name><name>BloomCalculations</name>.<name>computeBloomSpec</name></name><argument_list>(<argument><expr><name>bucketsPerElement</name></expr></argument>, <argument><expr><name>maxFalsePosProbability</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>BloomFilter</name><argument_list>(<argument><expr><name><name>spec</name>.<name>K</name></name></expr></argument>, <argument><expr><call><name>bucketsFor</name><argument_list>(<argument><expr><name>numElements</name></expr></argument>, <argument><expr><name><name>spec</name>.<name>bucketsPerElement</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>long</name><index>[]</index></type> <name>getHashBuckets</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>BloomFilter</name>.<name>getHashBuckets</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>hashCount</name></expr></argument>, <argument><expr><call><name><name>bitset</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// Murmur is faster than an SHA-based approach and provides as-good collision</comment>
    <comment type="line">// resistance.  The combinatorial generation approach described in</comment>
    <comment type="line">// http://www.eecs.harvard.edu/~kirsch/pubs/bbbf/esa06.pdf</comment>
    <comment type="line">// does prove to work in actual tests, and is obviously faster</comment>
    <comment type="line">// than performing further iterations of murmur.</comment>
    <function><type><specifier>static</specifier> <name>long</name><index>[]</index></type> <name>getHashBuckets</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>b</name></decl></param>, <param><decl><type><name>int</name></type> <name>hashCount</name></decl></param>, <param><decl><type><name>long</name></type> <name>max</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>long</name><index>[]</index></type> <name>result</name> <init>= <expr>new <name><name>long</name><index>[<expr><name>hashCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>hash1</name> <init>= <expr><call><name><name>MurmurHash</name>.<name>hash64</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name><name>b</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0L</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>hash2</name> <init>= <expr><call><name><name>MurmurHash</name>.<name>hash64</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name><name>b</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name>.<name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hash1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>hashCount</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
        <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr>(<name>hash1</name> + (<name>long</name>)<name>i</name> * <name>hash2</name>) % <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
        <for>for (<init><decl><type><name>long</name></type> <name>bucketIndex</name> <range>: <expr><call><name>getHashBuckets</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
        <block>{
            <expr_stmt><expr><call><name><name>bitset</name>.<name>set</name></name><argument_list>(<argument><expr><name>bucketIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPresent</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></param>)</parameter_list>
    <block>{
      <for>for (<init><decl><type><name>long</name></type> <name>bucketIndex</name> <range>: <expr><call><name>getHashBuckets</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
      <block>{
          <if>if <condition>(<expr>!<call><name><name>bitset</name>.<name>get</name></name><argument_list>(<argument><expr><name>bucketIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <block>{
              <return>return <expr>false</expr>;</return>
          }</block></then></if>
      }</block></for>
      <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>bitset</name>.<name>clear</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>bitset</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>serializer_</name>.<name>serializedSize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
