<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\ArrayBackedSortedColumns.java"><comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Function</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>marshal</name>.<name>AbstractType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>Allocator</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A ISortedColumns backed by an ArrayList.
 * This implementation is not synchronized and should only be used when
 * thread-safety is not required. This implementation makes sense when the
 * main operations performed are iterating over the map and adding columns
 * (especially if insertion is in sorted order).
 */</comment>
<class><specifier>public</specifier> class <name>ArrayBackedSortedColumns</name> <super><extends>extends <name>AbstractThreadUnsafeSortedColumns</name></extends> <implements>implements <name>ISortedColumns</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>reversed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ArrayList</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>factory</name> <init>= <expr>new <class><super><name>Factory</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>ISortedColumns</name></type> <name>create</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>insertReversed</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>ArrayBackedSortedColumns</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>, <argument><expr><name>insertReversed</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ISortedColumns</name></type> <name>fromSorted</name><parameter_list>(<param><decl><type><name><name>SortedMap</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>sortedMap</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>insertReversed</name></decl></param>)</parameter_list>
        <block>{
            <return>return <expr>new <call><name>ArrayBackedSortedColumns</name><argument_list>(<argument><expr><call><name><name>sortedMap</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name>)<call><name><name>sortedMap</name>.<name>comparator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>insertReversed</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>factory</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>factory</name></expr>;</return>
    }</block></function>

    <constructor><specifier>private</specifier> <name>ArrayBackedSortedColumns</name><parameter_list>(<param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>comparator</name></name> = <name>comparator</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>reversed</name></name> = <name>reversed</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columns</name></name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>ArrayBackedSortedColumns</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></param>, <param><decl><type><name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>comparator</name></name> = <name>comparator</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>reversed</name></name> = <name>reversed</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columns</name></name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>ISortedColumns</name>.<name>Factory</name></name></type> <name>getFactory</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name>factory</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getComparator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>comparator</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ISortedColumns</name></type> <name>cloneMe</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr>new <call><name>ArrayBackedSortedColumns</name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr><name>reversed</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInsertReversed</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>reversed</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name1</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>name2</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>reversed</name></expr>)</condition><then>
            <return>return <expr><call><name><name>comparator</name>.<name>reverseComparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name>name1</name></expr></argument>, <argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr>;</return></then>
        <else>else
            <return>return <expr><call><name><name>comparator</name>.<name>compare</name></name><argument_list>(<argument><expr><name>name1</name></expr></argument>, <argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>getColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>binarySearch</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>pos</name> &gt;= 0 ? <call><name><name>columns</name>.<name>get</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call> : null</expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * AddColumn throws an exception if the column added does not sort after
     * the last column in the map.
     * The reasoning is that this implementation can get slower if too much
     * insertions are done in unsorted order and right now we only use it when
     * *all* insertion (with this method) are done in sorted order. The
     * assertion throwing is thus a protection against performance regression
     * without knowing about (we can revisit that decision later if we have
     * use cases where most insert are in sorted order but a few are not).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><call><name><name>columns</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>columns</name>.<name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// Fast path if inserting at the tail</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>compare</name><argument_list>(<argument><expr><call><name><name>columns</name>.<name>get</name></name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call>.<call><name>name</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// note that we want an assertion here (see addColumn javadoc), but we also want that if</comment>
        <comment type="line">// assertion are disabled, addColumn works correctly with unsorted input</comment>
        <assert>assert <expr><name>c</name> &lt;= 0 : "Added column does not sort as the " + (<name>reversed</name> ? "first" : "last") + " column"</expr>;</assert>

        <if>if <condition>(<expr><name>c</name> &lt; 0</expr>)</condition><then>
        <block>{
            <comment type="line">// Insert as last</comment>
            <expr_stmt><expr><call><name><name>columns</name>.<name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>c</name> == 0</expr>)</condition><then>
        <block>{
            <comment type="line">// Resolve against last</comment>
            <expr_stmt><expr><call><name>resolveAgainst</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call> - 1</expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>binarySearch</name><argument_list>(<argument><expr><call><name><name>column</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>pos</name> &gt;= 0</expr>)</condition><then>
                <expr_stmt><expr><call><name>resolveAgainst</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><call><name><name>columns</name>.<name>add</name></name><argument_list>(<argument><expr>-<name>pos</name>-1</expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></else></if></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Resolve against element at position i.
     * Assume that i is a valid position.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>resolveAgainst</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>column</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>IColumn</name></type> <name>oldColumn</name> <init>= <expr><call><name><name>columns</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>oldColumn</name> instanceof <name>SuperColumn</name></expr>)</condition><then>
        <block>{
            <comment type="line">// Delegated to SuperColumn</comment>
            <assert>assert <expr><name>column</name> instanceof <name>SuperColumn</name></expr>;</assert>
            <expr_stmt><expr>((<name>SuperColumn</name>) <name>oldColumn</name>).<call><name>putColumn</name><argument_list>(<argument><expr>(<name>SuperColumn</name>)<name>column</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <comment type="line">// calculate reconciled col from old (existing) col and new col</comment>
            <decl_stmt><decl><type><name>IColumn</name></type> <name>reconciledColumn</name> <init>= <expr><call><name><name>column</name>.<name>reconcile</name></name><argument_list>(<argument><expr><name>oldColumn</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>columns</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>reconciledColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Simple binary search for a given column name.
     * The return value has the exact same meaning that the one of Collections.binarySearch().
     * (We don't use Collections.binarySearch() directly because it would require us to create
     * a fake IColumn (as well an IColumn comparator) to do the search, which is ugly.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>binarySearch</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><name>mid</name> - 1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>low</name> &lt;= <name>high</name></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>mid</name> = (<name>low</name> + <name>high</name>) &gt;&gt; 1</expr>;</expr_stmt>
            <if>if <condition>(<expr>(<name>result</name> = <call><name>compare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>columns</name>.<name>get</name></name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call>.<call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>low</name> = <name>mid</name> + 1</expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>result</name> == 0</expr>)</condition><then>
            <block>{
                <return>return <expr><name>mid</name></expr>;</return>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>high</name> = <name>mid</name> - 1</expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></while>
        <return>return <expr>-<name>mid</name> - (<name>result</name> &lt; 0 ? 1 : 2)</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAll</name><parameter_list>(<param><decl><type><name>ISortedColumns</name></type> <name>cm</name></decl></param>, <param><decl><type><name>Allocator</name></type> <name>allocator</name></decl></param>, <param><decl><type><name><name>Function</name><argument_list>&lt;<argument><name>IColumn</name></argument>, <argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>transformation</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><call><name><name>cm</name>.<name>getDeletionInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>cm</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <decl_stmt><decl><type><name>IColumn</name><index>[]</index></type> <name>copy</name> <init>= <expr><call><name><name>columns</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>IColumn</name><index>[<expr><call><name>size</name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>other</name> <init>= <expr><name>reversed</name> ? <call><name><name>cm</name>.<name>reverseIterator</name></name><argument_list>()</argument_list></call> : <call><name><name>cm</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IColumn</name></type> <name>otherColumn</name> <init>= <expr><call><name><name>other</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>columns</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>idx</name> &lt; <name><name>copy</name>.<name>length</name></name> &amp;&amp; <name>otherColumn</name> != null</expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>compare</name><argument_list>(<argument><expr><name><name>copy</name><index>[<expr><name>idx</name></expr>]</index></name>.<call><name>name</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>otherColumn</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>c</name> &lt; 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>columns</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>copy</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>idx</name>++</expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>c</name> &gt; 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>columns</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>transformation</name>.<name>apply</name></name><argument_list>(<argument><expr><name>otherColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>otherColumn</name> = <call><name><name>other</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>other</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
            }</block></then>
            <else>else <comment type="line">// c == 0</comment>
            <block>{
                <expr_stmt><expr><call><name><name>columns</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>copy</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>resolveAgainst</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call> - 1</expr></argument>, <argument><expr><call><name><name>transformation</name>.<name>apply</name></name><argument_list>(<argument><expr><name>otherColumn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>idx</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>otherColumn</name> = <call><name><name>other</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>other</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></while>
        <while>while <condition>(<expr><name>idx</name> &lt; <name><name>copy</name>.<name>length</name></name></expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name><name>columns</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>copy</name><index>[<expr><name>idx</name>++</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <while>while <condition>(<expr><name>otherColumn</name> != null</expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name><name>columns</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>transformation</name>.<name>apply</name></name><argument_list>(<argument><expr><name>otherColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>otherColumn</name> = <call><name><name>other</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> ? <call><name><name>other</name>.<name>next</name></name><argument_list>()</argument_list></call> : null</expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>replace</name><parameter_list>(<param><decl><type><name>IColumn</name></type> <name>oldColumn</name></decl></param>, <param><decl><type><name>IColumn</name></type> <name>newColumn</name></decl></param>)</parameter_list>
    <block>{
        <if>if <condition>(<expr>!<call><name><name>oldColumn</name>.<name>name</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>newColumn</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>binarySearch</name><argument_list>(<argument><expr><call><name><name>oldColumn</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pos</name> &gt;= 0</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>columns</name>.<name>set</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>pos</name> &gt;= 0</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>getSortedColumns</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>reversed</name> ? new <call><name>ReverseSortedCollection</name><argument_list>()</argument_list></call> : <name>columns</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>getReverseSortedColumns</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// If reversed, the element are sorted reversely, so we could expect</comment>
        <comment type="line">// to return *this*, but *this* redefine the iterator to be in sorted</comment>
        <comment type="line">// order, so we need a collection that uses the super constructor</comment>
        <return>return <expr><name>reversed</name> ? new <call><name>ForwardSortedCollection</name><argument_list>()</argument_list></call> : new <call><name>ReverseSortedCollection</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeColumn</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>binarySearch</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pos</name> &gt;= 0</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>columns</name>.<name>remove</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>columns</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>getColumnNames</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// we could memoize the created set but it's unlikely we'll call this method a lot on the same object anyway</comment>
        <return>return <expr>new <call><name>ColumnNamesSet</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>reversed</name> ? <call><name>reverseInternalIterator</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> : <call><name><name>columns</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>reverseIterator</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>reversed</name> ? <call><name><name>columns</name>.<name>iterator</name></name><argument_list>()</argument_list></call> : <call><name>reverseInternalIterator</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>binarySearch</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>idx</name> &lt; 0</expr>)</condition><then>
            <expr_stmt><expr><name>idx</name> = -<name>idx</name> - 1</expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><name>reversed</name></expr>)</condition><then>
            <comment type="line">// listIterator.previous() doesn't return the current element at first but the previous one</comment>
            <expr_stmt><expr><name>idx</name>++</expr>;</expr_stmt></then></if></else></if>
        <return>return <expr><name>reversed</name> ? <call><name>reverseInternalIterator</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> : <call><name><name>columns</name>.<name>listIterator</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>reverseIterator</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>start</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>binarySearch</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>idx</name> &lt; 0</expr>)</condition><then>
            <expr_stmt><expr><name>idx</name> = -<name>idx</name> - 1</expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr>!<name>reversed</name></expr>)</condition><then>
            <comment type="line">// listIterator.previous() doesn't return the current element at first but the previous one</comment>
            <expr_stmt><expr><name>idx</name>++</expr>;</expr_stmt></then></if></else></if>
        <return>return <expr><name>reversed</name> ? <call><name><name>columns</name>.<name>listIterator</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> : <call><name>reverseInternalIterator</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>reverseInternalIterator</name><parameter_list>(<param><decl><type><name>int</name></type> <name>idx</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ListIterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>columns</name>.<name>listIterator</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <class><super><name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>iter</name>.<name>hasPrevious</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>next</name><parameter_list>()</parameter_list>
            <block>{
                <return>return <expr><call><name><name>iter</name>.<name>previous</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list>
            <block>{
                <expr_stmt><expr><call><name><name>iter</name>.<name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> class <name>ReverseSortedCollection</name> <super><extends>extends <name><name>AbstractCollection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></extends></super>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr>new <class><super><name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>size</name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>

                <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr><name>idx</name> &gt;= 0</expr>;</return>
                }</block></function>

                <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>next</name><parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr><call><name><name>columns</name>.<name>get</name></name><argument_list>(<argument><expr><name>idx</name>--</expr></argument>)</argument_list></call></expr>;</return>
                }</block></function>

                <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt><expr><call><name><name>columns</name>.<name>remove</name></name><argument_list>(<argument><expr><name>idx</name>--</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>ForwardSortedCollection</name> <super><extends>extends <name><name>AbstractCollection</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></extends></super>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>columns</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>ColumnNamesSet</name> <super><extends>extends <name><name>AbstractSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></extends> <implements>implements <name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name><name>columns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>IColumn</name></argument>&gt;</argument_list></name></type> <name>outerIterator</name> <init>= <expr><call><name><name>ArrayBackedSortedColumns</name>.<name>this</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// handles reversed</comment>
            <return>return <expr>new <class><super><name><name>Iterator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr><call><name><name>outerIterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</return>
                }</block></function>

                <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>next</name><parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr><call><name><name>outerIterator</name>.<name>next</name></name><argument_list>()</argument_list></call>.<call><name>name</name><argument_list>()</argument_list></call></expr>;</return>
                }</block></function>

                <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt><expr><call><name><name>outerIterator</name>.<name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>comparator</name><parameter_list>()</parameter_list>
        <block>{
            <return>return <expr><call><name>getComparator</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>first</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ArrayBackedSortedColumns</name></type> <name>outerList</name> <init>= <expr><name><name>ArrayBackedSortedColumns</name>.<name>this</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>outerList</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>
            <return>return <expr><call><name><name>outerList</name>.<name>columns</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>outerList</name>.<name>reversed</name></name> ? <call><name>size</name><argument_list>()</argument_list></call> - 1 : 0</expr></argument>)</argument_list></call>.<call><name>name</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>last</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ArrayBackedSortedColumns</name></type> <name>outerList</name> <init>= <expr><name><name>ArrayBackedSortedColumns</name>.<name>this</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>outerList</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>
            <return>return <expr><call><name><name>outerList</name>.<name>columns</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>outerList</name>.<name>reversed</name></name> ? 0 : <call><name>size</name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call>.<call><name>name</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="block">/*
         * It is fairly hard to implement headSet, tailSet and subSet so that they respect their specification.
         * Namely, the part "The returned set is backed by this set, so changes in the returned set are reflected
         * in this set, and vice-versa". Simply keeping a lower and upper index in the backing arrayList wouldn't
         * ensure those property. Since we do not use those function so far, we prefer returning UnsupportedOperationException
         * for now and revisit this when and if the need arise.
         */</comment>
        <function><type><specifier>public</specifier> <name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>headSet</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>fromElement</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line">// see headSet</comment>
        <function><type><specifier>public</specifier> <name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>tailSet</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>toElement</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line">// see headSet</comment>
        <function><type><specifier>public</specifier> <name><name>SortedSet</name><argument_list>&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>subSet</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>fromElement</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>toElement</name></decl></param>)</parameter_list>
        <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
