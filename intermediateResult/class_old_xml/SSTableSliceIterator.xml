<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\mrahimi1\Desktop\FSE-2015-LinkEvolution\srcML-Win\srcML-Win\cassandra-cassandra-1.1.12\src\java\org\apache\cassandra\db\columniterator\SSTableSliceIterator.java"><package>package <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>columniterator</name></name>;</package>
<comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>


<import>import <name><name>java</name>.<name>io</name>.<name>IOError</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>config</name>.<name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>ColumnFamily</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>db</name>.<name>IColumn</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>sstable</name>.<name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>io</name>.<name>util</name>.<name>FileDataInput</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>cassandra</name>.<name>utils</name>.<name>ByteBufferUtil</name></name>;</import>

<comment type="block" format="javadoc">/**
 *  A Column Iterator over SSTable
 */</comment>
<class><specifier>public</specifier> class <name>SSTableSliceIterator</name> <super><implements>implements <name>ISSTableColumnIterator</name></implements></super>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>FileDataInput</name></type> <name>fileToClose</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>IColumnIterator</name></type> <name>reader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SSTableReader</name></type> <name>sstable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DecoratedKey</name></type> <name>key</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SSTableSliceIterator</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>startColumn</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>finishColumn</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>sstable</name></name> = <name>sstable</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>fileToClose</name> = <call><name><name>sstable</name>.<name>getFileDataInput</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>fileToClose</name> == null</expr>)</condition><then>
            <return>return;</return></then></if>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>keyInDisk</name> <init>= <expr><call><name><name>SSTableReader</name>.<name>decodeKey</name></name><argument_list>(<argument><expr><name><name>sstable</name>.<name>partitioner</name></name></expr></argument>,
                                                             <argument><expr><name><name>sstable</name>.<name>descriptor</name></name></expr></argument>,
                                                             <argument><expr><call><name><name>ByteBufferUtil</name>.<name>readWithShortLength</name></name><argument_list>(<argument><expr><name>fileToClose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><call><name><name>keyInDisk</name>.<name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call>
                   : <call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"%s != %s in %s"</expr></argument>, <argument><expr><name>keyInDisk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>fileToClose</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</assert>
            <expr_stmt><expr><call><name><name>SSTableReader</name>.<name>readRowSize</name></name><argument_list>(<argument><expr><name>fileToClose</name></expr></argument>, <argument><expr><name><name>sstable</name>.<name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list>
        <block>{
            <expr_stmt><expr><call><name><name>sstable</name>.<name>markSuspect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <expr_stmt><expr><name>reader</name> = <call><name>createReader</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>fileToClose</name></expr></argument>, <argument><expr><name>startColumn</name></expr></argument>, <argument><expr><name>finishColumn</name></expr></argument>, <argument><expr><name>reversed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * An iterator for a slice within an SSTable
     * @param sstable Table for the CFS we are reading from
     * @param file Optional parameter that input is read from.  If null is passed, this class creates an appropriate one automatically.
     * If this class creates, it will close the underlying file when #close() is called.
     * If a caller passes a non-null argument, this class will NOT close the underlying file when the iterator is closed (i.e. the caller is responsible for closing the file)
     * In all cases the caller should explicitly #close() this iterator.
     * @param key The key the requested slice resides under
     * @param startColumn The start of the slice
     * @param finishColumn The end of the slice
     * @param reversed Results are returned in reverse order iff reversed is true.
     */</comment>
    <constructor><specifier>public</specifier> <name>SSTableSliceIterator</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>FileDataInput</name></type> <name>file</name></decl></param>, <param><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>startColumn</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>finishColumn</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name>.<name>sstable</name></name> = <name>sstable</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>fileToClose</name> = null</expr>;</expr_stmt>
        <expr_stmt><expr><name>reader</name> = <call><name>createReader</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>startColumn</name></expr></argument>, <argument><expr><name>finishColumn</name></expr></argument>, <argument><expr><name>reversed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>IColumnIterator</name></type> <name>createReader</name><parameter_list>(<param><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></param>, <param><decl><type><name>FileDataInput</name></type> <name>file</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>startColumn</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>finishColumn</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>reversed</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr><call><name><name>startColumn</name>.<name>remaining</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; !<name>reversed</name>
                 ? new <call><name>SimpleSliceReader</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>finishColumn</name></expr></argument>)</argument_list></call>
                 : new <call><name>IndexedSliceReader</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>startColumn</name></expr></argument>, <argument><expr><name>finishColumn</name></expr></argument>, <argument><expr><name>reversed</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>SSTableReader</name></type> <name>getSStable</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>sstable</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>getKey</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>key</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ColumnFamily</name></type> <name>getColumnFamily</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>reader</name> == null ? null : <call><name><name>reader</name>.<name>getColumnFamily</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><name>reader</name> != null &amp;&amp; <call><name><name>reader</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>IColumn</name></type> <name>next</name><parameter_list>()</parameter_list>
    <block>{
        <return>return <expr><call><name><name>reader</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list>
    <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <if>if <condition>(<expr><name>fileToClose</name> != null</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>fileToClose</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

}</block></class>
</unit>
